!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/6418097/
$(OUTPUT_DIR)/$(TARGET)	gpuwattch/cacti/cacti.mk	/^$(OUTPUT_DIR)\/$(TARGET) : $(OBJS)$/;"	t
$(OUTPUT_DIR)/$(TARGET)	gpuwattch/mcpat.mk	/^$(OUTPUT_DIR)\/$(TARGET) : $(OBJS)$/;"	t
$(OUTPUT_DIR)/%.$(OEXT)	Makefile	/^$(OUTPUT_DIR)\/%.$(OEXT): %.cc$/;"	t
$(OUTPUT_DIR)/%.$(OEXT)	gpgpu-sim/Makefile	/^$(OUTPUT_DIR)\/%.$(OEXT): %.cc$/;"	t
$(OUTPUT_DIR)/%.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/%.o: %.c$/;"	t
$(OUTPUT_DIR)/%.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/%.o: %.cc$/;"	t
$(OUTPUT_DIR)/%.o	gpuwattch/cacti/cacti.mk	/^$(OUTPUT_DIR)\/%.o : %.cc$/;"	t
$(OUTPUT_DIR)/%.o	gpuwattch/mcpat.mk	/^$(OUTPUT_DIR)\/%.o : %.cc$/;"	t
$(OUTPUT_DIR)/../cuda-sim/ptx.tab.h	gpgpu-sim/Makefile	/^$(OUTPUT_DIR)\/..\/cuda-sim\/ptx.tab.h:$/;"	t
$(OUTPUT_DIR)/Makefile.makedepend	Makefile	/^$(OUTPUT_DIR)\/Makefile.makedepend: depend$/;"	t
$(OUTPUT_DIR)/Makefile.makedepend	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/Makefile.makedepend: depend$/;"	t
$(OUTPUT_DIR)/Makefile.makedepend	gpgpu-sim/Makefile	/^$(OUTPUT_DIR)\/Makefile.makedepend: depend$/;"	t
$(OUTPUT_DIR)/Makefile.makedepend	gpuwattch/cacti/cacti.mk	/^$(OUTPUT_DIR)\/Makefile.makedepend: depend$/;"	t
$(OUTPUT_DIR)/Makefile.makedepend	gpuwattch/mcpat.mk	/^$(OUTPUT_DIR)\/Makefile.makedepend: depend$/;"	t
$(OUTPUT_DIR)/cuda-sim.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/cuda-sim.o: $(OUTPUT_DIR)\/ptx.tab.c$/;"	t
$(OUTPUT_DIR)/cuda_device_printf.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/cuda_device_printf.o: $(OUTPUT_DIR)\/ptx.tab.c$/;"	t
$(OUTPUT_DIR)/dram_sched.$(OEXT)	gpgpu-sim/Makefile	/^$(OUTPUT_DIR)\/dram_sched.$(OEXT): $(OUTPUT_DIR)\/..\/cuda-sim\/ptx.tab.h$/;"	t
$(OUTPUT_DIR)/instructions.h	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/instructions.h: instructions.cc$/;"	t
$(OUTPUT_DIR)/instructions.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/instructions.o: $(OUTPUT_DIR)\/instructions.h $(OUTPUT_DIR)\/ptx.tab.c$/;"	t
$(OUTPUT_DIR)/lex.ptx_.c	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/lex.ptx_.c: ptx.l$/;"	t
$(OUTPUT_DIR)/lex.ptx_.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/lex.ptx_.o: $(OUTPUT_DIR)\/lex.ptx_.c $/;"	t
$(OUTPUT_DIR)/lex.ptx_.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/lex.ptx_.o: $(OUTPUT_DIR)\/ptx.tab.c$/;"	t
$(OUTPUT_DIR)/lex.ptxinfo_.c	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/lex.ptxinfo_.c: ptxinfo.l$/;"	t
$(OUTPUT_DIR)/lex.ptxinfo_.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/lex.ptxinfo_.o: $(OUTPUT_DIR)\/lex.ptxinfo_.c $(OUTPUT_DIR)\/ptxinfo.tab.c$/;"	t
$(OUTPUT_DIR)/lex.ptxinfo_.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/lex.ptxinfo_.o: $(OUTPUT_DIR)\/ptx.tab.c$/;"	t
$(OUTPUT_DIR)/libgpgpusim.a	Makefile	/^$(OUTPUT_DIR)\/libgpgpusim.a:	$(OBJS) gpu_uarch_simlib$/;"	t
$(OUTPUT_DIR)/option_parser.$(OEXT)	gpgpu-sim/Makefile	/^$(OUTPUT_DIR)\/option_parser.$(OEXT): option_parser.h$/;"	t
$(OUTPUT_DIR)/ptx-stats.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/ptx-stats.o: $(OUTPUT_DIR)\/ptx.tab.c$/;"	t
$(OUTPUT_DIR)/ptx.tab.c	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/ptx.tab.c: ptx.y$/;"	t
$(OUTPUT_DIR)/ptx.tab.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/ptx.tab.o: $(OUTPUT_DIR)\/ptx.tab.c$/;"	t
$(OUTPUT_DIR)/ptx_ir.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/ptx_ir.o: $(OUTPUT_DIR)\/ptx.tab.c $(OUTPUT_DIR)\/ptx_parser_decode.def$/;"	t
$(OUTPUT_DIR)/ptx_loader.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/ptx_loader.o: $(OUTPUT_DIR)\/ptx.tab.c $(OUTPUT_DIR)\/ptx_parser_decode.def$/;"	t
$(OUTPUT_DIR)/ptx_parser.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/ptx_parser.o: $(OUTPUT_DIR)\/ptx.tab.c $(OUTPUT_DIR)\/ptx_parser_decode.def$/;"	t
$(OUTPUT_DIR)/ptx_parser_decode.def	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/ptx_parser_decode.def: $(OUTPUT_DIR)\/ptx.tab.c$/;"	t
$(OUTPUT_DIR)/ptx_sim.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/ptx_sim.o: $(OUTPUT_DIR)\/ptx.tab.c$/;"	t
$(OUTPUT_DIR)/ptxinfo.tab.c	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/ptxinfo.tab.c: ptxinfo.y$/;"	t
$(OUTPUT_DIR)/ptxinfo.tab.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/ptxinfo.tab.o: $(OUTPUT_DIR)\/ptx.tab.c$/;"	t
$(OUTPUT_DIR)/ptxinfo.tab.o	cuda-sim/Makefile	/^$(OUTPUT_DIR)\/ptxinfo.tab.o: $(OUTPUT_DIR)\/ptxinfo.tab.c$/;"	t
$(PROG)	intersim2/Makefile	/^$(PROG): $(OBJS)$/;"	t
${LEX_OBJS}	intersim2/Makefile	/^${LEX_OBJS}: lex.yy.c y.tab.h$/;"	t
${OBJDIR}/%.o	intersim2/Makefile	/^${OBJDIR}\/%.o: %.cpp $/;"	t
${OBJDIR}/%.o	intersim2/Makefile	/^${OBJDIR}\/%.o: allocators\/%.cpp $/;"	t
${OBJDIR}/%.o	intersim2/Makefile	/^${OBJDIR}\/%.o: arbiters\/%.cpp $/;"	t
${OBJDIR}/%.o	intersim2/Makefile	/^${OBJDIR}\/%.o: networks\/%.cpp $/;"	t
${OBJDIR}/%.o	intersim2/Makefile	/^${OBJDIR}\/%.o: power\/%.cpp$/;"	t
${OBJDIR}/%.o	intersim2/Makefile	/^${OBJDIR}\/%.o: routers\/%.cpp $/;"	t
${YACC_OBJS}	intersim2/Makefile	/^${YACC_OBJS}: y.tab.c y.tab.h$/;"	t
ABSTRACT_HARDWARE_MODEL_INCLUDED	abstract_hardware_model.h	/^#define ABSTRACT_HARDWARE_MODEL_INCLUDED$/;"	d
ADDRDEC_H	gpgpu-sim/addrdec.h	/^#define ADDRDEC_H$/;"	d
ADDRESS_BITS	gpuwattch/cacti/const.h	/^const int ADDRESS_BITS = 42;$/;"	v	typeref:typename:const int
ADDR_CHIP_S	gpgpu-sim/addrdec.h	/^   int ADDR_CHIP_S;$/;"	m	class:linear_to_raw_address_translation	typeref:typename:int
ADJ	gpuwattch/cacti/crossbar.cc	/^#define ADJ /;"	d	file:
AF	gpuwattch/arch_const.h	/^const double 		AF 				= 	0.5;$/;"	v	typeref:typename:const double
AF	gpuwattch/cacti/highradix.h	/^    double AF;\/\/ activity factor$/;"	m	class:HighRadix	typeref:typename:double
ALLOCATORS	intersim2/Makefile	/^ALLOCATORS:= $(wildcard allocators\/*.cpp)$/;"	m
ALLXMLClearTag	gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR lpszOpen; int openTagLen; XMLCSTR lpszClose;} ALLXMLClearTag;$/;"	t	typeref:struct:__anon33c5d5fd0108	file:
ALU	gpuwattch/basic_components.h	/^    ALU,$/;"	e	enum:FU_type
ALU_OP	abstract_hardware_model.h	/^   ALU_OP=1,$/;"	e	enum:uarch_op_t
ALU_SFU_OP	abstract_hardware_model.h	/^   ALU_SFU_OP,$/;"	e	enum:uarch_op_t
ALU_cdb_duty_cycle	gpuwattch/XML_Parse.h	/^	double ALU_cdb_duty_cycle ;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
ALU_cdb_duty_cycle	gpuwattch/basic_components.h	/^	       FPU_duty_cycle, ALU_cdb_duty_cycle,MUL_cdb_duty_cycle,$/;"	m	class:CoreDynParam	typeref:typename:double
ALU_duty_cycle	gpuwattch/XML_Parse.h	/^	double ALU_duty_cycle ;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
ALU_duty_cycle	gpuwattch/basic_components.h	/^	       MemManU_D_duty_cycle, ALU_duty_cycle,MUL_duty_cycle,$/;"	m	class:CoreDynParam	typeref:typename:double
ALU_per_core	gpuwattch/XML_Parse.h	/^	int ALU_per_core;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
AND_RED	abstract_hardware_model.h	/^   AND_RED,$/;"	e	enum:uarch_red_t
ANY_TYPE	intersim2/flit.hpp	/^                  ANY_TYPE      = 4 };$/;"	e	enum:Flit::FlitType
ARBITERS	intersim2/Makefile	/^ARBITERS:= $(wildcard arbiters\/*.cpp)$/;"	m
ARCH_CONST_H_	gpuwattch/arch_const.h	/^#define ARCH_CONST_H_$/;"	d
ARRAY_H_	gpuwattch/array.h	/^#define ARRAY_H_$/;"	d
ARRAY_IDENTIFIER	cuda-sim/ptx_parser.h	/^#define ARRAY_IDENTIFIER /;"	d
ARRAY_IDENTIFIER_NO_DIM	cuda-sim/ptx_parser.h	/^#define ARRAY_IDENTIFIER_NO_DIM /;"	d
ARRIVE	abstract_hardware_model.h	/^   ARRIVE,$/;"	e	enum:uarch_bar_t
ASPECT_THRESHOLD	gpuwattch/cacti/crossbar.cc	/^#define ASPECT_THRESHOLD /;"	d	file:
ASSOC	gpgpu-sim/gpu-cache.h	/^    ASSOC \/\/ normal cache $/;"	e	enum:mshr_config_t
Add	intersim2/outputset.cpp	/^void OutputSet::Add( int output_port, int vc, int pri  )$/;"	f	class:OutputSet	typeref:typename:void
AddFlit	intersim2/buffer.cpp	/^void Buffer::AddFlit( int vc, Flit *f )$/;"	f	class:Buffer	typeref:typename:void
AddFlit	intersim2/vc.cpp	/^void VC::AddFlit( Flit *f )$/;"	f	class:VC	typeref:typename:void
AddInputChannel	intersim2/routers/router.cpp	/^void Router::AddInputChannel( FlitChannel *channel, CreditChannel *backchannel )$/;"	f	class:Router	typeref:typename:void
AddOutputChannel	intersim2/routers/iq_router.cpp	/^void IQRouter::AddOutputChannel(FlitChannel * channel, CreditChannel * backchannel)$/;"	f	class:IQRouter	typeref:typename:void
AddOutputChannel	intersim2/routers/router.cpp	/^void Router::AddOutputChannel( FlitChannel *channel, CreditChannel *backchannel )$/;"	f	class:Router	typeref:typename:void
AddRange	intersim2/outputset.cpp	/^void OutputSet::AddRange( int output_port, int vc_start, int vc_end, int pri )$/;"	f	class:OutputSet	typeref:typename:void
AddRequest	intersim2/allocators/allocator.cpp	/^void Allocator::AddRequest( int in, int out, int label, int in_pri,$/;"	f	class:Allocator	typeref:typename:void
AddRequest	intersim2/allocators/allocator.cpp	/^void DenseAllocator::AddRequest( int in, int out, int label, $/;"	f	class:DenseAllocator	typeref:typename:void
AddRequest	intersim2/allocators/allocator.cpp	/^void SparseAllocator::AddRequest( int in, int out, int label, $/;"	f	class:SparseAllocator	typeref:typename:void
AddRequest	intersim2/allocators/wavefront.cpp	/^void Wavefront::AddRequest( int in, int out, int label, $/;"	f	class:Wavefront	typeref:typename:void
AddRequest	intersim2/arbiters/arbiter.cpp	/^void Arbiter::AddRequest( int input, int id, int pri )$/;"	f	class:Arbiter	typeref:typename:void
AddRequest	intersim2/arbiters/matrix_arb.cpp	/^void MatrixArbiter::AddRequest( int input, int id, int pri )$/;"	f	class:MatrixArbiter	typeref:typename:void
AddRequest	intersim2/arbiters/prio_arb.cpp	/^void PriorityArbiter::AddRequest( int in, int label, int pri )$/;"	f	class:PriorityArbiter	typeref:typename:void
AddRequest	intersim2/arbiters/roundrobin_arb.cpp	/^void RoundRobinArbiter::AddRequest( int input, int id, int pri )$/;"	f	class:RoundRobinArbiter	typeref:typename:void
AddRequest	intersim2/arbiters/tree_arb.cpp	/^void TreeArbiter::AddRequest( int input, int id, int pri )$/;"	f	class:TreeArbiter	typeref:typename:void
AddSample	intersim2/stats.cpp	/^void Stats::AddSample( double val )$/;"	f	class:Stats	typeref:typename:void
AddSample	intersim2/stats.hpp	/^  inline void AddSample( int val ) {$/;"	f	class:Stats	typeref:typename:void
AddStrField	intersim2/config_utils.cpp	/^void Configuration::AddStrField(string const & field, string const & value)$/;"	f	class:Configuration	typeref:typename:void
Add_htree	gpuwattch/cacti/basic_circuit.h	/^    Add_htree,$/;"	e	enum:Htree_type
Advance	intersim2/interconnect_interface.cpp	/^void InterconnectInterface::Advance()$/;"	f	class:InterconnectInterface	typeref:typename:void
Advance	intersim2/pipefifo.hpp	/^template<class T> void PipelineFIFO<T>::Advance( )$/;"	f	class:PipelineFIFO	typeref:typename:void
Allocate	intersim2/allocators/islip.cpp	/^void iSLIP_Sparse::Allocate( )$/;"	f	class:iSLIP_Sparse	typeref:typename:void
Allocate	intersim2/allocators/loa.cpp	/^void LOA::Allocate( )$/;"	f	class:LOA	typeref:typename:void
Allocate	intersim2/allocators/maxsize.cpp	/^void MaxSizeMatch::Allocate( )$/;"	f	class:MaxSizeMatch	typeref:typename:void
Allocate	intersim2/allocators/pim.cpp	/^void PIM::Allocate( )$/;"	f	class:PIM	typeref:typename:void
Allocate	intersim2/allocators/selalloc.cpp	/^void SelAlloc::Allocate( )$/;"	f	class:SelAlloc	typeref:typename:void
Allocate	intersim2/allocators/separable_input_first.cpp	/^void SeparableInputFirstAllocator::Allocate() {$/;"	f	class:SeparableInputFirstAllocator	typeref:typename:void
Allocate	intersim2/allocators/separable_output_first.cpp	/^void SeparableOutputFirstAllocator::Allocate() {$/;"	f	class:SeparableOutputFirstAllocator	typeref:typename:void
Allocate	intersim2/allocators/wavefront.cpp	/^void Wavefront::Allocate( )$/;"	f	class:Wavefront	typeref:typename:void
Allocator	intersim2/allocators/allocator.cpp	/^Allocator::Allocator( Module *parent, const string& name,$/;"	f	class:Allocator
Allocator	intersim2/allocators/allocator.hpp	/^class Allocator : public Module {$/;"	c
AnyNet	intersim2/networks/anynet.cpp	/^AnyNet::AnyNet( const Configuration &config, const string & name )$/;"	f	class:AnyNet
AnyNet	intersim2/networks/anynet.hpp	/^class AnyNet : public Network {$/;"	c
Arbiter	intersim2/arbiters/arbiter.cpp	/^Arbiter::Arbiter( Module *parent, const string &name, int size )$/;"	f	class:Arbiter
Arbiter	intersim2/arbiters/arbiter.hpp	/^class Arbiter : public Module {$/;"	c
Arbitrate	intersim2/arbiters/arbiter.cpp	/^int Arbiter::Arbitrate( int* id, int* pri )$/;"	f	class:Arbiter	typeref:typename:int
Arbitrate	intersim2/arbiters/matrix_arb.cpp	/^int MatrixArbiter::Arbitrate( int* id, int* pri ) {$/;"	f	class:MatrixArbiter	typeref:typename:int
Arbitrate	intersim2/arbiters/prio_arb.cpp	/^void PriorityArbiter::Arbitrate( )$/;"	f	class:PriorityArbiter	typeref:typename:void
Arbitrate	intersim2/arbiters/roundrobin_arb.cpp	/^int RoundRobinArbiter::Arbitrate( int* id, int* pri ) {$/;"	f	class:RoundRobinArbiter	typeref:typename:int
Arbitrate	intersim2/arbiters/tree_arb.cpp	/^int TreeArbiter::Arbitrate( int* id, int* pri ) {$/;"	f	class:TreeArbiter	typeref:typename:int
Area	gpuwattch/cacti/area.h	/^  Area():w(0), h(0), area(0) { }$/;"	f	class:Area
Area	gpuwattch/cacti/area.h	/^class Area$/;"	c
ArrayST	gpuwattch/array.cc	/^ArrayST::ArrayST(const InputParameter *configure_interface,$/;"	f	class:ArrayST
ArrayST	gpuwattch/array.h	/^  ArrayST(){};$/;"	f	class:ArrayST
ArrayST	gpuwattch/array.h	/^class ArrayST :public Component{$/;"	c
Assign	intersim2/config_utils.cpp	/^void Configuration::Assign(string const & field, double value)$/;"	f	class:Configuration	typeref:typename:void
Assign	intersim2/config_utils.cpp	/^void Configuration::Assign(string const & field, int value)$/;"	f	class:Configuration	typeref:typename:void
Assign	intersim2/config_utils.cpp	/^void Configuration::Assign(string const & field, string const & value)$/;"	f	class:Configuration	typeref:typename:void
AsymmetricTrafficPattern	intersim2/traffic.cpp	/^AsymmetricTrafficPattern::AsymmetricTrafficPattern(int nodes)$/;"	f	class:AsymmetricTrafficPattern
AsymmetricTrafficPattern	intersim2/traffic.hpp	/^class AsymmetricTrafficPattern : public RandomTrafficPattern {$/;"	c
Attrib	gpuwattch/xmlParser.cc	/^typedef enum Attrib$/;"	g	file:
Attrib	gpuwattch/xmlParser.cc	/^} Attrib;$/;"	t	typeref:enum:Attrib	file:
AvailableFor	intersim2/buffer_state.cpp	/^int BufferState::FeedbackSharedBufferPolicy::AvailableFor(int vc) const$/;"	f	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:int
AvailableFor	intersim2/buffer_state.cpp	/^int BufferState::LimitedSharedBufferPolicy::AvailableFor(int vc) const$/;"	f	class:BufferState::LimitedSharedBufferPolicy	typeref:typename:int
AvailableFor	intersim2/buffer_state.cpp	/^int BufferState::PrivateBufferPolicy::AvailableFor(int vc) const$/;"	f	class:BufferState::PrivateBufferPolicy	typeref:typename:int
AvailableFor	intersim2/buffer_state.cpp	/^int BufferState::SharedBufferPolicy::AvailableFor(int vc) const$/;"	f	class:BufferState::SharedBufferPolicy	typeref:typename:int
AvailableFor	intersim2/buffer_state.hpp	/^  inline int AvailableFor( int vc = 0 ) const {$/;"	f	class:BufferState	typeref:typename:int
Average	intersim2/stats.cpp	/^double Stats::Average( ) const$/;"	f	class:Stats	typeref:typename:double
BANK_ACTIVE	gpgpu-sim/dram.h	/^#define BANK_ACTIVE /;"	d
BANK_IDLE	gpgpu-sim/dram.h	/^#define BANK_IDLE /;"	d
BARRIER_OP	abstract_hardware_model.h	/^   BARRIER_OP,$/;"	e	enum:uarch_op_t
BASE64DECODE_READ_NEXT_CHAR	gpuwattch/xmlParser.cc	/^#define BASE64DECODE_READ_NEXT_CHAR(/;"	d	file:
BASIC_COMPONENTS_H_	gpuwattch/basic_components.h	/^#define BASIC_COMPONENTS_H_$/;"	d
BEGIN	intersim2/lex.yy.c	/^#define BEGIN /;"	d	file:
BIGNUM	gpuwattch/cacti/const.h	/^#define BIGNUM /;"	d
BK	gpgpu-sim/addrdec.h	/^      BK    = 1,$/;"	e	enum:linear_to_raw_address_translation::__anoncdba8aca0103
BK_CONF	gpgpu-sim/stats.h	/^   BK_CONF,$/;"	e	enum:mem_stage_stall_type
BL	gpgpu-sim/gpu-sim.h	/^   unsigned BL;     \/\/Burst Length in bytes (4 in GDDR3, 8 in GDDR5)$/;"	m	struct:memory_config	typeref:typename:unsigned
BODY_ID	intersim2/networks/anynet.cpp	/^		  BODY_ID,$/;"	e	enum:AnyNet::readFile::ParseState	file:
BODY_TYPE	intersim2/networks/anynet.cpp	/^		  BODY_TYPE, $/;"	e	enum:AnyNet::readFile::ParseState	file:
BPT	gpuwattch/core.h	/^	BranchPredictor * BPT;$/;"	m	class:InstFetchU	typeref:typename:BranchPredictor *
BRANCH_OP	abstract_hardware_model.h	/^   BRANCH_OP,$/;"	e	enum:uarch_op_t
BR_duty_cycle	gpuwattch/XML_Parse.h	/^	double BR_duty_cycle ;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
BR_duty_cycle	gpuwattch/basic_components.h	/^	double IFU_duty_cycle,BR_duty_cycle,LSU_duty_cycle,MemManU_I_duty_cycle,$/;"	m	class:CoreDynParam	typeref:typename:double
BTB	gpuwattch/XML_Parse.h	/^	BTB_systemcore BTB;$/;"	m	struct:__anon6448b92c0708	typeref:typename:BTB_systemcore
BTB	gpuwattch/core.h	/^	ArrayST * BTB;$/;"	m	class:InstFetchU	typeref:typename:ArrayST *
BTBEntries	gpuwattch/arch_const.h	/^const int BTBEntries=4096;$/;"	v	typeref:typename:const int
BTBTagSize	gpuwattch/arch_const.h	/^const int BTBTagSize=16;$/;"	v	typeref:typename:const int
BTB_config	gpuwattch/XML_Parse.h	/^	int BTB_config[20];$/;"	m	struct:__anon6448b92c0608	typeref:typename:int[20]
BTB_systemcore	gpuwattch/XML_Parse.h	/^} BTB_systemcore;$/;"	t	typeref:struct:__anon6448b92c0608
BUFFER_SEPARATION_LENGTH_MULTIPLIER	gpuwattch/cacti/const.h	/^#define BUFFER_SEPARATION_LENGTH_MULTIPLIER /;"	d
BULK_CU_RESISTIVITY	gpuwattch/cacti/const.h	/^const double BULK_CU_RESISTIVITY = 0.018; \/\/ohm-micron$/;"	v	typeref:typename:const double
BURST	gpgpu-sim/addrdec.h	/^      BURST = 4,$/;"	e	enum:linear_to_raw_address_translation::__anoncdba8aca0103
BadPermDFlyTrafficPattern	intersim2/traffic.cpp	/^BadPermDFlyTrafficPattern::BadPermDFlyTrafficPattern(int nodes, int k, int n)$/;"	f	class:BadPermDFlyTrafficPattern
BadPermDFlyTrafficPattern	intersim2/traffic.hpp	/^class BadPermDFlyTrafficPattern : public DigitPermutationTrafficPattern {$/;"	c
BadPermYarcTrafficPattern	intersim2/traffic.cpp	/^BadPermYarcTrafficPattern::BadPermYarcTrafficPattern(int nodes, int k, int n, $/;"	f	class:BadPermYarcTrafficPattern
BadPermYarcTrafficPattern	intersim2/traffic.hpp	/^class BadPermYarcTrafficPattern : public DigitPermutationTrafficPattern {$/;"	c
Bank	gpuwattch/cacti/bank.cc	/^Bank::Bank(const DynamicParameter & dyn_p):$/;"	f	class:Bank
Bank	gpuwattch/cacti/bank.h	/^class Bank : public Component$/;"	c
BatchTrafficManager	intersim2/batchtrafficmanager.cpp	/^BatchTrafficManager::BatchTrafficManager( const Configuration &config, $/;"	f	class:BatchTrafficManager
BatchTrafficManager	intersim2/batchtrafficmanager.hpp	/^class BatchTrafficManager : public TrafficManager {$/;"	c
BernoulliInjectionProcess	intersim2/injection.cpp	/^BernoulliInjectionProcess::BernoulliInjectionProcess(int nodes, double rate)$/;"	f	class:BernoulliInjectionProcess
BernoulliInjectionProcess	intersim2/injection.hpp	/^class BernoulliInjectionProcess : public InjectionProcess {$/;"	c
BitCompTrafficPattern	intersim2/traffic.cpp	/^BitCompTrafficPattern::BitCompTrafficPattern(int nodes)$/;"	f	class:BitCompTrafficPattern
BitCompTrafficPattern	intersim2/traffic.hpp	/^class BitCompTrafficPattern : public BitPermutationTrafficPattern {$/;"	c
BitPermutationTrafficPattern	intersim2/traffic.cpp	/^BitPermutationTrafficPattern::BitPermutationTrafficPattern(int nodes)$/;"	f	class:BitPermutationTrafficPattern
BitPermutationTrafficPattern	intersim2/traffic.hpp	/^class BitPermutationTrafficPattern : public PermutationTrafficPattern {$/;"	c
BitRevTrafficPattern	intersim2/traffic.cpp	/^BitRevTrafficPattern::BitRevTrafficPattern(int nodes)$/;"	f	class:BitRevTrafficPattern
BitRevTrafficPattern	intersim2/traffic.hpp	/^class BitRevTrafficPattern : public BitPermutationTrafficPattern {$/;"	c
Block_width_of_DRAM_chip	gpuwattch/XML_Parse.h	/^	int Block_width_of_DRAM_chip;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:int
BookSimConfig	intersim2/booksim_config.cpp	/^BookSimConfig::BookSimConfig( )$/;"	f	class:BookSimConfig
BookSimConfig	intersim2/booksim_config.hpp	/^class BookSimConfig : public Configuration {$/;"	c
BranchPredictor	gpuwattch/core.cc	/^BranchPredictor::BranchPredictor(ParseXML* XML_interface, int ithCore_, InputParameter* interfac/;"	f	class:BranchPredictor
BranchPredictor	gpuwattch/core.h	/^class BranchPredictor :public Component {$/;"	c
Buffer	intersim2/buffer.cpp	/^Buffer::Buffer( const Configuration& config, int outputs, $/;"	f	class:Buffer
Buffer	intersim2/buffer.hpp	/^class Buffer : public Module {$/;"	c
BufferMonitor	intersim2/power/buffer_monitor.cpp	/^BufferMonitor::BufferMonitor( int inputs, int classes ) $/;"	f	class:BufferMonitor
BufferMonitor	intersim2/power/buffer_monitor.hpp	/^class BufferMonitor {$/;"	c
BufferPolicy	intersim2/buffer_state.cpp	/^BufferState::BufferPolicy::BufferPolicy(Configuration const & config, BufferState * parent, cons/;"	f	class:BufferState::BufferPolicy
BufferPolicy	intersim2/buffer_state.hpp	/^  class BufferPolicy : public Module {$/;"	c	class:BufferState
BufferState	intersim2/buffer_state.cpp	/^BufferState::BufferState( const Configuration& config, Module *parent, const string& name ) : $/;"	f	class:BufferState
BufferState	intersim2/buffer_state.hpp	/^class BufferState : public Module {$/;"	c
Busy	intersim2/interconnect_interface.cpp	/^bool InterconnectInterface::Busy() const$/;"	f	class:InterconnectInterface	typeref:typename:bool
CACHE_ALL	abstract_hardware_model.h	/^    CACHE_ALL,          \/\/ .ca$/;"	e	enum:cache_operator_type
CACHE_GLOBAL	abstract_hardware_model.h	/^    CACHE_GLOBAL,       \/\/ .cg$/;"	e	enum:cache_operator_type
CACHE_LAST_USE	abstract_hardware_model.h	/^    CACHE_LAST_USE,     \/\/ .lu$/;"	e	enum:cache_operator_type
CACHE_STREAMING	abstract_hardware_model.h	/^    CACHE_STREAMING,    \/\/ .cs$/;"	e	enum:cache_operator_type
CACHE_UNDEFINED	abstract_hardware_model.h	/^    CACHE_UNDEFINED, $/;"	e	enum:cache_operator_type
CACHE_VOLATILE	abstract_hardware_model.h	/^    CACHE_VOLATILE,     \/\/ .cv$/;"	e	enum:cache_operator_type
CACHE_WRITE_BACK	abstract_hardware_model.h	/^    CACHE_WRITE_BACK,   \/\/ .wb$/;"	e	enum:cache_operator_type
CACHE_WRITE_THROUGH	abstract_hardware_model.h	/^    CACHE_WRITE_THROUGH \/\/ .wt$/;"	e	enum:cache_operator_type
CALL_OPS	abstract_hardware_model.h	/^   CALL_OPS,$/;"	e	enum:uarch_op_t
CAMbased	gpuwattch/basic_components.h	/^	CAMbased$/;"	e	enum:Renaming_type
CB_ADJ	gpuwattch/cacti/crossbar.h	/^	  double CB_ADJ;$/;"	m	class:Crossbar	typeref:typename:double
CC	cuda-sim/Makefile	/^	CC = icc$/;"	m
CC	gpuwattch/mcpat.mk	/^CC=$/;"	m
CCDLc	gpgpu-sim/dram.h	/^	unsigned int CCDLc;$/;"	m	struct:bankgrp_t	typeref:typename:unsigned int
CCDc	gpgpu-sim/dram.h	/^   unsigned int CCDc;$/;"	m	class:dram_t	typeref:typename:unsigned int
CCP	gpuwattch/gpgpu_sim_wrapper.cc	/^   CCP,$/;"	e	enum:pwr_cmp_t	file:
CC_H	gpuwattch/XML_Parse.h	/^   CC_H,$/;"	e	enum:perf_count_t
CC_M	gpuwattch/XML_Parse.h	/^   CC_M,$/;"	e	enum:perf_count_t
CCdir	gpuwattch/sharedcache.h	/^class CCdir :public Component{$/;"	c
CHIP	gpgpu-sim/addrdec.h	/^      CHIP  = 0,$/;"	e	enum:linear_to_raw_address_translation::__anoncdba8aca0103
CL	gpgpu-sim/gpu-sim.h	/^   unsigned CL;     \/\/CAS latency$/;"	m	struct:memory_config	typeref:typename:unsigned
CLOCK64_REG	cuda-sim/opcodes.h	/^   CLOCK64_REG,$/;"	e	enum:special_regs
CLOCKRATE	gpuwattch/arch_const.h	/^const double 		CLOCKRATE 		= 	1.2*1e9;$/;"	v	typeref:typename:const double
CLOCK_REG	cuda-sim/opcodes.h	/^   CLOCK_REG,$/;"	e	enum:special_regs
CMesh	intersim2/networks/cmesh.cpp	/^CMesh::CMesh( const Configuration& config, const string & name ) $/;"	f	class:CMesh
CMesh	intersim2/networks/cmesh.hpp	/^class CMesh : public Network {$/;"	c
COALESCE_SCALE	gpuwattch/memoryctrl.cc	/^ #define COALESCE_SCALE /;"	d	file:
COALESCE_SCALE	gpuwattch/processor.h	/^#define COALESCE_SCALE /;"	d
COAL_STALL	gpgpu-sim/stats.h	/^   COAL_STALL,$/;"	e	enum:mem_stage_stall_type
COL	gpgpu-sim/addrdec.h	/^      COL   = 3,$/;"	e	enum:linear_to_raw_address_translation::__anoncdba8aca0103
COLUMNS	gpuwattch/cacti/highradix.h	/^    double COLUMNS;$/;"	m	class:HighRadix	typeref:typename:double
COL_BUFF_ENT	gpuwattch/cacti/highradix.h	/^    double COL_BUFF_ENT;$/;"	m	class:HighRadix	typeref:typename:double
COL_BUFF_SZ	gpuwattch/cacti/highradix.h	/^    double COL_BUFF_SZ;$/;"	m	class:HighRadix	typeref:typename:double
CONCRETE_SCHEDULER_GTO	gpgpu-sim/shader.h	/^    CONCRETE_SCHEDULER_GTO,$/;"	e	enum:concrete_scheduler
CONCRETE_SCHEDULER_LRR	gpgpu-sim/shader.h	/^    CONCRETE_SCHEDULER_LRR = 0,$/;"	e	enum:concrete_scheduler
CONCRETE_SCHEDULER_MASCAR	gpgpu-sim/shader.h	/^    CONCRETE_SCHEDULER_MASCAR,$/;"	e	enum:concrete_scheduler
CONCRETE_SCHEDULER_TWO_LEVEL_ACTIVE	gpgpu-sim/shader.h	/^    CONCRETE_SCHEDULER_TWO_LEVEL_ACTIVE,$/;"	e	enum:concrete_scheduler
CONCRETE_SCHEDULER_WARP_LIMITING	gpgpu-sim/shader.h	/^    CONCRETE_SCHEDULER_WARP_LIMITING, $/;"	e	enum:concrete_scheduler
CONSTANT	gpgpu-sim/stat-tool.cc	/^   NORMAL, TEXTURE, CONSTANT, INSTRUCTION$/;"	e	enum:cache_access_logger_types	file:
CONST_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {CONST_ACC_R};$/;"	e	enum:power_stat_t::get_constant_c_accesses::access_type
CONST_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {CONST_ACC_R};$/;"	e	enum:power_stat_t::get_constant_c_misses::access_type
CONST_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_accesses::access_type
CONST_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_misses::access_type
CONST_DYNAMICN	gpuwattch/XML_Parse.h	/^   CONST_DYNAMICN,$/;"	e	enum:perf_count_t
CONST_DYNAMICP	gpuwattch/gpgpu_sim_wrapper.cc	/^   CONST_DYNAMICP,$/;"	e	enum:pwr_cmp_t	file:
CONST_MSHR_MERGE	gpgpu-sim/gpu-sim.h	/^#define CONST_MSHR_MERGE /;"	d
CONTR_2_BANK_LAT	gpuwattch/cacti/nuca.cc	/^#define CONTR_2_BANK_LAT /;"	d	file:
CORE	gpgpu-sim/gpu-sim.cc	/^#define  CORE /;"	d	file:
CORE_H_	gpuwattch/core.h	/^#define CORE_H_$/;"	d
CPP	Makefile	/^CPP = g++ $(SNOW)$/;"	m
CPP	cuda-sim/Makefile	/^CPP = g++ $(SNOW)$/;"	m
CPP	gpgpu-sim/Makefile	/^CPP = g++ $(SNOW)$/;"	m
CPP_SRCS	intersim2/Makefile	/^CPP_SRCS =  \\$/;"	m
CPX_NUMBER_INPUT_PORTS_CROSSBAR	gpuwattch/arch_const.h	/^const int CPX_NUMBER_INPUT_PORTS_CROSSBAR = 5;$/;"	v	typeref:typename:const int
CPX_NUMBER_OUTPUT_PORTS_CROSSBAR	gpuwattch/arch_const.h	/^const int CPX_NUMBER_OUTPUT_PORTS_CROSSBAR = 8;$/;"	v	typeref:typename:const int
CPX_NUMBER_SIGNALS_PER_PORT_CROSSBAR	gpuwattch/arch_const.h	/^const int CPX_NUMBER_SIGNALS_PER_PORT_CROSSBAR =150;$/;"	v	typeref:typename:const int
CREATELOG	gpgpu-sim/gpu-sim.h	/^#define CREATELOG /;"	d
CREATE_LIBRARY	intersim2/Makefile	/^CREATE_LIBRARY ?= 0$/;"	m
CSRCS	gpgpu-sim/Makefile	/^CSRCS = $(filter-out $(EXCLUDES), $(SRCS))$/;"	m
CTAID_REG	cuda-sim/opcodes.h	/^   CTAID_REG,$/;"	e	enum:special_regs
CUDASIM_H_INCLUDED	cuda-sim/cuda-sim.h	/^#define CUDASIM_H_INCLUDED$/;"	d
CUDA_DEVICE_PRINTF_INCLUDED	cuda-sim/cuda_device_printf.h	/^#define CUDA_DEVICE_PRINTF_INCLUDED$/;"	d
CUDA_FLOAT_MATH_FUNCTIONS	cuda-sim/cuda-math.h	/^#define CUDA_FLOAT_MATH_FUNCTIONS$/;"	d
CUDA_MATH	cuda-sim/cuda-math.h	/^#define CUDA_MATH$/;"	d
CURRENT_STAT_IDX	gpgpu-sim/power_stat.h	/^    CURRENT_STAT_IDX = 0,    \/\/ Current activity count$/;"	e	enum:_stat_idx
CUSTOM_SET_FUNCTION	gpgpu-sim/gpu-cache.h	/^    CUSTOM_SET_FUNCTION$/;"	e	enum:set_index_function
CU_RESISTIVITY	gpuwattch/cacti/const.h	/^const double CU_RESISTIVITY = 0.022; \/\/ohm-micron$/;"	v	typeref:typename:const double
CUevent_st	stream_manager.h	/^   CUevent_st( bool blocking )$/;"	f	class:CUevent_st
CUevent_st	stream_manager.h	/^class CUevent_st {$/;"	c
CUstream_st	stream_manager.cc	/^CUstream_st::CUstream_st() $/;"	f	class:CUstream_st
CUstream_st	stream_manager.h	/^struct CUstream_st {$/;"	s
CXX	gpuwattch/cacti/cacti.mk	/^	CXX = g++ -m32$/;"	m
CXX	gpuwattch/cacti/cacti.mk	/^	CXX = g++ -m64$/;"	m
CXX	gpuwattch/mcpat.mk	/^	CXX = g++ -m32$/;"	m
CXX	gpuwattch/mcpat.mk	/^	CXX = g++ -m64$/;"	m
CXX	gpuwattch/mcpat.mk	/^CXX=$/;"	m
CXX	gpuwattch/mcpatXeonCore.mk	/^CXX = g++ -m32$/;"	m
CXX	intersim2/Makefile	/^CXX = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -Wall -DDEBUG$/;"	m
CXXFLAGS	gpgpu-sim/Makefile	/^	CXXFLAGS = -Wall -DDEBUG$/;"	m
CXXFLAGS	gpgpu-sim/Makefile	/^	CXXFLAGS = -Wall$/;"	m
CXXFLAGS	gpuwattch/cacti/cacti.mk	/^CXXFLAGS = -Wno-unknown-pragmas $(DBG) $(OPT) $/;"	m
CXXFLAGS	gpuwattch/mcpat.mk	/^CXXFLAGS = -Wno-unknown-pragmas $(DBG) $(OPT) $/;"	m
CXXFLAGS	gpuwattch/mcpatXeonCore.mk	/^CXXFLAGS = -Wno-unknown-pragmas $(DBG) $(OPT) $/;"	m
CXX_OPT	cuda-sim/Makefile	/^CXX_OPT = $(OPT)$/;"	m
C_MEM	gpgpu-sim/stats.h	/^   C_MEM,$/;"	e	enum:mem_stage_access_type
C_bl	gpuwattch/cacti/mat.h	/^    double   C_bl;$/;"	m	class:Mat	typeref:typename:double
C_bl	gpuwattch/cacti/subarray.h	/^    double  C_bl, C_bl_cam;$/;"	m	class:Subarray	typeref:typename:double
C_bl_cam	gpuwattch/cacti/subarray.h	/^    double  C_bl, C_bl_cam;$/;"	m	class:Subarray	typeref:typename:double
C_fringe	gpuwattch/cacti/parameter.h	/^    double C_fringe;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
C_g_ideal	gpuwattch/cacti/parameter.h	/^    double C_g_ideal;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
C_junc	gpuwattch/cacti/parameter.h	/^    double C_junc;  \/\/ C_junc_area$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
C_junc_sidewall	gpuwattch/cacti/parameter.h	/^    double C_junc_sidewall;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
C_ld_dec_out	gpuwattch/cacti/decoder.h	/^    double C_ld_dec_out;$/;"	m	class:Decoder	typeref:typename:double
C_ld_predec_blk_out	gpuwattch/cacti/decoder.h	/^  double C_ld_predec_blk_out;$/;"	m	class:PredecBlk	typeref:typename:double
C_overlap	gpuwattch/cacti/parameter.h	/^    double C_overlap;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
C_ox	gpuwattch/cacti/parameter.h	/^    double C_ox;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
C_per_um	gpuwattch/cacti/parameter.h	/^    double C_per_um;$/;"	m	class:TechnologyParameter::InterconnectType	typeref:typename:double
C_wl	gpuwattch/cacti/subarray.h	/^    double  C_wl, C_wl_cam, C_wl_ram;$/;"	m	class:Subarray	typeref:typename:double
C_wl_cam	gpuwattch/cacti/subarray.h	/^    double  C_wl, C_wl_cam, C_wl_ram;$/;"	m	class:Subarray	typeref:typename:double
C_wl_ram	gpuwattch/cacti/subarray.h	/^    double  C_wl, C_wl_cam, C_wl_ram;$/;"	m	class:Subarray	typeref:typename:double
CacheDynParam	gpuwattch/basic_components.h	/^	CacheDynParam(){};$/;"	f	class:CacheDynParam
CacheDynParam	gpuwattch/basic_components.h	/^class CacheDynParam {$/;"	c
Cache_policy	gpuwattch/basic_components.h	/^enum Cache_policy {$/;"	g
Capacity	intersim2/networks/anynet.hpp	/^  double Capacity( ) const {return -1;}$/;"	f	class:AnyNet	typeref:typename:double
Capacity	intersim2/networks/dragonfly.cpp	/^double DragonFlyNew::Capacity( ) const$/;"	f	class:DragonFlyNew	typeref:typename:double
Capacity	intersim2/networks/flatfly_onchip.cpp	/^double FlatFlyOnChip::Capacity( ) const$/;"	f	class:FlatFlyOnChip	typeref:typename:double
Capacity	intersim2/networks/fly.cpp	/^double KNFly::Capacity( ) const$/;"	f	class:KNFly	typeref:typename:double
Capacity	intersim2/networks/kncube.cpp	/^double KNCube::Capacity( ) const$/;"	f	class:KNCube	typeref:typename:double
Capacity	intersim2/networks/network.cpp	/^double Network::Capacity( ) const$/;"	f	class:Network	typeref:typename:double
Cd	intersim2/power/power_module.hpp	/^  double Cd   ;           \/\/ [F\/um] (for Delay)$/;"	m	class:Power_Module	typeref:typename:double
Cd_pwr	intersim2/power/power_module.hpp	/^  double Cd_pwr;           \/\/ [F\/um] (for Power)$/;"	m	class:Power_Module	typeref:typename:double
Cg	intersim2/power/power_module.hpp	/^  double Cg  ;           \/\/ [F\/um] (for Delay)$/;"	m	class:Power_Module	typeref:typename:double
Cg_pwr	intersim2/power/power_module.hpp	/^  double Cg_pwr  ;           \/\/ [F\/um] (for Power)$/;"	m	class:Power_Module	typeref:typename:double
Cgdl	intersim2/power/power_module.hpp	/^  double Cgdl  ;           \/\/ [F\/um] (for Delay)$/;"	m	class:Power_Module	typeref:typename:double
Channel	intersim2/channel.hpp	/^Channel<T>::Channel(Module * parent, string const & name)$/;"	f	class:Channel
Channel	intersim2/channel.hpp	/^class Channel : public TimedModule {$/;"	c
ChannelPitch	intersim2/power/power_module.hpp	/^  double  ChannelPitch ;$/;"	m	class:Power_Module	typeref:typename:double
ChaosRouter	intersim2/routers/chaos_router.cpp	/^ChaosRouter::ChaosRouter( const Configuration& config,$/;"	f	class:ChaosRouter
ChaosRouter	intersim2/routers/chaos_router.hpp	/^class ChaosRouter : public Router {$/;"	c
Ci	intersim2/power/power_module.hpp	/^  double Ci ;$/;"	m	class:Power_Module	typeref:typename:double
Ci_delay	intersim2/power/power_module.hpp	/^  double Ci_delay;   $/;"	m	class:Power_Module	typeref:typename:double
Clear	intersim2/allocators/allocator.cpp	/^void Allocator::Clear( )$/;"	f	class:Allocator	typeref:typename:void
Clear	intersim2/allocators/allocator.cpp	/^void DenseAllocator::Clear( )$/;"	f	class:DenseAllocator	typeref:typename:void
Clear	intersim2/allocators/allocator.cpp	/^void SparseAllocator::Clear( )$/;"	f	class:SparseAllocator	typeref:typename:void
Clear	intersim2/allocators/separable.cpp	/^void SeparableAllocator::Clear() {$/;"	f	class:SeparableAllocator	typeref:typename:void
Clear	intersim2/arbiters/arbiter.cpp	/^void Arbiter::Clear()$/;"	f	class:Arbiter	typeref:typename:void
Clear	intersim2/arbiters/matrix_arb.cpp	/^void MatrixArbiter::Clear()$/;"	f	class:MatrixArbiter	typeref:typename:void
Clear	intersim2/arbiters/prio_arb.cpp	/^void PriorityArbiter::Clear( )$/;"	f	class:PriorityArbiter	typeref:typename:void
Clear	intersim2/arbiters/roundrobin_arb.cpp	/^void RoundRobinArbiter::Clear()$/;"	f	class:RoundRobinArbiter	typeref:typename:void
Clear	intersim2/arbiters/tree_arb.cpp	/^void TreeArbiter::Clear()$/;"	f	class:TreeArbiter	typeref:typename:void
Clear	intersim2/outputset.cpp	/^void OutputSet::Clear( )$/;"	f	class:OutputSet	typeref:typename:void
Clear	intersim2/stats.cpp	/^void Stats::Clear( )$/;"	f	class:Stats	typeref:typename:void
CmpOp	cuda-sim/instructions.cc	/^bool CmpOp( int type, ptx_reg_t a, ptx_reg_t b, unsigned cmpop )$/;"	f	typeref:typename:bool
Co	intersim2/power/power_module.hpp	/^  double Co ;$/;"	m	class:Power_Module	typeref:typename:double
Co_delay	intersim2/power/power_module.hpp	/^  double Co_delay ;              $/;"	m	class:Power_Module	typeref:typename:double
Component	gpuwattch/cacti/component.cc	/^Component::Component()$/;"	f	class:Component
Component	gpuwattch/cacti/component.h	/^class Component$/;"	c
Configuration	intersim2/config_utils.cpp	/^Configuration::Configuration()$/;"	f	class:Configuration
Configuration	intersim2/config_utils.hpp	/^class Configuration {$/;"	c
Core	gpuwattch/core.cc	/^Core::Core(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_)$/;"	f	class:Core
Core	gpuwattch/core.h	/^class Core :public Component {$/;"	c
CoreDynParam	gpuwattch/basic_components.h	/^	CoreDynParam(){};$/;"	f	class:CoreDynParam
CoreDynParam	gpuwattch/basic_components.h	/^class CoreDynParam {$/;"	c
Core_device	gpuwattch/basic_components.h	/^	Core_device,$/;"	e	enum:Device_ty
Core_type	gpuwattch/basic_components.h	/^enum Core_type {$/;"	g
CountLinesAndColumns	gpuwattch/xmlParser.cc	/^static void CountLinesAndColumns(XMLCSTR lpXML, int nUpto, XMLResults *pResults)$/;"	f	typeref:typename:void	file:
Cpolywire	gpuwattch/cacti/const.h	/^const double Cpolywire = 0;$/;"	v	typeref:typename:const double
CreateInterconnect	intersim2/interconnect_interface.cpp	/^void InterconnectInterface::CreateInterconnect(unsigned n_shader, unsigned n_mem)$/;"	f	class:InterconnectInterface	typeref:typename:void
CreateXMLStringR	gpuwattch/xmlParser.cc	/^int XMLNode::CreateXMLStringR(XMLNodeData *pEntry, XMLSTR lpszMarker, int nFormat)$/;"	f	class:XMLNode	typeref:typename:int
Credit	intersim2/credit.cpp	/^Credit::Credit()$/;"	f	class:Credit
Credit	intersim2/credit.hpp	/^class Credit {$/;"	c
CreditChannel	intersim2/networks/network.hpp	/^typedef Channel<Credit> CreditChannel;$/;"	t	typeref:typename:Channel<Credit>
CreditChannel	intersim2/routers/router.hpp	/^typedef Channel<Credit> CreditChannel;$/;"	t	typeref:typename:Channel<Credit>
Crossbar	gpuwattch/cacti/crossbar.cc	/^Crossbar::Crossbar($/;"	f	class:Crossbar
Crossbar	gpuwattch/cacti/crossbar.h	/^class Crossbar : public Component$/;"	c
CrossbarPitch	intersim2/power/power_module.hpp	/^  double   CrossbarPitch;$/;"	m	class:Power_Module	typeref:typename:double
Cw	intersim2/power/power_module.hpp	/^  double Cw ;$/;"	m	class:Power_Module	typeref:typename:double
Cw3	gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::Cw3(double length) {$/;"	f	class:MCPAT_Arbiter	typeref:typename:double
Cw3	gpuwattch/cacti/router.cc	/^MCPAT_Router::Cw3(double length) {$/;"	f	class:MCPAT_Router	typeref:typename:double
Cw_cpl	intersim2/power/power_module.hpp	/^  double Cw_cpl ; $/;"	m	class:Power_Module	typeref:typename:double
Cw_gnd	intersim2/power/power_module.hpp	/^  double Cw_gnd  ;$/;"	m	class:Power_Module	typeref:typename:double
DATA_PORT_STALL	gpgpu-sim/stats.h	/^   DATA_PORT_STALL,$/;"	e	enum:mem_stage_stall_type
DBG	gpuwattch/cacti/cacti.mk	/^  DBG = $/;"	m
DBG	gpuwattch/cacti/cacti.mk	/^  DBG = -Wall $/;"	m
DBG	gpuwattch/mcpat.mk	/^  DBG = $/;"	m
DBG	gpuwattch/mcpat.mk	/^  DBG = -Wall $/;"	m
DBG	gpuwattch/mcpatXeonCore.mk	/^  DBG = $/;"	m
DBG	gpuwattch/mcpatXeonCore.mk	/^  DBG = -Wall $/;"	m
DC	gpuwattch/basic_components.h	/^	DC,\/\/directory cache$/;"	e	enum:Dir_type
DCP	gpuwattch/gpgpu_sim_wrapper.cc	/^   DCP,$/;"	e	enum:pwr_cmp_t	file:
DC_RH	gpuwattch/XML_Parse.h	/^   DC_RH,$/;"	e	enum:perf_count_t
DC_RM	gpuwattch/XML_Parse.h	/^   DC_RM,$/;"	e	enum:perf_count_t
DC_WH	gpuwattch/XML_Parse.h	/^   DC_WH,$/;"	e	enum:perf_count_t
DC_WM	gpuwattch/XML_Parse.h	/^   DC_WM,$/;"	e	enum:perf_count_t
DEBUG	Makefile	/^DEBUG?=0$/;"	m
DEBUG	cuda-sim/Makefile	/^DEBUG?=0$/;"	m
DEBUG	gpgpu-sim/Makefile	/^DEBUG?=0$/;"	m
DEBUG	intersim2/Makefile	/^DEBUG ?= 0$/;"	m
DEBUGL1MISS	gpgpu-sim/gpu-misc.h	/^#define DEBUGL1MISS /;"	d
DEC2ZERO	gpgpu-sim/dram.cc	/^#define DEC2ZERO(/;"	d	file:
DEF	cuda-sim/ptx_parser.cc	/^#define DEF(/;"	d	file:
DEFINE	intersim2/Makefile	/^DEFINE = #-DTRACK_STALLS -DTRACK_BUFFERS -DTRACK_FLOWS -DTRACK_CREDITS$/;"	m
DELAYQUEUE_H	gpgpu-sim/delayqueue.h	/^#define DELAYQUEUE_H$/;"	d
DFFCell	gpuwattch/logic.cc	/^DFFCell::DFFCell($/;"	f	class:DFFCell
DFFCell	gpuwattch/logic.h	/^class DFFCell : public Component {$/;"	c
DIE_HT	gpuwattch/cacti/highradix.h	/^    double DIE_HT;\/\/u$/;"	m	class:HighRadix	typeref:typename:double
DIE_LEN	gpuwattch/cacti/highradix.h	/^    double DIE_LEN;\/\/u$/;"	m	class:HighRadix	typeref:typename:double
DPRINTF	trace.h	/^#define DPRINTF(/;"	d
DRAGON_LATENCY	intersim2/networks/dragonfly.cpp	/^#define DRAGON_LATENCY$/;"	d	file:
DRAM	gpgpu-sim/gpu-sim.cc	/^#define  DRAM /;"	d	file:
DRAM	gpuwattch/memoryctrl.cc	/^DRAM::DRAM(ParseXML *XML_interface,InputParameter* interface_ip_, enum Dram_type dram_type_)$/;"	f	class:DRAM
DRAM	gpuwattch/memoryctrl.h	/^class DRAM : public Component {$/;"	c
DRAMP	gpuwattch/gpgpu_sim_wrapper.cc	/^   DRAMP,$/;"	e	enum:pwr_cmp_t	file:
DRAMParam	gpuwattch/basic_components.h	/^	DRAMParam(){};$/;"	f	class:DRAMParam
DRAMParam	gpuwattch/basic_components.h	/^class DRAMParam {$/;"	c
DRAM_FIFO	gpgpu-sim/gpu-sim.h	/^   DRAM_FIFO=0,$/;"	e	enum:dram_ctrl_t
DRAM_FRFCFS	gpgpu-sim/gpu-sim.h	/^   DRAM_FRFCFS=1$/;"	e	enum:dram_ctrl_t
DRAM_H	gpgpu-sim/dram.h	/^#define DRAM_H$/;"	d
DTRACE	trace.h	/^#define DTRACE(/;"	d
DUMPLOG	gpgpu-sim/gpu-sim.h	/^#define DUMPLOG /;"	d
DYNAMIC_WARP_PRINT_RESOLUTION	gpgpu-sim/shader.cc	/^    #define DYNAMIC_WARP_PRINT_RESOLUTION /;"	d	file:
DataCache	gpuwattch/array.h	/^  DataCache(){wbb=0;};$/;"	f	class:DataCache
DataCache	gpuwattch/array.h	/^class DataCache :public InstCache{$/;"	c
Data_in_htree	gpuwattch/cacti/basic_circuit.h	/^    Data_in_htree,$/;"	e	enum:Htree_type
Data_out_htree	gpuwattch/cacti/basic_circuit.h	/^    Data_out_htree,$/;"	e	enum:Htree_type
Dcache_dual_pump	gpuwattch/XML_Parse.h	/^	char Dcache_dual_pump[20];$/;"	m	struct:__anon6448b92c0708	typeref:typename:char[20]
Debug	intersim2/module.cpp	/^void Module::Debug( const string& msg ) const$/;"	f	class:Module	typeref:typename:void
Decoder	gpuwattch/cacti/decoder.cc	/^Decoder::Decoder($/;"	f	class:Decoder
Decoder	gpuwattch/cacti/decoder.h	/^class Decoder : public Component$/;"	c
DenseAllocator	intersim2/allocators/allocator.cpp	/^DenseAllocator::DenseAllocator( Module *parent, const string& name,$/;"	f	class:DenseAllocator
DenseAllocator	intersim2/allocators/allocator.hpp	/^class DenseAllocator : public Allocator {$/;"	c
DeviceType	gpuwattch/cacti/parameter.h	/^    DeviceType(): C_g_ideal(0), C_fringe(0), C_overlap(0), C_junc(0),$/;"	f	class:TechnologyParameter::DeviceType
DeviceType	gpuwattch/cacti/parameter.h	/^  class DeviceType$/;"	c	class:TechnologyParameter
Device_ty	gpuwattch/basic_components.h	/^enum Device_ty {$/;"	g
DiagonalTrafficPattern	intersim2/traffic.cpp	/^DiagonalTrafficPattern::DiagonalTrafficPattern(int nodes)$/;"	f	class:DiagonalTrafficPattern
DiagonalTrafficPattern	intersim2/traffic.hpp	/^class DiagonalTrafficPattern : public RandomTrafficPattern {$/;"	c
DigitPermutationTrafficPattern	intersim2/traffic.cpp	/^DigitPermutationTrafficPattern::DigitPermutationTrafficPattern(int nodes, int k,$/;"	f	class:DigitPermutationTrafficPattern
DigitPermutationTrafficPattern	intersim2/traffic.hpp	/^class DigitPermutationTrafficPattern : public PermutationTrafficPattern {$/;"	c
Dir_config	gpuwattch/XML_Parse.h	/^	double Dir_config[20];$/;"	m	struct:__anon6448b92c0808	typeref:typename:double[20]
Dir_config	gpuwattch/XML_Parse.h	/^	double Dir_config[20];$/;"	m	struct:__anon6448b92c0908	typeref:typename:double[20]
Dir_type	gpuwattch/basic_components.h	/^enum Dir_type {$/;"	g
Directory_type	gpuwattch/XML_Parse.h	/^	int Directory_type;$/;"	m	struct:__anon6448b92c0808	typeref:typename:int
Directory_type	gpuwattch/XML_Parse.h	/^	int Directory_type;$/;"	m	struct:__anon6448b92c0908	typeref:typename:int
Display	intersim2/buffer.cpp	/^void Buffer::Display( ostream & os ) const$/;"	f	class:Buffer	typeref:typename:void
Display	intersim2/buffer_state.cpp	/^void BufferState::Display( ostream & os ) const$/;"	f	class:BufferState	typeref:typename:void
Display	intersim2/module.cpp	/^void Module::Display( ostream & os ) const $/;"	f	class:Module	typeref:typename:void
Display	intersim2/networks/network.cpp	/^void Network::Display( ostream & os ) const$/;"	f	class:Network	typeref:typename:void
Display	intersim2/routers/chaos_router.cpp	/^void ChaosRouter::Display( ostream & os ) const$/;"	f	class:ChaosRouter	typeref:typename:void
Display	intersim2/routers/event_router.cpp	/^void EventRouter::Display( ostream & os ) const$/;"	f	class:EventRouter	typeref:typename:void
Display	intersim2/routers/iq_router.cpp	/^void IQRouter::Display( ostream & os ) const$/;"	f	class:IQRouter	typeref:typename:void
Display	intersim2/stats.cpp	/^void Stats::Display( ostream & os ) const$/;"	f	class:Stats	typeref:typename:void
Display	intersim2/vc.cpp	/^void VC::Display( ostream & os ) const$/;"	f	class:VC	typeref:typename:void
DisplayHierarchy	intersim2/module.cpp	/^void Module::DisplayHierarchy( int level, ostream & os ) const$/;"	f	class:Module	typeref:typename:void
DisplayOverallStats	intersim2/batchtrafficmanager.cpp	/^void BatchTrafficManager::DisplayOverallStats(ostream & os) const {$/;"	f	class:BatchTrafficManager	typeref:typename:void
DisplayOverallStats	intersim2/interconnect_interface.cpp	/^void InterconnectInterface::DisplayOverallStats() const$/;"	f	class:InterconnectInterface	typeref:typename:void
DisplayOverallStats	intersim2/trafficmanager.cpp	/^void TrafficManager::DisplayOverallStats( ostream & os ) const {$/;"	f	class:TrafficManager	typeref:typename:void
DisplayOverallStatsCSV	intersim2/trafficmanager.cpp	/^void TrafficManager::DisplayOverallStatsCSV(ostream & os) const {$/;"	f	class:TrafficManager	typeref:typename:void
DisplayState	intersim2/interconnect_interface.cpp	/^void InterconnectInterface::DisplayState(FILE *fp) const$/;"	f	class:InterconnectInterface	typeref:typename:void
DisplayStats	intersim2/batchtrafficmanager.cpp	/^void BatchTrafficManager::DisplayStats(ostream & os) const {$/;"	f	class:BatchTrafficManager	typeref:typename:void
DisplayStats	intersim2/interconnect_interface.cpp	/^void InterconnectInterface::DisplayStats() const$/;"	f	class:InterconnectInterface	typeref:typename:void
DisplayStats	intersim2/trafficmanager.cpp	/^void TrafficManager::DisplayStats(ostream & os) const {$/;"	f	class:TrafficManager	typeref:typename:void
DragonFlyNew	intersim2/networks/dragonfly.cpp	/^DragonFlyNew::DragonFlyNew( const Configuration &config, const string & name ) :$/;"	f	class:DragonFlyNew
DragonFlyNew	intersim2/networks/dragonfly.hpp	/^class DragonFlyNew : public Network {$/;"	c
Dram_type	gpuwattch/basic_components.h	/^enum Dram_type {$/;"	g
Driver	gpuwattch/cacti/decoder.cc	/^Driver::Driver(double c_gate_load_, double c_wire_load_, double r_wire_load_, bool is_dram)$/;"	f	class:Driver
Driver	gpuwattch/cacti/decoder.h	/^class Driver : public Component$/;"	c
DumpChannelMap	intersim2/networks/network.cpp	/^void Network::DumpChannelMap( ostream & os, string const & prefix ) const$/;"	f	class:Network	typeref:typename:void
DumpNodeMap	intersim2/networks/network.cpp	/^void Network::DumpNodeMap( ostream & os, string const & prefix ) const$/;"	f	class:Network	typeref:typename:void
DynamicLimitedSharedBufferPolicy	intersim2/buffer_state.cpp	/^BufferState::DynamicLimitedSharedBufferPolicy::DynamicLimitedSharedBufferPolicy(Configuration co/;"	f	class:BufferState::DynamicLimitedSharedBufferPolicy
DynamicLimitedSharedBufferPolicy	intersim2/buffer_state.hpp	/^  class DynamicLimitedSharedBufferPolicy : public LimitedSharedBufferPolicy {$/;"	c	class:BufferState
DynamicParameter	gpuwattch/cacti/parameter.cc	/^DynamicParameter::DynamicParameter($/;"	f	class:DynamicParameter
DynamicParameter	gpuwattch/cacti/parameter.cc	/^DynamicParameter::DynamicParameter():$/;"	f	class:DynamicParameter
DynamicParameter	gpuwattch/cacti/parameter.h	/^class DynamicParameter$/;"	c
ECHO	intersim2/lex.yy.c	/^#define ECHO /;"	d	file:
ECHO	intersim2/lex.yy.c	/^ECHO;$/;"	v	typeref:typename:YY_RULE_SETUP
ENVREG_REG	cuda-sim/opcodes.h	/^   ENVREG_REG,$/;"	e	enum:special_regs
EOB_ACT_CONTINUE_SCAN	intersim2/lex.yy.c	/^#define EOB_ACT_CONTINUE_SCAN /;"	d	file:
EOB_ACT_END_OF_FILE	intersim2/lex.yy.c	/^#define EOB_ACT_END_OF_FILE /;"	d	file:
EOB_ACT_LAST_MATCH	intersim2/lex.yy.c	/^#define EOB_ACT_LAST_MATCH /;"	d	file:
EPSILON	gpuwattch/cacti/const.h	/^#define EPSILON /;"	d
EPSILON2	gpuwattch/cacti/const.h	/^#define EPSILON2 /;"	d
EPSILON3	gpuwattch/cacti/const.h	/^#define EPSILON3 /;"	d
ERP	gpuwattch/cacti/mat.h	/^    int ERP;$/;"	m	class:Mat	typeref:typename:int
ERP	gpuwattch/cacti/uca.h	/^    int   RWP, ERP, EWP,SCHP;$/;"	m	class:UCA	typeref:typename:int
EWP	gpuwattch/cacti/mat.h	/^    int EWP;$/;"	m	class:Mat	typeref:typename:int
EWP	gpuwattch/cacti/uca.h	/^    int   RWP, ERP, EWP,SCHP;$/;"	m	class:UCA	typeref:typename:int
EXCLUDES	gpgpu-sim/Makefile	/^EXCLUDES = $/;"	m
EXECU	gpuwattch/core.cc	/^EXECU::EXECU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, double lsq_he/;"	f	class:EXECU
EXECU	gpuwattch/core.h	/^class EXECU :public Component {$/;"	c
EXIT_SUCCESS	intersim2/y.tab.c	/^#      define EXIT_SUCCESS /;"	d	file:
EXIT_SUCCESS	intersim2/y.tab.c	/^#    define EXIT_SUCCESS /;"	d	file:
EXTERN	gpuwattch/globalvar.h	/^#define EXTERN /;"	d
EXTERN	gpuwattch/globalvar.h	/^#define EXTERN$/;"	d
EXTRA_TAG_BITS	gpuwattch/cacti/const.h	/^const int EXTRA_TAG_BITS = 5;$/;"	v	typeref:typename:const int
EX_WB	gpgpu-sim/shader.h	/^    EX_WB,$/;"	e	enum:pipeline_stage_name_t
Embedded	gpuwattch/XML_Parse.h	/^	bool Embedded;$/;"	m	struct:__anon6448b92c1208	typeref:typename:bool
Embedded	gpuwattch/basic_components.h	/^	bool Embedded;$/;"	m	class:CoreDynParam	typeref:typename:bool
Empty	intersim2/buffer.hpp	/^  inline bool Empty( int vc ) const$/;"	f	class:Buffer	typeref:typename:bool
Empty	intersim2/vc.hpp	/^  inline bool Empty( ) const$/;"	f	class:VC	typeref:typename:bool
Error	intersim2/module.cpp	/^void Module::Error( const string& msg ) const$/;"	f	class:Module	typeref:typename:void
Evaluate	intersim2/channel.hpp	/^  virtual void Evaluate() {}$/;"	f	class:Channel	typeref:typename:void
Evaluate	intersim2/networks/network.cpp	/^void Network::Evaluate( )$/;"	f	class:Network	typeref:typename:void
Evaluate	intersim2/routers/router.cpp	/^void Router::Evaluate( )$/;"	f	class:Router	typeref:typename:void
EventNextVCState	intersim2/routers/event_router.cpp	/^EventNextVCState::EventNextVCState( const Configuration& config, $/;"	f	class:EventNextVCState
EventNextVCState	intersim2/routers/event_router.hpp	/^class EventNextVCState : public Module {$/;"	c
EventRouter	intersim2/routers/event_router.cpp	/^EventRouter::EventRouter( const Configuration& config,$/;"	f	class:EventRouter
EventRouter	intersim2/routers/event_router.hpp	/^class EventRouter : public Router {$/;"	c
FALL	gpuwattch/cacti/const.h	/^#define FALL /;"	d
FALSE	gpuwattch/xmlParser.h	/^    #define FALSE /;"	d
FERMI_HASH_SET_FUNCTION	gpgpu-sim/gpu-cache.h	/^    FERMI_HASH_SET_FUNCTION = 0,$/;"	e	enum:set_index_function
FIFO	gpgpu-sim/gpu-cache.h	/^    FIFO$/;"	e	enum:replacement_policy_t
FIXED_OVERHEAD	gpuwattch/cacti/nuca.cc	/^#define FIXED_OVERHEAD /;"	d	file:
FLASHC	gpuwattch/basic_components.h	/^	FLASHC \/\/flash controller$/;"	e	enum:MemoryCtrl_type
FLEXINT_H	intersim2/lex.yy.c	/^#define FLEXINT_H$/;"	d	file:
FLEX_BETA	intersim2/lex.yy.c	/^#define FLEX_BETA$/;"	d	file:
FLEX_SCANNER	intersim2/lex.yy.c	/^#define FLEX_SCANNER$/;"	d	file:
FLIP_FLOP_D	gpuwattch/cacti/highradix.h	/^#define FLIP_FLOP_D /;"	d
FLIP_FLOP_L	gpuwattch/cacti/highradix.h	/^#define FLIP_FLOP_L /;"	d
FLITCHANNEL_HPP	intersim2/flitchannel.hpp	/^#define FLITCHANNEL_HPP$/;"	d
FLIT_SZ	gpuwattch/cacti/highradix.h	/^    double FLIT_SZ;$/;"	m	class:HighRadix	typeref:typename:double
FNUM	intersim2/y.tab.c	/^    FNUM = 260$/;"	e	enum:yytokentype	file:
FNUM	intersim2/y.tab.c	/^#define FNUM /;"	d	file:
FNUM	intersim2/y.tab.h	/^    FNUM = 260$/;"	e	enum:yytokentype
FNUM	intersim2/y.tab.h	/^#define FNUM /;"	d
FO4	gpuwattch/cacti/parameter.h	/^  double FO4;$/;"	m	class:TechnologyParameter	typeref:typename:double
FO4	intersim2/power/power_module.hpp	/^  double FO4   ;		     $/;"	m	class:Power_Module	typeref:typename:double
FPU	gpuwattch/XML_Parse.h	/^	char FPU[20];$/;"	m	struct:__anon6448b92c0708	typeref:typename:char[20]
FPU	gpuwattch/basic_components.h	/^    FPU,$/;"	e	enum:FU_type
FPUP	gpuwattch/gpgpu_sim_wrapper.cc	/^   FPUP,$/;"	e	enum:pwr_cmp_t	file:
FPU_ACC	gpuwattch/XML_Parse.h	/^   FPU_ACC,$/;"	e	enum:perf_count_t
FPU_cdb_duty_cycle	gpuwattch/XML_Parse.h	/^	double FPU_cdb_duty_cycle ;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
FPU_cdb_duty_cycle	gpuwattch/basic_components.h	/^	       FPU_cdb_duty_cycle;$/;"	m	class:CoreDynParam	typeref:typename:double
FPU_duty_cycle	gpuwattch/XML_Parse.h	/^	double FPU_duty_cycle ;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
FPU_duty_cycle	gpuwattch/basic_components.h	/^	       FPU_duty_cycle, ALU_cdb_duty_cycle,MUL_cdb_duty_cycle,$/;"	m	class:CoreDynParam	typeref:typename:double
FPU_per_core	gpuwattch/XML_Parse.h	/^	double FPU_per_core;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
FP_DIV_OP	abstract_hardware_model.h	/^    FP_DIV_OP,$/;"	e	enum:special_operations_t
FP_EXP_OP	abstract_hardware_model.h	/^	FP_EXP_OP$/;"	e	enum:special_operations_t
FP_INT	gpuwattch/XML_Parse.h	/^   FP_INT,$/;"	e	enum:perf_count_t
FP_LG_OP	abstract_hardware_model.h	/^	FP_LG_OP,$/;"	e	enum:special_operations_t
FP_MUL_OP	abstract_hardware_model.h	/^    FP_MUL_OP,$/;"	e	enum:special_operations_t
FP_OP	abstract_hardware_model.h	/^    FP_OP$/;"	e	enum:uarch_operand_type_t
FP_SIN_OP	abstract_hardware_model.h	/^	FP_SIN_OP,$/;"	e	enum:special_operations_t
FP_SQRT_OP	abstract_hardware_model.h	/^	FP_SQRT_OP,$/;"	e	enum:special_operations_t
FP__OP	abstract_hardware_model.h	/^    FP__OP,$/;"	e	enum:special_operations_t
FREQUENCY	gpuwattch/cacti/highradix.h	/^    double FREQUENCY;\/\/ GHz$/;"	m	class:HighRadix	typeref:typename:double
FREQUENCY	gpuwattch/cacti/router.h	/^	double FREQUENCY; \/\/ move this to config file --TODO$/;"	m	class:MCPAT_Router	typeref:typename:double
FRF	gpuwattch/core.h	/^	ArrayST * FRF;$/;"	m	class:RegFU	typeref:typename:ArrayST *
FU_height	gpuwattch/logic.h	/^	double FU_height;$/;"	m	class:FunctionalUnit	typeref:typename:double
FU_type	gpuwattch/basic_components.h	/^enum FU_type {$/;"	g
F_sz_nm	gpuwattch/cacti/cacti_interface.h	/^    double   F_sz_nm;          \/\/ feature size in nm$/;"	m	class:InputParameter	typeref:typename:double
F_sz_um	gpuwattch/cacti/cacti_interface.h	/^    double   F_sz_um;          \/\/ feature size in um$/;"	m	class:InputParameter	typeref:typename:double
FatTree	intersim2/networks/fattree.cpp	/^FatTree::FatTree( const Configuration& config,const string & name )$/;"	f	class:FatTree
FatTree	intersim2/networks/fattree.hpp	/^class FatTree : public Network {$/;"	c
FeedbackSharedBufferPolicy	intersim2/buffer_state.cpp	/^BufferState::FeedbackSharedBufferPolicy::FeedbackSharedBufferPolicy(Configuration const & config/;"	f	class:BufferState::FeedbackSharedBufferPolicy
FeedbackSharedBufferPolicy	intersim2/buffer_state.hpp	/^  class FeedbackSharedBufferPolicy : public SharedBufferPolicy {$/;"	c	class:BufferState
FlashController	gpuwattch/iocontrollers.cc	/^FlashController::FlashController(ParseXML *XML_interface,InputParameter* interface_ip_)$/;"	f	class:FlashController
FlashController	gpuwattch/iocontrollers.h	/^class FlashController : public Component {$/;"	c
FlatFlyOnChip	intersim2/networks/flatfly_onchip.cpp	/^FlatFlyOnChip::FlatFlyOnChip( const Configuration &config, const string & name ) :$/;"	f	class:FlatFlyOnChip
FlatFlyOnChip	intersim2/networks/flatfly_onchip.hpp	/^class FlatFlyOnChip : public Network {$/;"	c
Flit	intersim2/flit.cpp	/^Flit::Flit() $/;"	f	class:Flit
Flit	intersim2/flit.hpp	/^class Flit {$/;"	c
FlitChannel	intersim2/flitchannel.cpp	/^FlitChannel::FlitChannel(Module * parent, string const & name, int classes)$/;"	f	class:FlitChannel
FlitChannel	intersim2/flitchannel.hpp	/^class FlitChannel : public Channel<Flit> {$/;"	c
FlitType	intersim2/flit.hpp	/^  enum FlitType { READ_REQUEST  = 0, $/;"	g	class:Flit
Free	intersim2/credit.cpp	/^void Credit::Free() {$/;"	f	class:Credit	typeref:typename:void
Free	intersim2/flit.cpp	/^void Flit::Free() {$/;"	f	class:Flit	typeref:typename:void
Free	intersim2/packet_reply_info.cpp	/^void PacketReplyInfo::Free()$/;"	f	class:PacketReplyInfo	typeref:typename:void
FreeAll	intersim2/credit.cpp	/^void Credit::FreeAll() {$/;"	f	class:Credit	typeref:typename:void
FreeAll	intersim2/flit.cpp	/^void Flit::FreeAll() {$/;"	f	class:Flit	typeref:typename:void
FreeAll	intersim2/packet_reply_info.cpp	/^void PacketReplyInfo::FreeAll()$/;"	f	class:PacketReplyInfo	typeref:typename:void
FreeCredits	intersim2/routers/chaos_router.hpp	/^  virtual vector<int> FreeCredits() const { return vector<int>(); }$/;"	f	class:ChaosRouter	typeref:typename:vector<int>
FreeCredits	intersim2/routers/event_router.hpp	/^  virtual vector<int> FreeCredits() const { return vector<int>(); }$/;"	f	class:EventRouter	typeref:typename:vector<int>
FreeCredits	intersim2/routers/iq_router.cpp	/^vector<int> IQRouter::FreeCredits() const$/;"	f	class:IQRouter	typeref:typename:vector<int>
FreeSlotFor	intersim2/buffer_state.cpp	/^void BufferState::BufferPolicy::FreeSlotFor(int vc) {$/;"	f	class:BufferState::BufferPolicy	typeref:typename:void
FreeSlotFor	intersim2/buffer_state.cpp	/^void BufferState::FeedbackSharedBufferPolicy::FreeSlotFor(int vc)$/;"	f	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:void
FreeSlotFor	intersim2/buffer_state.cpp	/^void BufferState::SharedBufferPolicy::FreeSlotFor(int vc)$/;"	f	class:BufferState::SharedBufferPolicy	typeref:typename:void
FreeSlotFor	intersim2/buffer_state.cpp	/^void BufferState::SimpleFeedbackSharedBufferPolicy::FreeSlotFor(int vc)$/;"	f	class:BufferState::SimpleFeedbackSharedBufferPolicy	typeref:typename:void
FrontFlit	intersim2/buffer.hpp	/^  inline Flit *FrontFlit( int vc ) const$/;"	f	class:Buffer	typeref:typename:Flit *
FrontFlit	intersim2/vc.hpp	/^  inline Flit *FrontFlit( ) const$/;"	f	class:VC	typeref:typename:Flit *
Full	intersim2/buffer.hpp	/^  inline bool Full( ) const$/;"	f	class:Buffer	typeref:typename:bool
FullName	intersim2/module.hpp	/^  inline const string & FullName() const { return _fullname; }$/;"	f	class:Module	typeref:typename:const string &
FuncCache	abstract_hardware_model.h	/^enum FuncCache$/;"	g
FuncCachePreferL1	abstract_hardware_model.h	/^  FuncCachePreferL1 = 2$/;"	e	enum:FuncCache
FuncCachePreferNone	abstract_hardware_model.h	/^  FuncCachePreferNone = 0,$/;"	e	enum:FuncCache
FuncCachePreferShared	abstract_hardware_model.h	/^  FuncCachePreferShared = 1,$/;"	e	enum:FuncCache
FunctionalUnit	gpuwattch/logic.cc	/^FunctionalUnit::FunctionalUnit(ParseXML *XML_interface, int ithCore_, InputParameter* interface_/;"	f	class:FunctionalUnit
FunctionalUnit	gpuwattch/logic.h	/^class FunctionalUnit :public Component{$/;"	c
GDDR3	gpuwattch/basic_components.h	/^	GDDR3$/;"	e	enum:Dram_type
GDDR5	gpuwattch/basic_components.h	/^	GDDR5,$/;"	e	enum:Dram_type
GEN_CUS	gpgpu-sim/shader.cc	/^    enum { SP_CUS, SFU_CUS, MEM_CUS, GEN_CUS };$/;"	e	enum:shader_core_ctx::shader_core_ctx::__anona80340180103	file:
GLOBALVAR	gpuwattch/array.cc	/^#define  GLOBALVAR$/;"	d	file:
GLOBALVAR_H_	gpuwattch/globalvar.h	/^#define GLOBALVAR_H_$/;"	d
GLOBAL_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_accesses::access_type
GLOBAL_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_misses::access_type
GLOBAL_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R};$/;"	e	enum:power_stat_t::get_l1d_read_accesses::access_type
GLOBAL_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R};$/;"	e	enum:power_stat_t::get_l1d_read_misses::access_type
GLOBAL_ACC_W	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	e	enum:power_stat_t::get_l2_write_accesses::access_type
GLOBAL_ACC_W	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	e	enum:power_stat_t::get_l2_write_misses::access_type
GLOBAL_ACC_W	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W};$/;"	e	enum:power_stat_t::get_l1d_write_accesses::access_type
GLOBAL_ACC_W	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W};$/;"	e	enum:power_stat_t::get_l1d_write_misses::access_type
GLOBAL_HEAP_START	abstract_hardware_model.h	/^#define GLOBAL_HEAP_START /;"	d
GLOBAL_MSHR_MERGE	gpgpu-sim/gpu-sim.h	/^#define GLOBAL_MSHR_MERGE /;"	d
GPGPUSIM_ENTRYPOINT_H_INCLUDED	gpgpusim_entrypoint.h	/^#define GPGPUSIM_ENTRYPOINT_H_INCLUDED$/;"	d
GPGPU_SIM_WRAPPER_H_	gpuwattch/gpgpu_sim_wrapper.h	/^#define GPGPU_SIM_WRAPPER_H_$/;"	d
GPUTrafficManager	intersim2/gputrafficmanager.cpp	/^GPUTrafficManager::GPUTrafficManager( const Configuration &config, const vector<Network *> &net)$/;"	f	class:GPUTrafficManager
GPUTrafficManager	intersim2/gputrafficmanager.hpp	/^class GPUTrafficManager : public TrafficManager {$/;"	c
GPU_Architecture	gpuwattch/XML_Parse.h	/^	int GPU_Architecture;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
GPU_CACHE_H	gpgpu-sim/gpu-cache.h	/^#define GPU_CACHE_H$/;"	d
GPU_MEMLATSTAT_MC	gpgpu-sim/gpu-sim.h	/^#define GPU_MEMLATSTAT_MC /;"	d
GPU_MISC_H	gpgpu-sim/gpu-misc.h	/^#define GPU_MISC_H$/;"	d
GPU_RSTAT_BW_STAT	gpgpu-sim/gpu-sim.h	/^#define GPU_RSTAT_BW_STAT /;"	d
GPU_RSTAT_DWF_MAP	gpgpu-sim/gpu-sim.h	/^#define GPU_RSTAT_DWF_MAP /;"	d
GPU_RSTAT_L1MISS	gpgpu-sim/gpu-sim.h	/^#define GPU_RSTAT_L1MISS /;"	d
GPU_RSTAT_PDOM	gpgpu-sim/gpu-sim.h	/^#define GPU_RSTAT_PDOM /;"	d
GPU_RSTAT_SCHED	gpgpu-sim/gpu-sim.h	/^#define GPU_RSTAT_SCHED /;"	d
GPU_RSTAT_SHD_INFO	gpgpu-sim/gpu-sim.h	/^#define GPU_RSTAT_SHD_INFO /;"	d
GPU_RSTAT_WARP_DIS	gpgpu-sim/gpu-sim.h	/^#define GPU_RSTAT_WARP_DIS /;"	d
GPU_SIM_H	gpgpu-sim/gpu-sim.h	/^#define GPU_SIM_H$/;"	d
GRIDID_REG	cuda-sim/opcodes.h	/^   GRIDID_REG,$/;"	e	enum:special_regs
G_MEM_LD	gpgpu-sim/stats.h	/^   G_MEM_LD,$/;"	e	enum:mem_stage_access_type
G_MEM_ST	gpgpu-sim/stats.h	/^   G_MEM_ST,$/;"	e	enum:mem_stage_access_type
Gate_type	gpuwattch/cacti/basic_circuit.h	/^enum Gate_type {$/;"	g
GetActivePackets	intersim2/routers/router.hpp	/^  inline vector<int> const & GetActivePackets(int c) const {$/;"	f	class:Router	typeref:typename:vector<int> const &
GetActivity	intersim2/flitchannel.hpp	/^  inline vector<int> const & GetActivity() const {$/;"	f	class:FlitChannel	typeref:typename:vector<int> const &
GetActivity	intersim2/power/switch_monitor.hpp	/^  vector<int> const & GetActivity() const {$/;"	f	class:SwitchMonitor	typeref:typename:vector<int> const &
GetBin	intersim2/stats.hpp	/^  int GetBin(int b){ return _hist[b];}$/;"	f	class:Stats	typeref:typename:int
GetBufferBusyStalls	intersim2/routers/router.hpp	/^  inline int GetBufferBusyStalls(int c) const {$/;"	f	class:Router	typeref:typename:int
GetBufferConflictStalls	intersim2/routers/router.hpp	/^  inline int GetBufferConflictStalls(int c) const {$/;"	f	class:Router	typeref:typename:int
GetBufferFullStalls	intersim2/routers/router.hpp	/^  inline int GetBufferFullStalls(int c) const {$/;"	f	class:Router	typeref:typename:int
GetBufferMonitor	intersim2/routers/iq_router.hpp	/^  BufferMonitor const * const GetBufferMonitor() const {return _bufferMonitor;}$/;"	f	class:IQRouter	typeref:typename:BufferMonitor const * const
GetBufferOccupancy	intersim2/routers/chaos_router.hpp	/^  virtual int GetBufferOccupancy(int i) const {return 0;}$/;"	f	class:ChaosRouter	typeref:typename:int
GetBufferOccupancy	intersim2/routers/event_router.hpp	/^  virtual int GetBufferOccupancy(int i) const {return 0;}$/;"	f	class:EventRouter	typeref:typename:int
GetBufferOccupancy	intersim2/routers/iq_router.cpp	/^int IQRouter::GetBufferOccupancy(int i) const {$/;"	f	class:IQRouter	typeref:typename:int
GetBufferOccupancyForClass	intersim2/routers/chaos_router.hpp	/^  virtual int GetBufferOccupancyForClass(int input, int cl) const {return 0;}$/;"	f	class:ChaosRouter	typeref:typename:int
GetBufferOccupancyForClass	intersim2/routers/event_router.hpp	/^  virtual int GetBufferOccupancyForClass(int input, int cl) const {return 0;}$/;"	f	class:EventRouter	typeref:typename:int
GetBufferOccupancyForClass	intersim2/routers/iq_router.cpp	/^int IQRouter::GetBufferOccupancyForClass(int input, int cl) const$/;"	f	class:IQRouter	typeref:typename:int
GetBufferReservedStalls	intersim2/routers/router.hpp	/^  inline int GetBufferReservedStalls(int c) const {$/;"	f	class:Router	typeref:typename:int
GetChannels	intersim2/networks/network.hpp	/^  const vector<FlitChannel *> & GetChannels(){return _chan;}$/;"	f	class:Network	typeref:typename:const vector<FlitChannel * > &
GetChannelsCred	intersim2/networks/network.hpp	/^  const vector<CreditChannel *> & GetChannelsCred(){return _chan_cred;}$/;"	f	class:Network	typeref:typename:const vector<CreditChannel * > &
GetCredits	intersim2/routers/event_router.cpp	/^int EventNextVCState::GetCredits( int vc ) const$/;"	f	class:EventNextVCState	typeref:typename:int
GetCrossbarConflictStalls	intersim2/routers/router.hpp	/^  inline int GetCrossbarConflictStalls(int c) const {$/;"	f	class:Router	typeref:typename:int
GetDesc	option_parser.cc	/^   const string& GetDesc() { return m_optionDesc; }$/;"	f	class:OptionRegistryInterface	typeref:typename:const string &	file:
GetEject	intersim2/networks/network.hpp	/^  FlitChannel * GetEject(int index) {return _eject[index];}$/;"	f	class:Network	typeref:typename:FlitChannel *
GetEject	intersim2/networks/network.hpp	/^  const vector<FlitChannel *> & GetEject(){return _eject;}$/;"	f	class:Network	typeref:typename:const vector<FlitChannel * > &
GetEjectCred	intersim2/networks/network.hpp	/^  CreditChannel * GetEjectCred(int index) {return _eject_cred[index];}$/;"	f	class:Network	typeref:typename:CreditChannel *
GetEjectCred	intersim2/networks/network.hpp	/^  const vector<CreditChannel *> & GetEjectCred(){return _eject_cred;}$/;"	f	class:Network	typeref:typename:const vector<CreditChannel * > &
GetEjectedFlit	intersim2/interconnect_interface.cpp	/^Flit* InterconnectInterface::GetEjectedFlit(int subnet, int node)$/;"	f	class:InterconnectInterface	typeref:typename:Flit *
GetFlitSize	intersim2/interconnect_interface.cpp	/^unsigned InterconnectInterface::GetFlitSize() const$/;"	f	class:InterconnectInterface	typeref:typename:unsigned
GetFloat	intersim2/config_utils.cpp	/^double Configuration::GetFloat(string const & field) const$/;"	f	class:Configuration	typeref:typename:double
GetFloatArray	intersim2/config_utils.cpp	/^vector<double> Configuration::GetFloatArray(string const & field) const$/;"	f	class:Configuration	typeref:typename:vector<double>
GetFloatMap	intersim2/config_utils.hpp	/^  inline const map<string, double> & GetFloatMap() const {$/;"	f	class:Configuration	typeref:typename:const map<string,double> &
GetID	intersim2/routers/router.hpp	/^  inline int GetID( ) const {return _id;}$/;"	f	class:Router	typeref:typename:int
GetIcntStats	intersim2/interconnect_interface.cpp	/^Stats* InterconnectInterface::GetIcntStats(const string &name) const$/;"	f	class:InterconnectInterface	typeref:typename:Stats *
GetIcntTime	intersim2/interconnect_interface.cpp	/^int InterconnectInterface::GetIcntTime() const$/;"	f	class:InterconnectInterface	typeref:typename:int
GetInject	intersim2/networks/network.hpp	/^  FlitChannel * GetInject(int index) {return _inject[index];}$/;"	f	class:Network	typeref:typename:FlitChannel *
GetInject	intersim2/networks/network.hpp	/^  const vector<FlitChannel *> & GetInject() {return _inject;}$/;"	f	class:Network	typeref:typename:const vector<FlitChannel * > &
GetInjectCred	intersim2/networks/network.hpp	/^  CreditChannel * GetInjectCred(int index) {return _inject_cred[index];}$/;"	f	class:Network	typeref:typename:CreditChannel *
GetInjectCred	intersim2/networks/network.hpp	/^  const vector<CreditChannel *> & GetInjectCred() {return _inject_cred;}$/;"	f	class:Network	typeref:typename:const vector<CreditChannel * > &
GetInput	intersim2/routers/event_router.cpp	/^int EventNextVCState::GetInput( int vc ) const$/;"	f	class:EventNextVCState	typeref:typename:int
GetInputChannel	intersim2/routers/router.hpp	/^  inline FlitChannel * GetInputChannel( int input ) const {$/;"	f	class:Router	typeref:typename:FlitChannel *
GetInputVC	intersim2/routers/event_router.cpp	/^int EventNextVCState::GetInputVC( int vc ) const$/;"	f	class:EventNextVCState	typeref:typename:int
GetInt	intersim2/config_utils.cpp	/^int Configuration::GetInt(string const & field) const$/;"	f	class:Configuration	typeref:typename:int
GetIntArray	intersim2/config_utils.cpp	/^vector<int> Configuration::GetIntArray(string const & field) const$/;"	f	class:Configuration	typeref:typename:vector<int>
GetIntMap	intersim2/config_utils.hpp	/^  inline const map<string, int> & GetIntMap() const {$/;"	f	class:Configuration	typeref:typename:const map<string,int> &
GetK	intersim2/networks/anynet.hpp	/^  int GetK( ) const{ return -1;}$/;"	f	class:AnyNet	typeref:typename:int
GetK	intersim2/networks/dragonfly.cpp	/^int DragonFlyNew::GetK( ) const$/;"	f	class:DragonFlyNew	typeref:typename:int
GetK	intersim2/networks/flatfly_onchip.cpp	/^int FlatFlyOnChip::GetK( ) const$/;"	f	class:FlatFlyOnChip	typeref:typename:int
GetK	intersim2/networks/fly.cpp	/^int KNFly::GetK( ) const$/;"	f	class:KNFly	typeref:typename:int
GetK	intersim2/networks/kncube.cpp	/^int KNCube::GetK( ) const$/;"	f	class:KNCube	typeref:typename:int
GetLatency	intersim2/channel.hpp	/^  int GetLatency() const { return _delay ; }$/;"	f	class:Channel	typeref:typename:int
GetN	intersim2/networks/anynet.hpp	/^  int GetN( ) const{ return -1;}$/;"	f	class:AnyNet	typeref:typename:int
GetN	intersim2/networks/dragonfly.cpp	/^int DragonFlyNew::GetN( ) const$/;"	f	class:DragonFlyNew	typeref:typename:int
GetN	intersim2/networks/flatfly_onchip.cpp	/^int FlatFlyOnChip::GetN( ) const$/;"	f	class:FlatFlyOnChip	typeref:typename:int
GetN	intersim2/networks/fly.cpp	/^int KNFly::GetN( ) const$/;"	f	class:KNFly	typeref:typename:int
GetN	intersim2/networks/kncube.cpp	/^int KNCube::GetN( ) const$/;"	f	class:KNCube	typeref:typename:int
GetName	option_parser.cc	/^   const string& GetName() { return m_optionName; }$/;"	f	class:OptionRegistryInterface	typeref:typename:const string &	file:
GetNextToken	gpuwattch/xmlParser.cc	/^static NextToken GetNextToken(XML *pXML, int *pcbToken, enum XMLTokenTypeTag *pType)$/;"	f	typeref:typename:NextToken	file:
GetOccupancy	intersim2/buffer.hpp	/^  inline int GetOccupancy( ) const$/;"	f	class:Buffer	typeref:typename:int
GetOccupancy	intersim2/buffer.hpp	/^  inline int GetOccupancy( int vc ) const$/;"	f	class:Buffer	typeref:typename:int
GetOccupancy	intersim2/vc.hpp	/^  inline int GetOccupancy() const$/;"	f	class:VC	typeref:typename:int
GetOccupancyForClass	intersim2/buffer.hpp	/^  inline int GetOccupancyForClass(int c) const$/;"	f	class:Buffer	typeref:typename:int
GetOutputChannel	intersim2/routers/router.hpp	/^  inline FlitChannel * GetOutputChannel( int output ) const {$/;"	f	class:Router	typeref:typename:FlitChannel *
GetOutputPort	intersim2/buffer.hpp	/^  inline int GetOutputPort( int vc ) const$/;"	f	class:Buffer	typeref:typename:int
GetOutputPort	intersim2/vc.hpp	/^  inline int GetOutputPort( ) const$/;"	f	class:VC	typeref:typename:int
GetOutputVC	intersim2/buffer.hpp	/^  inline int GetOutputVC( int vc ) const$/;"	f	class:Buffer	typeref:typename:int
GetOutputVC	intersim2/vc.hpp	/^  inline int GetOutputVC( ) const$/;"	f	class:VC	typeref:typename:int
GetOutstandingCredits	intersim2/routers/router.hpp	/^  inline vector<int> const & GetOutstandingCredits(int c) const {$/;"	f	class:Router	typeref:typename:vector<int> const &
GetPortVC	intersim2/outputset.cpp	/^bool OutputSet::GetPortVC( int *out_port, int *out_vc ) const$/;"	f	class:OutputSet	typeref:typename:bool
GetPresence	intersim2/routers/event_router.cpp	/^int EventNextVCState::GetPresence( int vc ) const$/;"	f	class:EventNextVCState	typeref:typename:int
GetPriority	intersim2/buffer.hpp	/^  inline int GetPriority( int vc ) const$/;"	f	class:Buffer	typeref:typename:int
GetPriority	intersim2/vc.hpp	/^  inline int GetPriority( ) const$/;"	f	class:VC	typeref:typename:int
GetReads	intersim2/power/buffer_monitor.hpp	/^  inline const vector<int> & GetReads() const {$/;"	f	class:BufferMonitor	typeref:typename:const vector<int> &
GetReceivedFlits	intersim2/routers/router.hpp	/^  inline vector<int> const & GetReceivedFlits(int c) const {$/;"	f	class:Router	typeref:typename:vector<int> const &
GetRouteSet	intersim2/buffer.hpp	/^  inline const OutputSet *GetRouteSet( int vc ) const$/;"	f	class:Buffer	typeref:typename:const OutputSet *
GetRouteSet	intersim2/vc.cpp	/^const OutputSet *VC::GetRouteSet( ) const$/;"	f	class:VC	typeref:typename:const OutputSet *
GetRouter	intersim2/networks/network.hpp	/^  Router * GetRouter(int index) {return _routers[index];}$/;"	f	class:Network	typeref:typename:Router *
GetRouters	intersim2/networks/network.hpp	/^  const vector<Router *> & GetRouters(){return _routers;}$/;"	f	class:Network	typeref:typename:const vector<Router * > &
GetSentFlits	intersim2/routers/router.hpp	/^  inline vector<int> const & GetSentFlits(int c) const {$/;"	f	class:Router	typeref:typename:vector<int> const &
GetSet	intersim2/outputset.cpp	/^const set<OutputSet::sSetElement> & OutputSet::GetSet() const{$/;"	f	class:OutputSet	typeref:typename:const set<OutputSet::sSetElement> &
GetSimTime	intersim2/main.cpp	/^int GetSimTime() {$/;"	f	typeref:typename:int
GetSink	intersim2/flitchannel.hpp	/^  inline Router const * const GetSink() const {$/;"	f	class:FlitChannel	typeref:typename:Router const * const
GetSinkPort	intersim2/flitchannel.hpp	/^  inline int const & GetSinkPort() const {$/;"	f	class:FlitChannel	typeref:typename:int const &
GetSource	intersim2/flitchannel.hpp	/^  inline Router const * const GetSource() const {$/;"	f	class:FlitChannel	typeref:typename:Router const * const
GetSourcePort	intersim2/flitchannel.hpp	/^  inline int const & GetSourcePort() const {$/;"	f	class:FlitChannel	typeref:typename:int const &
GetState	intersim2/buffer.hpp	/^  inline VC::eVCState GetState( int vc ) const$/;"	f	class:Buffer	typeref:typename:VC::eVCState
GetState	intersim2/routers/event_router.cpp	/^EventNextVCState::eNextVCState EventNextVCState::GetState( int vc ) const$/;"	f	class:EventNextVCState	typeref:typename:EventNextVCState::eNextVCState
GetState	intersim2/vc.hpp	/^  inline VC::eVCState GetState( ) const$/;"	f	class:VC	typeref:typename:VC::eVCState
GetStats	intersim2/main.cpp	/^Stats * GetStats(const std::string & name) {$/;"	f	typeref:typename:Stats *
GetStoredFlits	intersim2/routers/router.hpp	/^  inline vector<int> const & GetStoredFlits(int c) const {$/;"	f	class:Router	typeref:typename:vector<int> const &
GetStr	intersim2/config_utils.cpp	/^string Configuration::GetStr(string const & field) const$/;"	f	class:Configuration	typeref:typename:string
GetStrArray	intersim2/config_utils.cpp	/^vector<string> Configuration::GetStrArray(string const & field) const$/;"	f	class:Configuration	typeref:typename:vector<string>
GetStrMap	intersim2/config_utils.hpp	/^  inline const map<string, string> & GetStrMap() const {$/;"	f	class:Configuration	typeref:typename:const map<string,string> &
GetSwitchMonitor	intersim2/routers/iq_router.hpp	/^  SwitchMonitor const * const GetSwitchMonitor() const {return _switchMonitor;}$/;"	f	class:IQRouter	typeref:typename:SwitchMonitor const * const
GetTheConfig	intersim2/config_utils.cpp	/^Configuration * Configuration::GetTheConfig()$/;"	f	class:Configuration	typeref:typename:Configuration *
GetUsedCredit	intersim2/routers/chaos_router.hpp	/^  virtual int GetUsedCredit(int out) const {return 0;}$/;"	f	class:ChaosRouter	typeref:typename:int
GetUsedCredit	intersim2/routers/event_router.hpp	/^  virtual int GetUsedCredit(int o) const {return 0;}$/;"	f	class:EventRouter	typeref:typename:int
GetUsedCredit	intersim2/routers/iq_router.cpp	/^int IQRouter::GetUsedCredit(int o) const$/;"	f	class:IQRouter	typeref:typename:int
GetUsedCreditForClass	intersim2/routers/chaos_router.hpp	/^  virtual int GetUsedCreditForClass(int output, int cl) const {return 0;}$/;"	f	class:ChaosRouter	typeref:typename:int
GetUsedCreditForClass	intersim2/routers/event_router.hpp	/^  virtual int GetUsedCreditForClass(int output, int cl) const {return 0;}$/;"	f	class:EventRouter	typeref:typename:int
GetUsedCreditForClass	intersim2/routers/iq_router.cpp	/^int IQRouter::GetUsedCreditForClass(int output, int cl) const$/;"	f	class:IQRouter	typeref:typename:int
GetVC	intersim2/outputset.cpp	/^int OutputSet::GetVC( int output_port, int vc_index, int *pri ) const$/;"	f	class:OutputSet	typeref:typename:int
GetWrites	intersim2/power/buffer_monitor.hpp	/^  inline const vector<int> & GetWrites() const {$/;"	f	class:BufferMonitor	typeref:typename:const vector<int> &
Global	gpuwattch/cacti/cacti_interface.h	/^    Global \/* gloabl wires with repeaters *\/,$/;"	e	enum:Wire_type
Global_10	gpuwattch/cacti/cacti_interface.h	/^    Global_10 \/* 10% delay penalty *\/,$/;"	e	enum:Wire_type
Global_20	gpuwattch/cacti/cacti_interface.h	/^    Global_20 \/* 20% delay penalty *\/,$/;"	e	enum:Wire_type
Global_30	gpuwattch/cacti/cacti_interface.h	/^    Global_30 \/* 30% delay penalty *\/,$/;"	e	enum:Wire_type
Global_5	gpuwattch/cacti/cacti_interface.h	/^    Global_5 \/* 5% delay penalty *\/,$/;"	e	enum:Wire_type
HALFCLOCK_ID	cuda-sim/opcodes.h	/^   HALFCLOCK_ID,$/;"	e	enum:special_regs
HEAD_ID	intersim2/networks/anynet.cpp	/^		  HEAD_ID,$/;"	e	enum:AnyNet::readFile::ParseState	file:
HEAD_TYPE	intersim2/networks/anynet.cpp	/^  enum ParseState{HEAD_TYPE=0,$/;"	e	enum:AnyNet::readFile::ParseState	file:
HISTOGRAM_H	gpgpu-sim/histogram.h	/^#define HISTOGRAM_H$/;"	d
HIT	gpgpu-sim/gpu-cache.h	/^    HIT = 0,$/;"	e	enum:cache_request_status
HIT	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_constant_c_accesses::request_status
HIT	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_inst_c_accesses::request_status
HIT	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l1d_read_accesses::request_status
HIT	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l1d_write_accesses::request_status
HIT	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l2_read_accesses::request_status
HIT	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l2_write_accesses::request_status
HIT	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_texture_c_accesses::request_status
HIT_RESERVED	gpgpu-sim/gpu-cache.h	/^    HIT_RESERVED,$/;"	e	enum:cache_request_status
HIT_RESERVED	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_constant_c_accesses::request_status
HIT_RESERVED	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_inst_c_accesses::request_status
HIT_RESERVED	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l1d_read_accesses::request_status
HIT_RESERVED	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l1d_write_accesses::request_status
HIT_RESERVED	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l2_read_accesses::request_status
HIT_RESERVED	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l2_write_accesses::request_status
HIT_RESERVED	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_texture_c_accesses::request_status
HPOWERRAIL	gpuwattch/cacti/parameter.h	/^  double HPOWERRAIL;$/;"	m	class:TechnologyParameter	typeref:typename:double
H_DFQD1	intersim2/power/power_module.hpp	/^  double H_DFQD1;$/;"	m	class:Power_Module	typeref:typename:double
H_INVD2	intersim2/power/power_module.hpp	/^  double H_INVD2;$/;"	m	class:Power_Module	typeref:typename:double
H_ND2D1	intersim2/power/power_module.hpp	/^  double H_ND2D1;$/;"	m	class:Power_Module	typeref:typename:double
H_SRAM	intersim2/power/power_module.hpp	/^  double H_SRAM;$/;"	m	class:Power_Module	typeref:typename:double
Half_net_topology	gpuwattch/cacti/basic_circuit.h	/^enum Half_net_topology {$/;"	g
HasBuffer	intersim2/interconnect_interface.cpp	/^bool InterconnectInterface::HasBuffer(unsigned deviceID, unsigned int size) const$/;"	f	class:InterconnectInterface	typeref:typename:bool
HasPacket	intersim2/interconnect_interface.hpp	/^    inline bool HasPacket() const { return _packet_n; }$/;"	f	class:InterconnectInterface::_BoundaryBufferItem	typeref:typename:bool
HeightFromID	intersim2/networks/qtree.cpp	/^int QTree::HeightFromID( int id ) $/;"	f	class:QTree	typeref:typename:int
HighRadix	gpuwattch/cacti/highradix.cc	/^HighRadix::HighRadix($/;"	f	class:HighRadix
HighRadix	gpuwattch/cacti/highradix.h	/^class HighRadix : public Component$/;"	c
HotSpotTrafficPattern	intersim2/traffic.cpp	/^HotSpotTrafficPattern::HotSpotTrafficPattern(int nodes, vector<int> hotspots, $/;"	f	class:HotSpotTrafficPattern
HotSpotTrafficPattern	intersim2/traffic.hpp	/^class HotSpotTrafficPattern : public TrafficPattern {$/;"	c
Htree2	gpuwattch/cacti/htree2.cc	/^Htree2::Htree2($/;"	f	class:Htree2
Htree2	gpuwattch/cacti/htree2.h	/^class Htree2 : public Component$/;"	c
Htree_type	gpuwattch/cacti/basic_circuit.h	/^enum Htree_type {$/;"	g
I	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
IB	gpuwattch/core.h	/^	ArrayST * IB;$/;"	m	class:InstFetchU	typeref:typename:ArrayST *
IBP	gpuwattch/gpgpu_sim_wrapper.cc	/^   IBP=0,$/;"	e	enum:pwr_cmp_t	file:
IBUFFER_SIZE	gpgpu-sim/shader.h	/^    static const unsigned IBUFFER_SIZE=1;$/;"	m	class:shd_warp_t	typeref:typename:const unsigned
IBassoc	gpuwattch/arch_const.h	/^const int IBassoc				=	0;\/\/In Niagara it is still fully associ$/;"	v	typeref:typename:const int
IBblocksize	gpuwattch/arch_const.h	/^const int IBblocksize			=	4;$/;"	v	typeref:typename:const int
IBsize	gpuwattch/arch_const.h	/^const int IBsize				=	64;\/\/2*4*instruction_length\/8*2;$/;"	v	typeref:typename:const int
ICNT	gpgpu-sim/gpu-sim.cc	/^#define  ICNT /;"	d	file:
ICNT_RC_FAIL	gpgpu-sim/stats.h	/^   ICNT_RC_FAIL,$/;"	e	enum:mem_stage_stall_type
ICNT_WRAPPER_H	gpgpu-sim/icnt_wrapper.h	/^#define ICNT_WRAPPER_H$/;"	d
ICP	gpuwattch/gpgpu_sim_wrapper.cc	/^   ICP,$/;"	e	enum:pwr_cmp_t	file:
IC_H	gpuwattch/XML_Parse.h	/^   IC_H,$/;"	e	enum:perf_count_t
IC_M	gpuwattch/XML_Parse.h	/^   IC_M,$/;"	e	enum:perf_count_t
IDLE_COREP	gpuwattch/gpgpu_sim_wrapper.cc	/^   IDLE_COREP,$/;"	e	enum:pwr_cmp_t	file:
IDLE_CORE_N	gpuwattch/XML_Parse.h	/^   IDLE_CORE_N,$/;"	e	enum:perf_count_t
ID_OC_MEM	gpgpu-sim/shader.h	/^    ID_OC_MEM,  $/;"	e	enum:pipeline_stage_name_t
ID_OC_SFU	gpgpu-sim/shader.h	/^    ID_OC_SFU,  $/;"	e	enum:pipeline_stage_name_t
ID_OC_SP	gpgpu-sim/shader.h	/^    ID_OC_SP=0,$/;"	e	enum:pipeline_stage_name_t
ID_inst	gpuwattch/core.h	/^	inst_decoder * ID_inst;$/;"	m	class:InstFetchU	typeref:typename:inst_decoder *
ID_misc	gpuwattch/core.h	/^	inst_decoder * ID_misc;$/;"	m	class:InstFetchU	typeref:typename:inst_decoder *
ID_operand	gpuwattch/core.h	/^	inst_decoder * ID_operand;$/;"	m	class:InstFetchU	typeref:typename:inst_decoder *
IFBassoc	gpuwattch/arch_const.h	/^const int IFBassoc=0;\/\/In Niagara it is still fully associ$/;"	v	typeref:typename:const int
IFBblocksize	gpuwattch/arch_const.h	/^const int IFBblocksize=4;$/;"	v	typeref:typename:const int
IFBsize	gpuwattch/arch_const.h	/^const int IFBsize=128;\/\/$/;"	v	typeref:typename:const int
IFU_duty_cycle	gpuwattch/XML_Parse.h	/^	double IFU_duty_cycle ;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
IFU_duty_cycle	gpuwattch/basic_components.h	/^	double IFU_duty_cycle,BR_duty_cycle,LSU_duty_cycle,MemManU_I_duty_cycle,$/;"	m	class:CoreDynParam	typeref:typename:double
INCLUDES	gpuwattch/cacti/cacti.mk	/^INCLUDES       = -I \/usr\/include\/python2.4 -I \/usr\/lib\/python2.4\/config$/;"	m
INCPATH	intersim2/Makefile	/^INCPATH = -I. -Iarbiters -Iallocators -Irouters -Inetworks -Ipower$/;"	m
INCS	gpuwattch/cacti/cacti.mk	/^INCS = -lm$/;"	m
INCS	gpuwattch/mcpat.mk	/^INCS = -lm$/;"	m
INCS	gpuwattch/mcpatXeonCore.mk	/^INCS = -lm$/;"	m
INDENTCHAR	gpuwattch/xmlParser.cc	/^#define INDENTCHAR /;"	d	file:
INF	gpuwattch/cacti/const.h	/^#define INF /;"	d
INITIAL	intersim2/lex.yy.c	/^#define INITIAL /;"	d	file:
INPUT_WIRE_TO_INPUT_GATE_CAP_RATIO	gpuwattch/cacti/const.h	/^#define INPUT_WIRE_TO_INPUT_GATE_CAP_RATIO /;"	d
INP_BUFF_ENT	gpuwattch/cacti/highradix.h	/^    double INP_BUFF_ENT;$/;"	m	class:HighRadix	typeref:typename:double
INP_BUFF_SZ	gpuwattch/cacti/highradix.h	/^    double INP_BUFF_SZ;$/;"	m	class:HighRadix	typeref:typename:double
INSTRUCTION	gpgpu-sim/stat-tool.cc	/^   NORMAL, TEXTURE, CONSTANT, INSTRUCTION$/;"	e	enum:cache_access_logger_types	file:
INST_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_accesses::access_type
INST_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_misses::access_type
INST_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {INST_ACC_R};$/;"	e	enum:power_stat_t::get_inst_c_accesses::access_type
INST_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {INST_ACC_R};$/;"	e	enum:power_stat_t::get_inst_c_misses::access_type
INT16_MAX	intersim2/lex.yy.c	/^#define INT16_MAX /;"	d	file:
INT16_MIN	intersim2/lex.yy.c	/^#define INT16_MIN /;"	d	file:
INT32_MAX	intersim2/lex.yy.c	/^#define INT32_MAX /;"	d	file:
INT32_MIN	intersim2/lex.yy.c	/^#define INT32_MIN /;"	d	file:
INT8_MAX	intersim2/lex.yy.c	/^#define INT8_MAX /;"	d	file:
INT8_MIN	intersim2/lex.yy.c	/^#define INT8_MIN /;"	d	file:
INTEL	cuda-sim/Makefile	/^INTEL=0$/;"	m
INTERFACE	intersim2/Makefile	/^INTERFACE = interconnect_interface.cpp$/;"	m
INTERSIM	gpgpu-sim/icnt_wrapper.h	/^   INTERSIM = 1,$/;"	e	enum:network_mode
INT_DIV_OP	abstract_hardware_model.h	/^    INT_DIV_OP,$/;"	e	enum:special_operations_t
INT_MUL24_OP	abstract_hardware_model.h	/^	INT_MUL24_OP,$/;"	e	enum:special_operations_t
INT_MUL32_OP	abstract_hardware_model.h	/^	INT_MUL32_OP,$/;"	e	enum:special_operations_t
INT_MUL_OP	abstract_hardware_model.h	/^	INT_MUL_OP,$/;"	e	enum:special_operations_t
INT_OP	abstract_hardware_model.h	/^    INT_OP,$/;"	e	enum:uarch_operand_type_t
INT__OP	abstract_hardware_model.h	/^    INT__OP,$/;"	e	enum:special_operations_t
INV	gpuwattch/cacti/const.h	/^#define INV /;"	d
INVALID	gpgpu-sim/gpu-cache.h	/^    INVALID,$/;"	e	enum:cache_block_state
INV_LEAK_STACK_FACTOR	gpuwattch/cacti/const.h	/^#define INV_LEAK_STACK_FACTOR /;"	d
IOCONTROLLERS_H_	gpuwattch/iocontrollers.h	/^#define IOCONTROLLERS_H_$/;"	d
IO_buffer_size_per_channel	gpuwattch/XML_Parse.h	/^	int IO_buffer_size_per_channel;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:int
IQRouter	intersim2/routers/iq_router.cpp	/^IQRouter::IQRouter( Configuration const & config, Module *parent, $/;"	f	class:IQRouter
IQRouter	intersim2/routers/iq_router.hpp	/^class IQRouter : public Router {$/;"	c
IRF	gpuwattch/core.h	/^	ArrayST * IRF;$/;"	m	class:RegFU	typeref:typename:ArrayST *
IS_CROSSBAR	gpuwattch/cacti/const.h	/^#define IS_CROSSBAR /;"	d
I_g_on_n	gpuwattch/cacti/parameter.h	/^    double I_g_on_n;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
I_g_on_p	gpuwattch/cacti/parameter.h	/^    double I_g_on_p;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
I_off_n	gpuwattch/cacti/parameter.h	/^    double I_off_n;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
I_off_p	gpuwattch/cacti/parameter.h	/^    double I_off_p;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
I_on_n	gpuwattch/cacti/parameter.h	/^    double I_on_n;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
I_on_p	gpuwattch/cacti/parameter.h	/^    double I_on_p;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
IdleCoreEnergy	gpuwattch/core.h	/^	double IdleCoreEnergy;$/;"	m	class:Core	typeref:typename:double
IdlePower_PerCore	gpuwattch/core.h	/^	double IdlePower_PerCore;$/;"	m	class:Core	typeref:typename:double
IncrWaiting	intersim2/routers/event_router.cpp	/^void EventNextVCState::IncrWaiting( int vc, int w_input, int w_vc )$/;"	f	class:EventNextVCState	typeref:typename:void
Init	intersim2/gputrafficmanager.cpp	/^void GPUTrafficManager::Init()$/;"	f	class:GPUTrafficManager	typeref:typename:void
Init	intersim2/interconnect_interface.cpp	/^void InterconnectInterface::Init()$/;"	f	class:InterconnectInterface	typeref:typename:void
InitializeRoutingMap	intersim2/routefunc.cpp	/^void InitializeRoutingMap( const Configuration & config )$/;"	f	typeref:typename:void
InjectionProcess	intersim2/injection.cpp	/^InjectionProcess::InjectionProcess(int nodes, double rate)$/;"	f	class:InjectionProcess
InjectionProcess	intersim2/injection.hpp	/^class InjectionProcess {$/;"	c
Inorder	gpuwattch/basic_components.h	/^	Inorder$/;"	e	enum:Core_type
Input	intersim2/config_utils.cpp	/^int Configuration::Input(char * line, int max_size)$/;"	f	class:Configuration	typeref:typename:int
InputAssigned	intersim2/allocators/allocator.cpp	/^int Allocator::InputAssigned( int out ) const$/;"	f	class:Allocator	typeref:typename:int
InputHasRequests	intersim2/allocators/allocator.cpp	/^bool DenseAllocator::InputHasRequests( int in ) const$/;"	f	class:DenseAllocator	typeref:typename:bool
InputHasRequests	intersim2/allocators/allocator.cpp	/^bool SparseAllocator::InputHasRequests( int in ) const$/;"	f	class:SparseAllocator	typeref:typename:bool
InputParameter	gpuwattch/cacti/cacti_interface.h	/^class InputParameter$/;"	c
InputParameter	gpuwattch/cacti/io.cc	/^InputParameter::InputParameter()$/;"	f	class:InputParameter
InsertRandomFaults	intersim2/networks/anynet.hpp	/^  void InsertRandomFaults( const Configuration &config ){}$/;"	f	class:AnyNet	typeref:typename:void
InsertRandomFaults	intersim2/networks/dragonfly.cpp	/^void DragonFlyNew::InsertRandomFaults( const Configuration &config )$/;"	f	class:DragonFlyNew	typeref:typename:void
InsertRandomFaults	intersim2/networks/flatfly_onchip.cpp	/^void FlatFlyOnChip::InsertRandomFaults( const Configuration &config )$/;"	f	class:FlatFlyOnChip	typeref:typename:void
InsertRandomFaults	intersim2/networks/kncube.cpp	/^void KNCube::InsertRandomFaults( const Configuration &config )$/;"	f	class:KNCube	typeref:typename:void
InsertRandomFaults	intersim2/networks/network.cpp	/^void Network::InsertRandomFaults( const Configuration &config )$/;"	f	class:Network	typeref:typename:void
InstCache	gpuwattch/array.h	/^  InstCache(){caches=0;missb=0;ifb=0;prefetchb=0;};$/;"	f	class:InstCache
InstCache	gpuwattch/array.h	/^class InstCache :public Component{$/;"	c
InstFetchU	gpuwattch/core.cc	/^InstFetchU::InstFetchU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, con/;"	f	class:InstFetchU
InstFetchU	gpuwattch/core.h	/^class InstFetchU :public Component {$/;"	c
InterconnectInterface	intersim2/interconnect_interface.cpp	/^InterconnectInterface::InterconnectInterface()$/;"	f	class:InterconnectInterface
InterconnectInterface	intersim2/interconnect_interface.hpp	/^class InterconnectInterface {$/;"	c
InterconnectType	gpuwattch/cacti/parameter.h	/^    InterconnectType(): pitch(0), R_per_um(0), C_per_um(0) { };$/;"	f	class:TechnologyParameter::InterconnectType
InterconnectType	gpuwattch/cacti/parameter.h	/^  class InterconnectType$/;"	c	class:TechnologyParameter
IntersimConfig	intersim2/intersim_config.cpp	/^IntersimConfig::IntersimConfig()$/;"	f	class:IntersimConfig
IntersimConfig	intersim2/intersim_config.hpp	/^class IntersimConfig : public BookSimConfig {$/;"	c
Invalid_wtype	gpuwattch/cacti/cacti_interface.h	/^    Invalid_wtype$/;"	e	enum:Wire_type
IoffN	intersim2/power/power_module.hpp	/^  double IoffN  ;            \/\/ [A\/um]$/;"	m	class:Power_Module	typeref:typename:double
IoffP	intersim2/power/power_module.hpp	/^  double IoffP  ;            \/\/ [A\/um]$/;"	m	class:Power_Module	typeref:typename:double
IoffSRAM	intersim2/power/power_module.hpp	/^  double IoffSRAM;  $/;"	m	class:Power_Module	typeref:typename:double
IsAvailableFor	intersim2/buffer_state.hpp	/^  inline bool IsAvailableFor( int vc = 0 ) const {$/;"	f	class:BufferState	typeref:typename:bool
IsEmptyFor	intersim2/buffer_state.hpp	/^  inline bool IsEmptyFor(int vc = 0) const {$/;"	f	class:BufferState	typeref:typename:bool
IsFaultyOutput	intersim2/routers/router.cpp	/^bool Router::IsFaultyOutput( int c ) const$/;"	f	class:Router	typeref:typename:bool
IsFull	intersim2/buffer_state.hpp	/^  inline bool IsFull() const {$/;"	f	class:BufferState	typeref:typename:bool
IsFullFor	intersim2/buffer_state.cpp	/^bool BufferState::FeedbackSharedBufferPolicy::IsFullFor(int vc) const$/;"	f	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:bool
IsFullFor	intersim2/buffer_state.cpp	/^bool BufferState::LimitedSharedBufferPolicy::IsFullFor(int vc) const$/;"	f	class:BufferState::LimitedSharedBufferPolicy	typeref:typename:bool
IsFullFor	intersim2/buffer_state.cpp	/^bool BufferState::PrivateBufferPolicy::IsFullFor(int vc) const$/;"	f	class:BufferState::PrivateBufferPolicy	typeref:typename:bool
IsFullFor	intersim2/buffer_state.cpp	/^bool BufferState::SharedBufferPolicy::IsFullFor(int vc) const$/;"	f	class:BufferState::SharedBufferPolicy	typeref:typename:bool
IsFullFor	intersim2/buffer_state.hpp	/^  inline bool IsFullFor( int vc = 0 ) const {$/;"	f	class:BufferState	typeref:typename:bool
IsInputWaiting	intersim2/routers/event_router.cpp	/^bool EventNextVCState::IsInputWaiting( int vc, int w_input, int w_vc ) const$/;"	f	class:EventNextVCState	typeref:typename:bool
IsWaiting	intersim2/routers/event_router.cpp	/^bool EventNextVCState::IsWaiting( int vc ) const$/;"	f	class:EventNextVCState	typeref:typename:bool
IsWatched	intersim2/buffer.hpp	/^  inline bool IsWatched( int vc ) const$/;"	f	class:Buffer	typeref:typename:bool
IsWatched	intersim2/vc.cpp	/^bool VC::IsWatched( ) const$/;"	f	class:VC	typeref:typename:bool
Ishort_ckt	gpuwattch/cacti/wire.cc	/^#define Ishort_ckt /;"	d	file:
Iw_height	gpuwattch/core.h	/^	double Iw_height, fp_Iw_height,ROB_height;$/;"	m	class:SchedulerU	typeref:typename:double
K	intersim2/power/power_module.hpp	/^  double K;$/;"	m	struct:wire	typeref:typename:double
KK	intersim2/rng-double.c	/^#define KK /;"	d	file:
KK	intersim2/rng.c	/^#define KK /;"	d	file:
KNCube	intersim2/networks/kncube.cpp	/^KNCube::KNCube( const Configuration &config, const string & name, bool mesh ) :$/;"	f	class:KNCube
KNCube	intersim2/networks/kncube.hpp	/^class KNCube : public Network {$/;"	c
KNFly	intersim2/networks/fly.cpp	/^KNFly::KNFly( const Configuration &config, const string & name ) :$/;"	f	class:KNFly
KNFly	intersim2/networks/fly.hpp	/^class KNFly : public Network {$/;"	c
L	intersim2/power/power_module.hpp	/^  double L;$/;"	m	struct:wire	typeref:typename:double
L1Directory	gpuwattch/XML_Parse.h	/^	system_L1Directory L1Directory[64];$/;"	m	struct:__anon6448b92c1208	typeref:typename:system_L1Directory[64]
L1Directory	gpuwattch/basic_components.h	/^    L1Directory,$/;"	e	enum:cache_level
L1_WRBK_ACC	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	e	enum:power_stat_t::get_l2_write_accesses::access_type
L1_WRBK_ACC	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	e	enum:power_stat_t::get_l2_write_misses::access_type
L1_localBPT	gpuwattch/core.h	/^	ArrayST * L1_localBPT;$/;"	m	class:BranchPredictor	typeref:typename:ArrayST *
L1_property	gpuwattch/XML_Parse.h	/^	int L1_property;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
L1_property	gpuwattch/arch_const.h	/^const int			L1_property		=	0; \/\/private 0; coherent 1, shared 2.$/;"	v	typeref:typename:const int
L2	gpgpu-sim/gpu-sim.cc	/^#define  L2 /;"	d	file:
L2	gpuwattch/XML_Parse.h	/^	system_L2 L2[64];$/;"	m	struct:__anon6448b92c1208	typeref:typename:system_L2[64]
L2	gpuwattch/basic_components.h	/^    L2,$/;"	e	enum:cache_level
L2CP	gpuwattch/gpgpu_sim_wrapper.cc	/^   L2CP,$/;"	e	enum:pwr_cmp_t	file:
L2Directory	gpuwattch/XML_Parse.h	/^	system_L2Directory L2Directory[64];$/;"	m	struct:__anon6448b92c1208	typeref:typename:system_L2Directory[64]
L2Directory	gpuwattch/basic_components.h	/^    L2Directory$/;"	e	enum:cache_level
L2Tot	gpuwattch/sharedcache.h	/^    Component L2Tot, cc, cc1, ccTot;$/;"	m	class:CCdir	typeref:typename:Component
L2_L2tocblength	gpgpu-sim/mem_latency_stat.h	/^   unsigned int *L2_L2tocblength;$/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
L2_L2todramlength	gpgpu-sim/mem_latency_stat.h	/^   unsigned int *L2_L2todramlength;$/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
L2_RH	gpuwattch/XML_Parse.h	/^   L2_RH,$/;"	e	enum:perf_count_t
L2_RM	gpuwattch/XML_Parse.h	/^   L2_RM,$/;"	e	enum:perf_count_t
L2_WH	gpuwattch/XML_Parse.h	/^   L2_WH,$/;"	e	enum:perf_count_t
L2_WM	gpuwattch/XML_Parse.h	/^   L2_WM,$/;"	e	enum:perf_count_t
L2_cbtoL2length	gpgpu-sim/mem_latency_stat.h	/^   unsigned int *L2_cbtoL2length;$/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
L2_cbtoL2writelength	gpgpu-sim/mem_latency_stat.h	/^   unsigned int *L2_cbtoL2writelength;$/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
L2_config	gpuwattch/XML_Parse.h	/^	double L2_config[20];$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double[20]
L2_dram_queue_empty	gpgpu-sim/l2cache.cc	/^bool memory_sub_partition::L2_dram_queue_empty() const$/;"	f	class:memory_sub_partition	typeref:typename:bool
L2_dram_queue_pop	gpgpu-sim/l2cache.cc	/^void memory_sub_partition::L2_dram_queue_pop() $/;"	f	class:memory_sub_partition	typeref:class:memory_sub_partition::L2_dram_queue_top void
L2_dram_queue_top	gpgpu-sim/l2cache.cc	/^class mem_fetch* memory_sub_partition::L2_dram_queue_top() const$/;"	c	class:memory_sub_partition	file:
L2_dramtoL2length	gpgpu-sim/mem_latency_stat.h	/^   unsigned int *L2_dramtoL2length;$/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
L2_dramtoL2writelength	gpgpu-sim/mem_latency_stat.h	/^   unsigned int *L2_dramtoL2writelength;$/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
L2_localBPT	gpuwattch/core.h	/^	ArrayST * L2_localBPT;$/;"	m	class:BranchPredictor	typeref:typename:ArrayST *
L2_property	gpuwattch/XML_Parse.h	/^	int L2_property;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
L2_property	gpuwattch/arch_const.h	/^const int		 	L2_property		=	2;$/;"	v	typeref:typename:const int
L2dramout	gpgpu-sim/l2cache.h	/^   class mem_fetch *L2dramout; $/;"	m	class:memory_sub_partition	typeref:class:mem_fetch *
L2interface	gpgpu-sim/l2cache.h	/^    L2interface( memory_sub_partition *unit ) { m_unit=unit; }$/;"	f	class:L2interface
L2interface	gpgpu-sim/l2cache.h	/^class L2interface : public mem_fetch_interface {$/;"	c
L3	gpuwattch/XML_Parse.h	/^	system_L3 L3[64];$/;"	m	struct:__anon6448b92c1208	typeref:typename:system_L3[64]
L3	gpuwattch/basic_components.h	/^    L3,$/;"	e	enum:cache_level
L3_config	gpuwattch/XML_Parse.h	/^	double L3_config[20];$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double[20]
L3_property	gpuwattch/XML_Parse.h	/^	int L3_property;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
L3_property	gpuwattch/arch_const.h	/^const bool		    L3_property		= 	2;$/;"	v	typeref:typename:const bool
LAMBDA	intersim2/power/power_module.hpp	/^  double LAMBDA  ;       \/\/ [um\/LAMBDA]$/;"	m	class:Power_Module	typeref:typename:double
LANEID_REG	cuda-sim/opcodes.h	/^   LANEID_REG,$/;"	e	enum:special_regs
LANEMASK_EQ_REG	cuda-sim/opcodes.h	/^   LANEMASK_EQ_REG,$/;"	e	enum:special_regs
LANEMASK_GE_REG	cuda-sim/opcodes.h	/^   LANEMASK_GE_REG,$/;"	e	enum:special_regs
LANEMASK_GT_REG	cuda-sim/opcodes.h	/^   LANEMASK_GT_REG,$/;"	e	enum:special_regs
LANEMASK_LE_REG	cuda-sim/opcodes.h	/^   LANEMASK_LE_REG,$/;"	e	enum:special_regs
LANEMASK_LT_REG	cuda-sim/opcodes.h	/^   LANEMASK_LT_REG,$/;"	e	enum:special_regs
LATCH_DELAY	gpuwattch/cacti/nuca.cc	/^#define LATCH_DELAY /;"	d	file:
LEAKAGE_REDUCTION_DUE_TO_LONG_CHANNEL_HP_TRANSISTORS_FACTOR	gpuwattch/cacti/const.h	/^#define LEAKAGE_REDUCTION_DUE_TO_LONG_CHANNEL_HP_TRANSISTORS_FACTOR /;"	d
LENGTH_INTERCONNECT_FROM_BANK_TO_CROSSBAR	gpuwattch/cacti/const.h	/^#define LENGTH_INTERCONNECT_FROM_BANK_TO_CROSSBAR /;"	d
LENSTR	gpuwattch/xmlParser.cc	/^#define LENSTR(/;"	d	file:
LEX	intersim2/Makefile	/^LEX = flex$/;"	m
LEX_OBJS	intersim2/Makefile	/^LEX_OBJS  = ${OBJDIR}\/lex.yy.o$/;"	m
LFSTSize	gpuwattch/arch_const.h	/^const int LFSTSize=1024;$/;"	v	typeref:typename:const int
LIBS	gpuwattch/cacti/cacti.mk	/^LIBS = $/;"	m
LIBS	gpuwattch/mcpat.mk	/^LIBS = -I\/usr\/lib\/ -I\/usr\/lib64\/$/;"	m
LIBS	gpuwattch/mcpatXeonCore.mk	/^LIBS = $/;"	m
LINEAR_SET_FUNCTION	gpgpu-sim/gpu-cache.h	/^    LINEAR_SET_FUNCTION,$/;"	e	enum:set_index_function
LINK_WEIGHT	intersim2/networks/anynet.cpp	/^		  LINK_WEIGHT};$/;"	e	enum:AnyNet::readFile::ParseState	file:
LL	intersim2/rng-double.c	/^#define LL /;"	d	file:
LL	intersim2/rng.c	/^#define LL /;"	d	file:
LLC_device	gpuwattch/basic_components.h	/^	LLC_device$/;"	e	enum:Device_ty
LOA	intersim2/allocators/loa.cpp	/^LOA::LOA( Module *parent, const string& name,$/;"	f	class:LOA
LOA	intersim2/allocators/loa.hpp	/^class LOA : public DenseAllocator {$/;"	c
LOAD_OP	abstract_hardware_model.h	/^   LOAD_OP,$/;"	e	enum:uarch_op_t
LOCAL_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_accesses::access_type
LOCAL_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_misses::access_type
LOCAL_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R};$/;"	e	enum:power_stat_t::get_l1d_read_accesses::access_type
LOCAL_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R};$/;"	e	enum:power_stat_t::get_l1d_read_misses::access_type
LOCAL_ACC_W	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	e	enum:power_stat_t::get_l2_write_accesses::access_type
LOCAL_ACC_W	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	e	enum:power_stat_t::get_l2_write_misses::access_type
LOCAL_ACC_W	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W};$/;"	e	enum:power_stat_t::get_l1d_write_accesses::access_type
LOCAL_ACC_W	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W};$/;"	e	enum:power_stat_t::get_l1d_write_misses::access_type
LOCAL_GENERIC_START	abstract_hardware_model.h	/^#define LOCAL_GENERIC_START /;"	d
LOCAL_MEM_SIZE_MAX	abstract_hardware_model.h	/^#define LOCAL_MEM_SIZE_MAX /;"	d
LOCAL_WB_GLOBAL_WT	gpgpu-sim/gpu-cache.h	/^    LOCAL_WB_GLOBAL_WT$/;"	e	enum:write_policy_t
LOGB2	gpgpu-sim/gpu-misc.cc	/^unsigned int LOGB2( unsigned int v ) {$/;"	f	typeref:typename:unsigned int
LOGB2_32	gpgpu-sim/addrdec.cc	/^static unsigned int LOGB2_32( unsigned int v ) $/;"	f	typeref:typename:unsigned int	file:
LOGIC_H_	gpuwattch/logic.h	/^#define LOGIC_H_$/;"	d
LQEntries	gpuwattch/arch_const.h	/^const int LQEntries=32;$/;"	v	typeref:typename:const int
LRU	gpgpu-sim/gpu-cache.h	/^    LRU,$/;"	e	enum:replacement_policy_t
LSQ	gpuwattch/core.h	/^	ArrayST * LSQ;\/\/it is actually the store queue but for inorder processors it serves as both l/;"	m	class:LoadStoreU	typeref:typename:ArrayST *
LSU_duty_cycle	gpuwattch/XML_Parse.h	/^	double LSU_duty_cycle ;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
LSU_duty_cycle	gpuwattch/basic_components.h	/^	double IFU_duty_cycle,BR_duty_cycle,LSU_duty_cycle,MemManU_I_duty_cycle,$/;"	m	class:CoreDynParam	typeref:typename:double
LSU_order	gpuwattch/XML_Parse.h	/^	char LSU_order[20];$/;"	m	struct:__anon6448b92c0708	typeref:typename:char[20]
LVDS	gpuwattch/XML_Parse.h	/^	bool LVDS;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:bool
LVDS	gpuwattch/basic_components.h	/^    bool   LVDS, withPHY;$/;"	m	class:MCParam	typeref:typename:bool
L_MEM_LD	gpgpu-sim/stats.h	/^   L_MEM_LD,$/;"	e	enum:mem_stage_access_type
L_MEM_ST	gpgpu-sim/stats.h	/^   L_MEM_ST,$/;"	e	enum:mem_stage_access_type
LastWinner	intersim2/arbiters/arbiter.hpp	/^  inline int LastWinner() const {$/;"	f	class:Arbiter	typeref:typename:int
LimitFor	intersim2/buffer_state.cpp	/^int BufferState::FeedbackSharedBufferPolicy::LimitFor(int vc) const$/;"	f	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:int
LimitFor	intersim2/buffer_state.cpp	/^int BufferState::LimitedSharedBufferPolicy::LimitFor(int vc) const$/;"	f	class:BufferState::LimitedSharedBufferPolicy	typeref:typename:int
LimitFor	intersim2/buffer_state.cpp	/^int BufferState::PrivateBufferPolicy::LimitFor(int vc) const$/;"	f	class:BufferState::PrivateBufferPolicy	typeref:typename:int
LimitFor	intersim2/buffer_state.cpp	/^int BufferState::SharedBufferPolicy::LimitFor(int vc) const$/;"	f	class:BufferState::SharedBufferPolicy	typeref:typename:int
LimitFor	intersim2/buffer_state.hpp	/^  inline int LimitFor( int vc = 0 ) const {$/;"	f	class:BufferState	typeref:typename:int
LimitedSharedBufferPolicy	intersim2/buffer_state.cpp	/^BufferState::LimitedSharedBufferPolicy::LimitedSharedBufferPolicy(Configuration const & config, /;"	f	class:BufferState::LimitedSharedBufferPolicy
LimitedSharedBufferPolicy	intersim2/buffer_state.hpp	/^  class LimitedSharedBufferPolicy : public SharedBufferPolicy {$/;"	c	class:BufferState
LoadQ	gpuwattch/core.h	/^	ArrayST * LoadQ;$/;"	m	class:LoadStoreU	typeref:typename:ArrayST *
LoadStoreU	gpuwattch/core.cc	/^LoadStoreU::LoadStoreU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, con/;"	f	class:LoadStoreU
LoadStoreU	gpuwattch/core.h	/^class LoadStoreU :public Component {$/;"	c
Low_swing	gpuwattch/cacti/cacti_interface.h	/^    Low_swing \/* differential low power wires with high area overhead *\/,$/;"	e	enum:Wire_type
M	gpuwattch/cacti/router.h	/^    double M; \/\/network load$/;"	m	class:MCPAT_Router	typeref:typename:double
M	intersim2/power/power_module.hpp	/^  double M;$/;"	m	struct:wire	typeref:typename:double
MAIN_MEM_PER_CHIP_STANDBY_CURRENT_mA	gpuwattch/cacti/const.h	/^#define MAIN_MEM_PER_CHIP_STANDBY_CURRENT_mA /;"	d
MAT_LEAKAGE_REDUCTION_DUE_TO_SLEEP_TRANSISTORS_FACTOR	gpuwattch/cacti/const.h	/^#define MAT_LEAKAGE_REDUCTION_DUE_TO_SLEEP_TRANSISTORS_FACTOR /;"	d
MAX	cuda-sim/cuda-sim.cc	/^#define MAX(/;"	d	file:
MAX	gpgpu-sim/gpu-sim.cc	/^#define MAX(/;"	d	file:
MAX	gpgpu-sim/shader.cc	/^#define MAX(/;"	d	file:
MAX	gpgpusim_entrypoint.cc	/^#define MAX(/;"	d	file:
MAX	gpuwattch/cacti/const.h	/^#define MAX(/;"	d
MAXDATAN	gpuwattch/cacti/const.h	/^const unsigned int MAXDATAN     = 512;      \/\/ maximum for Ndwl and Ndbl$/;"	v	typeref:typename:const unsigned int
MAXDATASPD	gpuwattch/cacti/const.h	/^const unsigned int MAXDATASPD   = 256;      \/\/ maximum for Nspd$/;"	v	typeref:typename:const unsigned int
MAXSUBARRAYCOLS	gpuwattch/cacti/const.h	/^#define MAXSUBARRAYCOLS /;"	d
MAXSUBARRAYROWS	gpuwattch/cacti/const.h	/^#define MAXSUBARRAYROWS /;"	d
MAXSUBARRAYS	gpuwattch/cacti/const.h	/^const unsigned int MAXSUBARRAYS = 1048576;  \/\/ maximum subarrays for data and tag arrays$/;"	v	typeref:typename:const unsigned int
MAX_ACCESSES_PER_INSN_PER_THREAD	abstract_hardware_model.h	/^const unsigned MAX_ACCESSES_PER_INSN_PER_THREAD = 8;$/;"	v	typeref:typename:const unsigned
MAX_ALU_LATENCY	gpgpu-sim/shader.h	/^    static const unsigned MAX_ALU_LATENCY = 512;$/;"	m	class:shader_core_ctx	typeref:typename:const unsigned
MAX_ALU_LATENCY	gpgpu-sim/shader.h	/^    static const unsigned MAX_ALU_LATENCY = 512;$/;"	m	class:simd_function_unit	typeref:typename:const unsigned
MAX_BARRIERS_PER_CTA	abstract_hardware_model.h	/^#define MAX_BARRIERS_PER_CTA /;"	d
MAX_CLASS_KER	cuda-sim/cuda-sim.cc	/^   #define MAX_CLASS_KER /;"	d	file:
MAX_COL_MUX	gpuwattch/cacti/const.h	/^const unsigned int MAX_COL_MUX  = 256;$/;"	v	typeref:typename:const unsigned int
MAX_CTA_PER_SHADER	abstract_hardware_model.h	/^#define MAX_CTA_PER_SHADER /;"	d
MAX_DEFAULT_CACHE_SIZE_MULTIBLIER	gpgpu-sim/gpu-cache.cc	/^#define MAX_DEFAULT_CACHE_SIZE_MULTIBLIER /;"	d	file:
MAX_INST_SIZE	cuda-sim/cuda-sim.cc	/^#define MAX_INST_SIZE /;"	d	file:
MAX_MEMORY_ACCESS_SIZE	abstract_hardware_model.h	/^const unsigned MAX_MEMORY_ACCESS_SIZE = 128;$/;"	v	typeref:typename:const unsigned
MAX_NUMBER_ARRAY_PARTITIONS	gpuwattch/cacti/const.h	/^#define MAX_NUMBER_ARRAY_PARTITIONS /;"	d
MAX_NUMBER_GATES_STAGE	gpuwattch/cacti/const.h	/^#define MAX_NUMBER_GATES_STAGE /;"	d
MAX_NUMBER_HTREE_NODES	gpuwattch/cacti/const.h	/^#define MAX_NUMBER_HTREE_NODES /;"	d
MAX_PERCENT_AWAY_FROM_ALLOTED_AREA	gpuwattch/cacti/const.h	/^#define MAX_PERCENT_AWAY_FROM_ALLOTED_AREA /;"	d
MAX_PERCENT_AWAY_FROM_ASPECT_RATIO	gpuwattch/cacti/const.h	/^#define MAX_PERCENT_AWAY_FROM_ASPECT_RATIO /;"	d
MAX_REG_OPERANDS	abstract_hardware_model.h	/^#define MAX_REG_OPERANDS /;"	d
MAX_STREAMING_MULTIPROCESSORS	abstract_hardware_model.h	/^#define MAX_STREAMING_MULTIPROCESSORS /;"	d
MAX_THREAD_PER_SM	abstract_hardware_model.h	/^#define MAX_THREAD_PER_SM /;"	d
MAX_WARP_SIZE	abstract_hardware_model.h	/^const unsigned MAX_WARP_SIZE = 32;$/;"	v	typeref:typename:const unsigned
MAX_WARP_SIZE_SIMT_STACK	abstract_hardware_model.h	/^#define MAX_WARP_SIZE_SIMT_STACK /;"	d
MAX_WIRE_SCALE	gpuwattch/cacti/highradix.cc	/^#define MAX_WIRE_SCALE /;"	d	file:
MA_TUP	abstract_hardware_model.cc	/^   #define MA_TUP(/;"	d	file:
MA_TUP	abstract_hardware_model.h	/^#define MA_TUP(/;"	d
MA_TUP_BEGIN	abstract_hardware_model.cc	/^   #define MA_TUP_BEGIN(/;"	d	file:
MA_TUP_BEGIN	abstract_hardware_model.h	/^#define MA_TUP_BEGIN(/;"	d
MA_TUP_END	abstract_hardware_model.cc	/^   #define MA_TUP_END(/;"	d	file:
MA_TUP_END	abstract_hardware_model.h	/^#define MA_TUP_END(/;"	d
MC	gpuwattch/basic_components.h	/^	MC,    \/\/memory controller$/;"	e	enum:MemoryCtrl_type
MCBackend	gpuwattch/memoryctrl.cc	/^MCBackend::MCBackend(InputParameter* interface_ip_, const MCParam & mcp_, enum MemoryCtrl_type m/;"	f	class:MCBackend
MCBackend	gpuwattch/memoryctrl.h	/^class MCBackend : public Component {$/;"	c
MCFrontEnd	gpuwattch/memoryctrl.cc	/^MCFrontEnd::MCFrontEnd(ParseXML *XML_interface,InputParameter* interface_ip_, const MCParam & mc/;"	f	class:MCFrontEnd
MCFrontEnd	gpuwattch/memoryctrl.h	/^class MCFrontEnd : public Component {$/;"	c
MCP	gpuwattch/gpgpu_sim_wrapper.cc	/^   MCP,$/;"	e	enum:pwr_cmp_t	file:
MCPAT_Arbiter	gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::MCPAT_Arbiter($/;"	f	class:MCPAT_Arbiter
MCPAT_Arbiter	gpuwattch/cacti/arbiter.h	/^class MCPAT_Arbiter : public Component$/;"	c
MCPAT_Router	gpuwattch/cacti/router.cc	/^MCPAT_Router::MCPAT_Router($/;"	f	class:MCPAT_Router
MCPAT_Router	gpuwattch/cacti/router.h	/^class MCPAT_Router : public Component$/;"	c
MCPHY	gpuwattch/memoryctrl.cc	/^MCPHY::MCPHY(InputParameter* interface_ip_, const MCParam & mcp_, enum MemoryCtrl_type mc_type_)$/;"	f	class:MCPHY
MCPHY	gpuwattch/memoryctrl.h	/^class MCPHY : public Component {$/;"	c
MCParam	gpuwattch/basic_components.h	/^	MCParam(){};$/;"	f	class:MCParam
MCParam	gpuwattch/basic_components.h	/^class MCParam {$/;"	c
MC_PARTITION_INCLUDED	gpgpu-sim/l2cache.h	/^#define MC_PARTITION_INCLUDED$/;"	d
MC_arb	gpuwattch/memoryctrl.h	/^	selection_logic * MC_arb;$/;"	m	class:MCFrontEnd	typeref:typename:selection_logic *
MEMORYCTRL_H_	gpuwattch/memoryctrl.h	/^#define MEMORYCTRL_H_$/;"	d
MEMORYINCREASE	gpuwattch/xmlParser.cc	/^#define MEMORYINCREASE /;"	d	file:
MEMORY_BARRIER_OP	abstract_hardware_model.h	/^   MEMORY_BARRIER_OP,$/;"	e	enum:uarch_op_t
MEMPART_DPRINTF	gpgpu-sim/l2cache_trace.h	/^#define MEMPART_DPRINTF(/;"	d
MEMPART_DTRACE	gpgpu-sim/l2cache_trace.h	/^#define MEMPART_DTRACE(/;"	d
MEMPART_PRINT_STR	gpgpu-sim/l2cache_trace.h	/^#define MEMPART_PRINT_STR /;"	d
MEM_ACCESS_TYPE_TUP_DEF	abstract_hardware_model.h	/^#define MEM_ACCESS_TYPE_TUP_DEF /;"	d
MEM_BLOCK_SIZE	cuda-sim/memory.h	/^#define MEM_BLOCK_SIZE /;"	d
MEM_CUS	gpgpu-sim/shader.cc	/^    enum { SP_CUS, SFU_CUS, MEM_CUS, GEN_CUS };$/;"	e	enum:shader_core_ctx::shader_core_ctx::__anona80340180103	file:
MEM_FETCH_H	gpgpu-sim/mem_fetch.h	/^#define MEM_FETCH_H$/;"	d
MEM_LATENCY_STAT_H	gpgpu-sim/mem_latency_stat.h	/^#define MEM_LATENCY_STAT_H$/;"	d
MEM_LATENCY_STAT_IMPL	gpgpu-sim/gpu-sim.cc	/^#define MEM_LATENCY_STAT_IMPL$/;"	d	file:
MEM_MAP_RESIZE	cuda-sim/memory.h	/^   #define MEM_MAP_RESIZE(/;"	d
MEM_PRE	gpuwattch/XML_Parse.h	/^   MEM_PRE,$/;"	e	enum:perf_count_t
MEM_RD	gpuwattch/XML_Parse.h	/^   MEM_RD,$/;"	e	enum:perf_count_t
MEM_WR	gpuwattch/XML_Parse.h	/^   MEM_WR,$/;"	e	enum:perf_count_t
MEM__OP	abstract_hardware_model.h	/^    MEM__OP$/;"	e	enum:operation_pipeline_t
MF_TUP	gpgpu-sim/mem_fetch.cc	/^#define MF_TUP(/;"	d	file:
MF_TUP	gpgpu-sim/mem_fetch.h	/^#define MF_TUP(/;"	d
MF_TUP_BEGIN	gpgpu-sim/mem_fetch.cc	/^#define MF_TUP_BEGIN(/;"	d	file:
MF_TUP_BEGIN	gpgpu-sim/mem_fetch.h	/^#define MF_TUP_BEGIN(/;"	d
MF_TUP_END	gpgpu-sim/mem_fetch.cc	/^#define MF_TUP_END(/;"	d	file:
MF_TUP_END	gpgpu-sim/mem_fetch.h	/^#define MF_TUP_END(/;"	d
MIN	gpgpu-sim/shader.cc	/^#define MIN(/;"	d	file:
MIN	gpuwattch/cacti/const.h	/^#define MIN(/;"	d
MINSUBARRAYCOLS	gpuwattch/cacti/const.h	/^#define MINSUBARRAYCOLS /;"	d
MINSUBARRAYROWS	gpuwattch/cacti/const.h	/^#define MINSUBARRAYROWS /;"	d
MIN_AREA_EFFICIENCY	gpuwattch/cacti/const.h	/^#define MIN_AREA_EFFICIENCY /;"	d
MIN_BANKSIZE	gpuwattch/cacti/nuca.cc	/^unsigned int MIN_BANKSIZE=65536;$/;"	v	typeref:typename:unsigned int
MIN_GAP_BET_P_AND_N_DIFFS	gpuwattch/cacti/parameter.h	/^  double MIN_GAP_BET_P_AND_N_DIFFS;$/;"	m	class:TechnologyParameter	typeref:typename:double
MIN_GAP_BET_SAME_TYPE_DIFFS	gpuwattch/cacti/parameter.h	/^  double MIN_GAP_BET_SAME_TYPE_DIFFS;$/;"	m	class:TechnologyParameter	typeref:typename:double
MISS	gpgpu-sim/gpu-cache.h	/^    MISS,$/;"	e	enum:cache_request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_constant_c_accesses::request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_inst_c_accesses::request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l1d_read_accesses::request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l1d_write_accesses::request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l2_read_accesses::request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l2_write_accesses::request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_texture_c_accesses::request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_constant_c_misses::request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_inst_c_misses::request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_l1d_read_misses::request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_l1d_write_misses::request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_l2_read_misses::request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_l2_write_misses::request_status
MISS	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_texture_c_misses::request_status
MM	intersim2/rng.c	/^#define MM /;"	d	file:
MODIFIED	gpgpu-sim/gpu-cache.h	/^    MODIFIED$/;"	e	enum:cache_block_state
MSHR_RC_FAIL	gpgpu-sim/stats.h	/^   MSHR_RC_FAIL,$/;"	e	enum:mem_stage_stall_type
MUL	gpuwattch/basic_components.h	/^    MUL$/;"	e	enum:FU_type
MUL_cdb_duty_cycle	gpuwattch/XML_Parse.h	/^	double MUL_cdb_duty_cycle ;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
MUL_cdb_duty_cycle	gpuwattch/basic_components.h	/^	       FPU_duty_cycle, ALU_cdb_duty_cycle,MUL_cdb_duty_cycle,$/;"	m	class:CoreDynParam	typeref:typename:double
MUL_duty_cycle	gpuwattch/XML_Parse.h	/^	double MUL_duty_cycle ;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
MUL_duty_cycle	gpuwattch/basic_components.h	/^	       MemManU_D_duty_cycle, ALU_duty_cycle,MUL_duty_cycle,$/;"	m	class:CoreDynParam	typeref:typename:double
MUL_per_core	gpuwattch/XML_Parse.h	/^	int MUL_per_core;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
MY_CAS_I	cuda-sim/instructions.cc	/^#define MY_CAS_I(/;"	d	file:
MY_DEC_I	cuda-sim/instructions.cc	/^#define MY_DEC_I(/;"	d	file:
MY_EXCH	cuda-sim/instructions.cc	/^#define MY_EXCH(/;"	d	file:
MY_INC_I	cuda-sim/instructions.cc	/^#define MY_INC_I(/;"	d	file:
MY_MAX_F	cuda-sim/instructions.cc	/^#define MY_MAX_F(/;"	d	file:
MY_MAX_I	cuda-sim/instructions.cc	/^#define MY_MAX_I(/;"	d	file:
MY_MIN_F	cuda-sim/instructions.cc	/^#define MY_MIN_F(/;"	d	file:
MY_MIN_I	cuda-sim/instructions.cc	/^#define MY_MIN_I(/;"	d	file:
M_traffic_pattern	gpuwattch/noc.h	/^	double M_traffic_pattern;$/;"	m	class:NoC	typeref:typename:double
MaskOutput	intersim2/allocators/selalloc.cpp	/^void SelAlloc::MaskOutput( int out, int mask )$/;"	f	class:SelAlloc	typeref:typename:void
Mat	gpuwattch/cacti/mat.cc	/^Mat::Mat(const DynamicParameter & dyn_p)$/;"	f	class:Mat
Mat	gpuwattch/cacti/mat.h	/^class Mat : public Component$/;"	c
Match	intersim2/arbiters/prio_arb.cpp	/^int PriorityArbiter::Match( ) const$/;"	f	class:PriorityArbiter	typeref:typename:int
MatrixArbiter	intersim2/arbiters/matrix_arb.cpp	/^MatrixArbiter::MatrixArbiter( Module *parent, const string &name, int size )$/;"	f	class:MatrixArbiter
MatrixArbiter	intersim2/arbiters/matrix_arb.hpp	/^class MatrixArbiter : public Arbiter {$/;"	c
Max	intersim2/stats.cpp	/^double Stats::Max( ) const$/;"	f	class:Stats	typeref:typename:double
MaxCredits	intersim2/routers/chaos_router.hpp	/^  virtual vector<int> MaxCredits() const { return vector<int>(); }$/;"	f	class:ChaosRouter	typeref:typename:vector<int>
MaxCredits	intersim2/routers/event_router.hpp	/^  virtual vector<int> MaxCredits() const { return vector<int>(); }$/;"	f	class:EventRouter	typeref:typename:vector<int>
MaxCredits	intersim2/routers/iq_router.cpp	/^vector<int> IQRouter::MaxCredits() const$/;"	f	class:IQRouter	typeref:typename:vector<int>
MaxSizeMatch	intersim2/allocators/maxsize.cpp	/^MaxSizeMatch::MaxSizeMatch( Module *parent, const string& name,$/;"	f	class:MaxSizeMatch
MaxSizeMatch	intersim2/allocators/maxsize.hpp	/^class MaxSizeMatch : public DenseAllocator {$/;"	c
Max_area_deviation	gpuwattch/XML_Parse.h	/^	int Max_area_deviation;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
Max_area_deviation	gpuwattch/arch_const.h	/^const double 		Max_area_deviation	=	50;$/;"	v	typeref:typename:const double
Max_dynamic_deviation	gpuwattch/arch_const.h	/^const double	    Max_dynamic_deviation	=50; \/\/New$/;"	v	typeref:typename:const double
Max_power_deviation	gpuwattch/XML_Parse.h	/^	int Max_power_deviation;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
MemManU	gpuwattch/core.cc	/^MemManU::MemManU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, const Cor/;"	f	class:MemManU
MemManU	gpuwattch/core.h	/^class MemManU :public Component {$/;"	c
MemManU_D_duty_cycle	gpuwattch/XML_Parse.h	/^	double MemManU_D_duty_cycle ;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
MemManU_D_duty_cycle	gpuwattch/basic_components.h	/^	       MemManU_D_duty_cycle, ALU_duty_cycle,MUL_duty_cycle,$/;"	m	class:CoreDynParam	typeref:typename:double
MemManU_I_duty_cycle	gpuwattch/XML_Parse.h	/^	double MemManU_I_duty_cycle;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
MemManU_I_duty_cycle	gpuwattch/basic_components.h	/^	double IFU_duty_cycle,BR_duty_cycle,LSU_duty_cycle,MemManU_I_duty_cycle,$/;"	m	class:CoreDynParam	typeref:typename:double
MemoryController	gpuwattch/memoryctrl.cc	/^MemoryController::MemoryController(ParseXML *XML_interface,InputParameter* interface_ip_, enum M/;"	f	class:MemoryController
MemoryController	gpuwattch/memoryctrl.h	/^class MemoryController : public Component {$/;"	c
MemoryCtrl_type	gpuwattch/basic_components.h	/^enum MemoryCtrl_type {$/;"	g
MemoryType	gpuwattch/cacti/parameter.h	/^  class MemoryType$/;"	c	class:TechnologyParameter
MetalPitch	intersim2/power/power_module.hpp	/^  double MetalPitch ; $/;"	m	class:Power_Module	typeref:typename:double
MhZ	gpgpu-sim/gpu-sim.h	/^#define MhZ /;"	d
Min	intersim2/stats.cpp	/^double Stats::Min( ) const$/;"	f	class:Stats	typeref:typename:double
Module	intersim2/module.cpp	/^Module::Module( Module *parent, const string& name )$/;"	f	class:Module
Module	intersim2/module.hpp	/^class Module {$/;"	c
N	intersim2/power/power_module.hpp	/^  double N;$/;"	m	struct:wire	typeref:typename:double
NAND	gpuwattch/cacti/const.h	/^#define NAND /;"	d
NAND2_LEAK_STACK_FACTOR	gpuwattch/cacti/const.h	/^#define NAND2_LEAK_STACK_FACTOR /;"	d
NAND3_LEAK_STACK_FACTOR	gpuwattch/cacti/const.h	/^#define NAND3_LEAK_STACK_FACTOR /;"	d
NCH	gpuwattch/cacti/const.h	/^#define NCH /;"	d
NCTAID_REG	cuda-sim/opcodes.h	/^   NCTAID_REG,$/;"	e	enum:special_regs
NETWORKS	intersim2/Makefile	/^NETWORKS:= $(wildcard networks\/*.cpp) $/;"	m
NIUController	gpuwattch/iocontrollers.cc	/^NIUController::NIUController(ParseXML *XML_interface,InputParameter* interface_ip_)$/;"	f	class:NIUController
NIUController	gpuwattch/iocontrollers.h	/^class NIUController : public Component {$/;"	c
NIUParam	gpuwattch/basic_components.h	/^	NIUParam(){};$/;"	f	class:NIUParam
NIUParam	gpuwattch/basic_components.h	/^class NIUParam {$/;"	c
NOCP	gpuwattch/gpgpu_sim_wrapper.cc	/^   NOCP,$/;"	e	enum:pwr_cmp_t	file:
NOC_A	gpuwattch/XML_Parse.h	/^   NOC_A,$/;"	e	enum:perf_count_t
NOC_H_	gpuwattch/noc.h	/^#define NOC_H_$/;"	d
NODE	intersim2/networks/anynet.cpp	/^  enum ParseType{NODE=0,$/;"	e	enum:AnyNet::readFile::ParseType	file:
NON_ARRAY_IDENTIFIER	cuda-sim/ptx_parser.h	/^#define NON_ARRAY_IDENTIFIER /;"	d
NON_REG_OPs	gpuwattch/XML_Parse.h	/^   NON_REG_OPs,$/;"	e	enum:perf_count_t
NOR	gpuwattch/cacti/const.h	/^#define NOR /;"	d
NOR2_LEAK_STACK_FACTOR	gpuwattch/cacti/const.h	/^#define NOR2_LEAK_STACK_FACTOR /;"	d
NORMAL	gpgpu-sim/stat-tool.cc	/^   NORMAL, TEXTURE, CONSTANT, INSTRUCTION$/;"	e	enum:cache_access_logger_types	file:
NOT_BAR	abstract_hardware_model.h	/^   NOT_BAR=-1,$/;"	e	enum:uarch_bar_t
NOT_RED	abstract_hardware_model.h	/^   NOT_RED=-1,$/;"	e	enum:uarch_red_t
NOT_TEX	abstract_hardware_model.h	/^    NOT_TEX,$/;"	e	enum:mem_operation_t
NO_ALLOC	gpgpu-sim/shader.h	/^      NO_ALLOC,$/;"	e	enum:opndcoll_rfu_t::alloc_t
NO_BRANCH_DIVERGENCE	cuda-sim/cuda-sim.h	/^#define NO_BRANCH_DIVERGENCE /;"	d
NO_OP	abstract_hardware_model.h	/^   NO_OP=-1,$/;"	e	enum:uarch_op_t
NO_OP_FLAG	gpgpu-sim/shader.h	/^#define NO_OP_FLAG /;"	d
NO_PARTIAL_WRITE	abstract_hardware_model.h	/^#define NO_PARTIAL_WRITE /;"	d
NO_RC_FAIL	gpgpu-sim/stats.h	/^   NO_RC_FAIL = 0, $/;"	e	enum:mem_stage_stall_type
NO_WRITE_ALLOCATE	gpgpu-sim/gpu-cache.h	/^	NO_WRITE_ALLOCATE,$/;"	e	enum:write_allocate_policy_t
NSMID_REG	cuda-sim/opcodes.h	/^   NSMID_REG,$/;"	e	enum:special_regs
NTHREADS	gpuwattch/cacti/cacti.mk	/^  NTHREADS = 8$/;"	m
NTHREADS	gpuwattch/mcpat.mk	/^  NTHREADS = 4$/;"	m
NTHREADS	gpuwattch/mcpatXeonCore.mk	/^  NTHREADS = 4$/;"	m
NTID_REG	cuda-sim/opcodes.h	/^   NTID_REG,$/;"	e	enum:special_regs
NTi	gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
NTi	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
NTid	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
NTn1	gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
NTn2	gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
NTod	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
NTtr	gpuwattch/cacti/arbiter.h	/^    double NTtr, PTtr;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
NTtr	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
NUM	intersim2/y.tab.c	/^    NUM = 259,$/;"	e	enum:yytokentype	file:
NUM	intersim2/y.tab.c	/^#define NUM /;"	d	file:
NUM	intersim2/y.tab.h	/^    NUM = 259,$/;"	e	enum:yytokentype
NUM	intersim2/y.tab.h	/^#define NUM /;"	d
NUMBER_INPUT_PORTS_CROSSBAR	gpuwattch/cacti/const.h	/^#define NUMBER_INPUT_PORTS_CROSSBAR /;"	d
NUMBER_INTERCONNECT_PROJECTION_TYPES	gpuwattch/cacti/const.h	/^#define NUMBER_INTERCONNECT_PROJECTION_TYPES /;"	d
NUMBER_MATS_PER_REDUNDANT_MAT	gpuwattch/cacti/const.h	/^#define NUMBER_MATS_PER_REDUNDANT_MAT /;"	d
NUMBER_OUTPUT_PORTS_CROSSBAR	gpuwattch/cacti/const.h	/^#define NUMBER_OUTPUT_PORTS_CROSSBAR /;"	d
NUMBER_PIPELINE_STAGES	gpuwattch/cacti/const.h	/^#define NUMBER_PIPELINE_STAGES /;"	d
NUMBER_SIGNALS_PER_PORT_CROSSBAR	gpuwattch/cacti/const.h	/^#define NUMBER_SIGNALS_PER_PORT_CROSSBAR /;"	d
NUMBER_STACKED_DIE_LAYERS	gpuwattch/cacti/const.h	/^#define NUMBER_STACKED_DIE_LAYERS /;"	d
NUMBER_TECH_FLAVORS	gpuwattch/cacti/const.h	/^#define NUMBER_TECH_FLAVORS /;"	d
NUMBER_WIRE_TYPES	gpuwattch/cacti/const.h	/^#define NUMBER_WIRE_TYPES /;"	d
NUM_CACHE_REQUEST_STATUS	gpgpu-sim/gpu-cache.h	/^    NUM_CACHE_REQUEST_STATUS$/;"	e	enum:cache_request_status
NUM_COMPONENTS_MODELLED	gpuwattch/gpgpu_sim_wrapper.cc	/^   NUM_COMPONENTS_MODELLED$/;"	e	enum:pwr_cmp_t	file:
NUM_CONCRETE_SCHEDULERS	gpgpu-sim/shader.h	/^    NUM_CONCRETE_SCHEDULERS$/;"	e	enum:concrete_scheduler
NUM_FLIT_TYPES	intersim2/flit.hpp	/^  const static int NUM_FLIT_TYPES = 5;$/;"	m	class:Flit	typeref:typename:const int
NUM_OPCODES	cuda-sim/opcodes.h	/^   NUM_OPCODES$/;"	e	enum:opcode_t
NUM_ORDERING	gpgpu-sim/shader.h	/^        NUM_ORDERING,$/;"	e	enum:scheduler_unit::OrderingType
NUM_PERFORMANCE_COUNTERS	gpuwattch/XML_Parse.h	/^   NUM_PERFORMANCE_COUNTERS$/;"	e	enum:perf_count_t
NUM_SIMD_MODEL	abstract_hardware_model.h	/^   NUM_SIMD_MODEL$/;"	e	enum:divergence_support_t
NUM_STAT_IDX	gpgpu-sim/power_stat.h	/^    NUM_STAT_IDX     \/\/ Total number of samples$/;"	e	enum:_stat_idx
NWARPID_REG	cuda-sim/opcodes.h	/^   NWARPID_REG,$/;"	e	enum:special_regs
N_ADDRDEC	gpgpu-sim/addrdec.h	/^      N_ADDRDEC$/;"	e	enum:linear_to_raw_address_translation::__anoncdba8aca0103
N_MEM_STAGE_ACCESS_TYPE	gpgpu-sim/stats.h	/^   N_MEM_STAGE_ACCESS_TYPE$/;"	e	enum:mem_stage_access_type
N_MEM_STAGE_STALL_TYPE	gpgpu-sim/stats.h	/^   N_MEM_STAGE_STALL_TYPE$/;"	e	enum:mem_stage_stall_type
N_NETWORK_MODE	gpgpu-sim/icnt_wrapper.h	/^   N_NETWORK_MODE$/;"	e	enum:network_mode
N_PIPELINE_STAGES	gpgpu-sim/shader.h	/^    N_PIPELINE_STAGES $/;"	e	enum:pipeline_stage_name_t
Name	intersim2/module.hpp	/^  inline const string & Name() const { return _name; }$/;"	f	class:Module	typeref:typename:const string &
Ndbl	gpuwattch/cacti/cacti_interface.h	/^  int    Ndbl;$/;"	m	class:mem_array	typeref:typename:int
Ndbl	gpuwattch/cacti/cacti_interface.h	/^  int Ndbl;$/;"	m	struct:__anon592e3c280108	typeref:typename:int
Ndbl	gpuwattch/cacti/parameter.h	/^    int Ndbl;$/;"	m	class:DynamicParameter	typeref:typename:int
Ndcm	gpuwattch/cacti/cacti_interface.h	/^  int    Ndcm;$/;"	m	class:mem_array	typeref:typename:int
Ndcm	gpuwattch/cacti/parameter.h	/^    int Ndcm;$/;"	m	class:DynamicParameter	typeref:typename:int
Ndsam_lev_1	gpuwattch/cacti/cacti_interface.h	/^  int    Ndsam_lev_1;$/;"	m	class:mem_array	typeref:typename:int
Ndsam_lev_1	gpuwattch/cacti/cacti_interface.h	/^  int Ndsam_lev_1;$/;"	m	struct:__anon592e3c280108	typeref:typename:int
Ndsam_lev_1	gpuwattch/cacti/parameter.h	/^    int Ndsam_lev_1;$/;"	m	class:DynamicParameter	typeref:typename:int
Ndsam_lev_2	gpuwattch/cacti/cacti_interface.h	/^  int    Ndsam_lev_2;$/;"	m	class:mem_array	typeref:typename:int
Ndsam_lev_2	gpuwattch/cacti/cacti_interface.h	/^  int Ndsam_lev_2;$/;"	m	struct:__anon592e3c280108	typeref:typename:int
Ndsam_lev_2	gpuwattch/cacti/parameter.h	/^    int Ndsam_lev_2;$/;"	m	class:DynamicParameter	typeref:typename:int
Ndwl	gpuwattch/cacti/cacti_interface.h	/^  int    Ndwl;$/;"	m	class:mem_array	typeref:typename:int
Ndwl	gpuwattch/cacti/cacti_interface.h	/^  int Ndwl;$/;"	m	struct:__anon592e3c280108	typeref:typename:int
Ndwl	gpuwattch/cacti/parameter.h	/^    int Ndwl;$/;"	m	class:DynamicParameter	typeref:typename:int
NeighborTrafficPattern	intersim2/traffic.cpp	/^NeighborTrafficPattern::NeighborTrafficPattern(int nodes, int k, int n, int xr)$/;"	f	class:NeighborTrafficPattern
NeighborTrafficPattern	intersim2/traffic.hpp	/^class NeighborTrafficPattern : public DigitPermutationTrafficPattern {$/;"	c
Network	intersim2/networks/network.cpp	/^Network::Network( const Configuration &config, const string & name ) :$/;"	f	class:Network
Network	intersim2/networks/network.hpp	/^class Network : public TimedModule {$/;"	c
New	intersim2/buffer_state.cpp	/^BufferState::BufferPolicy * BufferState::BufferPolicy::New(Configuration const & config, BufferS/;"	f	class:BufferState::BufferPolicy	typeref:typename:BufferState::BufferPolicy *
New	intersim2/credit.cpp	/^Credit * Credit::New() {$/;"	f	class:Credit	typeref:typename:Credit *
New	intersim2/flit.cpp	/^Flit * Flit::New() {$/;"	f	class:Flit	typeref:typename:Flit *
New	intersim2/injection.cpp	/^InjectionProcess * InjectionProcess::New(string const & inject, int nodes, $/;"	f	class:InjectionProcess	typeref:typename:InjectionProcess *
New	intersim2/interconnect_interface.cpp	/^InterconnectInterface* InterconnectInterface::New(const char* const config_file)$/;"	f	class:InterconnectInterface	typeref:typename:InterconnectInterface *
New	intersim2/networks/network.cpp	/^Network * Network::New(const Configuration & config, const string & name)$/;"	f	class:Network	typeref:typename:Network *
New	intersim2/packet_reply_info.cpp	/^PacketReplyInfo * PacketReplyInfo::New()$/;"	f	class:PacketReplyInfo	typeref:typename:PacketReplyInfo *
New	intersim2/traffic.cpp	/^TrafficPattern * TrafficPattern::New(string const & pattern, int nodes, $/;"	f	class:TrafficPattern	typeref:typename:TrafficPattern *
New	intersim2/trafficmanager.cpp	/^TrafficManager * TrafficManager::New(Configuration const & config,$/;"	f	class:TrafficManager	typeref:typename:TrafficManager *
NewAllocator	intersim2/allocators/allocator.cpp	/^Allocator *Allocator::NewAllocator( Module *parent, const string& name,$/;"	f	class:Allocator	typeref:typename:Allocator *
NewArbiter	intersim2/arbiters/arbiter.cpp	/^Arbiter *Arbiter::NewArbiter( Module *parent, const string& name,$/;"	f	class:Arbiter	typeref:typename:Arbiter *
NewRouter	intersim2/routers/router.cpp	/^Router *Router::NewRouter( const Configuration& config,$/;"	f	class:Router	typeref:typename:Router *
NextToken	gpuwattch/xmlParser.cc	/^} NextToken;$/;"	t	typeref:struct:__anon33c5d5fd0308	file:
NoC	gpuwattch/XML_Parse.h	/^    system_NoC NoC[64];$/;"	m	struct:__anon6448b92c1208	typeref:typename:system_NoC[64]
NoC	gpuwattch/noc.cc	/^NoC::NoC(ParseXML *XML_interface, int ithNoC_, InputParameter* interface_ip_, double M_traffic_p/;"	f	class:NoC
NoC	gpuwattch/noc.h	/^class NoC :public Component {$/;"	c
NoCParam	gpuwattch/basic_components.h	/^	NoCParam(){};$/;"	f	class:NoCParam
NoCParam	gpuwattch/basic_components.h	/^class NoCParam {$/;"	c
NodeToPort	intersim2/networks/cmesh.cpp	/^int CMesh::NodeToPort( int address ) {$/;"	f	class:CMesh	typeref:typename:int
NodeToRouter	intersim2/networks/cmesh.cpp	/^int CMesh::NodeToRouter( int address ) {$/;"	f	class:CMesh	typeref:typename:int
NonDir	gpuwattch/basic_components.h	/^	NonDir$/;"	e	enum:Dir_type
Nspd	gpuwattch/cacti/cacti_interface.h	/^  double Nspd;$/;"	m	class:mem_array	typeref:typename:double
Nspd	gpuwattch/cacti/cacti_interface.h	/^  double Nspd;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
Nspd	gpuwattch/cacti/parameter.h	/^    double Nspd;$/;"	m	class:DynamicParameter	typeref:typename:double
Nspd_min	gpuwattch/cacti/Ucache.h	/^  double   Nspd_min;$/;"	m	struct:calc_time_mt_wrapper_struct	typeref:typename:double
Nuca	gpuwattch/cacti/nuca.cc	/^Nuca::Nuca($/;"	f	class:Nuca
Nuca	gpuwattch/cacti/nuca.cc	/^Nuca::Nuca():deviceType(&(g_tp.peri_global))$/;"	f	class:Nuca
Nuca	gpuwattch/cacti/nuca.h	/^class Nuca : public Component$/;"	c
NumChannels	intersim2/networks/network.hpp	/^  int NumChannels() const {return _channels;}$/;"	f	class:Network	typeref:typename:int
NumClasses	intersim2/power/buffer_monitor.hpp	/^  inline int NumClasses() const {$/;"	f	class:BufferMonitor	typeref:typename:int
NumClasses	intersim2/power/switch_monitor.hpp	/^  inline int const & NumClasses() const {$/;"	f	class:SwitchMonitor	typeref:typename:int const &
NumInputRequests	intersim2/allocators/allocator.cpp	/^int DenseAllocator::NumInputRequests( int in ) const$/;"	f	class:DenseAllocator	typeref:typename:int
NumInputRequests	intersim2/allocators/allocator.cpp	/^int SparseAllocator::NumInputRequests( int in ) const$/;"	f	class:SparseAllocator	typeref:typename:int
NumInputs	intersim2/power/buffer_monitor.hpp	/^  inline int NumInputs() const {$/;"	f	class:BufferMonitor	typeref:typename:int
NumInputs	intersim2/power/switch_monitor.hpp	/^  inline int const & NumInputs() const {$/;"	f	class:SwitchMonitor	typeref:typename:int const &
NumInputs	intersim2/routers/router.hpp	/^  inline int NumInputs() const {return _inputs;}$/;"	f	class:Router	typeref:typename:int
NumNodes	intersim2/networks/network.hpp	/^  inline int NumNodes( ) const {return _nodes;}$/;"	f	class:Network	typeref:typename:int
NumOutputRequests	intersim2/allocators/allocator.cpp	/^int DenseAllocator::NumOutputRequests( int out ) const$/;"	f	class:DenseAllocator	typeref:typename:int
NumOutputRequests	intersim2/allocators/allocator.cpp	/^int SparseAllocator::NumOutputRequests( int out ) const$/;"	f	class:SparseAllocator	typeref:typename:int
NumOutputs	intersim2/power/switch_monitor.hpp	/^  inline int const & NumOutputs() const {$/;"	f	class:SwitchMonitor	typeref:typename:int const &
NumOutputs	intersim2/routers/router.hpp	/^  inline int NumOutputs() const {return _outputs;}$/;"	f	class:Router	typeref:typename:int
NumRouters	intersim2/networks/network.hpp	/^  int NumRouters() const {return _size;}$/;"	f	class:Network	typeref:typename:int
NumSamples	intersim2/stats.cpp	/^int Stats::NumSamples( ) const$/;"	f	class:Stats	typeref:typename:int
NumVCs	intersim2/outputset.cpp	/^int OutputSet::NumVCs( int output_port ) const$/;"	f	class:OutputSet	typeref:typename:int
O	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
OBJDIR	intersim2/Makefile	/^OBJDIR := $(SIM_OBJ_FILES_DIR)\/intersim2$/;"	m
OBJDIR	intersim2/Makefile	/^OBJDIR := obj$/;"	m
OBJS	Makefile	/^OBJS = $(SRCS:%.cc=$(OUTPUT_DIR)\/%.$(OEXT))$/;"	m
OBJS	cuda-sim/Makefile	/^OBJS	:= $(OUTPUT_DIR)\/ptx_parser.o $(OUTPUT_DIR)\/ptx_loader.o $(OUTPUT_DIR)\/cuda_device_print/;"	m
OBJS	gpgpu-sim/Makefile	/^OBJS = $(CSRCS:%.cc=$(OUTPUT_DIR)\/%.$(OEXT))$/;"	m
OBJS	gpuwattch/cacti/cacti.mk	/^OBJS = $(patsubst %.cc,$(OUTPUT_DIR)\/%.o,$(SRCS))$/;"	m
OBJS	gpuwattch/mcpat.mk	/^OBJS = $(patsubst %.cc,$(OUTPUT_DIR)\/%.o,$(SRCS))$/;"	m
OBJS	gpuwattch/mcpatXeonCore.mk	/^OBJS = $(patsubst %.cc,obj_$(TAG)\/%.o,$(SRCS))$/;"	m
OBJS	intersim2/Makefile	/^OBJS :=  $(LEX_OBJS) $(YACC_OBJS)\\$/;"	m
OC_EX_MEM	gpgpu-sim/shader.h	/^    OC_EX_MEM,$/;"	e	enum:pipeline_stage_name_t
OC_EX_SFU	gpgpu-sim/shader.h	/^    OC_EX_SFU,$/;"	e	enum:pipeline_stage_name_t
OC_EX_SP	gpgpu-sim/shader.h	/^    OC_EX_SP,$/;"	e	enum:pipeline_stage_name_t
ON_FILL	gpgpu-sim/gpu-cache.h	/^    ON_FILL$/;"	e	enum:allocation_policy_t
ON_MISS	gpgpu-sim/gpu-cache.h	/^    ON_MISS,$/;"	e	enum:allocation_policy_t
OOO	gpuwattch/basic_components.h	/^	OOO,$/;"	e	enum:Core_type
OPC	gpuwattch/core.h	/^	ArrayST * OPC;\/\/Operand collectors$/;"	m	class:RegFU	typeref:typename:ArrayST *
OPT	cuda-sim/Makefile	/^	OPT := -g3 -Wall  -Wno-unused-function -Wno-sign-compare$/;"	m
OPT	cuda-sim/Makefile	/^OPT	:=  -O3 -g3 -Wall -Wno-unused-function -Wno-sign-compare$/;"	m
OPT	gpuwattch/cacti/cacti.mk	/^  OPT = -O3 -msse2 -mfpmath=sse -DNTHREADS=$(NTHREADS)$/;"	m
OPT	gpuwattch/cacti/cacti.mk	/^  OPT = -ggdb -g -O0 -DNTHREADS=1  -gstabs+$/;"	m
OPT	gpuwattch/mcpat.mk	/^  OPT = -O3 -fPIC -msse2 -mfpmath=sse -DNTHREADS=$(NTHREADS) -Icacti -lz$/;"	m
OPT	gpuwattch/mcpat.mk	/^  OPT = -ggdb -fPIC -g -O0 -DNTHREADS=1 -Icacti -lz$/;"	m
OPT	gpuwattch/mcpatXeonCore.mk	/^  OPT = -O3 -msse2 -mfpmath=sse -DNTHREADS=$(NTHREADS) -Icacti$/;"	m
OPT	gpuwattch/mcpatXeonCore.mk	/^  OPT = -ggdb -g -O0 -DNTHREADS=1 -Icacti$/;"	m
OPT_BOOL	option_parser.h	/^    OPT_BOOL,$/;"	e	enum:option_dtype
OPT_CHAR	option_parser.h	/^    OPT_CHAR,$/;"	e	enum:option_dtype
OPT_CSTR	option_parser.h	/^    OPT_CSTR$/;"	e	enum:option_dtype
OPT_DOUBLE	option_parser.h	/^    OPT_DOUBLE,$/;"	e	enum:option_dtype
OPT_FLOAT	option_parser.h	/^    OPT_FLOAT,$/;"	e	enum:option_dtype
OPT_INT32	option_parser.h	/^    OPT_INT32,$/;"	e	enum:option_dtype
OPT_INT64	option_parser.h	/^    OPT_INT64,$/;"	e	enum:option_dtype
OPT_UINT32	option_parser.h	/^    OPT_UINT32,$/;"	e	enum:option_dtype
OPT_UINT64	option_parser.h	/^    OPT_UINT64,$/;"	e	enum:option_dtype
OP_DEF	cuda-sim/cuda-sim.cc	/^#define OP_DEF(/;"	d	file:
OP_DEF	cuda-sim/instructions.cc	/^#define OP_DEF(/;"	d	file:
OP_DEF	cuda-sim/opcodes.h	/^#define OP_DEF(/;"	d
ORDERED_PRIORITY_FUNC_ONLY	gpgpu-sim/shader.h	/^        ORDERED_PRIORITY_FUNC_ONLY,$/;"	e	enum:scheduler_unit::OrderingType
ORDERING_GREEDY_THEN_PRIORITY_FUNC	gpgpu-sim/shader.h	/^        ORDERING_GREEDY_THEN_PRIORITY_FUNC = 0,$/;"	e	enum:scheduler_unit::OrderingType
OR_RED	abstract_hardware_model.h	/^   OR_RED$/;"	e	enum:uarch_red_t
OTHER_OP	abstract_hardware_model.h	/^    OTHER_OP,$/;"	e	enum:special_operations_t
OUTPUT_DIR	Makefile	/^OUTPUT_DIR=$(SIM_OBJ_FILES_DIR)$/;"	m
OUTPUT_DIR	cuda-sim/Makefile	/^OUTPUT_DIR=$(SIM_OBJ_FILES_DIR)\/cuda-sim$/;"	m
OUTPUT_DIR	gpgpu-sim/Makefile	/^OUTPUT_DIR=$(SIM_OBJ_FILES_DIR)\/gpgpu-sim$/;"	m
OUTPUT_DIR	gpuwattch/cacti/cacti.mk	/^OUTPUT_DIR=$(SIM_OBJ_FILES_DIR)\/gpuwattch\/cacti$/;"	m
OUTPUT_DIR	gpuwattch/mcpat.mk	/^OUTPUT_DIR=$(SIM_OBJ_FILES_DIR)\/gpuwattch$/;"	m
Occupancy	intersim2/buffer_state.hpp	/^  inline int Occupancy() const {$/;"	f	class:BufferState	typeref:typename:int
OccupancyFor	intersim2/buffer_state.hpp	/^  inline int OccupancyFor( int vc = 0 ) const {$/;"	f	class:BufferState	typeref:typename:int
OccupancyForClass	intersim2/buffer_state.hpp	/^  inline int OccupancyForClass(int c) const {$/;"	f	class:BufferState	typeref:typename:int
OnOffInjectionProcess	intersim2/injection.cpp	/^OnOffInjectionProcess::OnOffInjectionProcess(int nodes, double rate, $/;"	f	class:OnOffInjectionProcess
OnOffInjectionProcess	intersim2/injection.hpp	/^class OnOffInjectionProcess : public InjectionProcess {$/;"	c
Optical	gpuwattch/cacti/cacti_interface.h	/^    Optical \/* optical wires *\/,$/;"	e	enum:Wire_type
OptionCollection	option_parser.cc	/^   typedef list<OptionRegistryInterface*> OptionCollection;$/;"	t	class:OptionParser	typeref:typename:list<OptionRegistryInterface * >	file:
OptionMap	option_parser.cc	/^   typedef map<string, OptionRegistryInterface*> OptionMap;$/;"	t	class:OptionParser	typeref:typename:map<string,OptionRegistryInterface * >	file:
OptionParser	option_parser.cc	/^   OptionParser() {}$/;"	f	class:OptionParser	file:
OptionParser	option_parser.cc	/^class OptionParser$/;"	c	file:
OptionRegistry	option_parser.cc	/^   OptionRegistry(const string name, const string desc, T &variable)$/;"	f	class:OptionRegistry	file:
OptionRegistry	option_parser.cc	/^class OptionRegistry : public OptionRegistryInterface $/;"	c	file:
OptionRegistryInterface	option_parser.cc	/^   OptionRegistryInterface(const string optionName, const string optionDesc) $/;"	f	class:OptionRegistryInterface	file:
OptionRegistryInterface	option_parser.cc	/^class OptionRegistryInterface $/;"	c	file:
OrderingType	gpgpu-sim/shader.h	/^    enum OrderingType $/;"	g	class:scheduler_unit
OutChannelFault	intersim2/networks/network.cpp	/^void Network::OutChannelFault( int r, int c, bool fault )$/;"	f	class:Network	typeref:typename:void
OutChannelFault	intersim2/routers/router.cpp	/^void Router::OutChannelFault( int c, bool fault )$/;"	f	class:Router	typeref:typename:void
OutStanding	intersim2/credit.cpp	/^int Credit::OutStanding(){$/;"	f	class:Credit	typeref:typename:int
OutputAssigned	intersim2/allocators/allocator.cpp	/^int Allocator::OutputAssigned( int in ) const$/;"	f	class:Allocator	typeref:typename:int
OutputEmpty	intersim2/outputset.cpp	/^bool OutputSet::OutputEmpty( int output_port ) const$/;"	f	class:OutputSet	typeref:typename:bool
OutputHasRequests	intersim2/allocators/allocator.cpp	/^bool DenseAllocator::OutputHasRequests( int out ) const$/;"	f	class:DenseAllocator	typeref:typename:bool
OutputHasRequests	intersim2/allocators/allocator.cpp	/^bool SparseAllocator::OutputHasRequests( int out ) const$/;"	f	class:SparseAllocator	typeref:typename:bool
OutputSet	intersim2/outputset.hpp	/^class OutputSet {$/;"	c
PAGE_MODE	gpuwattch/cacti/const.h	/^#define PAGE_MODE /;"	d
PCH	gpuwattch/cacti/const.h	/^#define PCH /;"	d
PCIeController	gpuwattch/iocontrollers.cc	/^PCIeController::PCIeController(ParseXML *XML_interface,InputParameter* interface_ip_)$/;"	f	class:PCIeController
PCIeController	gpuwattch/iocontrollers.h	/^class PCIeController : public Component {$/;"	c
PCIeParam	gpuwattch/basic_components.h	/^	PCIeParam(){};$/;"	f	class:PCIeParam
PCIeParam	gpuwattch/basic_components.h	/^class PCIeParam {$/;"	c
PCX_NUMBER_INPUT_PORTS_CROSSBAR	gpuwattch/arch_const.h	/^const int PCX_NUMBER_INPUT_PORTS_CROSSBAR = 8;$/;"	v	typeref:typename:const int
PCX_NUMBER_OUTPUT_PORTS_CROSSBAR	gpuwattch/arch_const.h	/^const int PCX_NUMBER_OUTPUT_PORTS_CROSSBAR = 9;$/;"	v	typeref:typename:const int
PCX_NUMBER_SIGNALS_PER_PORT_CROSSBAR	gpuwattch/arch_const.h	/^const int PCX_NUMBER_SIGNALS_PER_PORT_CROSSBAR =144;$/;"	v	typeref:typename:const int
PERMITTIVITY_FREE_SPACE	gpuwattch/cacti/const.h	/^const double PERMITTIVITY_FREE_SPACE = 8.854e-18; \/\/F\/micron$/;"	v	typeref:typename:const double
PHY	gpuwattch/memoryctrl.h	/^    MCPHY	 * PHY;$/;"	m	class:MemoryController	typeref:typename:MCPHY *
PIM	intersim2/allocators/pim.cpp	/^PIM::PIM( Module *parent, const string& name,$/;"	f	class:PIM
PIM	intersim2/allocators/pim.hpp	/^class PIM : public DenseAllocator {$/;"	c
PIPEP	gpuwattch/gpgpu_sim_wrapper.cc	/^   PIPEP,$/;"	e	enum:pwr_cmp_t	file:
PIPE_A	gpuwattch/XML_Parse.h	/^   PIPE_A,$/;"	e	enum:perf_count_t
PM_REG	cuda-sim/opcodes.h	/^   PM_REG,$/;"	e	enum:special_regs
POPC_RED	abstract_hardware_model.h	/^   POPC_RED=1,$/;"	e	enum:uarch_red_t
POST_DOMINATOR	abstract_hardware_model.h	/^   POST_DOMINATOR = 1,$/;"	e	enum:divergence_support_t
POWER	intersim2/Makefile	/^POWER:= $(wildcard power\/*.cpp)$/;"	m
POWER_FLAGS	gpgpu-sim/Makefile	/^	POWER_FLAGS = -I$(GPGPUSIM_POWER_MODEL) -DGPGPUSIM_POWER_MODEL$/;"	m
POWER_FLAGS	gpgpu-sim/Makefile	/^POWER_FLAGS=$/;"	m
POWER_INTERFACE_H_	gpgpu-sim/power_interface.h	/^#define POWER_INTERFACE_H_$/;"	d
POWER_STAT_H	gpgpu-sim/power_stat.h	/^#define POWER_STAT_H$/;"	d
PRC	gpuwattch/memoryctrl.h	/^	ArrayST * PRC;$/;"	m	class:MCFrontEnd	typeref:typename:ArrayST *
PREV_STAT_IDX	gpgpu-sim/power_stat.h	/^    PREV_STAT_IDX,           \/\/ Previous sample activity count$/;"	e	enum:_stat_idx
PRINTDW	gpuwattch/cacti/basic_circuit.h	/^    #define PRINTDW(/;"	d
PRINT_CYCLE	gpgpu-sim/dram.cc	/^int PRINT_CYCLE = 0;$/;"	v	typeref:typename:int
PRIORITIZE_MSHR_OVER_WB	gpgpu-sim/shader.cc	/^#define PRIORITIZE_MSHR_OVER_WB /;"	d	file:
PROCESSOR_H_	gpuwattch/processor.h	/^#define PROCESSOR_H_$/;"	d
PROG	intersim2/Makefile	/^PROG   := booksim$/;"	m
PROGRAM_MEM_START	gpgpu-sim/shader.cc	/^#define PROGRAM_MEM_START /;"	d	file:
PRT	gpuwattch/memoryctrl.h	/^	ArrayST * PRT;$/;"	m	class:MCFrontEnd	typeref:typename:ArrayST *
PRT_entries	gpuwattch/XML_Parse.h	/^	int PRT_entries;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:int
PTX_DEBUG_INCLUDED	debug.h	/^#define PTX_DEBUG_INCLUDED$/;"	d
PTX_LOADER_H_INCLUDED	cuda-sim/ptx_loader.h	/^#define PTX_LOADER_H_INCLUDED$/;"	d
PTX_PARSE_DPRINTF	cuda-sim/ptx_parser.cc	/^#define PTX_PARSE_DPRINTF(/;"	d	file:
PTi	gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
PTi	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
PTid	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
PTn1	gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
PTn2	gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
PTod	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
PTtr	gpuwattch/cacti/arbiter.h	/^    double NTtr, PTtr;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
PTtr	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
PYTHONLIB_OBJS	gpuwattch/cacti/cacti.mk	/^PYTHONLIB_OBJS = $(patsubst %.cc,%.o,$(PYTHONLIB_SRCS)) $/;"	m
PYTHONLIB_SRCS	gpuwattch/cacti/cacti.mk	/^PYTHONLIB_SRCS = $(patsubst main.cc, ,$(SRCS)) $(OUTPUT_DIR)\/cacti_wrap.cc$/;"	m
PacketReplyInfo	intersim2/packet_reply_info.hpp	/^  PacketReplyInfo() {}$/;"	f	class:PacketReplyInfo
PacketReplyInfo	intersim2/packet_reply_info.hpp	/^class PacketReplyInfo {$/;"	c
ParseArgs	intersim2/config_utils.cpp	/^bool ParseArgs(Configuration * cf, int argc, char * * argv)$/;"	f	typeref:typename:bool
ParseCommandLine	option_parser.cc	/^   void ParseCommandLine(int argc, const char * const argv[])$/;"	f	class:OptionParser	typeref:typename:void	file:
ParseError	intersim2/config_utils.cpp	/^void Configuration::ParseError(string const & msg, unsigned int lineno) const$/;"	f	class:Configuration	typeref:typename:void
ParseFile	intersim2/config_utils.cpp	/^void Configuration::ParseFile(string const & filename)$/;"	f	class:Configuration	typeref:typename:void
ParseFile	option_parser.cc	/^   void ParseFile(const char *filename) {$/;"	f	class:OptionParser	typeref:typename:void	file:
ParseState	intersim2/networks/anynet.cpp	/^  enum ParseState{HEAD_TYPE=0,$/;"	g	function:AnyNet::readFile	file:
ParseString	intersim2/config_utils.cpp	/^void Configuration::ParseString(string const & str)$/;"	f	class:Configuration	typeref:typename:void
ParseString	option_parser.cc	/^   void ParseString(string inputString, const string delimiters = string(" ;")) {$/;"	f	class:OptionParser	typeref:typename:void	file:
ParseStringStream	option_parser.cc	/^   void ParseStringStream(stringstream &args) {$/;"	f	class:OptionParser	typeref:typename:void	file:
ParseType	intersim2/networks/anynet.cpp	/^  enum ParseType{NODE=0,$/;"	g	function:AnyNet::readFile	file:
ParseXML	gpuwattch/XML_Parse.h	/^class ParseXML$/;"	c
ParseXMLElement	gpuwattch/xmlParser.cc	/^int XMLNode::ParseXMLElement(void *pa)$/;"	f	class:XMLNode	typeref:typename:int
PermutationTrafficPattern	intersim2/traffic.cpp	/^PermutationTrafficPattern::PermutationTrafficPattern(int nodes)$/;"	f	class:PermutationTrafficPattern
PermutationTrafficPattern	intersim2/traffic.hpp	/^class PermutationTrafficPattern : public TrafficPattern {$/;"	c
PhysicalRegFile	gpuwattch/basic_components.h	/^    PhysicalRegFile,$/;"	e	enum:Scheduler_type
Pipeline	gpuwattch/logic.cc	/^Pipeline::Pipeline($/;"	f	class:Pipeline
Pipeline	gpuwattch/logic.h	/^class Pipeline : public Component{$/;"	c
PipelineFIFO	intersim2/pipefifo.hpp	/^template<class T> PipelineFIFO<T>::PipelineFIFO( Module *parent, $/;"	f	class:PipelineFIFO
PipelineFIFO	intersim2/pipefifo.hpp	/^template<class T> class PipelineFIFO : public Module {$/;"	c
Pipeline_energy	gpuwattch/core.h	/^	double Pipeline_energy;$/;"	m	class:Core	typeref:typename:double
Pop	intersim2/interconnect_interface.cpp	/^void* InterconnectInterface::Pop(unsigned deviceID)$/;"	f	class:InterconnectInterface	typeref:typename:void *
PopPacket	intersim2/interconnect_interface.cpp	/^void* InterconnectInterface::_BoundaryBufferItem::PopPacket()$/;"	f	class:InterconnectInterface::_BoundaryBufferItem	typeref:typename:void *
PopWaiting	intersim2/routers/event_router.cpp	/^EventNextVCState::tWaiting *EventNextVCState::PopWaiting( int vc )$/;"	f	class:EventNextVCState	typeref:typename:EventNextVCState::tWaiting *
PosFromID	intersim2/networks/qtree.cpp	/^int QTree::PosFromID( int id )$/;"	f	class:QTree	typeref:typename:int
PowerConfig	intersim2/booksim_config.cpp	/^PowerConfig::PowerConfig( )$/;"	f	class:PowerConfig
PowerConfig	intersim2/booksim_config.hpp	/^class PowerConfig : public Configuration {$/;"	c
Power_Module	intersim2/power/power_module.cpp	/^Power_Module::Power_Module(Network * n , const Configuration &config)$/;"	f	class:Power_Module
Power_Module	intersim2/power/power_module.hpp	/^class Power_Module : public Module {$/;"	c
Predec	gpuwattch/cacti/decoder.cc	/^Predec::Predec($/;"	f	class:Predec
Predec	gpuwattch/cacti/decoder.h	/^class Predec : public Component$/;"	c
PredecBlk	gpuwattch/cacti/decoder.cc	/^PredecBlk::PredecBlk($/;"	f	class:PredecBlk
PredecBlk	gpuwattch/cacti/decoder.h	/^class PredecBlk : public Component$/;"	c
PredecBlkDrv	gpuwattch/cacti/decoder.cc	/^PredecBlkDrv::PredecBlkDrv($/;"	f	class:PredecBlkDrv
PredecBlkDrv	gpuwattch/cacti/decoder.h	/^class PredecBlkDrv : public Component$/;"	c
Print	option_parser.cc	/^   void Print(FILE *fout)$/;"	f	class:OptionParser	typeref:typename:void	file:
PrintGrants	intersim2/allocators/allocator.cpp	/^void Allocator::PrintGrants( ostream * os ) const$/;"	f	class:Allocator	typeref:typename:void
PrintRequests	intersim2/allocators/allocator.cpp	/^void DenseAllocator::PrintRequests( ostream * os ) const$/;"	f	class:DenseAllocator	typeref:typename:void
PrintRequests	intersim2/allocators/allocator.cpp	/^void SparseAllocator::PrintRequests( ostream * os ) const$/;"	f	class:SparseAllocator	typeref:typename:void
PrintRequests	intersim2/allocators/selalloc.cpp	/^void SelAlloc::PrintRequests( ostream * os ) const$/;"	f	class:SelAlloc	typeref:typename:void
PrintState	intersim2/arbiters/matrix_arb.cpp	/^void MatrixArbiter::PrintState() const  {$/;"	f	class:MatrixArbiter	typeref:typename:void
PrintState	intersim2/arbiters/roundrobin_arb.cpp	/^void RoundRobinArbiter::PrintState() const  {$/;"	f	class:RoundRobinArbiter	typeref:typename:void
PrintState	intersim2/arbiters/tree_arb.cpp	/^void TreeArbiter::PrintState() const  {$/;"	f	class:TreeArbiter	typeref:typename:void
PriorityArbiter	intersim2/arbiters/prio_arb.cpp	/^PriorityArbiter::PriorityArbiter( const Configuration &config,$/;"	f	class:PriorityArbiter
PriorityArbiter	intersim2/arbiters/prio_arb.hpp	/^class PriorityArbiter : public Module {$/;"	c
PrivateBufferPolicy	intersim2/buffer_state.cpp	/^BufferState::PrivateBufferPolicy::PrivateBufferPolicy(Configuration const & config, BufferState /;"	f	class:BufferState::PrivateBufferPolicy
PrivateBufferPolicy	intersim2/buffer_state.hpp	/^  class PrivateBufferPolicy : public BufferPolicy {$/;"	c	class:BufferState
Private_L2	gpuwattch/XML_Parse.h	/^	bool Private_L2;$/;"	m	struct:__anon6448b92c1208	typeref:typename:bool
ProcParam	gpuwattch/basic_components.h	/^	ProcParam(){};$/;"	f	class:ProcParam
ProcParam	gpuwattch/basic_components.h	/^class ProcParam {$/;"	c
ProcessCredit	intersim2/buffer_state.cpp	/^void BufferState::ProcessCredit( Credit const * const c )$/;"	f	class:BufferState	typeref:typename:void
ProcessFreeSlot	intersim2/buffer_state.cpp	/^void BufferState::SharedBufferPolicy::ProcessFreeSlot(int vc)$/;"	f	class:BufferState::SharedBufferPolicy	typeref:typename:void
Processor	gpuwattch/processor.cc	/^Processor::Processor(ParseXML *XML_interface)$/;"	f	class:Processor
Processor	gpuwattch/processor.h	/^class Processor : public Component$/;"	c
Push	intersim2/interconnect_interface.cpp	/^void InterconnectInterface::Push(unsigned input_deviceID, unsigned output_deviceID, void *data, /;"	f	class:InterconnectInterface	typeref:typename:void
PushFlitData	intersim2/interconnect_interface.cpp	/^void InterconnectInterface::_BoundaryBufferItem::PushFlitData(void* data,bool is_tail)$/;"	f	class:InterconnectInterface::_BoundaryBufferItem	typeref:typename:void
PushWaiting	intersim2/routers/event_router.cpp	/^void EventNextVCState::PushWaiting( int vc, tWaiting *w )$/;"	f	class:EventNextVCState	typeref:typename:void
QTree	intersim2/networks/qtree.cpp	/^QTree::QTree( const Configuration& config, const string & name )$/;"	f	class:QTree
QTree	intersim2/networks/qtree.hpp	/^class QTree : public Network {$/;"	c
QUALITY	intersim2/rng-double.c	/^#define QUALITY /;"	d	file:
QUALITY	intersim2/rng.c	/^#define QUALITY /;"	d	file:
R	gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
R	intersim2/power/power_module.hpp	/^  double R     ;                         $/;"	m	class:Power_Module	typeref:typename:double
RADIX	gpuwattch/cacti/highradix.h	/^    double RADIX;$/;"	m	class:HighRadix	typeref:typename:double
RAHT	gpuwattch/core.h	/^	ArrayST * RAHT;\/\/register alias history table Used to store GC$/;"	m	class:RENAMINGU	typeref:typename:ArrayST *
RAMbased	gpuwattch/basic_components.h	/^    RAMbased,$/;"	e	enum:Renaming_type
RAS	gpuwattch/core.h	/^	ArrayST * RAS;$/;"	m	class:BranchPredictor	typeref:typename:ArrayST *
RASSize	gpuwattch/arch_const.h	/^const int RASSize=16;$/;"	v	typeref:typename:const int
RAS_size	gpuwattch/XML_Parse.h	/^	int RAS_size;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
RASc	gpgpu-sim/dram.h	/^   unsigned int RASc;$/;"	m	struct:bank_t	typeref:typename:unsigned int
RCDWRc	gpgpu-sim/dram.h	/^   unsigned int RCDWRc;$/;"	m	struct:bank_t	typeref:typename:unsigned int
RCDc	gpgpu-sim/dram.h	/^   unsigned int RCDc;$/;"	m	struct:bank_t	typeref:typename:unsigned int
RCc	gpgpu-sim/dram.h	/^   unsigned int RCc;$/;"	m	struct:bank_t	typeref:typename:unsigned int
READ	gpgpu-sim/dram.h	/^#define READ /;"	d
READ_ALLOC	gpgpu-sim/shader.h	/^      READ_ALLOC,$/;"	e	enum:opndcoll_rfu_t::alloc_t
READ_ONLY	gpgpu-sim/gpu-cache.h	/^    READ_ONLY,$/;"	e	enum:write_policy_t
READ_PACKET_SIZE	gpgpu-sim/shader.h	/^#define READ_PACKET_SIZE /;"	d
READ_REPLY	gpgpu-sim/mem_fetch.h	/^   READ_REPLY, \/\/ send to shader$/;"	e	enum:mf_type
READ_REPLY	intersim2/flit.hpp	/^		  READ_REPLY    = 1,$/;"	e	enum:Flit::FlitType
READ_REQUEST	gpgpu-sim/mem_fetch.h	/^   READ_REQUEST = 0,$/;"	e	enum:mf_type
READ_REQUEST	intersim2/flit.hpp	/^  enum FlitType { READ_REQUEST  = 0, $/;"	e	enum:Flit::FlitType
READ_REQUEST_SENT	gpgpu-sim/gpu-cache.h	/^    READ_REQUEST_SENT,$/;"	e	enum:cache_event
RECONVERGE_RETURN_PC	cuda-sim/cuda-sim.h	/^#define RECONVERGE_RETURN_PC /;"	d
RED	abstract_hardware_model.h	/^   RED$/;"	e	enum:uarch_bar_t
REG_RD	gpuwattch/XML_Parse.h	/^   REG_RD,$/;"	e	enum:perf_count_t
REG_WR	gpuwattch/XML_Parse.h	/^   REG_WR,$/;"	e	enum:perf_count_t
REJECT	intersim2/lex.yy.c	/^#define REJECT /;"	d	file:
RENAMINGU	gpuwattch/core.cc	/^RENAMINGU::RENAMINGU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, const/;"	f	class:RENAMINGU
RENAMINGU	gpuwattch/core.h	/^class RENAMINGU :public Component {$/;"	c
RESERVATION_FAIL	gpgpu-sim/gpu-cache.h	/^    RESERVATION_FAIL, $/;"	e	enum:cache_request_status
RESERVED	gpgpu-sim/gpu-cache.h	/^    RESERVED,$/;"	e	enum:cache_block_state
RES_ADJ	gpuwattch/cacti/wire.cc	/^#define RES_ADJ /;"	d	file:
RET_OPS	abstract_hardware_model.h	/^   RET_OPS$/;"	e	enum:uarch_op_t
RFP	gpuwattch/gpgpu_sim_wrapper.cc	/^   RFP,$/;"	e	enum:pwr_cmp_t	file:
RFWIN	gpuwattch/core.h	/^	ArrayST * RFWIN;$/;"	m	class:RegFU	typeref:typename:ArrayST *
RISE	gpuwattch/cacti/const.h	/^#define RISE /;"	d
ROB	gpuwattch/core.h	/^	ArrayST         * ROB;$/;"	m	class:SchedulerU	typeref:typename:ArrayST *
ROB_height	gpuwattch/core.h	/^	double Iw_height, fp_Iw_height,ROB_height;$/;"	m	class:SchedulerU	typeref:typename:double
ROB_reads	gpuwattch/XML_Parse.h	/^	double ROB_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
ROB_size	gpuwattch/XML_Parse.h	/^	int ROB_size;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
ROB_writes	gpuwattch/XML_Parse.h	/^	double ROB_writes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
ROUTER	intersim2/networks/anynet.cpp	/^		 ROUTER,$/;"	e	enum:AnyNet::readFile::ParseType	file:
ROUTERS	intersim2/Makefile	/^ROUTERS:= $(wildcard routers\/*.cpp)$/;"	m
ROUTER_TYPES	gpuwattch/cacti/const.h	/^#define ROUTER_TYPES /;"	d
ROUTE_LOGIC_D	gpuwattch/cacti/highradix.h	/^#define ROUTE_LOGIC_D /;"	d
ROUTE_LOGIC_L	gpuwattch/cacti/highradix.h	/^#define ROUTE_LOGIC_L /;"	d
ROW	gpgpu-sim/addrdec.h	/^      ROW   = 2,$/;"	e	enum:linear_to_raw_address_translation::__anoncdba8aca0103
ROWS	gpuwattch/cacti/highradix.h	/^    double ROWS;$/;"	m	class:HighRadix	typeref:typename:double
ROW_BUFF_ENT	gpuwattch/cacti/highradix.h	/^    double ROW_BUFF_ENT;$/;"	m	class:HighRadix	typeref:typename:double
ROW_BUFF_SZ	gpuwattch/cacti/highradix.h	/^    double ROW_BUFF_SZ;$/;"	m	class:HighRadix	typeref:typename:double
RPc	gpgpu-sim/dram.h	/^   unsigned int RPc;$/;"	m	struct:bank_t	typeref:typename:unsigned int
RRDc	gpgpu-sim/dram.h	/^   unsigned int RRDc;$/;"	m	class:dram_t	typeref:typename:unsigned int
RTPLc	gpgpu-sim/dram.h	/^	unsigned int RTPLc;$/;"	m	struct:bankgrp_t	typeref:typename:unsigned int
RTPc	gpgpu-sim/dram.h	/^   unsigned int RTPc; \/\/ read to precharge$/;"	m	struct:bank_t	typeref:typename:unsigned int
RTWc	gpgpu-sim/dram.h	/^   unsigned int RTWc;   \/\/read to write penalty applies across banks$/;"	m	class:dram_t	typeref:typename:unsigned int
RWP	gpuwattch/cacti/mat.h	/^    int RWP;$/;"	m	class:Mat	typeref:typename:int
RWP	gpuwattch/cacti/uca.h	/^    int   RWP, ERP, EWP,SCHP;$/;"	m	class:UCA	typeref:typename:int
R_nch_on	gpuwattch/cacti/parameter.h	/^    double R_nch_on;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
R_pch_on	gpuwattch/cacti/parameter.h	/^    double R_pch_on;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
R_per_um	gpuwattch/cacti/parameter.h	/^    double R_per_um;$/;"	m	class:TechnologyParameter::InterconnectType	typeref:typename:double
R_to_w	gpuwattch/cacti/basic_circuit.cc	/^double R_to_w($/;"	f	typeref:typename:double
R_wire_dec_out	gpuwattch/cacti/decoder.h	/^    double R_wire_dec_out;$/;"	m	class:Decoder	typeref:typename:double
R_wire_predec_blk_out	gpuwattch/cacti/decoder.h	/^  double R_wire_predec_blk_out;$/;"	m	class:PredecBlk	typeref:typename:double
R_wl	gpuwattch/cacti/subarray.h	/^    double  R_wl, R_wl_cam, R_wl_ram;$/;"	m	class:Subarray	typeref:typename:double
R_wl_cam	gpuwattch/cacti/subarray.h	/^    double  R_wl, R_wl_cam, R_wl_ram;$/;"	m	class:Subarray	typeref:typename:double
R_wl_ram	gpuwattch/cacti/subarray.h	/^    double  R_wl, R_wl_cam, R_wl_ram;$/;"	m	class:Subarray	typeref:typename:double
RandomFloat	intersim2/random_utils.hpp	/^inline double RandomFloat(  ) {$/;"	f	typeref:typename:double
RandomFloat	intersim2/random_utils.hpp	/^inline double RandomFloat( double max ) {$/;"	f	typeref:typename:double
RandomInt	intersim2/random_utils.hpp	/^inline int RandomInt( int max ) {$/;"	f	typeref:typename:int
RandomIntLong	intersim2/random_utils.hpp	/^inline unsigned long RandomIntLong( ) {$/;"	f	typeref:typename:unsigned long
RandomPermutationTrafficPattern	intersim2/traffic.cpp	/^RandomPermutationTrafficPattern::RandomPermutationTrafficPattern(int nodes, $/;"	f	class:RandomPermutationTrafficPattern
RandomPermutationTrafficPattern	intersim2/traffic.hpp	/^class RandomPermutationTrafficPattern : public TrafficPattern {$/;"	c
RandomSeed	intersim2/random_utils.hpp	/^inline void RandomSeed( long seed ) {$/;"	f	typeref:typename:void
RandomTrafficPattern	intersim2/traffic.cpp	/^RandomTrafficPattern::RandomTrafficPattern(int nodes)$/;"	f	class:RandomTrafficPattern
RandomTrafficPattern	intersim2/traffic.hpp	/^class RandomTrafficPattern : public TrafficPattern {$/;"	c
Read	intersim2/pipefifo.hpp	/^template<class T> T* PipelineFIFO<T>::Read( int lane )$/;"	f	class:PipelineFIFO	typeref:typename:T *
ReadCredit	intersim2/networks/network.cpp	/^Credit *Network::ReadCredit( int source )$/;"	f	class:Network	typeref:typename:Credit *
ReadFlit	intersim2/networks/network.cpp	/^Flit *Network::ReadFlit( int dest )$/;"	f	class:Network	typeref:typename:Flit *
ReadInputs	intersim2/channel.hpp	/^void Channel<T>::ReadInputs() {$/;"	f	class:Channel	typeref:typename:void
ReadInputs	intersim2/flitchannel.cpp	/^void FlitChannel::ReadInputs() {$/;"	f	class:FlitChannel	typeref:typename:void
ReadInputs	intersim2/networks/network.cpp	/^void Network::ReadInputs( )$/;"	f	class:Network	typeref:typename:void
ReadInputs	intersim2/routers/chaos_router.cpp	/^void ChaosRouter::ReadInputs( )$/;"	f	class:ChaosRouter	typeref:typename:void
ReadInputs	intersim2/routers/event_router.cpp	/^void EventRouter::ReadInputs( )$/;"	f	class:EventRouter	typeref:typename:void
ReadInputs	intersim2/routers/iq_router.cpp	/^void IQRouter::ReadInputs( )$/;"	f	class:IQRouter	typeref:typename:void
ReadRequest	intersim2/allocators/allocator.cpp	/^bool DenseAllocator::ReadRequest( sRequest &req, int in, int out ) const$/;"	f	class:DenseAllocator	typeref:typename:bool
ReadRequest	intersim2/allocators/allocator.cpp	/^bool SparseAllocator::ReadRequest( sRequest &req, int in, int out ) const$/;"	f	class:SparseAllocator	typeref:typename:bool
ReadRequest	intersim2/allocators/allocator.cpp	/^int DenseAllocator::ReadRequest( int in, int out ) const$/;"	f	class:DenseAllocator	typeref:typename:int
ReadRequest	intersim2/allocators/allocator.cpp	/^int SparseAllocator::ReadRequest( int in, int out ) const$/;"	f	class:SparseAllocator	typeref:typename:int
Receive	intersim2/channel.hpp	/^T * Channel<T>::Receive() {$/;"	f	class:Channel	typeref:typename:T *
RegFU	gpuwattch/core.cc	/^RegFU::RegFU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, const CoreDyn/;"	f	class:RegFU
RegFU	gpuwattch/core.h	/^class RegFU :public Component {$/;"	c
Register	option_parser.cc	/^   void Register(const string optionName, const string optionDesc, T &optionVariable, const char/;"	f	class:OptionParser	typeref:typename:void	file:
RegisterRoutingFunctions	intersim2/networks/anynet.cpp	/^void AnyNet::RegisterRoutingFunctions() {$/;"	f	class:AnyNet	typeref:typename:void
RegisterRoutingFunctions	intersim2/networks/cmesh.cpp	/^void CMesh::RegisterRoutingFunctions() {$/;"	f	class:CMesh	typeref:typename:void
RegisterRoutingFunctions	intersim2/networks/dragonfly.cpp	/^void DragonFlyNew::RegisterRoutingFunctions(){$/;"	f	class:DragonFlyNew	typeref:typename:void
RegisterRoutingFunctions	intersim2/networks/fattree.cpp	/^void FatTree::RegisterRoutingFunctions() {$/;"	f	class:FatTree	typeref:typename:void
RegisterRoutingFunctions	intersim2/networks/flatfly_onchip.cpp	/^void FlatFlyOnChip::RegisterRoutingFunctions(){$/;"	f	class:FlatFlyOnChip	typeref:typename:void
RegisterRoutingFunctions	intersim2/networks/fly.hpp	/^  static void RegisterRoutingFunctions(){};$/;"	f	class:KNFly	typeref:typename:void
RegisterRoutingFunctions	intersim2/networks/kncube.cpp	/^void KNCube::RegisterRoutingFunctions() {$/;"	f	class:KNCube	typeref:typename:void
RegisterRoutingFunctions	intersim2/networks/qtree.cpp	/^void QTree::RegisterRoutingFunctions(){$/;"	f	class:QTree	typeref:typename:void
RegisterRoutingFunctions	intersim2/networks/tree4.cpp	/^void Tree4::RegisterRoutingFunctions(){$/;"	f	class:Tree4	typeref:typename:void
RemoveFlit	intersim2/buffer.hpp	/^  inline Flit *RemoveFlit( int vc )$/;"	f	class:Buffer	typeref:typename:Flit *
RemoveFlit	intersim2/vc.cpp	/^Flit *VC::RemoveFlit( )$/;"	f	class:VC	typeref:typename:Flit *
RemoveRequest	intersim2/allocators/allocator.cpp	/^void DenseAllocator::RemoveRequest( int in, int out, int label )$/;"	f	class:DenseAllocator	typeref:typename:void
RemoveRequest	intersim2/allocators/allocator.cpp	/^void SparseAllocator::RemoveRequest( int in, int out, int label )$/;"	f	class:SparseAllocator	typeref:typename:void
RemoveRequest	intersim2/arbiters/prio_arb.cpp	/^void PriorityArbiter::RemoveRequest( int in, int label )$/;"	f	class:PriorityArbiter	typeref:typename:void
Renaming_type	gpuwattch/basic_components.h	/^enum Renaming_type {$/;"	g
ReservationStation	gpuwattch/basic_components.h	/^	ReservationStation$/;"	e	enum:Scheduler_type
Reset	intersim2/credit.cpp	/^void Credit::Reset()$/;"	f	class:Credit	typeref:typename:void
Reset	intersim2/flit.cpp	/^void Flit::Reset() $/;"	f	class:Flit	typeref:typename:void
ResetFlowStats	intersim2/routers/router.hpp	/^  inline void ResetFlowStats(int c) {$/;"	f	class:Router	typeref:typename:void
ResetStallStats	intersim2/routers/router.hpp	/^  inline void ResetStallStats(int c) {$/;"	f	class:Router	typeref:typename:void
RoundRobinArbiter	intersim2/arbiters/roundrobin_arb.cpp	/^RoundRobinArbiter::RoundRobinArbiter( Module *parent, const string &name,$/;"	f	class:RoundRobinArbiter
RoundRobinArbiter	intersim2/arbiters/roundrobin_arb.hpp	/^class RoundRobinArbiter : public Arbiter {$/;"	c
Route	intersim2/buffer.hpp	/^  inline void Route( int vc, tRoutingFunction rf, const Router* router, const Flit* f, int in_ch/;"	f	class:Buffer	typeref:typename:void
Route	intersim2/vc.cpp	/^void VC::Route( tRoutingFunction rf, const Router* router, const Flit* f, int in_channel )$/;"	f	class:VC	typeref:typename:void
Router	intersim2/routers/router.cpp	/^Router::Router( const Configuration& config,$/;"	f	class:Router
Router	intersim2/routers/router.hpp	/^class Router : public TimedModule {$/;"	c
Run	intersim2/trafficmanager.cpp	/^bool TrafficManager::Run( )$/;"	f	class:TrafficManager	typeref:typename:bool
Rw	intersim2/power/power_module.hpp	/^  double Rw ;$/;"	m	class:Power_Module	typeref:typename:double
SAD	cuda-sim/instructions.cc	/^#define SAD(/;"	d	file:
SAMPLELOG	gpgpu-sim/gpu-sim.h	/^#define SAMPLELOG /;"	d
SBT	gpuwattch/basic_components.h	/^	SBT,\/\/static bank tag$/;"	e	enum:Dir_type
SCHEDP	gpuwattch/gpgpu_sim_wrapper.cc	/^   SCHEDP,$/;"	e	enum:pwr_cmp_t	file:
SCHEDULER_PRIORITIZATION_GTLRR	gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_GTLRR, \/\/ Greedy Then Loose Round Robin$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_GTO	gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_GTO, \/\/ Greedy Then Oldest$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_GTY	gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_GTY, \/\/ Greedy Then Youngest$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_LRR	gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_LRR = 0, \/\/ Loose Round Robin$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_OLDEST	gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_OLDEST, \/\/ Oldest First$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_SRR	gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_SRR, \/\/ Strict Round Robin$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_YOUNGEST	gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_YOUNGEST, \/\/ Youngest First$/;"	e	enum:scheduler_prioritization_type
SCHED_DPRINTF	gpgpu-sim/shader_trace.h	/^#define SCHED_DPRINTF(/;"	d
SCHED_PRINT_STR	gpgpu-sim/shader_trace.h	/^#define SCHED_PRINT_STR /;"	d
SCHP	gpuwattch/cacti/mat.h	/^    int SCHP;$/;"	m	class:Mat	typeref:typename:int
SCHP	gpuwattch/cacti/uca.h	/^    int   RWP, ERP, EWP,SCHP;$/;"	m	class:UCA	typeref:typename:int
SCOREBOARD_H_	gpgpu-sim/scoreboard.h	/^#define SCOREBOARD_H_$/;"	d
SFUP	gpuwattch/gpgpu_sim_wrapper.cc	/^   SFUP,$/;"	e	enum:pwr_cmp_t	file:
SFU_ACC	gpuwattch/XML_Parse.h	/^   SFU_ACC,$/;"	e	enum:perf_count_t
SFU_BASE_POWER	gpuwattch/gpgpu_sim_wrapper.cc	/^#define SFU_BASE_POWER /;"	d	file:
SFU_BASE_POWER	gpuwattch/logic.cc	/^#define SFU_BASE_POWER /;"	d	file:
SFU_CUS	gpgpu-sim/shader.cc	/^    enum { SP_CUS, SFU_CUS, MEM_CUS, GEN_CUS };$/;"	e	enum:shader_core_ctx::shader_core_ctx::__anona80340180103	file:
SFU_OP	abstract_hardware_model.h	/^   SFU_OP,$/;"	e	enum:uarch_op_t
SFU__OP	abstract_hardware_model.h	/^    SFU__OP,$/;"	e	enum:operation_pipeline_t
SHADER_DPRINTF	gpgpu-sim/shader_trace.h	/^#define SHADER_DPRINTF(/;"	d
SHADER_DTRACE	gpgpu-sim/shader_trace.h	/^#define SHADER_DTRACE(/;"	d
SHADER_H	gpgpu-sim/shader.h	/^#define SHADER_H$/;"	d
SHADER_PRINT_STR	gpgpu-sim/shader_trace.h	/^#define SHADER_PRINT_STR /;"	d
SHAREDCACHE_H_	gpuwattch/sharedcache.h	/^#define SHAREDCACHE_H_$/;"	d
SHARED_GENERIC_START	abstract_hardware_model.h	/^#define SHARED_GENERIC_START /;"	d
SHARED_MEM_SIZE_MAX	abstract_hardware_model.h	/^#define SHARED_MEM_SIZE_MAX /;"	d
SHELL	gpuwattch/cacti/cacti.mk	/^SHELL = \/bin\/sh$/;"	m
SHELL	gpuwattch/mcpat.mk	/^SHELL = \/bin\/sh$/;"	m
SHELL	gpuwattch/mcpatXeonCore.mk	/^SHELL = \/bin\/sh$/;"	m
SHRDP	gpuwattch/gpgpu_sim_wrapper.cc	/^   SHRDP,$/;"	e	enum:pwr_cmp_t	file:
SHRD_ACC	gpuwattch/XML_Parse.h	/^   SHRD_ACC,$/;"	e	enum:perf_count_t
SIM_PRINT_STR	trace.h	/^#define SIM_PRINT_STR /;"	d
SMID_REG	cuda-sim/opcodes.h	/^   SMID_REG,$/;"	e	enum:special_regs
SPP	gpuwattch/gpgpu_sim_wrapper.cc	/^   SPP,$/;"	e	enum:pwr_cmp_t	file:
SP_ACC	gpuwattch/XML_Parse.h	/^   SP_ACC,$/;"	e	enum:perf_count_t
SP_BASE_POWER	gpuwattch/gpgpu_sim_wrapper.cc	/^#define SP_BASE_POWER /;"	d	file:
SP_BASE_POWER	gpuwattch/logic.cc	/^#define SP_BASE_POWER /;"	d	file:
SP_CUS	gpgpu-sim/shader.cc	/^    enum { SP_CUS, SFU_CUS, MEM_CUS, GEN_CUS };$/;"	e	enum:shader_core_ctx::shader_core_ctx::__anona80340180103	file:
SP__OP	abstract_hardware_model.h	/^    SP__OP,$/;"	e	enum:operation_pipeline_t
SQEntries	gpuwattch/arch_const.h	/^const int SQEntries=32;$/;"	v	typeref:typename:const int
SRCS	Makefile	/^SRCS = $(shell ls *.cc)$/;"	m
SRCS	cuda-sim/Makefile	/^SRCS = $(shell ls *.cc)$/;"	m
SRCS	gpgpu-sim/Makefile	/^SRCS = $(shell ls *.cc)$/;"	m
SRCS	gpuwattch/cacti/cacti.mk	/^SRCS  = area.cc bank.cc mat.cc main.cc Ucache.cc io.cc technology.cc basic_circuit.cc parameter./;"	m
SRCS	gpuwattch/mcpat.mk	/^SRCS  = \\$/;"	m
SRCS	gpuwattch/mcpatXeonCore.mk	/^SRCS  = \\$/;"	m
SSITSize	gpuwattch/arch_const.h	/^const int SSITSize=1024;$/;"	v	typeref:typename:const int
ST	gpuwattch/basic_components.h	/^	ST,\/\/shadowed tag$/;"	e	enum:Dir_type
STACKED_DIE_LAYER_ALLOTED_AREA_mm2	gpuwattch/cacti/const.h	/^#define STACKED_DIE_LAYER_ALLOTED_AREA_mm2 /;"	d
STACKED_DIE_LAYER_ASPECT_RATIO	gpuwattch/cacti/const.h	/^#define STACKED_DIE_LAYER_ASPECT_RATIO /;"	d
STACK_ENTRY_TYPE_CALL	abstract_hardware_model.h	/^        STACK_ENTRY_TYPE_CALL$/;"	e	enum:simt_stack::stack_entry_type
STACK_ENTRY_TYPE_NORMAL	abstract_hardware_model.h	/^        STACK_ENTRY_TYPE_NORMAL = 0,$/;"	e	enum:simt_stack::stack_entry_type
STALL_BUFFER_BUSY	intersim2/routers/router.cpp	/^int const Router::STALL_BUFFER_BUSY = -2;$/;"	m	class:Router	typeref:typename:int const
STALL_BUFFER_BUSY	intersim2/routers/router.hpp	/^  static int const STALL_BUFFER_BUSY;$/;"	m	class:Router	typeref:typename:int const
STALL_BUFFER_CONFLICT	intersim2/routers/router.cpp	/^int const Router::STALL_BUFFER_CONFLICT = -3;$/;"	m	class:Router	typeref:typename:int const
STALL_BUFFER_CONFLICT	intersim2/routers/router.hpp	/^  static int const STALL_BUFFER_CONFLICT;$/;"	m	class:Router	typeref:typename:int const
STALL_BUFFER_FULL	intersim2/routers/router.cpp	/^int const Router::STALL_BUFFER_FULL = -4;$/;"	m	class:Router	typeref:typename:int const
STALL_BUFFER_FULL	intersim2/routers/router.hpp	/^  static int const STALL_BUFFER_FULL;$/;"	m	class:Router	typeref:typename:int const
STALL_BUFFER_RESERVED	intersim2/routers/router.cpp	/^int const Router::STALL_BUFFER_RESERVED = -5;$/;"	m	class:Router	typeref:typename:int const
STALL_BUFFER_RESERVED	intersim2/routers/router.hpp	/^  static int const STALL_BUFFER_RESERVED;$/;"	m	class:Router	typeref:typename:int const
STALL_CROSSBAR_CONFLICT	intersim2/routers/router.cpp	/^int const Router::STALL_CROSSBAR_CONFLICT = -6;$/;"	m	class:Router	typeref:typename:int const
STALL_CROSSBAR_CONFLICT	intersim2/routers/router.hpp	/^  static int const STALL_CROSSBAR_CONFLICT;$/;"	m	class:Router	typeref:typename:int const
STATIC_ALLOC_LIMIT	abstract_hardware_model.h	/^#define STATIC_ALLOC_LIMIT /;"	d
STATS_INCLUDED	gpgpu-sim/stats.h	/^#define STATS_INCLUDED$/;"	d
STAT_TOOL_H	gpgpu-sim/stat-tool.h	/^#define STAT_TOOL_H$/;"	d
STAT_WRAPER_H	statwrapper.h	/^#define STAT_WRAPER_H$/;"	d
STORE_OP	abstract_hardware_model.h	/^   STORE_OP,$/;"	e	enum:uarch_op_t
STR	intersim2/y.tab.c	/^    STR = 258,$/;"	e	enum:yytokentype	file:
STR	intersim2/y.tab.c	/^#define STR /;"	d	file:
STR	intersim2/y.tab.h	/^    STR = 258,$/;"	e	enum:yytokentype
STR	intersim2/y.tab.h	/^#define STR /;"	d
STREAM_MANAGER_H_INCLUDED	stream_manager.h	/^#define STREAM_MANAGER_H_INCLUDED$/;"	d
STRSIZE	gpgpu-sim/shader.cc	/^    #define STRSIZE /;"	d	file:
STR_SIZE	cuda-sim/cuda-sim.cc	/^       #define STR_SIZE /;"	d	file:
STR_SIZE	cuda-sim/ptx_ir.cc	/^#define STR_SIZE /;"	d	file:
STR_SIZE	gpgpu-sim/shader.cc	/^    #define STR_SIZE /;"	d	file:
SUB_SWITCH_SZ	gpuwattch/cacti/highradix.h	/^    double SUB_SWITCH_SZ;$/;"	m	class:HighRadix	typeref:typename:double
SWAP	gpgpu-sim/dram.cc	/^#define SWAP(/;"	d	file:
SYNC	abstract_hardware_model.h	/^   SYNC=1,$/;"	e	enum:uarch_bar_t
S_MEM	gpgpu-sim/stats.h	/^   S_MEM,$/;"	e	enum:mem_stage_access_type
ScalingFactor	gpuwattch/cacti/parameter.h	/^    ScalingFactor(): logic_scaling_co_eff(0), core_tx_density(0),$/;"	f	class:TechnologyParameter::ScalingFactor
ScalingFactor	gpuwattch/cacti/parameter.h	/^  class ScalingFactor$/;"	c	class:TechnologyParameter
SchedulerU	gpuwattch/core.cc	/^SchedulerU::SchedulerU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, con/;"	f	class:SchedulerU
SchedulerU	gpuwattch/core.h	/^class SchedulerU :public Component {$/;"	c
Scheduler_type	gpuwattch/basic_components.h	/^enum Scheduler_type {$/;"	g
Scoreboard	gpgpu-sim/scoreboard.cc	/^Scoreboard::Scoreboard( unsigned sid, unsigned n_warps )$/;"	f	class:Scoreboard
Scoreboard	gpgpu-sim/scoreboard.h	/^class Scoreboard {$/;"	c
Search_in_htree	gpuwattch/cacti/basic_circuit.h	/^    Search_in_htree,$/;"	e	enum:Htree_type
Search_out_htree	gpuwattch/cacti/basic_circuit.h	/^    Search_out_htree,$/;"	e	enum:Htree_type
SelAlloc	intersim2/allocators/selalloc.cpp	/^SelAlloc::SelAlloc( Module *parent, const string& name,$/;"	f	class:SelAlloc
SelAlloc	intersim2/allocators/selalloc.hpp	/^class SelAlloc : public SparseAllocator {$/;"	c
Semi_global	gpuwattch/cacti/cacti_interface.h	/^    Semi_global \/* mid-level wires with repeaters*\/,$/;"	e	enum:Wire_type
Send	intersim2/channel.hpp	/^void Channel<T>::Send(T * data) {$/;"	f	class:Channel	typeref:typename:void
Send	intersim2/flitchannel.cpp	/^void FlitChannel::Send(Flit * f) {$/;"	f	class:FlitChannel	typeref:typename:void
SendingFlit	intersim2/buffer_state.cpp	/^void BufferState::BufferPolicy::SendingFlit(Flit const * const f) {$/;"	f	class:BufferState::BufferPolicy	typeref:typename:void
SendingFlit	intersim2/buffer_state.cpp	/^void BufferState::DynamicLimitedSharedBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::DynamicLimitedSharedBufferPolicy	typeref:typename:void
SendingFlit	intersim2/buffer_state.cpp	/^void BufferState::FeedbackSharedBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:void
SendingFlit	intersim2/buffer_state.cpp	/^void BufferState::LimitedSharedBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::LimitedSharedBufferPolicy	typeref:typename:void
SendingFlit	intersim2/buffer_state.cpp	/^void BufferState::PrivateBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::PrivateBufferPolicy	typeref:typename:void
SendingFlit	intersim2/buffer_state.cpp	/^void BufferState::SendingFlit( Flit const * const f )$/;"	f	class:BufferState	typeref:typename:void
SendingFlit	intersim2/buffer_state.cpp	/^void BufferState::SharedBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::SharedBufferPolicy	typeref:typename:void
SendingFlit	intersim2/buffer_state.cpp	/^void BufferState::ShiftingDynamicLimitedSharedBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::ShiftingDynamicLimitedSharedBufferPolicy	typeref:typename:void
SendingFlit	intersim2/buffer_state.cpp	/^void BufferState::SimpleFeedbackSharedBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::SimpleFeedbackSharedBufferPolicy	typeref:typename:void
SeparableAllocator	intersim2/allocators/separable.cpp	/^SeparableAllocator::SeparableAllocator( Module* parent, const string& name,$/;"	f	class:SeparableAllocator
SeparableAllocator	intersim2/allocators/separable.hpp	/^class SeparableAllocator : public SparseAllocator {$/;"	c
SeparableInputFirstAllocator	intersim2/allocators/separable_input_first.cpp	/^SeparableInputFirstAllocator( Module* parent, const string& name, int inputs,$/;"	f	class:SeparableInputFirstAllocator
SeparableInputFirstAllocator	intersim2/allocators/separable_input_first.hpp	/^class SeparableInputFirstAllocator : public SeparableAllocator {$/;"	c
SeparableOutputFirstAllocator	intersim2/allocators/separable_output_first.cpp	/^SeparableOutputFirstAllocator( Module* parent, const string& name, int inputs,$/;"	f	class:SeparableOutputFirstAllocator
SeparableOutputFirstAllocator	intersim2/allocators/separable_output_first.hpp	/^class SeparableOutputFirstAllocator : public SeparableAllocator {$/;"	c
SetCredits	intersim2/routers/event_router.cpp	/^void EventNextVCState::SetCredits( int vc, int value )$/;"	f	class:EventNextVCState	typeref:typename:void
SetInput	intersim2/routers/event_router.cpp	/^void EventNextVCState::SetInput( int vc, int input )$/;"	f	class:EventNextVCState	typeref:typename:void
SetInputVC	intersim2/routers/event_router.cpp	/^void EventNextVCState::SetInputVC( int vc, int in_vc )$/;"	f	class:EventNextVCState	typeref:typename:void
SetLatency	intersim2/channel.hpp	/^void Channel<T>::SetLatency(int cycles) {$/;"	f	class:Channel	typeref:typename:void
SetMinLatency	intersim2/buffer_state.cpp	/^void BufferState::FeedbackSharedBufferPolicy::SetMinLatency(int min_latency)$/;"	f	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:void
SetMinLatency	intersim2/buffer_state.hpp	/^    virtual void SetMinLatency(int min_latency) {}$/;"	f	class:BufferState::BufferPolicy	typeref:typename:void
SetMinLatency	intersim2/buffer_state.hpp	/^  inline void SetMinLatency(int min_latency) {$/;"	f	class:BufferState	typeref:typename:void
SetOutput	intersim2/buffer.hpp	/^  inline void SetOutput( int vc, int out_port, int out_vc )$/;"	f	class:Buffer	typeref:typename:void
SetOutput	intersim2/vc.cpp	/^void VC::SetOutput( int port, int vc )$/;"	f	class:VC	typeref:typename:void
SetPresence	intersim2/routers/event_router.cpp	/^void EventNextVCState::SetPresence( int vc, int value )$/;"	f	class:EventNextVCState	typeref:typename:void
SetRouteSet	intersim2/buffer.hpp	/^  inline void SetRouteSet( int vc, OutputSet * output_set )$/;"	f	class:Buffer	typeref:typename:void
SetRouteSet	intersim2/vc.cpp	/^void VC::SetRouteSet( OutputSet * output_set )$/;"	f	class:VC	typeref:typename:void
SetSink	intersim2/flitchannel.cpp	/^void FlitChannel::SetSink(Router const * const router, int port) {$/;"	f	class:FlitChannel	typeref:typename:void
SetSource	intersim2/flitchannel.cpp	/^void FlitChannel::SetSource(Router const * const router, int port) {$/;"	f	class:FlitChannel	typeref:typename:void
SetState	intersim2/buffer.hpp	/^  inline void SetState( int vc, VC::eVCState s )$/;"	f	class:Buffer	typeref:typename:void
SetState	intersim2/routers/event_router.cpp	/^void EventNextVCState::SetState( int vc, eNextVCState state )$/;"	f	class:EventNextVCState	typeref:typename:void
SetState	intersim2/vc.cpp	/^void VC::SetState( eVCState s )$/;"	f	class:VC	typeref:typename:void
SetWatch	intersim2/buffer.hpp	/^  inline void SetWatch( int vc, bool watch = true )$/;"	f	class:Buffer	typeref:typename:void
SetWatch	intersim2/vc.cpp	/^void VC::SetWatch( bool watch )$/;"	f	class:VC	typeref:typename:void
SharedBufferPolicy	intersim2/buffer_state.cpp	/^BufferState::SharedBufferPolicy::SharedBufferPolicy(Configuration const & config, BufferState * /;"	f	class:BufferState::SharedBufferPolicy
SharedBufferPolicy	intersim2/buffer_state.hpp	/^  class SharedBufferPolicy : public BufferPolicy {$/;"	c	class:BufferState
SharedCache	gpuwattch/sharedcache.cc	/^SharedCache::SharedCache(ParseXML* XML_interface, int ithCache_, InputParameter* interface_ip_, /;"	f	class:SharedCache
SharedCache	gpuwattch/sharedcache.h	/^class SharedCache :public Component{$/;"	c
ShiftingDynamicLimitedSharedBufferPolicy	intersim2/buffer_state.cpp	/^BufferState::ShiftingDynamicLimitedSharedBufferPolicy::ShiftingDynamicLimitedSharedBufferPolicy(/;"	f	class:BufferState::ShiftingDynamicLimitedSharedBufferPolicy
ShiftingDynamicLimitedSharedBufferPolicy	intersim2/buffer_state.hpp	/^  class ShiftingDynamicLimitedSharedBufferPolicy : public DynamicLimitedSharedBufferPolicy {$/;"	c	class:BufferState
ShuffleTrafficPattern	intersim2/traffic.cpp	/^ShuffleTrafficPattern::ShuffleTrafficPattern(int nodes)$/;"	f	class:ShuffleTrafficPattern
ShuffleTrafficPattern	intersim2/traffic.hpp	/^class ShuffleTrafficPattern : public BitPermutationTrafficPattern {$/;"	c
SimpleFeedbackSharedBufferPolicy	intersim2/buffer_state.cpp	/^BufferState::SimpleFeedbackSharedBufferPolicy::SimpleFeedbackSharedBufferPolicy(Configuration co/;"	f	class:BufferState::SimpleFeedbackSharedBufferPolicy
SimpleFeedbackSharedBufferPolicy	intersim2/buffer_state.hpp	/^  class SimpleFeedbackSharedBufferPolicy : public FeedbackSharedBufferPolicy {$/;"	c	class:BufferState
Simulate	intersim2/main.cpp	/^bool Simulate( BookSimConfig const & config )$/;"	f	typeref:typename:bool
Size	intersim2/interconnect_interface.hpp	/^    inline unsigned Size(void) const { return _buffer.size(); }$/;"	f	class:InterconnectInterface::_BoundaryBufferItem	typeref:typename:unsigned
SparseAllocator	intersim2/allocators/allocator.cpp	/^SparseAllocator::SparseAllocator( Module *parent, const string& name,$/;"	f	class:SparseAllocator
SparseAllocator	intersim2/allocators/allocator.hpp	/^class SparseAllocator : public Allocator {$/;"	c
SquaredSum	intersim2/stats.cpp	/^double Stats::SquaredSum( ) const$/;"	f	class:Stats	typeref:typename:double
Stack	gpgpu-sim/stack.h	/^} Stack;$/;"	t	typeref:struct:__anon97533a990108
StatAddSample	statwrapper.cc	/^void StatAddSample (void * st, int val)$/;"	f	typeref:typename:void
StatAverage	statwrapper.cc	/^double StatAverage(void * st) $/;"	f	typeref:typename:double
StatClear	statwrapper.cc	/^void StatClear(void * st)$/;"	f	typeref:typename:void
StatCreate	statwrapper.cc	/^Stats* StatCreate (const char * name, double bin_size, int num_bins) {$/;"	f	typeref:typename:Stats *
StatDisp	statwrapper.cc	/^void StatDisp (void * st)$/;"	f	typeref:typename:void
StatMax	statwrapper.cc	/^double StatMax(void * st) $/;"	f	typeref:typename:double
StatMin	statwrapper.cc	/^double StatMin(void * st) $/;"	f	typeref:typename:double
Stats	intersim2/stats.cpp	/^Stats::Stats( Module *parent, const string &name,$/;"	f	class:Stats
Stats	intersim2/stats.hpp	/^class Stats : public Module {$/;"	c
Status	gpuwattch/xmlParser.cc	/^typedef enum Status$/;"	g	file:
Status	gpuwattch/xmlParser.cc	/^} Status;$/;"	t	typeref:enum:Status	file:
Subarray	gpuwattch/cacti/subarray.cc	/^Subarray::Subarray(const DynamicParameter & dp_, bool is_fa_):$/;"	f	class:Subarray
Subarray	gpuwattch/cacti/subarray.h	/^class Subarray : public Component$/;"	c
Sum	intersim2/stats.cpp	/^double Stats::Sum( ) const$/;"	f	class:Stats	typeref:typename:double
Supersedes	intersim2/arbiters/roundrobin_arb.hpp	/^  static inline bool Supersedes(int input1, int pri1, int input2, int pri2, int offset, int size/;"	f	class:RoundRobinArbiter	typeref:typename:bool
SwitchMonitor	intersim2/power/switch_monitor.cpp	/^SwitchMonitor::SwitchMonitor( int inputs, int outputs, int classes )$/;"	f	class:SwitchMonitor
SwitchMonitor	intersim2/power/switch_monitor.hpp	/^class SwitchMonitor {$/;"	c
TAR	gpuwattch/cacti/makefile	/^TAR = cacti$/;"	m
TAR	gpuwattch/makefile	/^TAR = mcpat$/;"	m
TARGET	gpuwattch/cacti/cacti.mk	/^TARGET = cacti$/;"	m
TARGET	gpuwattch/mcpat.mk	/^TARGET = mcpat$/;"	m
TARGET	gpuwattch/mcpatXeonCore.mk	/^TARGET = mcpatXeonCore$/;"	m
TARGET_CYCLE_TIME_ns	gpuwattch/cacti/const.h	/^#define TARGET_CYCLE_TIME_ns /;"	d
TCP	gpuwattch/gpgpu_sim_wrapper.cc	/^   TCP,$/;"	e	enum:pwr_cmp_t	file:
TC_H	gpuwattch/XML_Parse.h	/^   TC_H,$/;"	e	enum:perf_count_t
TC_M	gpuwattch/XML_Parse.h	/^   TC_M,$/;"	e	enum:perf_count_t
TEX	abstract_hardware_model.h	/^    TEX$/;"	e	enum:mem_operation_t
TEXTURE	gpgpu-sim/stat-tool.cc	/^   NORMAL, TEXTURE, CONSTANT, INSTRUCTION$/;"	e	enum:cache_access_logger_types	file:
TEXTURE_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_accesses::access_type
TEXTURE_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_misses::access_type
TEXTURE_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {TEXTURE_ACC_R};$/;"	e	enum:power_stat_t::get_texture_c_accesses::access_type
TEXTURE_ACC_R	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {TEXTURE_ACC_R};$/;"	e	enum:power_stat_t::get_texture_c_misses::access_type
TEX_FIFO	gpgpu-sim/gpu-cache.h	/^    TEX_FIFO,$/;"	e	enum:mshr_config_t
TEX_MSHR_MERGE	gpgpu-sim/gpu-sim.h	/^#define TEX_MSHR_MERGE /;"	d
TID_REG	cuda-sim/opcodes.h	/^   TID_REG,$/;"	e	enum:special_regs
TLB_HIT	gpgpu-sim/stats.h	/^	TLB_HIT = 0,$/;"	e	enum:tlb_request_status
TLB_PENDING	gpgpu-sim/stats.h	/^	TLB_PENDING$/;"	e	enum:tlb_request_status
TLB_READY	gpgpu-sim/stats.h	/^	TLB_READY,$/;"	e	enum:tlb_request_status
TLB_STALL	gpgpu-sim/stats.h	/^   TLB_STALL,$/;"	e	enum:mem_stage_stall_type
TOTAL_LOCAL_MEM	abstract_hardware_model.h	/^#define TOTAL_LOCAL_MEM /;"	d
TOTAL_LOCAL_MEM_PER_SM	abstract_hardware_model.h	/^#define TOTAL_LOCAL_MEM_PER_SM /;"	d
TOTAL_SHARED_MEM	abstract_hardware_model.h	/^#define TOTAL_SHARED_MEM /;"	d
TOT_INST	gpuwattch/XML_Parse.h	/^   TOT_INST=0,$/;"	e	enum:perf_count_t
TRACE	Makefile	/^TRACE?=1$/;"	m
TRACE	cuda-sim/Makefile	/^TRACE?=0$/;"	m
TRACE	gpgpu-sim/Makefile	/^TRACE?=0$/;"	m
TRUE	gpuwattch/xmlParser.h	/^    #define TRUE /;"	d
TS_TUP	trace.cc	/^#define TS_TUP(/;"	d	file:
TS_TUP	trace.h	/^#define TS_TUP(/;"	d
TS_TUP_BEGIN	trace.cc	/^#define TS_TUP_BEGIN(/;"	d	file:
TS_TUP_BEGIN	trace.h	/^#define TS_TUP_BEGIN(/;"	d
TS_TUP_END	trace.cc	/^#define TS_TUP_END(/;"	d	file:
TS_TUP_END	trace.h	/^#define TS_TUP_END(/;"	d
TT	intersim2/rng-double.c	/^#define TT /;"	d	file:
TT	intersim2/rng.c	/^#define TT /;"	d	file:
T_MEM	gpgpu-sim/stats.h	/^   T_MEM,$/;"	e	enum:mem_stage_access_type
TakeBuffer	intersim2/buffer_state.cpp	/^void BufferState::BufferPolicy::TakeBuffer(int vc) {$/;"	f	class:BufferState::BufferPolicy	typeref:typename:void
TakeBuffer	intersim2/buffer_state.cpp	/^void BufferState::DynamicLimitedSharedBufferPolicy::TakeBuffer(int vc)$/;"	f	class:BufferState::DynamicLimitedSharedBufferPolicy	typeref:typename:void
TakeBuffer	intersim2/buffer_state.cpp	/^void BufferState::LimitedSharedBufferPolicy::TakeBuffer(int vc)$/;"	f	class:BufferState::LimitedSharedBufferPolicy	typeref:typename:void
TakeBuffer	intersim2/buffer_state.cpp	/^void BufferState::ShiftingDynamicLimitedSharedBufferPolicy::TakeBuffer(int vc)$/;"	f	class:BufferState::ShiftingDynamicLimitedSharedBufferPolicy	typeref:typename:void
TakeBuffer	intersim2/buffer_state.cpp	/^void BufferState::TakeBuffer( int vc, int tag )$/;"	f	class:BufferState	typeref:typename:void
Taper64TrafficPattern	intersim2/traffic.cpp	/^Taper64TrafficPattern::Taper64TrafficPattern(int nodes)$/;"	f	class:Taper64TrafficPattern
Taper64TrafficPattern	intersim2/traffic.hpp	/^class Taper64TrafficPattern : public RandomTrafficPattern {$/;"	c
TechnologyParameter	gpuwattch/cacti/parameter.h	/^class TechnologyParameter$/;"	c
TimedModule	intersim2/timed_module.hpp	/^  TimedModule(Module * parent, string const & name) : Module(parent, name) {}$/;"	f	class:TimedModule
TimedModule	intersim2/timed_module.hpp	/^class TimedModule : public Module {$/;"	c
Tmp_ids	cuda-sim/ptx_ir.h	/^   std::set<int> Tmp_ids;$/;"	m	struct:basic_block_t	typeref:typename:std::set<int>
ToXMLStringTool	gpuwattch/xmlParser.h	/^    ToXMLStringTool(): buf(NULL),buflen(0){}$/;"	f	struct:ToXMLStringTool
ToXMLStringTool	gpuwattch/xmlParser.h	/^typedef struct XMLDLLENTRY ToXMLStringTool$/;"	s
ToXMLStringTool	gpuwattch/xmlParser.h	/^} ToXMLStringTool;$/;"	t	typeref:struct:ToXMLStringTool
TopPacket	intersim2/interconnect_interface.cpp	/^void* InterconnectInterface::_BoundaryBufferItem::TopPacket() const$/;"	f	class:InterconnectInterface::_BoundaryBufferItem	typeref:typename:void *
TornadoTrafficPattern	intersim2/traffic.cpp	/^TornadoTrafficPattern::TornadoTrafficPattern(int nodes, int k, int n, int xr)$/;"	f	class:TornadoTrafficPattern
TornadoTrafficPattern	intersim2/traffic.hpp	/^class TornadoTrafficPattern : public DigitPermutationTrafficPattern {$/;"	c
Trace	trace.cc	/^namespace Trace {$/;"	n	file:
Trace	trace.h	/^namespace Trace {$/;"	n
TrafficManager	intersim2/trafficmanager.cpp	/^TrafficManager::TrafficManager( const Configuration &config, const vector<Network *> & net )$/;"	f	class:TrafficManager
TrafficManager	intersim2/trafficmanager.hpp	/^class TrafficManager : public Module {$/;"	c
TrafficPattern	intersim2/traffic.cpp	/^TrafficPattern::TrafficPattern(int nodes)$/;"	f	class:TrafficPattern
TrafficPattern	intersim2/traffic.hpp	/^class TrafficPattern {$/;"	c
Transfer2BoundaryBuffer	intersim2/interconnect_interface.cpp	/^void InterconnectInterface::Transfer2BoundaryBuffer(int subnet, int output)$/;"	f	class:InterconnectInterface	typeref:typename:void
Transmission	gpuwattch/cacti/cacti_interface.h	/^    Transmission \/* tranmission lines with high area overhead *\/,$/;"	e	enum:Wire_type
TransposeTrafficPattern	intersim2/traffic.cpp	/^TransposeTrafficPattern::TransposeTrafficPattern(int nodes)$/;"	f	class:TransposeTrafficPattern
TransposeTrafficPattern	intersim2/traffic.hpp	/^class TransposeTrafficPattern : public BitPermutationTrafficPattern {$/;"	c
Tree4	intersim2/networks/tree4.cpp	/^Tree4::Tree4( const Configuration& config, const string & name )$/;"	f	class:Tree4
Tree4	intersim2/networks/tree4.hpp	/^class Tree4 : public Network {$/;"	c
TreeArbiter	intersim2/arbiters/tree_arb.cpp	/^TreeArbiter::TreeArbiter( Module *parent, const string &name,$/;"	f	class:TreeArbiter
TreeArbiter	intersim2/arbiters/tree_arb.hpp	/^class TreeArbiter : public Arbiter {$/;"	c
TriS1	gpuwattch/cacti/arbiter.h	/^    double TriS1, TriS2;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
TriS1	gpuwattch/cacti/crossbar.h	/^    double TriS1, TriS2;$/;"	m	class:Crossbar	typeref:typename:double
TriS1	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
TriS2	gpuwattch/cacti/arbiter.h	/^    double TriS1, TriS2;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
TriS2	gpuwattch/cacti/crossbar.h	/^    double TriS1, TriS2;$/;"	m	class:Crossbar	typeref:typename:double
TriS2	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
Tx	cuda-sim/ptx_ir.h	/^   unsigned int Tx,Ty; \/\/tiling factor dimensions of layout of texels per 64B cache block$/;"	m	struct:textureInfo	typeref:typename:unsigned int
Tx_numbits	cuda-sim/ptx_ir.h	/^   unsigned int Tx_numbits,Ty_numbits; \/\/log2(T)$/;"	m	struct:textureInfo	typeref:typename:unsigned int
Ty	cuda-sim/ptx_ir.h	/^   unsigned int Tx,Ty; \/\/tiling factor dimensions of layout of texels per 64B cache block$/;"	m	struct:textureInfo	typeref:typename:unsigned int
Ty_numbits	cuda-sim/ptx_ir.h	/^   unsigned int Tx_numbits,Ty_numbits; \/\/log2(T)$/;"	m	struct:textureInfo	typeref:typename:unsigned int
UCA	gpuwattch/cacti/uca.cc	/^UCA::UCA(const DynamicParameter & dyn_p)$/;"	f	class:UCA
UCA	gpuwattch/cacti/uca.h	/^class UCA : public Component$/;"	c
UINT16_MAX	intersim2/lex.yy.c	/^#define UINT16_MAX /;"	d	file:
UINT32_MAX	intersim2/lex.yy.c	/^#define UINT32_MAX /;"	d	file:
UINT8_MAX	intersim2/lex.yy.c	/^#define UINT8_MAX /;"	d	file:
UNI_LEAK_STACK_FACTOR	gpuwattch/cacti/basic_circuit.h	/^#define UNI_LEAK_STACK_FACTOR /;"	d
UNKNOWN	intersim2/networks/anynet.cpp	/^		 UNKNOWN};$/;"	e	enum:AnyNet::readFile::ParseType	file:
UNKOWN_OP	abstract_hardware_model.h	/^    UNKOWN_OP,$/;"	e	enum:operation_pipeline_t
UN_OP	abstract_hardware_model.h	/^	UN_OP=-1,$/;"	e	enum:uarch_operand_type_t
Uncore_device	gpuwattch/basic_components.h	/^	Uncore_device,$/;"	e	enum:Device_ty
UndiffCore	gpuwattch/logic.cc	/^UndiffCore::UndiffCore(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, con/;"	f	class:UndiffCore
UndiffCore	gpuwattch/logic.h	/^class UndiffCore :public Component{$/;"	c
UniformBackgroundTrafficPattern	intersim2/traffic.cpp	/^UniformBackgroundTrafficPattern::UniformBackgroundTrafficPattern(int nodes, vector<int> excluded/;"	f	class:UniformBackgroundTrafficPattern
UniformBackgroundTrafficPattern	intersim2/traffic.hpp	/^class UniformBackgroundTrafficPattern : public RandomTrafficPattern {$/;"	c
UniformRandomTrafficPattern	intersim2/traffic.cpp	/^UniformRandomTrafficPattern::UniformRandomTrafficPattern(int nodes)$/;"	f	class:UniformRandomTrafficPattern
UniformRandomTrafficPattern	intersim2/traffic.hpp	/^class UniformRandomTrafficPattern : public RandomTrafficPattern {$/;"	c
Update	intersim2/arbiters/prio_arb.cpp	/^void PriorityArbiter::Update( )$/;"	f	class:PriorityArbiter	typeref:typename:void
UpdatePriority	intersim2/vc.cpp	/^void VC::UpdatePriority()$/;"	f	class:VC	typeref:typename:void
UpdateState	intersim2/arbiters/matrix_arb.cpp	/^void MatrixArbiter::UpdateState() {$/;"	f	class:MatrixArbiter	typeref:typename:void
UpdateState	intersim2/arbiters/roundrobin_arb.cpp	/^void RoundRobinArbiter::UpdateState() {$/;"	f	class:RoundRobinArbiter	typeref:typename:void
UpdateState	intersim2/arbiters/tree_arb.cpp	/^void TreeArbiter::UpdateState() {$/;"	f	class:TreeArbiter	typeref:typename:void
UpdateStats	intersim2/trafficmanager.cpp	/^void TrafficManager::UpdateStats() {$/;"	f	class:TrafficManager	typeref:typename:void
UsedBy	intersim2/buffer_state.hpp	/^  inline int UsedBy(int vc = 0) const {$/;"	f	class:BufferState	typeref:typename:int
UsedCredits	intersim2/routers/chaos_router.hpp	/^  virtual vector<int> UsedCredits() const { return vector<int>(); }$/;"	f	class:ChaosRouter	typeref:typename:vector<int>
UsedCredits	intersim2/routers/event_router.hpp	/^  virtual vector<int> UsedCredits() const { return vector<int>(); }$/;"	f	class:EventRouter	typeref:typename:vector<int>
UsedCredits	intersim2/routers/iq_router.cpp	/^vector<int> IQRouter::UsedCredits() const$/;"	f	class:IQRouter	typeref:typename:vector<int>
VALID	gpgpu-sim/gpu-cache.h	/^    VALID,$/;"	e	enum:cache_block_state
VBITSENSEMIN	gpuwattch/cacti/const.h	/^#define VBITSENSEMIN /;"	d
VC	intersim2/vc.cpp	/^VC::VC( const Configuration& config, int outputs, $/;"	f	class:VC
VC	intersim2/vc.hpp	/^class VC : public Module {$/;"	c
VCSTATE	intersim2/vc.cpp	/^const char * const VC::VCSTATE[] = {"idle",$/;"	m	class:VC	typeref:typename:const char * const[]
VCSTATE	intersim2/vc.hpp	/^  static const char * const VCSTATE[];$/;"	m	class:VC	typeref:typename:const char * const[]
VC_COUNT	gpuwattch/cacti/highradix.h	/^    double VC_COUNT;$/;"	m	class:HighRadix	typeref:typename:double
VDD_STORAGE_LOSS_FRACTION_WORST	gpuwattch/cacti/const.h	/^const double VDD_STORAGE_LOSS_FRACTION_WORST = 0.125;$/;"	v	typeref:typename:const double
VERSION_H_	gpuwattch/version.h	/^#define VERSION_H_$/;"	d
VER_MAJOR	gpuwattch/version.h	/^#define VER_MAJOR	/;"	d
VER_MINOR	gpuwattch/version.h	/^#define VER_MINOR	/;"	d
VER_UPDATE	gpuwattch/version.h	/^#define VER_UPDATE	/;"	d
VISUALIZER_H_INCLUDED	gpgpu-sim/visualizer.h	/^#define VISUALIZER_H_INCLUDED$/;"	d
VOL_SWING	gpuwattch/cacti/wire.cc	/^#define VOL_SWING /;"	d	file:
VPATH	gpuwattch/mcpat.mk	/^VPATH = cacti$/;"	m
VPATH	gpuwattch/mcpatXeonCore.mk	/^VPATH = cacti$/;"	m
VSINV	gpuwattch/cacti/const.h	/^#define VSINV /;"	d
VTHCOMPINV	gpuwattch/cacti/const.h	/^#define VTHCOMPINV /;"	d
VTHEVALINV	gpuwattch/cacti/const.h	/^#define VTHEVALINV /;"	d
VTHFA1	gpuwattch/cacti/const.h	/^#define VTHFA1 /;"	d
VTHFA2	gpuwattch/cacti/const.h	/^#define VTHFA2 /;"	d
VTHFA3	gpuwattch/cacti/const.h	/^#define VTHFA3 /;"	d
VTHFA4	gpuwattch/cacti/const.h	/^#define VTHFA4 /;"	d
VTHFA5	gpuwattch/cacti/const.h	/^#define VTHFA5 /;"	d
VTHFA6	gpuwattch/cacti/const.h	/^#define VTHFA6 /;"	d
VTHMUXNAND	gpuwattch/cacti/const.h	/^#define VTHMUXNAND /;"	d
VTHSENSEEXTDRV	gpuwattch/cacti/const.h	/^#define VTHSENSEEXTDRV /;"	d
V_b_sense	gpuwattch/cacti/parameter.h	/^    double V_b_sense;$/;"	m	class:DynamicParameter	typeref:typename:double
Variance	intersim2/stats.cpp	/^double Stats::Variance( ) const$/;"	f	class:Stats	typeref:typename:double
Vbitpre	gpuwattch/cacti/parameter.h	/^    double Vbitpre;$/;"	m	class:TechnologyParameter::MemoryType	typeref:typename:double
Vdd	gpuwattch/cacti/arbiter.h	/^    double min_w_pmos, Vdd;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
Vdd	gpuwattch/cacti/crossbar.h	/^    double min_w_pmos, Vdd;$/;"	m	class:Crossbar	typeref:typename:double
Vdd	gpuwattch/cacti/parameter.h	/^    double Vdd;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
Vdd	gpuwattch/cacti/router.h	/^    double Vdd;$/;"	m	class:MCPAT_Router	typeref:typename:double
Vdd	intersim2/power/power_module.hpp	/^  double Vdd  ;$/;"	m	class:Power_Module	typeref:typename:double
Vth	gpuwattch/cacti/parameter.h	/^    double Vth;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
WARPID_REG	cuda-sim/opcodes.h	/^   WARPID_REG,$/;"	e	enum:special_regs
WARPSZ_REG	cuda-sim/opcodes.h	/^   WARPSZ_REG$/;"	e	enum:special_regs
WARP_PER_CTA_MAX	gpgpu-sim/shader.h	/^const unsigned WARP_PER_CTA_MAX = 48;$/;"	v	typeref:typename:const unsigned
WB_CACHE_RSRV_FAIL	gpgpu-sim/stats.h	/^   WB_CACHE_RSRV_FAIL,$/;"	e	enum:mem_stage_stall_type
WB_ICNT_RC_FAIL	gpgpu-sim/stats.h	/^   WB_ICNT_RC_FAIL,$/;"	e	enum:mem_stage_stall_type
WIN32_LEAN_AND_MEAN	gpuwattch/xmlParser.cc	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIRE_TYPES	gpuwattch/cacti/const.h	/^#define WIRE_TYPES /;"	d
WL	gpgpu-sim/gpu-sim.h	/^   unsigned WL;     \/\/WRITE latency$/;"	m	struct:memory_config	typeref:typename:unsigned
WNANDn	gpuwattch/logic.h	/^	double WNANDn ;$/;"	m	class:Pipeline	typeref:typename:double
WNANDp	gpuwattch/logic.h	/^	double WNANDp;$/;"	m	class:Pipeline	typeref:typename:double
WNORn	gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check	typeref:typename:double
WNORp	gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check	typeref:typename:double
WORD_SIZE	abstract_hardware_model.h	/^    static const address_type WORD_SIZE=4;$/;"	m	struct:core_config	typeref:typename:const address_type
WRC_H	gpgpu-sim/wrc.h	/^#define WRC_H$/;"	d
WRITE	gpgpu-sim/dram.h	/^#define WRITE /;"	d
WRITE_ACK	gpgpu-sim/mem_fetch.h	/^   WRITE_ACK$/;"	e	enum:mf_type
WRITE_ALLOC	gpgpu-sim/shader.h	/^      WRITE_ALLOC,$/;"	e	enum:opndcoll_rfu_t::alloc_t
WRITE_ALLOCATE	gpgpu-sim/gpu-cache.h	/^	WRITE_ALLOCATE$/;"	e	enum:write_allocate_policy_t
WRITE_BACK	gpgpu-sim/gpu-cache.h	/^    WRITE_BACK,$/;"	e	enum:write_policy_t
WRITE_BACK_REQUEST_SENT	gpgpu-sim/gpu-cache.h	/^    WRITE_BACK_REQUEST_SENT,$/;"	e	enum:cache_event
WRITE_EVICT	gpgpu-sim/gpu-cache.h	/^    WRITE_EVICT,$/;"	e	enum:write_policy_t
WRITE_MASK_SIZE	gpgpu-sim/shader.h	/^#define WRITE_MASK_SIZE /;"	d
WRITE_PACKET_SIZE	gpgpu-sim/shader.h	/^#define WRITE_PACKET_SIZE /;"	d
WRITE_REPLY	intersim2/flit.hpp	/^		  WRITE_REPLY   = 3,$/;"	e	enum:Flit::FlitType
WRITE_REQUEST	gpgpu-sim/mem_fetch.h	/^   WRITE_REQUEST,$/;"	e	enum:mf_type
WRITE_REQUEST	intersim2/flit.hpp	/^		  WRITE_REQUEST = 2,$/;"	e	enum:Flit::FlitType
WRITE_REQUEST_SENT	gpgpu-sim/gpu-cache.h	/^    WRITE_REQUEST_SENT$/;"	e	enum:cache_event
WRITE_THROUGH	gpgpu-sim/gpu-cache.h	/^    WRITE_THROUGH,$/;"	e	enum:write_policy_t
WST	gpgpu-sim/warp_status.cc	/^	WST::WST(unsigned warpCount){$/;"	f	class:WST
WST	gpgpu-sim/warp_status.h	/^class WST{$/;"	c
WST_H	gpgpu-sim/warp_status.h	/^#define WST_H$/;"	d
WTPc	gpgpu-sim/dram.h	/^   unsigned int WTPc; \/\/ write to precharge$/;"	m	struct:bank_t	typeref:typename:unsigned int
WTRc	gpgpu-sim/dram.h	/^   unsigned int WTRc;   \/\/write to read penalty applies across banks$/;"	m	class:dram_t	typeref:typename:unsigned int
W_DFQD1	intersim2/power/power_module.hpp	/^  double W_DFQD1;$/;"	m	class:Power_Module	typeref:typename:double
W_INVD2	intersim2/power/power_module.hpp	/^  double W_INVD2;$/;"	m	class:Power_Module	typeref:typename:double
W_ND2D1	intersim2/power/power_module.hpp	/^  double W_ND2D1;$/;"	m	class:Power_Module	typeref:typename:double
W_SRAM	intersim2/power/power_module.hpp	/^  double W_SRAM;$/;"	m	class:Power_Module	typeref:typename:double
Wavefront	intersim2/allocators/wavefront.cpp	/^Wavefront::Wavefront( Module *parent, const string& name,$/;"	f	class:Wavefront
Wavefront	intersim2/allocators/wavefront.hpp	/^class Wavefront : public DenseAllocator {$/;"	c
Waveguide	gpuwattch/cacti/highradix.h	/^class Waveguide : public Component$/;"	c
Wcompn	gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check	typeref:typename:double
Wcompp	gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check	typeref:typename:double
Wcomppreequ	gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check	typeref:typename:double
WdecNANDn	gpuwattch/logic.h	/^	double WdecNANDn;$/;"	m	class:DFFCell	typeref:typename:double
WdecNANDp	gpuwattch/logic.h	/^	double WdecNANDp;$/;"	m	class:DFFCell	typeref:typename:double
Wevalinvn	gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check	typeref:typename:double
Wevalinvp	gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check	typeref:typename:double
Wire	gpuwattch/cacti/wire.cc	/^Wire::Wire($/;"	f	class:Wire
Wire	gpuwattch/cacti/wire.cc	/^Wire::Wire(double w_s, double s_s, enum Wire_placement wp, double resis, TechnologyParameter::De/;"	f	class:Wire
Wire	gpuwattch/cacti/wire.h	/^class Wire : public Component$/;"	c
Wire_placement	gpuwattch/cacti/basic_circuit.h	/^enum Wire_placement {$/;"	g
Wire_type	gpuwattch/cacti/cacti_interface.h	/^enum Wire_type$/;"	g
WmuxdrvNANDn	gpuwattch/cacti/const.h	/^const double WmuxdrvNANDn = 0;$/;"	v	typeref:typename:const double
WmuxdrvNANDp	gpuwattch/cacti/const.h	/^const double WmuxdrvNANDp = 0;$/;"	v	typeref:typename:const double
Woutdrivern	gpuwattch/arch_const.h	/^const double Woutdrivern	=60*0.09;\/\/(48.0 * LSCALE)$/;"	v	typeref:typename:const double
Woutdriverp	gpuwattch/arch_const.h	/^const double Woutdriverp	=100 * 0.09;\/\/(80.0 * LSCALE)$/;"	v	typeref:typename:const double
Woutdrvnandn	gpuwattch/arch_const.h	/^const double Woutdrvnandn	=30 *0.09;\/\/(24.0 * LSCALE)$/;"	v	typeref:typename:const double
Woutdrvnandp	gpuwattch/arch_const.h	/^const double Woutdrvnandp	=12.5 *0.09;\/\/(10.0 * LSCALE)$/;"	v	typeref:typename:const double
Woutdrvnorn	gpuwattch/arch_const.h	/^const double Woutdrvnorn	=7.5*0.09;\/\/(6.0 * LSCALE)$/;"	v	typeref:typename:const double
Woutdrvnorp	gpuwattch/arch_const.h	/^const double Woutdrvnorp  =50 * 0.09;\/\/	(40.0 * LSCALE)$/;"	v	typeref:typename:const double
Wrc	gpgpu-sim/wrc.cc	/^Wrc::Wrc(){$/;"	f	class:Wrc
Wrc	gpgpu-sim/wrc.h	/^class Wrc{$/;"	c
Write	intersim2/pipefifo.hpp	/^template<class T> void PipelineFIFO<T>::Write( T* val, int lane )$/;"	f	class:PipelineFIFO	typeref:typename:void
WriteAll	intersim2/pipefifo.hpp	/^template<class T> void PipelineFIFO<T>::WriteAll( T* val )$/;"	f	class:PipelineFIFO	typeref:typename:void
WriteCredit	intersim2/networks/network.cpp	/^void Network::WriteCredit( Credit *c, int dest )$/;"	f	class:Network	typeref:typename:void
WriteFile	intersim2/config_utils.cpp	/^void Configuration::WriteFile(string const & filename) {$/;"	f	class:Configuration	typeref:typename:void
WriteFlit	intersim2/networks/network.cpp	/^void Network::WriteFlit( Flit *f, int source )$/;"	f	class:Network	typeref:typename:void
WriteMatlabFile	intersim2/config_utils.cpp	/^void Configuration::WriteMatlabFile(ostream * config_out) const {$/;"	f	class:Configuration	typeref:typename:void
WriteOutBuffer	intersim2/interconnect_interface.cpp	/^void InterconnectInterface::WriteOutBuffer(int subnet, int output_icntID, Flit*  flit )$/;"	f	class:InterconnectInterface	typeref:typename:void
WriteOutputs	intersim2/channel.hpp	/^void Channel<T>::WriteOutputs() {$/;"	f	class:Channel	typeref:typename:void
WriteOutputs	intersim2/flitchannel.cpp	/^void FlitChannel::WriteOutputs() {$/;"	f	class:FlitChannel	typeref:typename:void
WriteOutputs	intersim2/networks/network.cpp	/^void Network::WriteOutputs( )$/;"	f	class:Network	typeref:typename:void
WriteOutputs	intersim2/routers/chaos_router.cpp	/^void ChaosRouter::WriteOutputs( )$/;"	f	class:ChaosRouter	typeref:typename:void
WriteOutputs	intersim2/routers/event_router.cpp	/^void EventRouter::WriteOutputs( )$/;"	f	class:EventRouter	typeref:typename:void
WriteOutputs	intersim2/routers/iq_router.cpp	/^void IQRouter::WriteOutputs( )$/;"	f	class:IQRouter	typeref:typename:void
WriteStats	intersim2/batchtrafficmanager.cpp	/^void BatchTrafficManager::WriteStats(ostream & os) const$/;"	f	class:BatchTrafficManager	typeref:typename:void
WriteStats	intersim2/trafficmanager.cpp	/^void TrafficManager::WriteStats(ostream & os) const {$/;"	f	class:TrafficManager	typeref:typename:void
Write_back	gpuwattch/basic_components.h	/^	Write_back$/;"	e	enum:Cache_policy
Write_through	gpuwattch/basic_components.h	/^	Write_through,$/;"	e	enum:Cache_policy
XML	gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:BranchPredictor	typeref:typename:ParseXML *
XML	gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:Core	typeref:typename:ParseXML *
XML	gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:EXECU	typeref:typename:ParseXML *
XML	gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:InstFetchU	typeref:typename:ParseXML *
XML	gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:LoadStoreU	typeref:typename:ParseXML *
XML	gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:MemManU	typeref:typename:ParseXML *
XML	gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:RENAMINGU	typeref:typename:ParseXML *
XML	gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:RegFU	typeref:typename:ParseXML *
XML	gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:SchedulerU	typeref:typename:ParseXML *
XML	gpuwattch/iocontrollers.h	/^	ParseXML *XML;$/;"	m	class:FlashController	typeref:typename:ParseXML *
XML	gpuwattch/iocontrollers.h	/^	ParseXML *XML;$/;"	m	class:NIUController	typeref:typename:ParseXML *
XML	gpuwattch/iocontrollers.h	/^	ParseXML *XML;$/;"	m	class:PCIeController	typeref:typename:ParseXML *
XML	gpuwattch/logic.h	/^	ParseXML *XML;$/;"	m	class:FunctionalUnit	typeref:typename:ParseXML *
XML	gpuwattch/logic.h	/^	ParseXML *XML;$/;"	m	class:UndiffCore	typeref:typename:ParseXML *
XML	gpuwattch/memoryctrl.h	/^	ParseXML *XML;$/;"	m	class:DRAM	typeref:typename:ParseXML *
XML	gpuwattch/memoryctrl.h	/^	ParseXML *XML;$/;"	m	class:MCFrontEnd	typeref:typename:ParseXML *
XML	gpuwattch/memoryctrl.h	/^	ParseXML *XML;$/;"	m	class:MemoryController	typeref:typename:ParseXML *
XML	gpuwattch/noc.h	/^	ParseXML *XML;$/;"	m	class:NoC	typeref:typename:ParseXML *
XML	gpuwattch/processor.h	/^	ParseXML *XML;$/;"	m	class:Processor	typeref:typename:ParseXML *
XML	gpuwattch/sharedcache.h	/^    ParseXML * XML;$/;"	m	class:CCdir	typeref:typename:ParseXML *
XML	gpuwattch/sharedcache.h	/^    ParseXML * XML;$/;"	m	class:SharedCache	typeref:typename:ParseXML *
XML	gpuwattch/xmlParser.cc	/^typedef struct XML$/;"	s	file:
XML	gpuwattch/xmlParser.cc	/^} XML;$/;"	t	typeref:struct:XML	file:
XMLAttribute	gpuwattch/xmlParser.h	/^typedef struct XMLAttribute {$/;"	s
XMLAttribute	gpuwattch/xmlParser.h	/^} XMLAttribute;$/;"	t	typeref:struct:XMLAttribute
XMLCHAR	gpuwattch/xmlParser.h	/^    #define XMLCHAR /;"	d
XMLCSTR	gpuwattch/xmlParser.h	/^    #define XMLCSTR /;"	d
XMLCharEncoding	gpuwattch/xmlParser.h	/^    typedef enum XMLCharEncoding$/;"	g	struct:XMLNode
XMLCharEncoding	gpuwattch/xmlParser.h	/^    } XMLCharEncoding;$/;"	t	struct:XMLNode	typeref:enum:XMLNode::XMLCharEncoding
XMLCharacterEntity	gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR s; int l; XMLCHAR c;} XMLCharacterEntity;$/;"	t	typeref:struct:__anon33c5d5fd0208	file:
XMLClear	gpuwattch/xmlParser.h	/^typedef struct XMLClear {$/;"	s
XMLClear	gpuwattch/xmlParser.h	/^} XMLClear;$/;"	t	typeref:struct:XMLClear
XMLClearTags	gpuwattch/xmlParser.cc	/^static ALLXMLClearTag XMLClearTags[] =$/;"	v	typeref:typename:ALLXMLClearTag[]	file:
XMLDLLENTRY	gpuwattch/xmlParser.h	/^#define XMLDLLENTRY /;"	d
XMLDLLENTRY	gpuwattch/xmlParser.h	/^#define XMLDLLENTRY$/;"	d
XMLElementPosition	gpuwattch/xmlParser.h	/^typedef int XMLElementPosition;$/;"	t	typeref:typename:int
XMLElementType	gpuwattch/xmlParser.h	/^typedef enum XMLElementType$/;"	g
XMLElementType	gpuwattch/xmlParser.h	/^} XMLElementType;$/;"	t	typeref:enum:XMLElementType
XMLEntities	gpuwattch/xmlParser.cc	/^static XMLCharacterEntity XMLEntities[] =$/;"	v	typeref:typename:XMLCharacterEntity[]	file:
XMLError	gpuwattch/xmlParser.h	/^typedef enum XMLError$/;"	g
XMLError	gpuwattch/xmlParser.h	/^} XMLError;$/;"	t	typeref:enum:XMLError
XMLNode	gpuwattch/xmlParser.cc	/^XMLNode::XMLNode(XMLNodeData *pParent, XMLSTR lpszName, char isDeclaration)$/;"	f	class:XMLNode
XMLNode	gpuwattch/xmlParser.cc	/^XMLNode::XMLNode(const XMLNode &A)$/;"	f	class:XMLNode
XMLNode	gpuwattch/xmlParser.cc	/^XMLNode::XMLNode(struct XMLNodeDataTag *p){ d=p; (p->ref_count)++; }$/;"	f	class:XMLNode
XMLNode	gpuwattch/xmlParser.h	/^    XMLNode(): d(NULL){};$/;"	f	struct:XMLNode
XMLNode	gpuwattch/xmlParser.h	/^typedef struct XMLDLLENTRY XMLNode$/;"	s
XMLNode	gpuwattch/xmlParser.h	/^} XMLNode;$/;"	t	typeref:struct:XMLNode
XMLNodeContents	gpuwattch/xmlParser.h	/^typedef struct XMLNodeContents$/;"	s
XMLNodeContents	gpuwattch/xmlParser.h	/^} XMLNodeContents;$/;"	t	typeref:struct:XMLNodeContents
XMLNodeData	gpuwattch/xmlParser.h	/^      } XMLNodeData;$/;"	t	struct:XMLNode	typeref:struct:XMLNode::XMLNodeDataTag
XMLNodeDataTag	gpuwattch/xmlParser.h	/^      typedef struct XMLNodeDataTag \/\/ to allow shallow copy and "intelligent\/smart" pointers/;"	s	struct:XMLNode
XMLParserBase64Tool	gpuwattch/xmlParser.h	/^    XMLParserBase64Tool(): buf(NULL),buflen(0){}$/;"	f	struct:XMLParserBase64Tool
XMLParserBase64Tool	gpuwattch/xmlParser.h	/^typedef struct XMLDLLENTRY XMLParserBase64Tool$/;"	s
XMLParserBase64Tool	gpuwattch/xmlParser.h	/^}XMLParserBase64Tool;$/;"	t	typeref:struct:XMLParserBase64Tool
XMLResults	gpuwattch/xmlParser.h	/^typedef struct XMLResults$/;"	s
XMLResults	gpuwattch/xmlParser.h	/^} XMLResults;$/;"	t	typeref:struct:XMLResults
XMLSTR	gpuwattch/xmlParser.h	/^    #define XMLSTR /;"	d
XMLTokenType	gpuwattch/xmlParser.cc	/^} XMLTokenType;$/;"	t	typeref:enum:XMLTokenTypeTag	file:
XMLTokenTypeTag	gpuwattch/xmlParser.cc	/^typedef enum XMLTokenTypeTag$/;"	g	file:
XML_ByteTable	gpuwattch/xmlParser.cc	/^static const char *XML_ByteTable=(const char *)XML_utf8ByteTable; \/\/ the default is "character/;"	v	typeref:typename:const char *	file:
XML_PARSE_H_	gpuwattch/XML_Parse.h	/^#define XML_PARSE_H_$/;"	d
XML_gb2312ByteTable	gpuwattch/xmlParser.cc	/^static const char XML_gb2312ByteTable[256] =$/;"	v	typeref:typename:const char[256]	file:
XML_gbk_big5_ByteTable	gpuwattch/xmlParser.cc	/^static const char XML_gbk_big5_ByteTable[256] =$/;"	v	typeref:typename:const char[256]	file:
XML_interface	gpuwattch/logic.h	/^	const ParseXML *XML_interface;$/;"	m	class:selection_logic	typeref:typename:const ParseXML *
XML_isSPACECHAR	gpuwattch/xmlParser.cc	/^#define XML_isSPACECHAR(/;"	d	file:
XML_legacyByteTable	gpuwattch/xmlParser.cc	/^static const char XML_legacyByteTable[256] =$/;"	v	typeref:typename:const char[256]	file:
XML_sjisByteTable	gpuwattch/xmlParser.cc	/^static const char XML_sjisByteTable[256] =$/;"	v	typeref:typename:const char[256]	file:
XML_utf8ByteTable	gpuwattch/xmlParser.cc	/^static const char XML_utf8ByteTable[256] =$/;"	v	typeref:typename:const char[256]	file:
YACC	intersim2/Makefile	/^YACC   = bison -y$/;"	m
YACC_OBJS	intersim2/Makefile	/^YACC_OBJS = ${OBJDIR}\/y.tab.o$/;"	m
YYABORT	intersim2/y.tab.c	/^#define YYABORT /;"	d	file:
YYACCEPT	intersim2/y.tab.c	/^#define YYACCEPT /;"	d	file:
YYBACKUP	intersim2/y.tab.c	/^#define YYBACKUP(/;"	d	file:
YYBISON	intersim2/y.tab.c	/^#define YYBISON /;"	d	file:
YYBISON_VERSION	intersim2/y.tab.c	/^#define YYBISON_VERSION /;"	d	file:
YYCASE_	intersim2/y.tab.c	/^# define YYCASE_(/;"	d	file:
YYCOPY	intersim2/y.tab.c	/^#   define YYCOPY(/;"	d	file:
YYCOPY_NEEDED	intersim2/y.tab.c	/^# define YYCOPY_NEEDED /;"	d	file:
YYDEBUG	intersim2/y.tab.c	/^# define YYDEBUG /;"	d	file:
YYDEBUG	intersim2/y.tab.h	/^# define YYDEBUG /;"	d
YYDPRINTF	intersim2/y.tab.c	/^# define YYDPRINTF(/;"	d	file:
YYEMPTY	intersim2/y.tab.c	/^#define YYEMPTY /;"	d	file:
YYEOF	intersim2/y.tab.c	/^#define YYEOF /;"	d	file:
YYERRCODE	intersim2/y.tab.c	/^#define YYERRCODE /;"	d	file:
YYERROR	intersim2/y.tab.c	/^#define YYERROR /;"	d	file:
YYERROR_VERBOSE	intersim2/y.tab.c	/^# define YYERROR_VERBOSE /;"	d	file:
YYERROR_VERBOSE_ARGS_MAXIMUM	intersim2/y.tab.c	/^  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };$/;"	e	enum:yysyntax_error::__anon05b13f800103	file:
YYFINAL	intersim2/y.tab.c	/^#define YYFINAL /;"	d	file:
YYFPRINTF	intersim2/y.tab.c	/^#  define YYFPRINTF /;"	d	file:
YYFREE	intersim2/y.tab.c	/^#   define YYFREE /;"	d	file:
YYINITDEPTH	intersim2/y.tab.c	/^# define YYINITDEPTH /;"	d	file:
YYLAST	intersim2/y.tab.c	/^#define YYLAST /;"	d	file:
YYMALLOC	intersim2/y.tab.c	/^#   define YYMALLOC /;"	d	file:
YYMAXDEPTH	intersim2/y.tab.c	/^# define YYMAXDEPTH /;"	d	file:
YYMAXUTOK	intersim2/y.tab.c	/^#define YYMAXUTOK /;"	d	file:
YYNNTS	intersim2/y.tab.c	/^#define YYNNTS /;"	d	file:
YYNRULES	intersim2/y.tab.c	/^#define YYNRULES /;"	d	file:
YYNSTATES	intersim2/y.tab.c	/^#define YYNSTATES /;"	d	file:
YYNTOKENS	intersim2/y.tab.c	/^#define YYNTOKENS /;"	d	file:
YYPACT_NINF	intersim2/y.tab.c	/^#define YYPACT_NINF /;"	d	file:
YYPOPSTACK	intersim2/y.tab.c	/^#define YYPOPSTACK(/;"	d	file:
YYPULL	intersim2/y.tab.c	/^#define YYPULL /;"	d	file:
YYPURE	intersim2/y.tab.c	/^#define YYPURE /;"	d	file:
YYPUSH	intersim2/y.tab.c	/^#define YYPUSH /;"	d	file:
YYRECOVERING	intersim2/y.tab.c	/^#define YYRECOVERING(/;"	d	file:
YYSIZE_MAXIMUM	intersim2/y.tab.c	/^#define YYSIZE_MAXIMUM /;"	d	file:
YYSIZE_T	intersim2/y.tab.c	/^#  define YYSIZE_T /;"	d	file:
YYSKELETON_NAME	intersim2/y.tab.c	/^#define YYSKELETON_NAME /;"	d	file:
YYSTACK_ALLOC	intersim2/y.tab.c	/^#    define YYSTACK_ALLOC /;"	d	file:
YYSTACK_ALLOC	intersim2/y.tab.c	/^#  define YYSTACK_ALLOC /;"	d	file:
YYSTACK_ALLOC_MAXIMUM	intersim2/y.tab.c	/^#   define YYSTACK_ALLOC_MAXIMUM /;"	d	file:
YYSTACK_BYTES	intersim2/y.tab.c	/^# define YYSTACK_BYTES(/;"	d	file:
YYSTACK_FREE	intersim2/y.tab.c	/^#  define YYSTACK_FREE /;"	d	file:
YYSTACK_FREE	intersim2/y.tab.c	/^#  define YYSTACK_FREE(/;"	d	file:
YYSTACK_GAP_MAXIMUM	intersim2/y.tab.c	/^# define YYSTACK_GAP_MAXIMUM /;"	d	file:
YYSTACK_RELOCATE	intersim2/y.tab.c	/^# define YYSTACK_RELOCATE(/;"	d	file:
YYSTATE	intersim2/lex.yy.c	/^#define YYSTATE /;"	d	file:
YYSTYPE	intersim2/y.tab.c	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	intersim2/y.tab.c	/^union YYSTYPE$/;"	u	file:
YYSTYPE	intersim2/y.tab.h	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE	intersim2/y.tab.h	/^union YYSTYPE$/;"	u
YYSTYPE_IS_DECLARED	intersim2/y.tab.c	/^# define YYSTYPE_IS_DECLARED /;"	d	file:
YYSTYPE_IS_DECLARED	intersim2/y.tab.h	/^# define YYSTYPE_IS_DECLARED /;"	d
YYSTYPE_IS_TRIVIAL	intersim2/y.tab.c	/^# define YYSTYPE_IS_TRIVIAL /;"	d	file:
YYSTYPE_IS_TRIVIAL	intersim2/y.tab.h	/^# define YYSTYPE_IS_TRIVIAL /;"	d
YYSYNTAX_ERROR	intersim2/y.tab.c	/^# define YYSYNTAX_ERROR /;"	d	file:
YYTABLES_NAME	intersim2/lex.yy.c	/^#define YYTABLES_NAME /;"	d	file:
YYTABLE_NINF	intersim2/y.tab.c	/^#define YYTABLE_NINF /;"	d	file:
YYTERROR	intersim2/y.tab.c	/^#define YYTERROR /;"	d	file:
YYTOKENTYPE	intersim2/y.tab.c	/^# define YYTOKENTYPE$/;"	d	file:
YYTOKENTYPE	intersim2/y.tab.h	/^# define YYTOKENTYPE$/;"	d
YYTRANSLATE	intersim2/y.tab.c	/^#define YYTRANSLATE(/;"	d	file:
YYUNDEFTOK	intersim2/y.tab.c	/^#define YYUNDEFTOK /;"	d	file:
YYUSE	intersim2/y.tab.c	/^# define YYUSE(/;"	d	file:
YY_	intersim2/y.tab.c	/^#   define YY_(/;"	d	file:
YY_	intersim2/y.tab.c	/^#  define YY_(/;"	d	file:
YY_ATTRIBUTE	intersim2/y.tab.c	/^#  define YY_ATTRIBUTE(/;"	d	file:
YY_ATTRIBUTE_PURE	intersim2/y.tab.c	/^# define YY_ATTRIBUTE_PURE /;"	d	file:
YY_ATTRIBUTE_UNUSED	intersim2/y.tab.c	/^# define YY_ATTRIBUTE_UNUSED /;"	d	file:
YY_AT_BOL	intersim2/lex.yy.c	/^#define YY_AT_BOL(/;"	d	file:
YY_BREAK	intersim2/lex.yy.c	/^#define YY_BREAK /;"	d	file:
YY_BUFFER_EOF_PENDING	intersim2/lex.yy.c	/^#define YY_BUFFER_EOF_PENDING /;"	d	file:
YY_BUFFER_NEW	intersim2/lex.yy.c	/^#define YY_BUFFER_NEW /;"	d	file:
YY_BUFFER_NORMAL	intersim2/lex.yy.c	/^#define YY_BUFFER_NORMAL /;"	d	file:
YY_BUFFER_STATE	intersim2/lex.yy.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state *	file:
YY_BUF_SIZE	intersim2/lex.yy.c	/^#define YY_BUF_SIZE /;"	d	file:
YY_CHAR	intersim2/lex.yy.c	/^typedef unsigned char YY_CHAR;$/;"	t	typeref:typename:unsigned char	file:
YY_CURRENT_BUFFER	intersim2/lex.yy.c	/^#define YY_CURRENT_BUFFER /;"	d	file:
YY_CURRENT_BUFFER_LVALUE	intersim2/lex.yy.c	/^#define YY_CURRENT_BUFFER_LVALUE /;"	d	file:
YY_DECL	intersim2/lex.yy.c	/^#define YY_DECL /;"	d	file:
YY_DECL_IS_OURS	intersim2/lex.yy.c	/^#define YY_DECL_IS_OURS /;"	d	file:
YY_DO_BEFORE_ACTION	intersim2/lex.yy.c	/^#define YY_DO_BEFORE_ACTION /;"	d	file:
YY_END_OF_BUFFER	intersim2/lex.yy.c	/^#define YY_END_OF_BUFFER /;"	d	file:
YY_END_OF_BUFFER_CHAR	intersim2/lex.yy.c	/^#define YY_END_OF_BUFFER_CHAR /;"	d	file:
YY_EXIT_FAILURE	intersim2/lex.yy.c	/^#define YY_EXIT_FAILURE /;"	d	file:
YY_EXTRA_TYPE	intersim2/lex.yy.c	/^#define YY_EXTRA_TYPE /;"	d	file:
YY_FATAL_ERROR	intersim2/lex.yy.c	/^#define YY_FATAL_ERROR(/;"	d	file:
YY_FLEX_MAJOR_VERSION	intersim2/lex.yy.c	/^#define YY_FLEX_MAJOR_VERSION /;"	d	file:
YY_FLEX_MINOR_VERSION	intersim2/lex.yy.c	/^#define YY_FLEX_MINOR_VERSION /;"	d	file:
YY_FLEX_SUBMINOR_VERSION	intersim2/lex.yy.c	/^#define YY_FLEX_SUBMINOR_VERSION /;"	d	file:
YY_FLUSH_BUFFER	intersim2/lex.yy.c	/^#define YY_FLUSH_BUFFER /;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	intersim2/y.tab.c	/^# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN /;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	intersim2/y.tab.c	/^# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN$/;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	intersim2/y.tab.c	/^# define YY_IGNORE_MAYBE_UNINITIALIZED_END /;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	intersim2/y.tab.c	/^# define YY_IGNORE_MAYBE_UNINITIALIZED_END$/;"	d	file:
YY_INITIAL_VALUE	intersim2/y.tab.c	/^# define YY_INITIAL_VALUE(/;"	d	file:
YY_INPUT	intersim2/lex.yy.c	/^#define YY_INPUT(/;"	d	file:
YY_INT_ALIGNED	intersim2/lex.yy.c	/^#define  YY_INT_ALIGNED /;"	d	file:
YY_LESS_LINENO	intersim2/lex.yy.c	/^    #define YY_LESS_LINENO(/;"	d	file:
YY_LOCATION_PRINT	intersim2/y.tab.c	/^# define YY_LOCATION_PRINT(/;"	d	file:
YY_MORE_ADJ	intersim2/lex.yy.c	/^#define YY_MORE_ADJ /;"	d	file:
YY_NEW_FILE	intersim2/lex.yy.c	/^#define YY_NEW_FILE /;"	d	file:
YY_NULL	intersim2/lex.yy.c	/^#define YY_NULL /;"	d	file:
YY_NULLPTR	intersim2/y.tab.c	/^#   define YY_NULLPTR /;"	d	file:
YY_NUM_RULES	intersim2/lex.yy.c	/^#define YY_NUM_RULES /;"	d	file:
YY_READ_BUF_SIZE	intersim2/lex.yy.c	/^#define YY_READ_BUF_SIZE /;"	d	file:
YY_REDUCE_PRINT	intersim2/y.tab.c	/^# define YY_REDUCE_PRINT(/;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	intersim2/lex.yy.c	/^#define YY_RESTORE_YY_MORE_OFFSET$/;"	d	file:
YY_RULE_SETUP	intersim2/lex.yy.c	/^#define YY_RULE_SETUP /;"	d	file:
YY_SC_TO_UI	intersim2/lex.yy.c	/^#define YY_SC_TO_UI(/;"	d	file:
YY_STACK_PRINT	intersim2/y.tab.c	/^# define YY_STACK_PRINT(/;"	d	file:
YY_START	intersim2/lex.yy.c	/^#define YY_START /;"	d	file:
YY_START_STACK_INCR	intersim2/lex.yy.c	/^#define YY_START_STACK_INCR /;"	d	file:
YY_STATE_BUF_SIZE	intersim2/lex.yy.c	/^#define YY_STATE_BUF_SIZE /;"	d	file:
YY_STATE_EOF	intersim2/lex.yy.c	/^#define YY_STATE_EOF(/;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	intersim2/lex.yy.c	/^#define YY_STRUCT_YY_BUFFER_STATE$/;"	d	file:
YY_SYMBOL_PRINT	intersim2/y.tab.c	/^# define YY_SYMBOL_PRINT(/;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	intersim2/lex.yy.c	/^#define YY_TYPEDEF_YY_BUFFER_STATE$/;"	d	file:
YY_TYPEDEF_YY_SIZE_T	intersim2/lex.yy.c	/^#define YY_TYPEDEF_YY_SIZE_T$/;"	d	file:
YY_USER_ACTION	intersim2/lex.yy.c	/^#define YY_USER_ACTION$/;"	d	file:
YY_USE_CONST	intersim2/lex.yy.c	/^#define YY_USE_CONST$/;"	d	file:
YY_YY_Y_TAB_H_INCLUDED	intersim2/y.tab.c	/^# define YY_YY_Y_TAB_H_INCLUDED$/;"	d	file:
YY_YY_Y_TAB_H_INCLUDED	intersim2/y.tab.h	/^# define YY_YY_Y_TAB_H_INCLUDED$/;"	d
_ALLOCATOR_HPP_	intersim2/allocators/allocator.hpp	/^#define _ALLOCATOR_HPP_$/;"	d
_ANYNET_HPP_	intersim2/networks/anynet.hpp	/^#define _ANYNET_HPP_$/;"	d
_ARBITER_HPP_	intersim2/arbiters/arbiter.hpp	/^#define _ARBITER_HPP_$/;"	d
_AddChild	intersim2/module.cpp	/^void Module::_AddChild( Module *child )$/;"	f	class:Module	typeref:typename:void
_Alloc	intersim2/networks/network.cpp	/^void Network::_Alloc( )$/;"	f	class:Network	typeref:typename:void
_ArrivalArb	intersim2/routers/event_router.cpp	/^void EventRouter::_ArrivalArb( int output )$/;"	f	class:EventRouter	typeref:typename:void
_ArrivalRequests	intersim2/routers/event_router.cpp	/^void EventRouter::_ArrivalRequests( int input ) $/;"	f	class:EventRouter	typeref:typename:void
_BATCHTRAFFICMANAGER_HPP_	intersim2/batchtrafficmanager.hpp	/^#define _BATCHTRAFFICMANAGER_HPP_$/;"	d
_BOOKSIM_CONFIG_HPP_	intersim2/booksim_config.hpp	/^#define _BOOKSIM_CONFIG_HPP_$/;"	d
_BOOKSIM_HPP_	intersim2/booksim.hpp	/^#define _BOOKSIM_HPP_$/;"	d
_BUFFER_HPP_	intersim2/buffer.hpp	/^#define _BUFFER_HPP_$/;"	d
_BUFFER_MONITOR_HPP_	intersim2/power/buffer_monitor.hpp	/^#define _BUFFER_MONITOR_HPP_$/;"	d
_BUFFER_STATE_HPP_	intersim2/buffer_state.hpp	/^#define _BUFFER_STATE_HPP_$/;"	d
_BoundaryBufferItem	intersim2/interconnect_interface.hpp	/^    _BoundaryBufferItem():_packet_n(0) {}$/;"	f	class:InterconnectInterface::_BoundaryBufferItem
_BoundaryBufferItem	intersim2/interconnect_interface.hpp	/^  class _BoundaryBufferItem {$/;"	c	class:InterconnectInterface
_BuildNet	intersim2/networks/anynet.cpp	/^void AnyNet::_BuildNet( const Configuration &config ){$/;"	f	class:AnyNet	typeref:typename:void
_BuildNet	intersim2/networks/cmesh.cpp	/^void CMesh::_BuildNet( const Configuration& config ) {$/;"	f	class:CMesh	typeref:typename:void
_BuildNet	intersim2/networks/dragonfly.cpp	/^void DragonFlyNew::_BuildNet( const Configuration &config )$/;"	f	class:DragonFlyNew	typeref:typename:void
_BuildNet	intersim2/networks/fattree.cpp	/^void FatTree::_BuildNet( const Configuration& config )$/;"	f	class:FatTree	typeref:typename:void
_BuildNet	intersim2/networks/flatfly_onchip.cpp	/^void FlatFlyOnChip::_BuildNet( const Configuration &config )$/;"	f	class:FlatFlyOnChip	typeref:typename:void
_BuildNet	intersim2/networks/fly.cpp	/^void KNFly::_BuildNet( const Configuration &config )$/;"	f	class:KNFly	typeref:typename:void
_BuildNet	intersim2/networks/kncube.cpp	/^void KNCube::_BuildNet( const Configuration &config )$/;"	f	class:KNCube	typeref:typename:void
_BuildNet	intersim2/networks/qtree.cpp	/^void QTree::_BuildNet( const Configuration& config )$/;"	f	class:QTree	typeref:typename:void
_BuildNet	intersim2/networks/tree4.cpp	/^void Tree4::_BuildNet( const Configuration& config )$/;"	f	class:Tree4	typeref:typename:void
_CHANNEL_HPP	intersim2/channel.hpp	/^#define _CHANNEL_HPP$/;"	d
_CHAOS_ROUTER_HPP_	intersim2/routers/chaos_router.hpp	/^#define _CHAOS_ROUTER_HPP_$/;"	d
_CMESH_HPP_	intersim2/networks/cmesh.hpp	/^#define _CMESH_HPP_$/;"	d
_CONFIG_UTILS_HPP_	intersim2/config_utils.hpp	/^#define _CONFIG_UTILS_HPP_$/;"	d
_CREDIT_HPP_	intersim2/credit.hpp	/^#define _CREDIT_HPP_$/;"	d
_CRT_SECURE_NO_DEPRECATE	gpuwattch/xmlParser.cc	/^#define _CRT_SECURE_NO_DEPRECATE$/;"	d	file:
_CXML	gpuwattch/xmlParser.h	/^    #define _CXML(/;"	d
_ClearStats	intersim2/batchtrafficmanager.cpp	/^void BatchTrafficManager::_ClearStats( )$/;"	f	class:BatchTrafficManager	typeref:typename:void
_ClearStats	intersim2/trafficmanager.cpp	/^void TrafficManager::_ClearStats( )$/;"	f	class:TrafficManager	typeref:typename:void
_ComputeLimit	intersim2/buffer_state.cpp	/^int BufferState::FeedbackSharedBufferPolicy::_ComputeLimit(int rtt) const$/;"	f	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:int
_ComputeMaxSlots	intersim2/buffer_state.cpp	/^int BufferState::FeedbackSharedBufferPolicy::_ComputeMaxSlots(int vc) const$/;"	f	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:int
_ComputeRTT	intersim2/buffer_state.cpp	/^int BufferState::FeedbackSharedBufferPolicy::_ComputeRTT(int vc, int last_rtt) const$/;"	f	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:int
_ComputeSize	intersim2/networks/anynet.cpp	/^void AnyNet::_ComputeSize( const Configuration &config ){$/;"	f	class:AnyNet	typeref:typename:void
_ComputeSize	intersim2/networks/cmesh.cpp	/^void CMesh::_ComputeSize( const Configuration &config ) {$/;"	f	class:CMesh	typeref:typename:void
_ComputeSize	intersim2/networks/dragonfly.cpp	/^void DragonFlyNew::_ComputeSize( const Configuration &config )$/;"	f	class:DragonFlyNew	typeref:typename:void
_ComputeSize	intersim2/networks/fattree.cpp	/^void FatTree::_ComputeSize( const Configuration& config )$/;"	f	class:FatTree	typeref:typename:void
_ComputeSize	intersim2/networks/flatfly_onchip.cpp	/^void FlatFlyOnChip::_ComputeSize( const Configuration &config )$/;"	f	class:FlatFlyOnChip	typeref:typename:void
_ComputeSize	intersim2/networks/fly.cpp	/^void KNFly::_ComputeSize( const Configuration &config )$/;"	f	class:KNFly	typeref:typename:void
_ComputeSize	intersim2/networks/kncube.cpp	/^void KNCube::_ComputeSize( const Configuration &config )$/;"	f	class:KNCube	typeref:typename:void
_ComputeSize	intersim2/networks/qtree.cpp	/^void QTree::_ComputeSize( const Configuration& config )$/;"	f	class:QTree	typeref:typename:void
_ComputeSize	intersim2/networks/tree4.cpp	/^void Tree4::_ComputeSize( const Configuration& config )$/;"	f	class:Tree4	typeref:typename:void
_ComputeStats	intersim2/trafficmanager.cpp	/^void TrafficManager::_ComputeStats( const vector<int> & stats, int *sum, int *min, int *max, int/;"	f	class:TrafficManager	typeref:typename:void
_CreateBuffer	intersim2/interconnect_interface.cpp	/^void InterconnectInterface::_CreateBuffer()$/;"	f	class:InterconnectInterface	typeref:typename:void
_CreateNodeMap	intersim2/interconnect_interface.cpp	/^void InterconnectInterface::_CreateNodeMap(unsigned n_shader, unsigned n_mem, unsigned n_node, i/;"	f	class:InterconnectInterface	typeref:typename:void
_DisplayMap	intersim2/interconnect_interface.cpp	/^void InterconnectInterface::_DisplayMap(int dim,int count)$/;"	f	class:InterconnectInterface	typeref:typename:void
_DisplayRemaining	intersim2/trafficmanager.cpp	/^void TrafficManager::_DisplayRemaining( ostream & os ) const $/;"	f	class:TrafficManager	typeref:typename:void
_DragonFly_HPP_	intersim2/networks/dragonfly.hpp	/^#define _DragonFly_HPP_$/;"	d
_EVENT_ROUTER_HPP_	intersim2/routers/event_router.hpp	/^#define _EVENT_ROUTER_HPP_$/;"	d
_EjectionBufferItem	intersim2/interconnect_interface.hpp	/^  typedef queue<Flit*> _EjectionBufferItem;$/;"	t	class:InterconnectInterface	typeref:typename:queue<Flit * >
_FLIT_HPP_	intersim2/flit.hpp	/^#define _FLIT_HPP_$/;"	d
_FLY_HPP_	intersim2/networks/fly.hpp	/^#define _FLY_HPP_$/;"	d
_FatTree_HPP_	intersim2/networks/fattree.hpp	/^#define _FatTree_HPP_$/;"	d
_FindAvailMultiQueue	intersim2/routers/chaos_router.cpp	/^int ChaosRouter::_FindAvailMultiQueue( ) const$/;"	f	class:ChaosRouter	typeref:typename:int
_FlatFlyOnChip_HPP_	intersim2/networks/flatfly_onchip.hpp	/^#define _FlatFlyOnChip_HPP_$/;"	d
_GLOBALS_HPP_	intersim2/globals.hpp	/^#define _GLOBALS_HPP_$/;"	d
_GPUTRAFFICMANAGER_HPP_	intersim2/gputrafficmanager.hpp	/^#define _GPUTRAFFICMANAGER_HPP_$/;"	d
_GeneratePacket	intersim2/gputrafficmanager.cpp	/^void GPUTrafficManager::_GeneratePacket(int source, int stype, int cl, int time, int subnet, int/;"	f	class:GPUTrafficManager	typeref:typename:void
_GeneratePacket	intersim2/trafficmanager.cpp	/^void TrafficManager::_GeneratePacket( int source, int stype, $/;"	f	class:TrafficManager	typeref:typename:void
_GetAveragePacketSize	intersim2/trafficmanager.cpp	/^double TrafficManager::_GetAveragePacketSize(int cl) const$/;"	f	class:TrafficManager	typeref:typename:double
_GetNextPacketSize	intersim2/trafficmanager.cpp	/^int TrafficManager::_GetNextPacketSize(int cl) const$/;"	f	class:TrafficManager	typeref:typename:int
_INJECTION_HPP_	intersim2/injection.hpp	/^#define _INJECTION_HPP_$/;"	d
_INTERCONNECT_INTERFACE_HPP_	intersim2/interconnect_interface.hpp	/^#define _INTERCONNECT_INTERFACE_HPP_$/;"	d
_INTERSIM_CONFIG_HPP_	intersim2/intersim_config.hpp	/^#define _INTERSIM_CONFIG_HPP_$/;"	d
_IQ_ROUTER_HPP_	intersim2/routers/iq_router.hpp	/^#define _IQ_ROUTER_HPP_$/;"	d
_ISLIP_HPP_	intersim2/allocators/islip.hpp	/^#define _ISLIP_HPP_$/;"	d
_InChannel	intersim2/networks/fly.cpp	/^int KNFly::_InChannel( int stage, int addr, int port ) const$/;"	f	class:KNFly	typeref:typename:int
_IncomingFlits	intersim2/routers/event_router.cpp	/^void EventRouter::_IncomingFlits( )$/;"	f	class:EventRouter	typeref:typename:void
_Inject	intersim2/trafficmanager.cpp	/^void TrafficManager::_Inject(){$/;"	f	class:TrafficManager	typeref:typename:void
_InputForOutput	intersim2/routers/chaos_router.cpp	/^int ChaosRouter::_InputForOutput( int output ) const$/;"	f	class:ChaosRouter	typeref:typename:int
_InputIndex	intersim2/networks/qtree.cpp	/^int QTree::_InputIndex( int height, int pos, int port )$/;"	f	class:QTree	typeref:typename:int
_InputQueuing	intersim2/routers/iq_router.cpp	/^void IQRouter::_InputQueuing( )$/;"	f	class:IQRouter	typeref:typename:void
_InputReady	intersim2/routers/chaos_router.cpp	/^bool ChaosRouter::_InputReady( int input ) const$/;"	f	class:ChaosRouter	typeref:typename:bool
_InternalStep	intersim2/routers/chaos_router.cpp	/^void ChaosRouter::_InternalStep( )$/;"	f	class:ChaosRouter	typeref:typename:void
_InternalStep	intersim2/routers/event_router.cpp	/^void EventRouter::_InternalStep( )$/;"	f	class:EventRouter	typeref:typename:void
_InternalStep	intersim2/routers/iq_router.cpp	/^void IQRouter::_InternalStep( )$/;"	f	class:IQRouter	typeref:typename:void
_IsEjectionChan	intersim2/routers/chaos_router.cpp	/^bool ChaosRouter::_IsEjectionChan( int chan ) const$/;"	f	class:ChaosRouter	typeref:typename:bool
_IsInjectionChan	intersim2/routers/chaos_router.cpp	/^bool ChaosRouter::_IsInjectionChan( int chan ) const$/;"	f	class:ChaosRouter	typeref:typename:bool
_IssuePacket	intersim2/batchtrafficmanager.cpp	/^int BatchTrafficManager::_IssuePacket( int source, int cl )$/;"	f	class:BatchTrafficManager	typeref:typename:int
_IssuePacket	intersim2/gputrafficmanager.cpp	/^int  GPUTrafficManager::_IssuePacket( int source, int cl )$/;"	f	class:GPUTrafficManager	typeref:typename:int
_IssuePacket	intersim2/trafficmanager.cpp	/^int TrafficManager::_IssuePacket( int source, int cl )$/;"	f	class:TrafficManager	typeref:typename:int
_KNCUBE_HPP_	intersim2/networks/kncube.hpp	/^#define _KNCUBE_HPP_$/;"	d
_LOA_HPP_	intersim2/allocators/loa.hpp	/^#define _LOA_HPP_$/;"	d
_LeftChannel	intersim2/networks/kncube.cpp	/^int KNCube::_LeftChannel( int node, int dim )$/;"	f	class:KNCube	typeref:typename:int
_LeftNode	intersim2/networks/kncube.cpp	/^int KNCube::_LeftNode( int node, int dim )$/;"	f	class:KNCube	typeref:typename:int
_LoadWatchList	intersim2/trafficmanager.cpp	/^void TrafficManager::_LoadWatchList(const string & filename){$/;"	f	class:TrafficManager	typeref:typename:void
_MATRIX_ARB_HPP_	intersim2/arbiters/matrix_arb.hpp	/^#define _MATRIX_ARB_HPP_$/;"	d
_MAXSIZE_HPP_	intersim2/allocators/maxsize.hpp	/^#define _MAXSIZE_HPP_$/;"	d
_MISC_UTILS_HPP_	intersim2/misc_utils.hpp	/^#define _MISC_UTILS_HPP_$/;"	d
_MODULE_HPP_	intersim2/module.hpp	/^#define _MODULE_HPP_$/;"	d
_MY_STACK_	gpgpu-sim/stack.h	/^#define _MY_STACK_$/;"	d
_MultiQueueForOutput	intersim2/routers/chaos_router.cpp	/^int ChaosRouter::_MultiQueueForOutput( int output ) const$/;"	f	class:ChaosRouter	typeref:typename:int
_MultiQueueFull	intersim2/routers/chaos_router.cpp	/^bool ChaosRouter::_MultiQueueFull( int mq ) const$/;"	f	class:ChaosRouter	typeref:typename:bool
_NETWORK_HPP_	intersim2/networks/network.hpp	/^#define _NETWORK_HPP_$/;"	d
_NextInterestingChannel	intersim2/routers/chaos_router.cpp	/^void ChaosRouter::_NextInterestingChannel( ) $/;"	f	class:ChaosRouter	typeref:typename:void
_Noreturn	intersim2/y.tab.c	/^#  define _Noreturn /;"	d	file:
_OUTPUTSET_HPP_	intersim2/outputset.hpp	/^#define _OUTPUTSET_HPP_$/;"	d
_OutChannel	intersim2/networks/fly.cpp	/^int KNFly::_OutChannel( int stage, int addr, int port ) const$/;"	f	class:KNFly	typeref:typename:int
_OutputAdvance	intersim2/routers/chaos_router.cpp	/^void ChaosRouter::_OutputAdvance( )$/;"	f	class:ChaosRouter	typeref:typename:void
_OutputAvail	intersim2/routers/chaos_router.cpp	/^bool ChaosRouter::_OutputAvail( int out ) const$/;"	f	class:ChaosRouter	typeref:typename:bool
_OutputFull	intersim2/routers/chaos_router.cpp	/^bool ChaosRouter::_OutputFull( int out ) const$/;"	f	class:ChaosRouter	typeref:typename:bool
_OutputIndex	intersim2/networks/qtree.cpp	/^int QTree::_OutputIndex( int height, int pos, int port )$/;"	f	class:QTree	typeref:typename:int
_OutputQueuing	intersim2/routers/event_router.cpp	/^void EventRouter::_OutputQueuing( )$/;"	f	class:EventRouter	typeref:typename:void
_OutputQueuing	intersim2/routers/iq_router.cpp	/^void IQRouter::_OutputQueuing( )$/;"	f	class:IQRouter	typeref:typename:void
_OverallStatsCSV	intersim2/batchtrafficmanager.cpp	/^string BatchTrafficManager::_OverallStatsCSV(int c) const$/;"	f	class:BatchTrafficManager	typeref:typename:string
_OverallStatsCSV	intersim2/trafficmanager.cpp	/^string TrafficManager::_OverallStatsCSV(int c) const$/;"	f	class:TrafficManager	typeref:typename:string
_PACKET_REPLY_INFO_HPP_	intersim2/packet_reply_info.hpp	/^#define _PACKET_REPLY_INFO_HPP_$/;"	d
_PIM_HPP_	intersim2/allocators/pim.hpp	/^#define _PIM_HPP_$/;"	d
_PIM_iter	intersim2/allocators/pim.hpp	/^  int _PIM_iter;$/;"	m	class:PIM	typeref:typename:int
_PIPEFIFO_HPP_	intersim2/pipefifo.hpp	/^#define _PIPEFIFO_HPP_$/;"	d
_POWER_CONFIG_HPP_	intersim2/booksim_config.hpp	/^#define _POWER_CONFIG_HPP_$/;"	d
_POWER_MODULE_HPP_	intersim2/power/power_module.hpp	/^#define _POWER_MODULE_HPP_$/;"	d
_PRIO_ARB_HPP_	intersim2/arbiters/prio_arb.hpp	/^#define _PRIO_ARB_HPP_$/;"	d
_PacketsOutstanding	intersim2/trafficmanager.cpp	/^bool TrafficManager::_PacketsOutstanding( ) const$/;"	f	class:TrafficManager	typeref:typename:bool
_ProcessWaiting	intersim2/routers/event_router.cpp	/^void EventRouter::_ProcessWaiting( int output, int out_vc )$/;"	f	class:EventRouter	typeref:typename:void
_QTREE_HPP_	intersim2/networks/qtree.hpp	/^#define _QTREE_HPP_$/;"	d
_RANDOM_UTILS_HPP_	intersim2/random_utils.hpp	/^#define _RANDOM_UTILS_HPP_$/;"	d
_ROUNDROBIN_HPP_	intersim2/arbiters/roundrobin_arb.hpp	/^#define _ROUNDROBIN_HPP_$/;"	d
_ROUTEFUNC_HPP_	intersim2/routefunc.hpp	/^#define _ROUTEFUNC_HPP_$/;"	d
_ROUTER_HPP_	intersim2/routers/router.hpp	/^#define _ROUTER_HPP_$/;"	d
_ReceiveCredits	intersim2/routers/event_router.cpp	/^void EventRouter::_ReceiveCredits( )$/;"	f	class:EventRouter	typeref:typename:void
_ReceiveCredits	intersim2/routers/iq_router.cpp	/^bool IQRouter::_ReceiveCredits( )$/;"	f	class:IQRouter	typeref:typename:bool
_ReceiveFlits	intersim2/routers/event_router.cpp	/^void EventRouter::_ReceiveFlits( )$/;"	f	class:EventRouter	typeref:typename:void
_ReceiveFlits	intersim2/routers/iq_router.cpp	/^bool IQRouter::_ReceiveFlits( )$/;"	f	class:IQRouter	typeref:typename:bool
_RetireFlit	intersim2/batchtrafficmanager.cpp	/^void BatchTrafficManager::_RetireFlit( Flit *f, int dest )$/;"	f	class:BatchTrafficManager	typeref:typename:void
_RetireFlit	intersim2/gputrafficmanager.cpp	/^void GPUTrafficManager::_RetireFlit( Flit *f, int dest )$/;"	f	class:GPUTrafficManager	typeref:typename:void
_RetireFlit	intersim2/trafficmanager.cpp	/^void TrafficManager::_RetireFlit( Flit *f, int dest )$/;"	f	class:TrafficManager	typeref:typename:void
_RightChannel	intersim2/networks/kncube.cpp	/^int KNCube::_RightChannel( int node, int dim )$/;"	f	class:KNCube	typeref:typename:int
_RightNode	intersim2/networks/kncube.cpp	/^int KNCube::_RightNode( int node, int dim )$/;"	f	class:KNCube	typeref:typename:int
_RouteEvaluate	intersim2/routers/iq_router.cpp	/^void IQRouter::_RouteEvaluate( )$/;"	f	class:IQRouter	typeref:typename:void
_RouteUpdate	intersim2/routers/iq_router.cpp	/^void IQRouter::_RouteUpdate( )$/;"	f	class:IQRouter	typeref:typename:void
_Router	intersim2/networks/fattree.cpp	/^Router*& FatTree::_Router( int depth, int pos ) $/;"	f	class:FatTree	typeref:typename:Router * &
_Router	intersim2/networks/tree4.cpp	/^Router*& Tree4::_Router( int height, int pos )$/;"	f	class:Tree4	typeref:typename:Router * &
_RouterIndex	intersim2/networks/qtree.cpp	/^int QTree::_RouterIndex( int height, int pos ) $/;"	f	class:QTree	typeref:typename:int
_SELALLOC_HPP_	intersim2/allocators/selalloc.hpp	/^#define _SELALLOC_HPP_$/;"	d
_SEPARABLE_HPP_	intersim2/allocators/separable.hpp	/^#define _SEPARABLE_HPP_$/;"	d
_SEPARABLE_INPUT_FIRST_HPP_	intersim2/allocators/separable_input_first.hpp	/^#define _SEPARABLE_INPUT_FIRST_HPP_$/;"	d
_SEPARABLE_OUTPUT_FIRST_HPP_	intersim2/allocators/separable_output_first.hpp	/^#define _SEPARABLE_OUTPUT_FIRST_HPP_$/;"	d
_STATS_HPP_	intersim2/stats.hpp	/^#define _STATS_HPP_$/;"	d
_SWAllocAddReq	intersim2/routers/iq_router.cpp	/^bool IQRouter::_SWAllocAddReq(int input, int vc, int output)$/;"	f	class:IQRouter	typeref:typename:bool
_SWAllocEvaluate	intersim2/routers/iq_router.cpp	/^void IQRouter::_SWAllocEvaluate( )$/;"	f	class:IQRouter	typeref:typename:void
_SWAllocUpdate	intersim2/routers/iq_router.cpp	/^void IQRouter::_SWAllocUpdate( )$/;"	f	class:IQRouter	typeref:typename:void
_SWHoldEvaluate	intersim2/routers/iq_router.cpp	/^void IQRouter::_SWHoldEvaluate( )$/;"	f	class:IQRouter	typeref:typename:void
_SWHoldUpdate	intersim2/routers/iq_router.cpp	/^void IQRouter::_SWHoldUpdate( )$/;"	f	class:IQRouter	typeref:typename:void
_SWITCH_MONITOR_HPP_	intersim2/power/switch_monitor.hpp	/^#define _SWITCH_MONITOR_HPP_$/;"	d
_SendCredits	intersim2/routers/chaos_router.cpp	/^void ChaosRouter::_SendCredits( )$/;"	f	class:ChaosRouter	typeref:typename:void
_SendCredits	intersim2/routers/event_router.cpp	/^void EventRouter::_SendCredits( )$/;"	f	class:EventRouter	typeref:typename:void
_SendCredits	intersim2/routers/iq_router.cpp	/^void IQRouter::_SendCredits( )$/;"	f	class:IQRouter	typeref:typename:void
_SendFlits	intersim2/routers/chaos_router.cpp	/^void ChaosRouter::_SendFlits( )$/;"	f	class:ChaosRouter	typeref:typename:void
_SendFlits	intersim2/routers/event_router.cpp	/^void EventRouter::_SendFlits( )$/;"	f	class:EventRouter	typeref:typename:void
_SendFlits	intersim2/routers/iq_router.cpp	/^void IQRouter::_SendFlits( )$/;"	f	class:IQRouter	typeref:typename:void
_SendTransport	intersim2/routers/event_router.cpp	/^void EventRouter::_SendTransport( int input, int output, tArrivalEvent *aevt )$/;"	f	class:EventRouter	typeref:typename:void
_ShortestAugmenting	intersim2/allocators/maxsize.cpp	/^bool MaxSizeMatch::_ShortestAugmenting( )$/;"	f	class:MaxSizeMatch	typeref:typename:bool
_SingleSim	intersim2/batchtrafficmanager.cpp	/^bool BatchTrafficManager::_SingleSim( )$/;"	f	class:BatchTrafficManager	typeref:typename:bool
_SingleSim	intersim2/trafficmanager.cpp	/^bool TrafficManager::_SingleSim( )$/;"	f	class:TrafficManager	typeref:typename:bool
_Step	intersim2/gputrafficmanager.cpp	/^void GPUTrafficManager::_Step()$/;"	f	class:GPUTrafficManager	typeref:typename:void
_Step	intersim2/trafficmanager.cpp	/^void TrafficManager::_Step( )$/;"	f	class:TrafficManager	typeref:typename:void
_SwitchEvaluate	intersim2/routers/iq_router.cpp	/^void IQRouter::_SwitchEvaluate( )$/;"	f	class:IQRouter	typeref:typename:void
_SwitchUpdate	intersim2/routers/iq_router.cpp	/^void IQRouter::_SwitchUpdate( )$/;"	f	class:IQRouter	typeref:typename:void
_TIMED_MODULE_HPP_	intersim2/timed_module.hpp	/^#define _TIMED_MODULE_HPP_$/;"	d
_TRAFFICMANAGER_HPP_	intersim2/trafficmanager.hpp	/^#define _TRAFFICMANAGER_HPP_$/;"	d
_TRAFFIC_HPP_	intersim2/traffic.hpp	/^#define _TRAFFIC_HPP_$/;"	d
_TREE4_HPP_	intersim2/networks/tree4.hpp	/^#define _TREE4_HPP_$/;"	d
_TREE_ARB_HPP_	intersim2/arbiters/tree_arb.hpp	/^#define _TREE_ARB_HPP_$/;"	d
_TransportArb	intersim2/routers/event_router.cpp	/^void EventRouter::_TransportArb( int input ) $/;"	f	class:EventRouter	typeref:typename:void
_TransportRequests	intersim2/routers/event_router.cpp	/^void EventRouter::_TransportRequests( int output )$/;"	f	class:EventRouter	typeref:typename:void
_UpdateNOQ	intersim2/routers/iq_router.cpp	/^void IQRouter::_UpdateNOQ(int input, int vc, Flit const * f) {$/;"	f	class:IQRouter	typeref:typename:void
_UpdateOverallStats	intersim2/batchtrafficmanager.cpp	/^void BatchTrafficManager::_UpdateOverallStats() {$/;"	f	class:BatchTrafficManager	typeref:typename:void
_UpdateOverallStats	intersim2/trafficmanager.cpp	/^void TrafficManager::_UpdateOverallStats() {$/;"	f	class:TrafficManager	typeref:typename:void
_VCAllocEvaluate	intersim2/routers/iq_router.cpp	/^void IQRouter::_VCAllocEvaluate( )$/;"	f	class:IQRouter	typeref:typename:void
_VCAllocUpdate	intersim2/routers/iq_router.cpp	/^void IQRouter::_VCAllocUpdate( )$/;"	f	class:IQRouter	typeref:typename:void
_VC_HPP_	intersim2/vc.hpp	/^#define _VC_HPP_$/;"	d
_WAVEFRONT_HPP_	intersim2/allocators/wavefront.hpp	/^#define _WAVEFRONT_HPP_$/;"	d
_WireLatency	intersim2/networks/tree4.cpp	/^int Tree4::_WireLatency( int height1, int pos1, int height2, int pos2 )$/;"	f	class:Tree4	typeref:typename:int
_XMLWIDECHAR	gpuwattch/xmlParser.h	/^#define _XMLWIDECHAR$/;"	d
_XMLWINDOWS	gpuwattch/xmlParser.h	/^#define _XMLWINDOWS$/;"	d
__ARBITER__	gpuwattch/cacti/arbiter.h	/^#define __ARBITER__$/;"	d
__AREA_H__	gpuwattch/cacti/area.h	/^#define __AREA_H__$/;"	d
__BANK_H__	gpuwattch/cacti/bank.h	/^#define __BANK_H__$/;"	d
__BASIC_CIRCUIT_H__	gpuwattch/cacti/basic_circuit.h	/^#define __BASIC_CIRCUIT_H__$/;"	d
__CACTI_INTERFACE_H__	gpuwattch/cacti/cacti_interface.h	/^#define __CACTI_INTERFACE_H__$/;"	d
__COMPONENT_H__	gpuwattch/cacti/component.h	/^#define __COMPONENT_H__$/;"	d
__CONST_H__	gpuwattch/cacti/const.h	/^#define __CONST_H__$/;"	d
__CROSSBAR__	gpuwattch/cacti/crossbar.h	/^#define __CROSSBAR__$/;"	d
__CUDA_INTERNAL_COMPILATION__	cuda-sim/cuda-math.h	/^#define __CUDA_INTERNAL_COMPILATION__$/;"	d
__DECODER_H__	gpuwattch/cacti/decoder.h	/^#define __DECODER_H__$/;"	d
__HIGHRADIX__	gpuwattch/cacti/highradix.h	/^#define __HIGHRADIX__$/;"	d
__HTREE2_H__	gpuwattch/cacti/htree2.h	/^#define __HTREE2_H__$/;"	d
__INCLUDE_XML_NODE__	gpuwattch/xmlParser.h	/^#define __INCLUDE_XML_NODE__$/;"	d
__INTERCONNECT_H__	gpuwattch/interconnect.h	/^#define __INTERCONNECT_H__$/;"	d
__IO_H__	gpuwattch/cacti/io.h	/^#define __IO_H__$/;"	d
__MAT_H__	gpuwattch/cacti/mat.h	/^#define __MAT_H__$/;"	d
__NUCA_H__	gpuwattch/cacti/nuca.h	/^#define __NUCA_H__$/;"	d
__PARAMETER_H__	gpuwattch/cacti/parameter.h	/^#define __PARAMETER_H__$/;"	d
__ROUTER_H__	gpuwattch/cacti/router.h	/^#define __ROUTER_H__$/;"	d
__SHADER_TRACE_H__	gpgpu-sim/shader_trace.h	/^#define __SHADER_TRACE_H__$/;"	d
__STDC_LIMIT_MACROS	intersim2/lex.yy.c	/^#define __STDC_LIMIT_MACROS /;"	d	file:
__SUBARRAY_H__	gpuwattch/cacti/subarray.h	/^#define __SUBARRAY_H__$/;"	d
__TRACE_H__	trace.h	/^#define __TRACE_H__$/;"	d
__UCACHE_H__	gpuwattch/cacti/Ucache.h	/^#define __UCACHE_H__$/;"	d
__UCA_H__	gpuwattch/cacti/uca.h	/^#define __UCA_H__$/;"	d
__WIRE_H__	gpuwattch/cacti/wire.h	/^#define __WIRE_H__$/;"	d
__anon05b13f800103	intersim2/y.tab.c	/^  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };$/;"	g	function:yysyntax_error	file:
__anon0cb733cc0108	abstract_hardware_model.h	/^    struct {$/;"	s	class:inst_t
__anon2d7997b3010a	cuda-sim/ptx_ir.h	/^   union {$/;"	u	class:operand_info
__anon2f897b10010a	gpgpu-sim/gpu-cache.h	/^    union {$/;"	u	class:cache_config
__anon2f897b10020a	gpgpu-sim/gpu-cache.h	/^    union {$/;"	u	class:cache_config
__anon2f897b10030a	gpgpu-sim/gpu-cache.h	/^    union {$/;"	u	class:cache_config
__anon33c5d5fd0108	gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR lpszOpen; int openTagLen; XMLCSTR lpszClose;} ALLXMLClearTag;$/;"	s	file:
__anon33c5d5fd0208	gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR s; int l; XMLCHAR c;} XMLCharacterEntity;$/;"	s	file:
__anon33c5d5fd0308	gpuwattch/xmlParser.cc	/^{$/;"	s	file:
__anon592e3c280108	gpuwattch/cacti/cacti_interface.h	/^typedef struct{$/;"	s
__anon6448b92c0108	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0208	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0308	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0408	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0508	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0608	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0708	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0808	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0908	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0a08	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0b08	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0c08	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0d08	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0e08	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c0f08	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c1008	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c1108	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon6448b92c1208	gpuwattch/XML_Parse.h	/^typedef struct{$/;"	s
__anon97533a990108	gpgpu-sim/stack.h	/^typedef struct {$/;"	s
__anona6602e20010a	gpgpu-sim/warp_status.h	/^		union{$/;"	u	struct:WST::table_entry
__anona6602e200208	gpgpu-sim/warp_status.h	/^			struct {$/;"	s	union:WST::table_entry::__anona6602e20010a
__anona80340180103	gpgpu-sim/shader.cc	/^    enum { SP_CUS, SFU_CUS, MEM_CUS, GEN_CUS };$/;"	g	function:shader_core_ctx::shader_core_ctx	file:
__anoncc262ac50108	gpuwattch/arch_const.h	/^typedef struct{$/;"	s
__anoncdba8aca0103	gpgpu-sim/addrdec.h	/^   enum {$/;"	g	class:linear_to_raw_address_translation
__anond10b4dfb0108	intersim2/arbiters/arbiter.hpp	/^  typedef struct { $/;"	s	class:Arbiter
__anondd5d98a10108	cuda-sim/ptx_sim.h	/^   struct {$/;"	s	union:ptx_reg_t
__anondd5d98a10208	cuda-sim/ptx_sim.h	/^   struct {$/;"	s	union:ptx_reg_t
__attribute__	cuda-sim/cuda-math.h	/^#define __attribute__(/;"	d
__ll2float_rd	cuda-sim/cuda-math.h	/^float __ll2float_rd(long long int a) {$/;"	f	namespace:cuda_math	typeref:typename:float
__ll2float_ru	cuda-sim/cuda-math.h	/^float __ll2float_ru(long long int a) {$/;"	f	namespace:cuda_math	typeref:typename:float
__ll2float_rz	cuda-sim/cuda-math.h	/^float __ll2float_rz(long long int a) {$/;"	f	namespace:cuda_math	typeref:typename:float
_a	intersim2/networks/dragonfly.hpp	/^  int _p, _a, _g;$/;"	m	class:DragonFlyNew	typeref:typename:int
_acc_stopping_threshold	intersim2/trafficmanager.hpp	/^  vector<double> _acc_stopping_threshold;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_acc_warmup_threshold	intersim2/trafficmanager.hpp	/^  vector<double> _acc_warmup_threshold;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_accepted_flits	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _accepted_flits;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_accepted_packets	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _accepted_packets;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_active	intersim2/flitchannel.hpp	/^  vector<int> _active;$/;"	m	class:FlitChannel	typeref:typename:vector<int>
_active	intersim2/routers/event_router.hpp	/^  vector<vector<bool> > _active;$/;"	m	class:EventRouter	typeref:typename:vector<vector<bool>>
_active	intersim2/routers/iq_router.hpp	/^  bool _active;$/;"	m	class:IQRouter	typeref:typename:bool
_active_packets	intersim2/routers/router.hpp	/^  vector<vector<int> > _active_packets;$/;"	m	class:Router	typeref:typename:vector<vector<int>>
_active_packets_out	intersim2/trafficmanager.hpp	/^  ostream * _active_packets_out;$/;"	m	class:TrafficManager	typeref:typename:ostream *
_active_vcs	intersim2/buffer_state.hpp	/^    int _active_vcs;$/;"	m	class:BufferState::LimitedSharedBufferPolicy	typeref:typename:int
_aging_scale	intersim2/buffer_state.hpp	/^    int _aging_scale;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:int
_all	intersim2/credit.cpp	/^stack<Credit *> Credit::_all;$/;"	m	class:Credit	typeref:typename:stack<Credit * >
_all	intersim2/credit.hpp	/^  static stack<Credit *> _all;$/;"	m	class:Credit	typeref:typename:stack<Credit * >
_all	intersim2/flit.cpp	/^stack<Flit *> Flit::_all;$/;"	m	class:Flit	typeref:typename:stack<Flit * >
_all	intersim2/flit.hpp	/^  static stack<Flit *> _all;$/;"	m	class:Flit	typeref:typename:stack<Flit * >
_all	intersim2/packet_reply_info.cpp	/^stack<PacketReplyInfo*> PacketReplyInfo::_all;$/;"	m	class:PacketReplyInfo	typeref:typename:stack<PacketReplyInfo * >
_all	intersim2/packet_reply_info.hpp	/^  static stack<PacketReplyInfo*> _all;$/;"	m	class:PacketReplyInfo	typeref:typename:stack<PacketReplyInfo * >
_alpha	intersim2/injection.hpp	/^  double _alpha;$/;"	m	class:OnOffInjectionProcess	typeref:typename:double
_aptrs	intersim2/allocators/islip.hpp	/^  vector<int> _aptrs;$/;"	m	class:iSLIP_Sparse	typeref:typename:vector<int>
_aptrs	intersim2/allocators/selalloc.hpp	/^  vector<int> _aptrs;$/;"	m	class:SelAlloc	typeref:typename:vector<int>
_arrival_arbiter	intersim2/routers/event_router.hpp	/^  vector<PriorityArbiter*> _arrival_arbiter;$/;"	m	class:EventRouter	typeref:typename:vector<PriorityArbiter * >
_arrival_pipe	intersim2/routers/event_router.hpp	/^  PipelineFIFO<tArrivalEvent> *_arrival_pipe;$/;"	m	class:EventRouter	typeref:typename:PipelineFIFO<tArrivalEvent> *
_arrival_queue	intersim2/routers/event_router.hpp	/^  vector<queue<tArrivalEvent *> > _arrival_queue;$/;"	m	class:EventRouter	typeref:typename:vector<queue<tArrivalEvent * >>
_batch_count	intersim2/batchtrafficmanager.hpp	/^  int _batch_count;$/;"	m	class:BatchTrafficManager	typeref:typename:int
_batch_size	intersim2/batchtrafficmanager.hpp	/^  int _batch_size;$/;"	m	class:BatchTrafficManager	typeref:typename:int
_batch_time	intersim2/batchtrafficmanager.hpp	/^  Stats * _batch_time;$/;"	m	class:BatchTrafficManager	typeref:typename:Stats *
_best_input	intersim2/arbiters/arbiter.hpp	/^  int _best_input;$/;"	m	class:Arbiter	typeref:typename:int
_beta	intersim2/injection.hpp	/^  double _beta;$/;"	m	class:OnOffInjectionProcess	typeref:typename:double
_bin_size	intersim2/stats.hpp	/^  double _bin_size;$/;"	m	class:Stats	typeref:typename:double
_boundary_buffer	intersim2/interconnect_interface.hpp	/^  vector<vector<vector<_BoundaryBufferItem> > > _boundary_buffer;$/;"	m	class:InterconnectInterface	typeref:typename:vector<vector<vector<_BoundaryBufferItem>>>
_boundary_buffer_capacity	intersim2/interconnect_interface.hpp	/^  unsigned int _boundary_buffer_capacity;$/;"	m	class:InterconnectInterface	typeref:typename:unsigned int
_buf	intersim2/routers/event_router.hpp	/^  vector<Buffer *> _buf;$/;"	m	class:EventRouter	typeref:typename:vector<Buffer * >
_buf	intersim2/routers/iq_router.hpp	/^  vector<Buffer *> _buf;$/;"	m	class:IQRouter	typeref:typename:vector<Buffer * >
_buf_size	intersim2/buffer_state.hpp	/^    int _buf_size;$/;"	m	class:BufferState::SharedBufferPolicy	typeref:typename:int
_buf_size	intersim2/routers/event_router.hpp	/^  int _buf_size;$/;"	m	class:EventNextVCState	typeref:typename:int
_buf_states	intersim2/trafficmanager.hpp	/^  vector<vector<BufferState *> > _buf_states;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<BufferState * >>
_buffer	intersim2/interconnect_interface.hpp	/^    queue<void *> _buffer;$/;"	m	class:InterconnectInterface::_BoundaryBufferItem	typeref:typename:queue<void * >
_buffer	intersim2/vc.hpp	/^  deque<Flit *> _buffer;$/;"	m	class:VC	typeref:typename:deque<Flit * >
_bufferMonitor	intersim2/routers/iq_router.hpp	/^  BufferMonitor * _bufferMonitor ;$/;"	m	class:IQRouter	typeref:typename:BufferMonitor *
_buffer_busy_stalls	intersim2/routers/router.hpp	/^  vector<int> _buffer_busy_stalls;$/;"	m	class:Router	typeref:typename:vector<int>
_buffer_busy_stalls	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _buffer_busy_stalls;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_buffer_conflict_stalls	intersim2/routers/router.hpp	/^  vector<int> _buffer_conflict_stalls;$/;"	m	class:Router	typeref:typename:vector<int>
_buffer_conflict_stalls	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _buffer_conflict_stalls;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_buffer_full_stalls	intersim2/routers/router.hpp	/^  vector<int> _buffer_full_stalls;$/;"	m	class:Router	typeref:typename:vector<int>
_buffer_full_stalls	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _buffer_full_stalls;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_buffer_policy	intersim2/buffer_state.hpp	/^  BufferPolicy * _buffer_policy;$/;"	m	class:BufferState	typeref:typename:BufferPolicy *
_buffer_reserved_stalls	intersim2/routers/router.hpp	/^  vector<int> _buffer_reserved_stalls;$/;"	m	class:Router	typeref:typename:vector<int>
_buffer_reserved_stalls	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _buffer_reserved_stalls;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_buffer_size	intersim2/routers/chaos_router.hpp	/^  int _buffer_size;$/;"	m	class:ChaosRouter	typeref:typename:int
_buffer_state	intersim2/buffer_state.hpp	/^    BufferState const * const _buffer_state;$/;"	m	class:BufferState::BufferPolicy	typeref:typename:BufferState const * const
_c	intersim2/networks/cmesh.hpp	/^  int _c ;$/;"	m	class:CMesh	typeref:typename:int
_c	intersim2/networks/flatfly_onchip.hpp	/^  int _c;$/;"	m	class:FlatFlyOnChip	typeref:typename:int
_cX	intersim2/networks/cmesh.cpp	/^int CMesh::_cX = 0 ;$/;"	m	class:CMesh	typeref:typename:int
_cX	intersim2/networks/cmesh.hpp	/^  static int _cX ;$/;"	m	class:CMesh	typeref:typename:int
_cY	intersim2/networks/cmesh.cpp	/^int CMesh::_cY = 0 ;$/;"	m	class:CMesh	typeref:typename:int
_cY	intersim2/networks/cmesh.hpp	/^  static int _cY ;$/;"	m	class:CMesh	typeref:typename:int
_chan	intersim2/networks/network.hpp	/^  vector<FlitChannel *> _chan;$/;"	m	class:Network	typeref:typename:vector<FlitChannel * >
_chan_cred	intersim2/networks/network.hpp	/^  vector<CreditChannel *> _chan_cred;$/;"	m	class:Network	typeref:typename:vector<CreditChannel * >
_channelWidth	intersim2/networks/tree4.hpp	/^  int _channelWidth;$/;"	m	class:Tree4	typeref:typename:int
_channel_faults	intersim2/routers/router.hpp	/^  vector<bool>            _channel_faults;$/;"	m	class:Router	typeref:typename:vector<bool>
_channels	intersim2/networks/network.hpp	/^  int _channels;$/;"	m	class:Network	typeref:typename:int
_children	intersim2/module.hpp	/^  vector<Module *> _children;$/;"	m	class:Module	typeref:typename:vector<Module * >
_class_occupancy	intersim2/buffer.hpp	/^  vector<int> _class_occupancy;$/;"	m	class:Buffer	typeref:typename:vector<int>
_class_occupancy	intersim2/buffer_state.hpp	/^  vector<int> _class_occupancy;$/;"	m	class:BufferState	typeref:typename:vector<int>
_class_priority	intersim2/trafficmanager.hpp	/^  vector<int> _class_priority;$/;"	m	class:TrafficManager	typeref:typename:vector<int>
_classes	intersim2/buffer_state.hpp	/^  int _classes;$/;"	m	class:BufferState	typeref:typename:int
_classes	intersim2/networks/network.hpp	/^  int _classes;$/;"	m	class:Network	typeref:typename:int
_classes	intersim2/power/buffer_monitor.hpp	/^  int  _classes ;$/;"	m	class:BufferMonitor	typeref:typename:int
_classes	intersim2/power/switch_monitor.hpp	/^  int  _classes ;$/;"	m	class:SwitchMonitor	typeref:typename:int
_classes	intersim2/routers/router.hpp	/^  int _classes;$/;"	m	class:Router	typeref:typename:int
_classes	intersim2/trafficmanager.hpp	/^  int    _classes;$/;"	m	class:TrafficManager	typeref:typename:int
_config_file	intersim2/config_utils.hpp	/^  FILE * _config_file;$/;"	m	class:Configuration	typeref:typename:FILE *
_config_string	intersim2/config_utils.hpp	/^  string _config_string;$/;"	m	class:Configuration	typeref:typename:string
_counts	intersim2/allocators/loa.hpp	/^  vector<int> _counts;$/;"	m	class:LOA	typeref:typename:vector<int>
_credit_buffer	intersim2/routers/iq_router.hpp	/^  vector<queue<Credit *> > _credit_buffer;$/;"	m	class:IQRouter	typeref:typename:vector<queue<Credit * >>
_credit_delay	intersim2/routers/router.hpp	/^  int _credit_delay;$/;"	m	class:Router	typeref:typename:int
_credit_pipe	intersim2/routers/event_router.hpp	/^  PipelineFIFO<Credit> *_credit_pipe;$/;"	m	class:EventRouter	typeref:typename:PipelineFIFO<Credit> *
_credit_queue	intersim2/routers/chaos_router.hpp	/^  vector<queue<Credit *> > _credit_queue;$/;"	m	class:ChaosRouter	typeref:typename:vector<queue<Credit * >>
_credits	intersim2/routers/event_router.hpp	/^  vector<int> _credits;$/;"	m	class:EventNextVCState	typeref:typename:vector<int>
_crossbar_conflict_stalls	intersim2/routers/router.hpp	/^  vector<int> _crossbar_conflict_stalls;$/;"	m	class:Router	typeref:typename:vector<int>
_crossbar_conflict_stalls	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _crossbar_conflict_stalls;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_crossbar_delay	intersim2/routers/router.hpp	/^  int _crossbar_delay;$/;"	m	class:Router	typeref:typename:int
_crossbar_flits	intersim2/routers/iq_router.hpp	/^  deque<pair<int, pair<Flit *, pair<int, int> > > > _crossbar_flits;$/;"	m	class:IQRouter	typeref:typename:deque<pair<int,pair<Flit *,pair<int,int>>>>
_crossbar_pipe	intersim2/routers/chaos_router.hpp	/^  PipelineFIFO<Flit>   *_crossbar_pipe;$/;"	m	class:ChaosRouter	typeref:typename:PipelineFIFO<Flit> *
_crossbar_pipe	intersim2/routers/event_router.hpp	/^  PipelineFIFO<Flit>   *_crossbar_pipe;$/;"	m	class:EventRouter	typeref:typename:PipelineFIFO<Flit> *
_cur_channel	intersim2/routers/chaos_router.hpp	/^  int _cur_channel;$/;"	m	class:ChaosRouter	typeref:typename:int
_cur_id	intersim2/trafficmanager.hpp	/^  int _cur_id;$/;"	m	class:TrafficManager	typeref:typename:int
_cur_pid	intersim2/trafficmanager.hpp	/^  int _cur_pid;$/;"	m	class:TrafficManager	typeref:typename:int
_cycles	intersim2/power/buffer_monitor.hpp	/^  int  _cycles ;$/;"	m	class:BufferMonitor	typeref:typename:int
_cycles	intersim2/power/switch_monitor.hpp	/^  int  _cycles ;$/;"	m	class:SwitchMonitor	typeref:typename:int
_data	intersim2/pipefifo.hpp	/^  vector<vector<T*> > _data;$/;"	m	class:PipelineFIFO	typeref:typename:vector<vector<T * >>
_deadlock_timer	intersim2/trafficmanager.hpp	/^  int _deadlock_timer;$/;"	m	class:TrafficManager	typeref:typename:int
_deadlock_warn_timeout	intersim2/trafficmanager.hpp	/^  int _deadlock_warn_timeout;$/;"	m	class:TrafficManager	typeref:typename:int
_delay	intersim2/channel.hpp	/^  int _delay;$/;"	m	class:Channel	typeref:typename:int
_depth	intersim2/pipefifo.hpp	/^  int _depth;$/;"	m	class:PipelineFIFO	typeref:typename:int
_dest	intersim2/traffic.hpp	/^  vector<int> _dest;$/;"	m	class:RandomPermutationTrafficPattern	typeref:typename:vector<int>
_dirty	intersim2/allocators/allocator.hpp	/^  bool _dirty;$/;"	m	class:Allocator	typeref:typename:bool
_drain_time	intersim2/trafficmanager.hpp	/^  int   _drain_time;$/;"	m	class:TrafficManager	typeref:typename:int
_eject	intersim2/networks/network.hpp	/^  vector<FlitChannel *> _eject;$/;"	m	class:Network	typeref:typename:vector<FlitChannel * >
_eject_cred	intersim2/networks/network.hpp	/^  vector<CreditChannel *> _eject_cred;$/;"	m	class:Network	typeref:typename:vector<CreditChannel * >
_ejected_flit_queue	intersim2/interconnect_interface.hpp	/^  vector<vector<queue<Flit* > > > _ejected_flit_queue;$/;"	m	class:InterconnectInterface	typeref:typename:vector<vector<queue<Flit * >>>
_ejected_flits	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _ejected_flits;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_ejected_flits_out	intersim2/trafficmanager.hpp	/^  ostream * _ejected_flits_out;$/;"	m	class:TrafficManager	typeref:typename:ostream *
_ejection_buffer	intersim2/interconnect_interface.hpp	/^  vector<vector<vector<_EjectionBufferItem> > > _ejection_buffer;$/;"	m	class:InterconnectInterface	typeref:typename:vector<vector<vector<_EjectionBufferItem>>>
_ejection_buffer_capacity	intersim2/interconnect_interface.hpp	/^  unsigned int _ejection_buffer_capacity;$/;"	m	class:InterconnectInterface	typeref:typename:unsigned int
_empty_network	intersim2/trafficmanager.hpp	/^  bool _empty_network;$/;"	m	class:TrafficManager	typeref:typename:bool
_event	intersim2/power/switch_monitor.hpp	/^  vector<int> _event ;$/;"	m	class:SwitchMonitor	typeref:typename:vector<int>
_excluded	intersim2/traffic.hpp	/^  set<int> _excluded;$/;"	m	class:UniformBackgroundTrafficPattern	typeref:typename:set<int>
_expected_pid	intersim2/vc.hpp	/^  int _expected_pid;$/;"	m	class:VC	typeref:typename:int
_express_channels	intersim2/networks/cmesh.hpp	/^  bool _express_channels;$/;"	m	class:CMesh	typeref:typename:bool
_flat_stats	intersim2/trafficmanager.hpp	/^  vector<Stats *> _flat_stats;     $/;"	m	class:TrafficManager	typeref:typename:vector<Stats * >
_flit_sent_time	intersim2/buffer_state.hpp	/^    vector<queue<int> > _flit_sent_time;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:vector<queue<int>>
_flit_size	intersim2/interconnect_interface.hpp	/^  unsigned _flit_size;$/;"	m	class:InterconnectInterface	typeref:typename:unsigned
_flits_to_watch	intersim2/trafficmanager.hpp	/^  set<int> _flits_to_watch;$/;"	m	class:TrafficManager	typeref:typename:set<int>
_float_map	intersim2/config_utils.hpp	/^  map<string,double> _float_map;$/;"	m	class:Configuration	typeref:typename:map<string,double>
_frag_stats	intersim2/trafficmanager.hpp	/^  vector<Stats *> _frag_stats;$/;"	m	class:TrafficManager	typeref:typename:vector<Stats * >
_free	intersim2/credit.cpp	/^stack<Credit *> Credit::_free;$/;"	m	class:Credit	typeref:typename:stack<Credit * >
_free	intersim2/credit.hpp	/^  static stack<Credit *> _free;$/;"	m	class:Credit	typeref:typename:stack<Credit * >
_free	intersim2/flit.cpp	/^stack<Flit *> Flit::_free;$/;"	m	class:Flit	typeref:typename:stack<Flit * >
_free	intersim2/flit.hpp	/^  static stack<Flit *> _free;$/;"	m	class:Flit	typeref:typename:stack<Flit * >
_free	intersim2/packet_reply_info.cpp	/^stack<PacketReplyInfo*> PacketReplyInfo::_free;$/;"	m	class:PacketReplyInfo	typeref:typename:stack<PacketReplyInfo * >
_free	intersim2/packet_reply_info.hpp	/^  static stack<PacketReplyInfo*> _free;$/;"	m	class:PacketReplyInfo	typeref:typename:stack<PacketReplyInfo * >
_free_credits_out	intersim2/trafficmanager.hpp	/^  ostream * _free_credits_out;$/;"	m	class:TrafficManager	typeref:typename:ostream *
_from	intersim2/allocators/maxsize.hpp	/^  vector<int> _from;   \/\/ array to hold breadth-first tree$/;"	m	class:MaxSizeMatch	typeref:typename:vector<int>
_fullname	intersim2/module.hpp	/^  string _fullname;$/;"	m	class:Module	typeref:typename:string
_g	intersim2/networks/dragonfly.hpp	/^  int _p, _a, _g;$/;"	m	class:DragonFlyNew	typeref:typename:int
_global_arbiter	intersim2/arbiters/tree_arb.hpp	/^  Arbiter * _global_arbiter;$/;"	m	class:TreeArbiter	typeref:typename:Arbiter *
_gptr	intersim2/allocators/loa.hpp	/^  vector<int> _gptr;$/;"	m	class:LOA	typeref:typename:vector<int>
_gptrs	intersim2/allocators/islip.hpp	/^  vector<int> _gptrs;$/;"	m	class:iSLIP_Sparse	typeref:typename:vector<int>
_gptrs	intersim2/allocators/selalloc.hpp	/^  vector<int> _gptrs;$/;"	m	class:SelAlloc	typeref:typename:vector<int>
_group_arbiters	intersim2/arbiters/tree_arb.hpp	/^  vector<Arbiter *> _group_arbiters;$/;"	m	class:TreeArbiter	typeref:typename:vector<Arbiter * >
_group_reqs	intersim2/arbiters/tree_arb.hpp	/^  vector<int> _group_reqs;$/;"	m	class:TreeArbiter	typeref:typename:vector<int>
_group_size	intersim2/arbiters/tree_arb.hpp	/^  int  _group_size ;$/;"	m	class:TreeArbiter	typeref:typename:int
_grp_num_nodes	intersim2/networks/dragonfly.hpp	/^  int _grp_num_nodes;$/;"	m	class:DragonFlyNew	typeref:typename:int
_grp_num_routers	intersim2/networks/dragonfly.hpp	/^  int _grp_num_routers;$/;"	m	class:DragonFlyNew	typeref:typename:int
_highest_pri	intersim2/arbiters/arbiter.hpp	/^  int _highest_pri;$/;"	m	class:Arbiter	typeref:typename:int
_hist	intersim2/stats.hpp	/^  vector<int> _hist;$/;"	m	class:Stats	typeref:typename:vector<int>
_hold_switch_for_packet	intersim2/routers/iq_router.hpp	/^  bool _hold_switch_for_packet;$/;"	m	class:IQRouter	typeref:typename:bool
_hold_switch_for_packet	intersim2/trafficmanager.hpp	/^  bool _hold_switch_for_packet;$/;"	m	class:TrafficManager	typeref:typename:bool
_hop_stats	intersim2/trafficmanager.hpp	/^  vector<Stats *> _hop_stats;$/;"	m	class:TrafficManager	typeref:typename:vector<Stats * >
_hotspots	intersim2/traffic.hpp	/^  vector<int> _hotspots;$/;"	m	class:HotSpotTrafficPattern	typeref:typename:vector<int>
_iSLIP_iter	intersim2/allocators/islip.hpp	/^  int _iSLIP_iter;$/;"	m	class:iSLIP_Sparse	typeref:typename:int
_icnt_config	intersim2/interconnect_interface.hpp	/^  IntersimConfig* _icnt_config;$/;"	m	class:InterconnectInterface	typeref:typename:IntersimConfig *
_id	intersim2/routers/router.hpp	/^  int _id;$/;"	m	class:Router	typeref:typename:int
_idle	intersim2/flitchannel.hpp	/^  int _idle;$/;"	m	class:FlitChannel	typeref:typename:int
_in_cred_buffer	intersim2/routers/event_router.hpp	/^  vector<queue<Credit *> > _in_cred_buffer;$/;"	m	class:EventRouter	typeref:typename:vector<queue<Credit * >>
_in_occ	intersim2/allocators/allocator.hpp	/^  set<int> _in_occ;$/;"	m	class:SparseAllocator	typeref:typename:set<int>
_in_queue_flits	intersim2/routers/iq_router.hpp	/^  map<int, Flit *> _in_queue_flits;$/;"	m	class:IQRouter	typeref:typename:map<int,Flit * >
_in_req	intersim2/allocators/allocator.hpp	/^  vector<map<int, sRequest> > _in_req;$/;"	m	class:SparseAllocator	typeref:typename:vector<map<int,sRequest>>
_in_use_by	intersim2/buffer_state.hpp	/^  vector<int> _in_use_by;$/;"	m	class:BufferState	typeref:typename:vector<int>
_include_queuing	intersim2/trafficmanager.hpp	/^  int   _include_queuing;$/;"	m	class:TrafficManager	typeref:typename:int
_initial	intersim2/injection.hpp	/^  vector<int> _initial;$/;"	m	class:OnOffInjectionProcess	typeref:typename:vector<int>
_inject	intersim2/networks/network.hpp	/^  vector<FlitChannel *> _inject;$/;"	m	class:Network	typeref:typename:vector<FlitChannel * >
_inject_cred	intersim2/networks/network.hpp	/^  vector<CreditChannel *> _inject_cred;$/;"	m	class:Network	typeref:typename:vector<CreditChannel * >
_injected_flits	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _injected_flits;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_injected_flits_out	intersim2/trafficmanager.hpp	/^  ostream * _injected_flits_out;$/;"	m	class:TrafficManager	typeref:typename:ostream *
_injection_process	intersim2/trafficmanager.hpp	/^  vector<InjectionProcess *> _injection_process;$/;"	m	class:TrafficManager	typeref:typename:vector<InjectionProcess * >
_inmatch	gpgpu-sim/shader.h	/^      int *_inmatch;$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:int *
_inmatch	intersim2/allocators/allocator.hpp	/^  vector<int> _inmatch;$/;"	m	class:Allocator	typeref:typename:vector<int>
_input	intersim2/channel.hpp	/^  T * _input;$/;"	m	class:Channel	typeref:typename:T *
_input	intersim2/routers/event_router.hpp	/^  vector<int> _input;$/;"	m	class:EventNextVCState	typeref:typename:vector<int>
_inputChannelMap	intersim2/networks/fattree.hpp	/^  int* _inputChannelMap;$/;"	m	class:FatTree	typeref:typename:int *
_inputVC	intersim2/routers/event_router.hpp	/^  vector<int> _inputVC;$/;"	m	class:EventNextVCState	typeref:typename:vector<int>
_input_arb	intersim2/allocators/separable.hpp	/^  vector<Arbiter*> _input_arb ;$/;"	m	class:SeparableAllocator	typeref:typename:vector<Arbiter * >
_input_buffer	intersim2/routers/event_router.hpp	/^  vector<queue<Flit *> > _input_buffer;$/;"	m	class:EventRouter	typeref:typename:vector<queue<Flit * >>
_input_buffer_capacity	intersim2/interconnect_interface.hpp	/^  unsigned int _input_buffer_capacity;$/;"	m	class:InterconnectInterface	typeref:typename:unsigned int
_input_channels	intersim2/routers/router.hpp	/^  vector<FlitChannel *>   _input_channels;$/;"	m	class:Router	typeref:typename:vector<FlitChannel * >
_input_credits	intersim2/routers/router.hpp	/^  vector<CreditChannel *> _input_credits;$/;"	m	class:Router	typeref:typename:vector<CreditChannel * >
_input_frame	intersim2/routers/chaos_router.hpp	/^  vector<queue<Flit *> > _input_frame;$/;"	m	class:ChaosRouter	typeref:typename:vector<queue<Flit * >>
_input_mq_match	intersim2/routers/chaos_router.hpp	/^  vector<int> _input_mq_match;$/;"	m	class:ChaosRouter	typeref:typename:vector<int>
_input_output_match	intersim2/routers/chaos_router.hpp	/^  vector<int> _input_output_match;$/;"	m	class:ChaosRouter	typeref:typename:vector<int>
_input_queue	intersim2/gputrafficmanager.hpp	/^  vector<vector<vector<list<Flit *> > > > _input_queue;$/;"	m	class:GPUTrafficManager	typeref:typename:vector<vector<vector<list<Flit * >>>>
_input_route	intersim2/routers/chaos_router.hpp	/^  vector<OutputSet*> _input_route;$/;"	m	class:ChaosRouter	typeref:typename:vector<OutputSet * >
_input_speedup	intersim2/routers/router.hpp	/^  int _input_speedup;$/;"	m	class:Router	typeref:typename:int
_input_state	intersim2/routers/chaos_router.hpp	/^  vector<eQState> _input_state;$/;"	m	class:ChaosRouter	typeref:typename:vector<eQState>
_inputs	intersim2/allocators/allocator.hpp	/^  const int _inputs;$/;"	m	class:Allocator	typeref:typename:const int
_inputs	intersim2/arbiters/prio_arb.hpp	/^  const int _inputs;$/;"	m	class:PriorityArbiter	typeref:typename:const int
_inputs	intersim2/power/buffer_monitor.hpp	/^  int  _inputs ;$/;"	m	class:BufferMonitor	typeref:typename:int
_inputs	intersim2/power/switch_monitor.hpp	/^  int  _inputs ;$/;"	m	class:SwitchMonitor	typeref:typename:int
_inputs	intersim2/routers/router.hpp	/^  int _inputs;$/;"	m	class:Router	typeref:typename:int
_int_map	intersim2/config_utils.hpp	/^  map<string,int>    _int_map;$/;"	m	class:Configuration	typeref:typename:map<string,int>
_internal_speedup	intersim2/routers/router.hpp	/^  double _internal_speedup;$/;"	m	class:Router	typeref:typename:double
_iter	intersim2/allocators/selalloc.hpp	/^  int _iter;$/;"	m	class:SelAlloc	typeref:typename:int
_k	intersim2/networks/cmesh.hpp	/^  int _k ;$/;"	m	class:CMesh	typeref:typename:int
_k	intersim2/networks/dragonfly.hpp	/^  int _k;$/;"	m	class:DragonFlyNew	typeref:typename:int
_k	intersim2/networks/fattree.hpp	/^  int _k;$/;"	m	class:FatTree	typeref:typename:int
_k	intersim2/networks/flatfly_onchip.hpp	/^  int _k;$/;"	m	class:FlatFlyOnChip	typeref:typename:int
_k	intersim2/networks/fly.hpp	/^  int _k;$/;"	m	class:KNFly	typeref:typename:int
_k	intersim2/networks/kncube.hpp	/^  int _k;$/;"	m	class:KNCube	typeref:typename:int
_k	intersim2/networks/qtree.hpp	/^  int _k;$/;"	m	class:QTree	typeref:typename:int
_k	intersim2/networks/tree4.hpp	/^  int _k;$/;"	m	class:Tree4	typeref:typename:int
_k	intersim2/traffic.hpp	/^  int _k;$/;"	m	class:DigitPermutationTrafficPattern	typeref:typename:int
_lanes	intersim2/pipefifo.hpp	/^  int _lanes;$/;"	m	class:PipelineFIFO	typeref:typename:int
_last_class	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _last_class;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_last_id	intersim2/batchtrafficmanager.hpp	/^  int _last_id;$/;"	m	class:BatchTrafficManager	typeref:typename:int
_last_id	intersim2/buffer_state.hpp	/^  vector<int> _last_id;$/;"	m	class:BufferState	typeref:typename:vector<int>
_last_id	intersim2/vc.hpp	/^  int _last_id;$/;"	m	class:VC	typeref:typename:int
_last_in	intersim2/allocators/wavefront.hpp	/^  int _last_in;$/;"	m	class:Wavefront	typeref:typename:int
_last_out	intersim2/allocators/wavefront.hpp	/^  int _last_out;$/;"	m	class:Wavefront	typeref:typename:int
_last_pid	intersim2/batchtrafficmanager.hpp	/^  int _last_pid;$/;"	m	class:BatchTrafficManager	typeref:typename:int
_last_pid	intersim2/buffer_state.hpp	/^  vector<int> _last_pid;$/;"	m	class:BufferState	typeref:typename:vector<int>
_last_pid	intersim2/vc.hpp	/^  int _last_pid;$/;"	m	class:VC	typeref:typename:int
_last_req	intersim2/arbiters/matrix_arb.hpp	/^  int  _last_req ;$/;"	m	class:MatrixArbiter	typeref:typename:int
_last_vc	intersim2/trafficmanager.hpp	/^  vector<vector<vector<int> > > _last_vc;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<vector<int>>>
_latencyMap	intersim2/networks/fattree.hpp	/^  int* _latencyMap;$/;"	m	class:FatTree	typeref:typename:int *
_latency_thres	intersim2/trafficmanager.hpp	/^  vector<double> _latency_thres;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_load	intersim2/trafficmanager.hpp	/^  vector<double> _load;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_log2	gpuwattch/cacti/basic_circuit.cc	/^uint32_t _log2(uint64_t num)$/;"	f	typeref:typename:uint32_t
_lookahead_routing	intersim2/trafficmanager.hpp	/^  bool _lookahead_routing;$/;"	m	class:TrafficManager	typeref:typename:bool
_lookahead_routing	intersim2/vc.hpp	/^  bool _lookahead_routing;$/;"	m	class:VC	typeref:typename:bool
_m	intersim2/networks/dragonfly.hpp	/^  int _m;$/;"	m	class:DragonFlyNew	typeref:typename:int
_m	intersim2/networks/flatfly_onchip.hpp	/^  int _m;$/;"	m	class:FlatFlyOnChip	typeref:typename:int
_mapSize	intersim2/networks/fattree.hpp	/^  int  _mapSize;$/;"	m	class:FatTree	typeref:typename:int
_match	intersim2/arbiters/prio_arb.hpp	/^  int _match;$/;"	m	class:PriorityArbiter	typeref:typename:int
_matrix	intersim2/arbiters/matrix_arb.hpp	/^  vector<vector<int> > _matrix ;$/;"	m	class:MatrixArbiter	typeref:typename:vector<vector<int>>
_max	intersim2/stats.hpp	/^  double _max;$/;"	m	class:Stats	typeref:typename:double
_max_credits_out	intersim2/trafficmanager.hpp	/^  ostream * _max_credits_out;$/;"	m	class:TrafficManager	typeref:typename:ostream *
_max_held_slots	intersim2/buffer_state.hpp	/^    int _max_held_slots;$/;"	m	class:BufferState::LimitedSharedBufferPolicy	typeref:typename:int
_max_outstanding	intersim2/batchtrafficmanager.hpp	/^  int _max_outstanding;$/;"	m	class:BatchTrafficManager	typeref:typename:int
_max_samples	intersim2/trafficmanager.hpp	/^  int   _max_samples;$/;"	m	class:TrafficManager	typeref:typename:int
_max_val	intersim2/traffic.hpp	/^  int _max_val;$/;"	m	class:HotSpotTrafficPattern	typeref:typename:int
_measure_latency	intersim2/trafficmanager.hpp	/^  bool _measure_latency;$/;"	m	class:TrafficManager	typeref:typename:bool
_measure_stats	intersim2/trafficmanager.hpp	/^  vector<int> _measure_stats;$/;"	m	class:TrafficManager	typeref:typename:vector<int>
_measured_in_flight_flits	intersim2/trafficmanager.hpp	/^  vector<map<int, Flit *> > _measured_in_flight_flits;$/;"	m	class:TrafficManager	typeref:typename:vector<map<int,Flit * >>
_memo_NodeShiftX	intersim2/networks/cmesh.cpp	/^int CMesh::_memo_NodeShiftX = 0 ;$/;"	m	class:CMesh	typeref:typename:int
_memo_NodeShiftX	intersim2/networks/cmesh.hpp	/^  static int _memo_NodeShiftX ;$/;"	m	class:CMesh	typeref:typename:int
_memo_NodeShiftY	intersim2/networks/cmesh.cpp	/^int CMesh::_memo_NodeShiftY = 0 ;$/;"	m	class:CMesh	typeref:typename:int
_memo_NodeShiftY	intersim2/networks/cmesh.hpp	/^  static int _memo_NodeShiftY ;$/;"	m	class:CMesh	typeref:typename:int
_memo_PortShiftY	intersim2/networks/cmesh.cpp	/^int CMesh::_memo_PortShiftY = 0 ;$/;"	m	class:CMesh	typeref:typename:int
_memo_PortShiftY	intersim2/networks/cmesh.hpp	/^  static int _memo_PortShiftY ;$/;"	m	class:CMesh	typeref:typename:int
_memory_op_t	abstract_hardware_model.h	/^enum _memory_op_t {$/;"	g
_memory_space_t	abstract_hardware_model.h	/^enum _memory_space_t {$/;"	g
_mesh	intersim2/networks/kncube.hpp	/^  bool _mesh;$/;"	m	class:KNCube	typeref:typename:bool
_min	intersim2/stats.hpp	/^  double _min;$/;"	m	class:Stats	typeref:typename:double
_min_latency	intersim2/buffer_state.hpp	/^    int _min_latency;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:int
_mq_age	intersim2/routers/chaos_router.hpp	/^  vector<int> _mq_age;$/;"	m	class:ChaosRouter	typeref:typename:vector<int>
_mq_matched	intersim2/routers/chaos_router.hpp	/^  vector<bool> _mq_matched;$/;"	m	class:ChaosRouter	typeref:typename:vector<bool>
_mq_route	intersim2/routers/chaos_router.hpp	/^  vector<OutputSet*> _mq_route;$/;"	m	class:ChaosRouter	typeref:typename:vector<OutputSet * >
_multi_match	intersim2/routers/chaos_router.hpp	/^  vector<int> _multi_match;$/;"	m	class:ChaosRouter	typeref:typename:vector<int>
_multi_queue	intersim2/routers/chaos_router.hpp	/^  vector<queue<Flit *> > _multi_queue;$/;"	m	class:ChaosRouter	typeref:typename:vector<queue<Flit * >>
_multi_queue_size	intersim2/routers/chaos_router.hpp	/^  int _multi_queue_size;$/;"	m	class:ChaosRouter	typeref:typename:int
_multi_state	intersim2/routers/chaos_router.hpp	/^  vector<eQState> _multi_state;$/;"	m	class:ChaosRouter	typeref:typename:vector<eQState>
_n	intersim2/networks/cmesh.hpp	/^  int _n ;$/;"	m	class:CMesh	typeref:typename:int
_n	intersim2/networks/dragonfly.hpp	/^  int _n;$/;"	m	class:DragonFlyNew	typeref:typename:int
_n	intersim2/networks/fattree.hpp	/^  int _n;$/;"	m	class:FatTree	typeref:typename:int
_n	intersim2/networks/flatfly_onchip.hpp	/^  int _n;$/;"	m	class:FlatFlyOnChip	typeref:typename:int
_n	intersim2/networks/fly.hpp	/^  int _n;$/;"	m	class:KNFly	typeref:typename:int
_n	intersim2/networks/kncube.hpp	/^  int _n;$/;"	m	class:KNCube	typeref:typename:int
_n	intersim2/networks/qtree.hpp	/^  int _n;$/;"	m	class:QTree	typeref:typename:int
_n	intersim2/networks/tree4.hpp	/^  int _n;$/;"	m	class:Tree4	typeref:typename:int
_n	intersim2/traffic.hpp	/^  int _n;$/;"	m	class:DigitPermutationTrafficPattern	typeref:typename:int
_n_mem	intersim2/interconnect_interface.hpp	/^  unsigned _n_shader, _n_mem;$/;"	m	class:InterconnectInterface	typeref:typename:unsigned
_n_shader	intersim2/interconnect_interface.hpp	/^  unsigned _n_shader, _n_mem;$/;"	m	class:InterconnectInterface	typeref:typename:unsigned
_name	intersim2/module.hpp	/^  string _name;$/;"	m	class:Module	typeref:typename:string
_net	intersim2/interconnect_interface.hpp	/^  vector<Network *> _net;$/;"	m	class:InterconnectInterface	typeref:typename:vector<Network * >
_net	intersim2/trafficmanager.hpp	/^  vector<Network *> _net;$/;"	m	class:TrafficManager	typeref:typename:vector<Network * >
_net_size	intersim2/networks/dragonfly.hpp	/^  int _net_size;$/;"	m	class:DragonFlyNew	typeref:typename:int
_net_size	intersim2/networks/flatfly_onchip.hpp	/^  int _net_size;$/;"	m	class:FlatFlyOnChip	typeref:typename:int
_next_buf	intersim2/routers/iq_router.hpp	/^  vector<BufferState *> _next_buf;$/;"	m	class:IQRouter	typeref:typename:vector<BufferState * >
_next_queue_cnt	intersim2/routers/chaos_router.hpp	/^  vector<int> _next_queue_cnt;$/;"	m	class:ChaosRouter	typeref:typename:vector<int>
_nlat_stats	intersim2/trafficmanager.hpp	/^  vector<Stats *> _nlat_stats;     $/;"	m	class:TrafficManager	typeref:typename:vector<Stats * >
_node_map	intersim2/interconnect_interface.hpp	/^  map<unsigned, unsigned> _node_map;$/;"	m	class:InterconnectInterface	typeref:typename:map<unsigned,unsigned>
_nodes	intersim2/injection.hpp	/^  int _nodes;$/;"	m	class:InjectionProcess	typeref:typename:int
_nodes	intersim2/networks/network.hpp	/^  int _nodes;$/;"	m	class:Network	typeref:typename:int
_nodes	intersim2/traffic.hpp	/^  int _nodes;$/;"	m	class:TrafficPattern	typeref:typename:int
_nodes	intersim2/trafficmanager.hpp	/^  int _nodes;$/;"	m	class:TrafficManager	typeref:typename:int
_noq	intersim2/routers/iq_router.hpp	/^  bool _noq;$/;"	m	class:IQRouter	typeref:typename:bool
_noq	intersim2/trafficmanager.hpp	/^  bool _noq;$/;"	m	class:TrafficManager	typeref:typename:bool
_noq_next_output_port	intersim2/routers/iq_router.hpp	/^  vector<vector<int> > _noq_next_output_port;$/;"	m	class:IQRouter	typeref:typename:vector<vector<int>>
_noq_next_vc_end	intersim2/routers/iq_router.hpp	/^  vector<vector<int> > _noq_next_vc_end;$/;"	m	class:IQRouter	typeref:typename:vector<vector<int>>
_noq_next_vc_start	intersim2/routers/iq_router.hpp	/^  vector<vector<int> > _noq_next_vc_start;$/;"	m	class:IQRouter	typeref:typename:vector<vector<int>>
_ns	intersim2/allocators/maxsize.hpp	/^  int *_ns;     \/\/ next stack$/;"	m	class:MaxSizeMatch	typeref:typename:int *
_num_bins	intersim2/stats.hpp	/^  int    _num_bins;$/;"	m	class:Stats	typeref:typename:int
_num_of_switch	intersim2/networks/dragonfly.hpp	/^  int _num_of_switch;$/;"	m	class:DragonFlyNew	typeref:typename:int
_num_of_switch	intersim2/networks/flatfly_onchip.hpp	/^  int _num_of_switch;$/;"	m	class:FlatFlyOnChip	typeref:typename:int
_num_reqs	intersim2/arbiters/arbiter.hpp	/^  int  _num_reqs ;$/;"	m	class:Arbiter	typeref:typename:int
_num_requests	intersim2/allocators/wavefront.hpp	/^  int _num_requests;$/;"	m	class:Wavefront	typeref:typename:int
_num_samples	intersim2/stats.hpp	/^  int    _num_samples;$/;"	m	class:Stats	typeref:typename:int
_numinput	intersim2/networks/dragonfly.hpp	/^  int _numinput;$/;"	m	class:DragonFlyNew	typeref:typename:int
_numinput	intersim2/networks/flatfly_onchip.hpp	/^  int _numinput;$/;"	m	class:FlatFlyOnChip	typeref:typename:int
_occupancy	intersim2/buffer.hpp	/^  int _occupancy;$/;"	m	class:Buffer	typeref:typename:int
_occupancy	intersim2/buffer_state.hpp	/^  int  _occupancy;$/;"	m	class:BufferState	typeref:typename:int
_occupancy_limit	intersim2/buffer_state.hpp	/^    vector<int> _occupancy_limit;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:vector<int>
_offset	intersim2/buffer_state.hpp	/^    int _offset;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:int
_out_cred_buffer	intersim2/routers/event_router.hpp	/^  vector<queue<Credit *> > _out_cred_buffer;$/;"	m	class:EventRouter	typeref:typename:vector<queue<Credit * >>
_out_occ	intersim2/allocators/allocator.hpp	/^  set<int> _out_occ;$/;"	m	class:SparseAllocator	typeref:typename:set<int>
_out_port	intersim2/vc.hpp	/^  int _out_port, _out_vc;$/;"	m	class:VC	typeref:typename:int
_out_queue_credits	intersim2/routers/iq_router.hpp	/^  map<int, Credit *> _out_queue_credits;$/;"	m	class:IQRouter	typeref:typename:map<int,Credit * >
_out_req	intersim2/allocators/allocator.hpp	/^  vector<map<int, sRequest> > _out_req;$/;"	m	class:SparseAllocator	typeref:typename:vector<map<int,sRequest>>
_out_vc	intersim2/vc.hpp	/^  int _out_port, _out_vc;$/;"	m	class:VC	typeref:typename:int
_outmask	intersim2/allocators/selalloc.hpp	/^  vector<int> _outmask;$/;"	m	class:SelAlloc	typeref:typename:vector<int>
_outmatch	gpgpu-sim/shader.h	/^      int *_outmatch;$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:int *
_outmatch	intersim2/allocators/allocator.hpp	/^  vector<int> _outmatch;$/;"	m	class:Allocator	typeref:typename:vector<int>
_output	intersim2/channel.hpp	/^  T * _output;$/;"	m	class:Channel	typeref:typename:T *
_outputChannelMap	intersim2/networks/fattree.hpp	/^  int* _outputChannelMap; $/;"	m	class:FatTree	typeref:typename:int *
_output_arb	intersim2/allocators/separable.hpp	/^  vector<Arbiter*> _output_arb ;$/;"	m	class:SeparableAllocator	typeref:typename:vector<Arbiter * >
_output_buffer	intersim2/routers/event_router.hpp	/^  vector<queue<Flit *> > _output_buffer;$/;"	m	class:EventRouter	typeref:typename:vector<queue<Flit * >>
_output_buffer	intersim2/routers/iq_router.hpp	/^  vector<queue<Flit *> > _output_buffer;$/;"	m	class:IQRouter	typeref:typename:vector<queue<Flit * >>
_output_buffer_size	intersim2/routers/iq_router.hpp	/^  int _output_buffer_size;$/;"	m	class:IQRouter	typeref:typename:int
_output_channels	intersim2/routers/router.hpp	/^  vector<FlitChannel *>   _output_channels;$/;"	m	class:Router	typeref:typename:vector<FlitChannel * >
_output_credits	intersim2/routers/router.hpp	/^  vector<CreditChannel *> _output_credits;$/;"	m	class:Router	typeref:typename:vector<CreditChannel * >
_output_frame	intersim2/routers/chaos_router.hpp	/^  vector<queue<Flit *> > _output_frame;$/;"	m	class:ChaosRouter	typeref:typename:vector<queue<Flit * >>
_output_matched	intersim2/routers/chaos_router.hpp	/^  vector<bool> _output_matched;$/;"	m	class:ChaosRouter	typeref:typename:vector<bool>
_output_speedup	intersim2/routers/router.hpp	/^  int _output_speedup;$/;"	m	class:Router	typeref:typename:int
_output_state	intersim2/routers/event_router.hpp	/^  vector<EventNextVCState *> _output_state;$/;"	m	class:EventRouter	typeref:typename:vector<EventNextVCState * >
_outputs	intersim2/allocators/allocator.hpp	/^  const int _outputs;$/;"	m	class:Allocator	typeref:typename:const int
_outputs	intersim2/outputset.hpp	/^  set<sSetElement> _outputs;$/;"	m	class:OutputSet	typeref:typename:set<sSetElement>
_outputs	intersim2/power/switch_monitor.hpp	/^  int  _outputs ;$/;"	m	class:SwitchMonitor	typeref:typename:int
_outputs	intersim2/routers/router.hpp	/^  int _outputs;$/;"	m	class:Router	typeref:typename:int
_outstanding_classes	intersim2/buffer_state.hpp	/^  vector<queue<int> > _outstanding_classes;$/;"	m	class:BufferState	typeref:typename:vector<queue<int>>
_outstanding_classes	intersim2/routers/iq_router.hpp	/^  vector<vector<queue<int> > > _outstanding_classes;$/;"	m	class:IQRouter	typeref:typename:vector<vector<queue<int>>>
_outstanding_classes	intersim2/trafficmanager.hpp	/^  vector<vector<vector<queue<int> > > > _outstanding_classes;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<vector<queue<int>>>>
_outstanding_credits	intersim2/routers/router.hpp	/^  vector<vector<int> > _outstanding_credits;$/;"	m	class:Router	typeref:typename:vector<vector<int>>
_outstanding_credits	intersim2/trafficmanager.hpp	/^  vector<vector<vector<int> > > _outstanding_credits;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<vector<int>>>
_outstanding_credits_out	intersim2/trafficmanager.hpp	/^  ostream * _outstanding_credits_out;$/;"	m	class:TrafficManager	typeref:typename:ostream *
_overall_avg_accepted	intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_accepted;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_avg_accepted_packets	intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_accepted_packets;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_avg_batch_time	intersim2/batchtrafficmanager.hpp	/^  double _overall_avg_batch_time;$/;"	m	class:BatchTrafficManager	typeref:typename:double
_overall_avg_flat	intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_flat;  $/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_avg_frag	intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_frag;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_avg_nlat	intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_nlat;  $/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_avg_plat	intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_plat;  $/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_avg_sent	intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_sent;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_avg_sent_packets	intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_sent_packets;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_buffer_busy_stalls	intersim2/trafficmanager.hpp	/^  vector<double> _overall_buffer_busy_stalls;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_buffer_conflict_stalls	intersim2/trafficmanager.hpp	/^  vector<double> _overall_buffer_conflict_stalls;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_buffer_full_stalls	intersim2/trafficmanager.hpp	/^  vector<double> _overall_buffer_full_stalls;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_buffer_reserved_stalls	intersim2/trafficmanager.hpp	/^  vector<double> _overall_buffer_reserved_stalls;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_crossbar_conflict_stalls	intersim2/trafficmanager.hpp	/^  vector<double> _overall_crossbar_conflict_stalls;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_hop_stats	intersim2/trafficmanager.hpp	/^  vector<double> _overall_hop_stats;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_max_accepted	intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_accepted;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_max_accepted_packets	intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_accepted_packets;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_max_batch_time	intersim2/batchtrafficmanager.hpp	/^  double _overall_max_batch_time;$/;"	m	class:BatchTrafficManager	typeref:typename:double
_overall_max_flat	intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_flat;  $/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_max_frag	intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_frag;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_max_nlat	intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_nlat;  $/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_max_plat	intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_plat;  $/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_max_sent	intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_sent;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_max_sent_packets	intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_sent_packets;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_min_accepted	intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_accepted;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_min_accepted_packets	intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_accepted_packets;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_min_batch_time	intersim2/batchtrafficmanager.hpp	/^  double _overall_min_batch_time;$/;"	m	class:BatchTrafficManager	typeref:typename:double
_overall_min_flat	intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_flat;  $/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_min_frag	intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_frag;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_min_nlat	intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_nlat;  $/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_min_plat	intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_plat;  $/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_min_sent	intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_sent;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_overall_min_sent_packets	intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_sent_packets;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_p	intersim2/networks/dragonfly.hpp	/^  int _p, _a, _g;$/;"	m	class:DragonFlyNew	typeref:typename:int
_packet_n	intersim2/interconnect_interface.hpp	/^    int _packet_n;$/;"	m	class:InterconnectInterface::_BoundaryBufferItem	typeref:typename:int
_packet_seq_no	intersim2/trafficmanager.hpp	/^  vector<int> _packet_seq_no;$/;"	m	class:TrafficManager	typeref:typename:vector<int>
_packet_size	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _packet_size;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_packet_size_max_val	intersim2/trafficmanager.hpp	/^  vector<int> _packet_size_max_val;$/;"	m	class:TrafficManager	typeref:typename:vector<int>
_packet_size_rate	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _packet_size_rate;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_packets_to_watch	intersim2/trafficmanager.hpp	/^  set<int> _packets_to_watch;$/;"	m	class:TrafficManager	typeref:typename:set<int>
_pair_flat	intersim2/trafficmanager.hpp	/^  vector<vector<Stats *> > _pair_flat;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<Stats * >>
_pair_nlat	intersim2/trafficmanager.hpp	/^  vector<vector<Stats *> > _pair_nlat;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<Stats * >>
_pair_plat	intersim2/trafficmanager.hpp	/^  vector<vector<Stats *> > _pair_plat;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<Stats * >>
_pair_stats	intersim2/trafficmanager.hpp	/^  bool _pair_stats;$/;"	m	class:TrafficManager	typeref:typename:bool
_partial_internal_cycles	intersim2/routers/router.hpp	/^  double _partial_internal_cycles;$/;"	m	class:Router	typeref:typename:double
_partial_packets	intersim2/trafficmanager.hpp	/^  vector<vector<list<Flit *> > > _partial_packets;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<list<Flit * >>>
_pending_credits	intersim2/buffer_state.hpp	/^    vector<int> _pending_credits;$/;"	m	class:BufferState::SimpleFeedbackSharedBufferPolicy	typeref:typename:vector<int>
_pipe_len	intersim2/pipefifo.hpp	/^  int _pipe_len;$/;"	m	class:PipelineFIFO	typeref:typename:int
_pipe_ptr	intersim2/pipefifo.hpp	/^  int _pipe_ptr;$/;"	m	class:PipelineFIFO	typeref:typename:int
_plat_stats	intersim2/trafficmanager.hpp	/^  vector<Stats *> _plat_stats;     $/;"	m	class:TrafficManager	typeref:typename:vector<Stats * >
_pointer	intersim2/arbiters/roundrobin_arb.hpp	/^  int  _pointer ;$/;"	m	class:RoundRobinArbiter	typeref:typename:int
_presence	intersim2/routers/event_router.hpp	/^  vector<int> _presence;$/;"	m	class:EventNextVCState	typeref:typename:vector<int>
_pri	intersim2/allocators/wavefront.hpp	/^  int _pri;$/;"	m	class:Wavefront	typeref:typename:int
_pri	intersim2/vc.hpp	/^  int _pri;$/;"	m	class:VC	typeref:typename:int
_pri_type	intersim2/trafficmanager.hpp	/^  ePriority _pri_type;$/;"	m	class:TrafficManager	typeref:typename:ePriority
_pri_type	intersim2/vc.hpp	/^  ePrioType _pri_type;$/;"	m	class:VC	typeref:typename:ePrioType
_print_csv_results	intersim2/trafficmanager.hpp	/^  bool _print_csv_results;$/;"	m	class:TrafficManager	typeref:typename:bool
_prio	intersim2/allocators/maxsize.hpp	/^  int _prio;    \/\/ priority pointer to ensure fairness$/;"	m	class:MaxSizeMatch	typeref:typename:int
_priorities	intersim2/allocators/wavefront.hpp	/^  set<pair<int, int> > _priorities;$/;"	m	class:Wavefront	typeref:typename:set<pair<int,int>>
_priority_donation	intersim2/vc.hpp	/^  int _priority_donation;$/;"	m	class:VC	typeref:typename:int
_private_buf_occupancy	intersim2/buffer_state.hpp	/^    vector<int> _private_buf_occupancy;$/;"	m	class:BufferState::SharedBufferPolicy	typeref:typename:vector<int>
_private_buf_size	intersim2/buffer_state.hpp	/^    vector<int> _private_buf_size;$/;"	m	class:BufferState::SharedBufferPolicy	typeref:typename:vector<int>
_private_buf_vc_map	intersim2/buffer_state.hpp	/^    vector<int> _private_buf_vc_map;$/;"	m	class:BufferState::SharedBufferPolicy	typeref:typename:vector<int>
_proc_credits	intersim2/routers/iq_router.hpp	/^  deque<pair<int, pair<Credit *, int> > > _proc_credits;$/;"	m	class:IQRouter	typeref:typename:deque<pair<int,pair<Credit *,int>>>
_qdrained	intersim2/trafficmanager.hpp	/^  vector<vector<bool> > _qdrained;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<bool>>
_qtime	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _qtime;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_r	intersim2/networks/dragonfly.hpp	/^  int _r;$/;"	m	class:DragonFlyNew	typeref:typename:int
_r	intersim2/networks/flatfly_onchip.hpp	/^  int _r;$/;"	m	class:FlatFlyOnChip	typeref:typename:int
_r1	intersim2/injection.hpp	/^  double _r1;$/;"	m	class:OnOffInjectionProcess	typeref:typename:double
_radix	intersim2/networks/dragonfly.hpp	/^  int _radix;$/;"	m	class:DragonFlyNew	typeref:typename:int
_radix	intersim2/networks/flatfly_onchip.hpp	/^  int _radix;$/;"	m	class:FlatFlyOnChip	typeref:typename:int
_rate	intersim2/injection.hpp	/^  double _rate;$/;"	m	class:InjectionProcess	typeref:typename:double
_rates	intersim2/traffic.hpp	/^  vector<int> _rates;$/;"	m	class:HotSpotTrafficPattern	typeref:typename:vector<int>
_read_reply_size	intersim2/trafficmanager.hpp	/^  vector<int> _read_reply_size;$/;"	m	class:TrafficManager	typeref:typename:vector<int>
_read_request_size	intersim2/trafficmanager.hpp	/^  vector<int> _read_request_size;$/;"	m	class:TrafficManager	typeref:typename:vector<int>
_read_stall	intersim2/routers/chaos_router.hpp	/^  int _read_stall;$/;"	m	class:ChaosRouter	typeref:typename:int
_reads	intersim2/power/buffer_monitor.hpp	/^  vector<int> _reads ;$/;"	m	class:BufferMonitor	typeref:typename:vector<int>
_received_flits	intersim2/routers/router.hpp	/^  vector<vector<int> > _received_flits;$/;"	m	class:Router	typeref:typename:vector<vector<int>>
_received_flits_out	intersim2/trafficmanager.hpp	/^  ostream * _received_flits_out;$/;"	m	class:TrafficManager	typeref:typename:ostream *
_repliesPending	intersim2/trafficmanager.hpp	/^  vector<list<PacketReplyInfo*> > _repliesPending;$/;"	m	class:TrafficManager	typeref:typename:vector<list<PacketReplyInfo * >>
_req	intersim2/allocators/loa.hpp	/^  vector<int> _req;$/;"	m	class:LOA	typeref:typename:vector<int>
_request	gpgpu-sim/shader.h	/^      int **_request;$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:int **
_request	intersim2/allocators/allocator.hpp	/^  vector<vector<sRequest> > _request;$/;"	m	class:DenseAllocator	typeref:typename:vector<vector<sRequest>>
_request	intersim2/arbiters/arbiter.hpp	/^  vector<entry_t> _request ;$/;"	m	class:Arbiter	typeref:typename:vector<entry_t>
_requests	intersim2/arbiters/prio_arb.hpp	/^  list<sRequest> _requests;$/;"	m	class:PriorityArbiter	typeref:typename:list<sRequest>
_requestsOutstanding	intersim2/trafficmanager.hpp	/^  vector<int> _requestsOutstanding;$/;"	m	class:TrafficManager	typeref:typename:vector<int>
_reserved_slots	intersim2/buffer_state.hpp	/^    vector<int> _reserved_slots;$/;"	m	class:BufferState::SharedBufferPolicy	typeref:typename:vector<int>
_reset_time	intersim2/trafficmanager.hpp	/^  int   _reset_time;$/;"	m	class:TrafficManager	typeref:typename:int
_retired_packets	intersim2/trafficmanager.hpp	/^  vector<map<int, Flit *> > _retired_packets;$/;"	m	class:TrafficManager	typeref:typename:vector<map<int,Flit * >>
_reverse_node_map	intersim2/interconnect_interface.hpp	/^  map<unsigned, unsigned> _reverse_node_map;$/;"	m	class:InterconnectInterface	typeref:typename:map<unsigned,unsigned>
_rf	intersim2/routers/chaos_router.hpp	/^  tRoutingFunction   _rf;$/;"	m	class:ChaosRouter	typeref:typename:tRoutingFunction
_rf	intersim2/routers/event_router.hpp	/^  tRoutingFunction   _rf;$/;"	m	class:EventRouter	typeref:typename:tRoutingFunction
_rf	intersim2/routers/iq_router.hpp	/^  tRoutingFunction   _rf;$/;"	m	class:IQRouter	typeref:typename:tRoutingFunction
_rf	intersim2/trafficmanager.hpp	/^  tRoutingFunction _rf;$/;"	m	class:TrafficManager	typeref:typename:tRoutingFunction
_round_robin_turn	intersim2/interconnect_interface.hpp	/^  vector<vector<int> > _round_robin_turn; \/\/keep track of _boundary_buffer last used in icnt_p/;"	m	class:InterconnectInterface	typeref:typename:vector<vector<int>>
_round_trip_time	intersim2/buffer_state.hpp	/^    vector<int> _round_trip_time;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:vector<int>
_route_set	intersim2/vc.hpp	/^  OutputSet *_route_set;$/;"	m	class:VC	typeref:typename:OutputSet *
_route_vcs	intersim2/routers/iq_router.hpp	/^  deque<pair<int, pair<int, int> > > _route_vcs;$/;"	m	class:IQRouter	typeref:typename:deque<pair<int,pair<int,int>>>
_router	intersim2/trafficmanager.hpp	/^  vector<vector<Router *> > _router;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<Router * >>
_routerSink	intersim2/flitchannel.hpp	/^  Router const * _routerSink;$/;"	m	class:FlitChannel	typeref:typename:Router const *
_routerSinkPort	intersim2/flitchannel.hpp	/^  int _routerSinkPort;$/;"	m	class:FlitChannel	typeref:typename:int
_routerSource	intersim2/flitchannel.hpp	/^  Router const * _routerSource;$/;"	m	class:FlitChannel	typeref:typename:Router const *
_routerSourcePort	intersim2/flitchannel.hpp	/^  int _routerSourcePort;$/;"	m	class:FlitChannel	typeref:typename:int
_routers	intersim2/networks/network.hpp	/^  vector<Router *> _routers;$/;"	m	class:Network	typeref:typename:vector<Router * >
_routers	intersim2/trafficmanager.hpp	/^  int _routers;$/;"	m	class:TrafficManager	typeref:typename:int
_routing_delay	intersim2/routers/iq_router.hpp	/^  int _routing_delay;$/;"	m	class:IQRouter	typeref:typename:int
_rptr	intersim2/allocators/loa.hpp	/^  vector<int> _rptr;$/;"	m	class:LOA	typeref:typename:vector<int>
_rr_ptr	intersim2/arbiters/prio_arb.hpp	/^  int _rr_ptr;$/;"	m	class:PriorityArbiter	typeref:typename:int
_s	intersim2/allocators/maxsize.hpp	/^  int *_s;      \/\/ stack of leaf nodes in tree$/;"	m	class:MaxSizeMatch	typeref:typename:int *
_sample_period	intersim2/trafficmanager.hpp	/^  int   _sample_period;$/;"	m	class:TrafficManager	typeref:typename:int
_sample_squared_sum	intersim2/stats.hpp	/^  double _sample_squared_sum;$/;"	m	class:Stats	typeref:typename:double
_sample_sum	intersim2/stats.hpp	/^  double _sample_sum;$/;"	m	class:Stats	typeref:typename:double
_selected	intersim2/arbiters/arbiter.hpp	/^  int  _selected ;$/;"	m	class:Arbiter	typeref:typename:int
_sent_flits	intersim2/routers/router.hpp	/^  vector<vector<int> > _sent_flits;$/;"	m	class:Router	typeref:typename:vector<vector<int>>
_sent_flits	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _sent_flits;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_sent_flits_out	intersim2/trafficmanager.hpp	/^  ostream * _sent_flits_out;$/;"	m	class:TrafficManager	typeref:typename:ostream *
_sent_packets	intersim2/trafficmanager.hpp	/^  vector<vector<int> > _sent_packets;$/;"	m	class:TrafficManager	typeref:typename:vector<vector<int>>
_sent_packets_out	intersim2/batchtrafficmanager.hpp	/^  ostream * _sent_packets_out;$/;"	m	class:BatchTrafficManager	typeref:typename:ostream *
_shared_buf_occupancy	intersim2/buffer_state.hpp	/^    int _shared_buf_occupancy;$/;"	m	class:BufferState::SharedBufferPolicy	typeref:typename:int
_shared_buf_size	intersim2/buffer_state.hpp	/^    int _shared_buf_size;$/;"	m	class:BufferState::SharedBufferPolicy	typeref:typename:int
_shift	intersim2/traffic.hpp	/^  int _shift;$/;"	m	class:TransposeTrafficPattern	typeref:typename:int
_sim_state	intersim2/trafficmanager.hpp	/^  eSimState _sim_state;$/;"	m	class:TrafficManager	typeref:typename:eSimState
_size	intersim2/arbiters/arbiter.hpp	/^  int  _size ;$/;"	m	class:Arbiter	typeref:typename:int
_size	intersim2/buffer.hpp	/^  int _size;$/;"	m	class:Buffer	typeref:typename:int
_size	intersim2/buffer_state.hpp	/^  int  _size;$/;"	m	class:BufferState	typeref:typename:int
_size	intersim2/networks/network.hpp	/^  int _size;$/;"	m	class:Network	typeref:typename:int
_skip_diags	intersim2/allocators/wavefront.hpp	/^  bool _skip_diags;$/;"	m	class:Wavefront	typeref:typename:bool
_slowest_flit	intersim2/trafficmanager.hpp	/^  vector<int> _slowest_flit;$/;"	m	class:TrafficManager	typeref:typename:vector<int>
_slowest_packet	intersim2/trafficmanager.hpp	/^  vector<int> _slowest_packet;$/;"	m	class:TrafficManager	typeref:typename:vector<int>
_spec_check_cred	intersim2/routers/iq_router.hpp	/^  bool _spec_check_cred;$/;"	m	class:IQRouter	typeref:typename:bool
_spec_check_elig	intersim2/routers/iq_router.hpp	/^  bool _spec_check_elig;$/;"	m	class:IQRouter	typeref:typename:bool
_spec_mask_by_reqs	intersim2/routers/iq_router.hpp	/^  bool _spec_mask_by_reqs;$/;"	m	class:IQRouter	typeref:typename:bool
_spec_sw_allocator	intersim2/routers/iq_router.hpp	/^  Allocator *_spec_sw_allocator;$/;"	m	class:IQRouter	typeref:typename:Allocator *
_speculative	intersim2/routers/iq_router.hpp	/^  bool _speculative;$/;"	m	class:IQRouter	typeref:typename:bool
_square	intersim2/allocators/wavefront.hpp	/^  int _square;$/;"	m	class:Wavefront	typeref:typename:int
_stageout	intersim2/networks/dragonfly.hpp	/^  int _stageout;$/;"	m	class:DragonFlyNew	typeref:typename:int
_stageout	intersim2/networks/flatfly_onchip.hpp	/^  int _stageout;$/;"	m	class:FlatFlyOnChip	typeref:typename:int
_stages	intersim2/networks/dragonfly.hpp	/^  int _stages;$/;"	m	class:DragonFlyNew	typeref:typename:int
_stages	intersim2/networks/flatfly_onchip.hpp	/^  int _stages;$/;"	m	class:FlatFlyOnChip	typeref:typename:int
_stat_idx	gpgpu-sim/power_stat.h	/^typedef enum _stat_idx{$/;"	g
_state	intersim2/injection.hpp	/^  vector<int> _state;$/;"	m	class:OnOffInjectionProcess	typeref:typename:vector<int>
_state	intersim2/routers/event_router.hpp	/^  vector<eNextVCState> _state;$/;"	m	class:EventNextVCState	typeref:typename:vector<eNextVCState>
_state	intersim2/vc.hpp	/^  eVCState _state;$/;"	m	class:VC	typeref:typename:eVCState
_stats	intersim2/trafficmanager.hpp	/^  map<string, Stats *> _stats;$/;"	m	class:TrafficManager	typeref:typename:map<string,Stats * >
_stats_out	intersim2/trafficmanager.hpp	/^  ostream * _stats_out;$/;"	m	class:TrafficManager	typeref:typename:ostream *
_stopping_threshold	intersim2/trafficmanager.hpp	/^  vector<double> _stopping_threshold;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_stored_flits	intersim2/routers/router.hpp	/^  vector<vector<int> > _stored_flits;$/;"	m	class:Router	typeref:typename:vector<vector<int>>
_stored_flits_out	intersim2/trafficmanager.hpp	/^  ostream * _stored_flits_out;$/;"	m	class:TrafficManager	typeref:typename:ostream *
_str_map	intersim2/config_utils.hpp	/^  map<string,string> _str_map;$/;"	m	class:Configuration	typeref:typename:map<string,string>
_strnicmp	gpuwattch/xmlParser.cc	/^    static inline int _strnicmp(const char *c1,const char *c2, int l) { return strncasecmp(c1,c2/;"	f	typeref:typename:int	file:
_subnet	intersim2/trafficmanager.hpp	/^  vector<int> _subnet;$/;"	m	class:TrafficManager	typeref:typename:vector<int>
_subnets	intersim2/interconnect_interface.hpp	/^  int _subnets;$/;"	m	class:InterconnectInterface	typeref:typename:int
_subnets	intersim2/trafficmanager.hpp	/^  int _subnets;$/;"	m	class:TrafficManager	typeref:typename:int
_sw_alloc_delay	intersim2/routers/iq_router.hpp	/^  int _sw_alloc_delay;$/;"	m	class:IQRouter	typeref:typename:int
_sw_alloc_vcs	intersim2/routers/iq_router.hpp	/^  deque<pair<int, pair<pair<int, int>, int> > > _sw_alloc_vcs;$/;"	m	class:IQRouter	typeref:typename:deque<pair<int,pair<pair<int,int>,int>>>
_sw_allocator	intersim2/routers/iq_router.hpp	/^  Allocator *_sw_allocator;$/;"	m	class:IQRouter	typeref:typename:Allocator *
_sw_hold_vcs	intersim2/routers/iq_router.hpp	/^  deque<pair<int, pair<pair<int, int>, int> > > _sw_hold_vcs;$/;"	m	class:IQRouter	typeref:typename:deque<pair<int,pair<pair<int,int>,int>>>
_sw_rr_offset	intersim2/routers/iq_router.hpp	/^  vector<int> _sw_rr_offset;$/;"	m	class:IQRouter	typeref:typename:vector<int>
_switchMonitor	intersim2/routers/iq_router.hpp	/^  SwitchMonitor * _switchMonitor ;$/;"	m	class:IQRouter	typeref:typename:SwitchMonitor *
_switch_hold_in	intersim2/routers/iq_router.hpp	/^  vector<int> _switch_hold_in;$/;"	m	class:IQRouter	typeref:typename:vector<int>
_switch_hold_out	intersim2/routers/iq_router.hpp	/^  vector<int> _switch_hold_out;$/;"	m	class:IQRouter	typeref:typename:vector<int>
_switch_hold_vc	intersim2/routers/iq_router.hpp	/^  vector<int> _switch_hold_vc;$/;"	m	class:IQRouter	typeref:typename:vector<int>
_tail_flag	intersim2/interconnect_interface.hpp	/^    queue<bool> _tail_flag;$/;"	m	class:InterconnectInterface::_BoundaryBufferItem	typeref:typename:queue<bool>
_tail_sent	intersim2/buffer_state.hpp	/^  vector<bool> _tail_sent;$/;"	m	class:BufferState	typeref:typename:vector<bool>
_time	intersim2/trafficmanager.hpp	/^  int _time;$/;"	m	class:TrafficManager	typeref:typename:int
_timed_modules	intersim2/networks/network.hpp	/^  deque<TimedModule *> _timed_modules;$/;"	m	class:Network	typeref:typename:deque<TimedModule * >
_total_in_flight_flits	intersim2/trafficmanager.hpp	/^  vector<map<int, Flit *> > _total_in_flight_flits;$/;"	m	class:TrafficManager	typeref:typename:vector<map<int,Flit * >>
_total_mapped_size	intersim2/buffer_state.hpp	/^    int _total_mapped_size;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:int
_total_sims	intersim2/trafficmanager.hpp	/^  int   _total_sims;$/;"	m	class:TrafficManager	typeref:typename:int
_traffic	intersim2/trafficmanager.hpp	/^  vector<string> _traffic;$/;"	m	class:TrafficManager	typeref:typename:vector<string>
_traffic_manager	intersim2/interconnect_interface.hpp	/^  GPUTrafficManager* _traffic_manager;$/;"	m	class:InterconnectInterface	typeref:typename:GPUTrafficManager *
_traffic_pattern	intersim2/trafficmanager.hpp	/^  vector<TrafficPattern *> _traffic_pattern;$/;"	m	class:TrafficManager	typeref:typename:vector<TrafficPattern * >
_transport_arbiter	intersim2/routers/event_router.hpp	/^  vector<PriorityArbiter*> _transport_arbiter;$/;"	m	class:EventRouter	typeref:typename:vector<PriorityArbiter * >
_transport_free	intersim2/routers/event_router.hpp	/^  vector<bool> _transport_free;$/;"	m	class:EventRouter	typeref:typename:vector<bool>
_transport_match	intersim2/routers/event_router.hpp	/^  vector<int> _transport_match;$/;"	m	class:EventRouter	typeref:typename:vector<int>
_transport_queue	intersim2/routers/event_router.hpp	/^  vector<queue<tTransportEvent *> > _transport_queue;$/;"	m	class:EventRouter	typeref:typename:vector<queue<tTransportEvent * >>
_use_read_write	intersim2/trafficmanager.hpp	/^  vector<int> _use_read_write;$/;"	m	class:TrafficManager	typeref:typename:vector<int>
_used_credits_out	intersim2/trafficmanager.hpp	/^  ostream * _used_credits_out;$/;"	m	class:TrafficManager	typeref:typename:ostream *
_vc	intersim2/buffer.hpp	/^  vector<VC*> _vc;$/;"	m	class:Buffer	typeref:typename:vector<VC * >
_vc_alloc_delay	intersim2/routers/iq_router.hpp	/^  int _vc_alloc_delay;$/;"	m	class:IQRouter	typeref:typename:int
_vc_alloc_vcs	intersim2/routers/iq_router.hpp	/^  deque<pair<int, pair<pair<int, int>, int> > > _vc_alloc_vcs;  $/;"	m	class:IQRouter	typeref:typename:deque<pair<int,pair<pair<int,int>,int>>>
_vc_allocator	intersim2/routers/iq_router.hpp	/^  Allocator *_vc_allocator;$/;"	m	class:IQRouter	typeref:typename:Allocator *
_vc_buf_size	intersim2/buffer_state.hpp	/^    int _vc_buf_size;$/;"	m	class:BufferState::PrivateBufferPolicy	typeref:typename:int
_vc_busy_when_full	intersim2/routers/iq_router.hpp	/^  bool _vc_busy_when_full;$/;"	m	class:IQRouter	typeref:typename:bool
_vc_occupancy	intersim2/buffer_state.hpp	/^  vector<int> _vc_occupancy;$/;"	m	class:BufferState	typeref:typename:vector<int>
_vc_prioritize_empty	intersim2/routers/iq_router.hpp	/^  bool _vc_prioritize_empty;$/;"	m	class:IQRouter	typeref:typename:bool
_vc_rr_offset	intersim2/routers/iq_router.hpp	/^  vector<int> _vc_rr_offset;$/;"	m	class:IQRouter	typeref:typename:vector<int>
_vc_shuffle_requests	intersim2/routers/iq_router.hpp	/^  bool _vc_shuffle_requests;$/;"	m	class:IQRouter	typeref:typename:bool
_vcs	intersim2/buffer_state.hpp	/^    int _vcs;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy	typeref:typename:int
_vcs	intersim2/buffer_state.hpp	/^    int _vcs;$/;"	m	class:BufferState::LimitedSharedBufferPolicy	typeref:typename:int
_vcs	intersim2/buffer_state.hpp	/^  int  _vcs;$/;"	m	class:BufferState	typeref:typename:int
_vcs	intersim2/interconnect_interface.hpp	/^  int _vcs;$/;"	m	class:InterconnectInterface	typeref:typename:int
_vcs	intersim2/routers/event_router.hpp	/^  int _vcs;$/;"	m	class:EventNextVCState	typeref:typename:int
_vcs	intersim2/routers/event_router.hpp	/^  int _vcs;$/;"	m	class:EventRouter	typeref:typename:int
_vcs	intersim2/routers/iq_router.hpp	/^  int _vcs;$/;"	m	class:IQRouter	typeref:typename:int
_vcs	intersim2/trafficmanager.hpp	/^  int _vcs;$/;"	m	class:TrafficManager	typeref:typename:int
_vct	intersim2/routers/event_router.hpp	/^  int _vct;$/;"	m	class:EventRouter	typeref:typename:int
_wait_for_tail_credit	intersim2/buffer_state.hpp	/^  bool _wait_for_tail_credit;$/;"	m	class:BufferState	typeref:typename:bool
_wait_queue	intersim2/channel.hpp	/^  queue<pair<int, T *> > _wait_queue;$/;"	m	class:Channel	typeref:typename:queue<pair<int,T * >>
_waiting	intersim2/routers/event_router.hpp	/^  vector<list<tWaiting *> > _waiting;$/;"	m	class:EventNextVCState	typeref:typename:vector<list<tWaiting * >>
_warmup_periods	intersim2/trafficmanager.hpp	/^  int   _warmup_periods;$/;"	m	class:TrafficManager	typeref:typename:int
_warmup_threshold	intersim2/trafficmanager.hpp	/^  vector<double> _warmup_threshold;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_watched	intersim2/vc.hpp	/^  bool _watched;$/;"	m	class:VC	typeref:typename:bool
_write_fraction	intersim2/trafficmanager.hpp	/^  vector<double> _write_fraction;$/;"	m	class:TrafficManager	typeref:typename:vector<double>
_write_reply_size	intersim2/trafficmanager.hpp	/^  vector<int> _write_reply_size;$/;"	m	class:TrafficManager	typeref:typename:vector<int>
_write_request_size	intersim2/trafficmanager.hpp	/^  vector<int> _write_request_size;$/;"	m	class:TrafficManager	typeref:typename:vector<int>
_writes	intersim2/power/buffer_monitor.hpp	/^  vector<int> _writes ;$/;"	m	class:BufferMonitor	typeref:typename:vector<int>
_xcount	intersim2/networks/cmesh.hpp	/^  int _xcount;$/;"	m	class:CMesh	typeref:typename:int
_xcount	intersim2/networks/flatfly_onchip.cpp	/^static int _xcount;$/;"	v	typeref:typename:int	file:
_xr	intersim2/traffic.hpp	/^  int _xr;$/;"	m	class:DigitPermutationTrafficPattern	typeref:typename:int
_xrouter	intersim2/networks/cmesh.hpp	/^  int _xrouter;$/;"	m	class:CMesh	typeref:typename:int
_xrouter	intersim2/networks/flatfly_onchip.cpp	/^static int _xrouter;$/;"	v	typeref:typename:int	file:
_ycount	intersim2/networks/cmesh.hpp	/^  int _ycount;$/;"	m	class:CMesh	typeref:typename:int
_ycount	intersim2/networks/flatfly_onchip.cpp	/^static int _ycount;$/;"	v	typeref:typename:int	file:
_yrouter	intersim2/networks/cmesh.hpp	/^  int _yrouter;$/;"	m	class:CMesh	typeref:typename:int
_yrouter	intersim2/networks/flatfly_onchip.cpp	/^static int _yrouter;$/;"	v	typeref:typename:int	file:
a	cuda-sim/instructions.cc	/^   int a;$/;"	m	union:intfloat	typeref:typename:int	file:
abs_impl	cuda-sim/instructions.cc	/^void abs_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
accept_fetch_response	gpgpu-sim/shader.cc	/^void shader_core_ctx::accept_fetch_response( mem_fetch *mf )$/;"	f	class:shader_core_ctx	typeref:typename:void
accept_ldst_unit_response	gpgpu-sim/shader.cc	/^void shader_core_ctx::accept_ldst_unit_response(mem_fetch * mf) $/;"	f	class:shader_core_ctx	typeref:typename:void
access	gpgpu-sim/gpu-cache.cc	/^data_cache::access( new_addr_type addr,$/;"	f	class:data_cache	typeref:enum:cache_request_status
access	gpgpu-sim/gpu-cache.cc	/^enum cache_request_status tag_array::access( new_addr_type addr, unsigned time, unsigned &idx )$/;"	f	class:tag_array	typeref:enum:cache_request_status
access	gpgpu-sim/gpu-cache.cc	/^enum cache_request_status tag_array::access( new_addr_type addr, unsigned time, unsigned &idx, b/;"	f	class:tag_array	typeref:enum:cache_request_status
access	gpgpu-sim/gpu-cache.cc	/^enum cache_request_status tex_cache::access( new_addr_type addr, mem_fetch *mf,$/;"	f	class:tex_cache	typeref:enum:cache_request_status
access	gpgpu-sim/gpu-cache.cc	/^l1_cache::access( new_addr_type addr,$/;"	f	class:l1_cache	typeref:enum:cache_request_status
access	gpgpu-sim/gpu-cache.cc	/^l2_cache::access( new_addr_type addr,$/;"	f	class:l2_cache	typeref:enum:cache_request_status
access	gpgpu-sim/gpu-cache.cc	/^read_only_cache::access( new_addr_type addr,$/;"	f	class:read_only_cache	typeref:enum:cache_request_status
access	gpuwattch/basic_components.h	/^    double access;$/;"	m	class:statsComponents	typeref:typename:double
access_mode	gpuwattch/cacti/cacti_interface.h	/^    unsigned int access_mode;$/;"	m	class:InputParameter	typeref:typename:unsigned int
access_ready	gpgpu-sim/gpu-cache.h	/^    bool access_ready() const {return !m_current_response.empty();}$/;"	f	class:mshr_table	typeref:typename:bool
access_ready	gpgpu-sim/gpu-cache.h	/^    bool access_ready() const {return m_mshrs.access_ready();}$/;"	f	class:baseline_cache	typeref:typename:bool
access_ready	gpgpu-sim/gpu-cache.h	/^    bool access_ready() const{return !m_result_fifo.empty();}$/;"	f	class:tex_cache	typeref:typename:bool
access_time	gpuwattch/cacti/Ucache.h	/^  double access_time;$/;"	m	struct:solution	typeref:typename:double
access_time	gpuwattch/cacti/cacti_interface.h	/^    double access_time;$/;"	m	class:uca_org_t	typeref:typename:double
access_time	gpuwattch/cacti/cacti_interface.h	/^  double access_time;$/;"	m	class:mem_array	typeref:typename:double
access_time	gpuwattch/cacti/cacti_interface.h	/^  double access_time;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
access_time	gpuwattch/cacti/uca.h	/^    double access_time;$/;"	m	class:UCA	typeref:typename:double
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {CONST_ACC_R};$/;"	g	function:power_stat_t::get_constant_c_accesses
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {CONST_ACC_R};$/;"	g	function:power_stat_t::get_constant_c_misses
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	g	function:power_stat_t::get_l2_read_accesses
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	g	function:power_stat_t::get_l2_read_misses
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R};$/;"	g	function:power_stat_t::get_l1d_read_accesses
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R};$/;"	g	function:power_stat_t::get_l1d_read_misses
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	g	function:power_stat_t::get_l2_write_accesses
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	g	function:power_stat_t::get_l2_write_misses
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W};$/;"	g	function:power_stat_t::get_l1d_write_accesses
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W};$/;"	g	function:power_stat_t::get_l1d_write_misses
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {INST_ACC_R};$/;"	g	function:power_stat_t::get_inst_c_accesses
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {INST_ACC_R};$/;"	g	function:power_stat_t::get_inst_c_misses
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {TEXTURE_ACC_R};$/;"	g	function:power_stat_t::get_texture_c_accesses
access_type	gpgpu-sim/power_stat.h	/^        enum mem_access_type access_type[] = {TEXTURE_ACC_R};$/;"	g	function:power_stat_t::get_texture_c_misses
accesses	gpgpu-sim/gpu-cache.h	/^    unsigned accesses;$/;"	m	struct:cache_sub_stats	typeref:typename:unsigned
accessq_back	abstract_hardware_model.h	/^    const mem_access_t &accessq_back() { return m_accessq.back(); }$/;"	f	class:warp_inst_t	typeref:typename:const mem_access_t &
accessq_count	abstract_hardware_model.h	/^    unsigned accessq_count() const { return m_accessq.size(); }$/;"	f	class:warp_inst_t	typeref:typename:unsigned
accessq_empty	abstract_hardware_model.h	/^    bool accessq_empty() const { return m_accessq.empty(); }$/;"	f	class:warp_inst_t	typeref:typename:bool
accessq_pop_back	abstract_hardware_model.h	/^    void accessq_pop_back() { m_accessq.pop_back(); }$/;"	f	class:warp_inst_t	typeref:typename:void
accumulate_L2cache_stats	gpgpu-sim/l2cache.cc	/^void memory_sub_partition::accumulate_L2cache_stats(class cache_stats &l2_stats) const {$/;"	f	class:memory_sub_partition	typeref:typename:void
act_coeff	gpuwattch/basic_components.h	/^    double act_coeff;$/;"	m	class:DRAMParam	typeref:typename:double
activate_energy	gpuwattch/cacti/cacti_interface.h	/^  double activate_energy, read_energy, write_energy, precharge_energy,$/;"	m	class:mem_array	typeref:typename:double
activate_energy	gpuwattch/cacti/cacti_interface.h	/^  double activate_energy;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
activate_energy	gpuwattch/cacti/uca.h	/^    double activate_energy;$/;"	m	class:UCA	typeref:typename:double
active	abstract_hardware_model.h	/^        active_mask_t active; \/\/ threads in this transaction$/;"	m	struct:warp_inst_t::transaction_info	typeref:typename:active_mask_t
active	abstract_hardware_model.h	/^    bool active( unsigned thread ) const { return m_warp_active_mask.test(thread); }$/;"	f	class:warp_inst_t	typeref:typename:bool
active	gpgpu-sim/gpu-sim.cc	/^bool gpgpu_sim::active()$/;"	f	class:gpgpu_sim	typeref:typename:bool
active	intersim2/vc.hpp	/^  enum eVCState { state_min = 0, idle = state_min, routing, vc_alloc, active, $/;"	e	enum:VC::eVCState
active_count	abstract_hardware_model.h	/^    unsigned active_count() const { return m_warp_active_mask.count(); }$/;"	f	class:warp_inst_t	typeref:typename:unsigned
active_lanes_in_pipeline	gpgpu-sim/shader.cc	/^void ldst_unit::active_lanes_in_pipeline(){$/;"	f	class:ldst_unit	typeref:typename:void
active_lanes_in_pipeline	gpgpu-sim/shader.cc	/^void sfu::active_lanes_in_pipeline(){$/;"	f	class:sfu	typeref:typename:void
active_lanes_in_pipeline	gpgpu-sim/shader.cc	/^void sp_unit::active_lanes_in_pipeline(){$/;"	f	class:sp_unit	typeref:typename:void
active_mask_t	abstract_hardware_model.h	/^typedef std::bitset<MAX_WARP_SIZE> active_mask_t;$/;"	t	typeref:typename:std::bitset<MAX_WARP_SIZE>
active_sms	gpgpu-sim/gpu-sim.h	/^   float * active_sms;$/;"	m	class:gpgpu_sim	typeref:typename:float *
active_threads	abstract_hardware_model.h	/^   std::list<class ptx_thread_info *> &active_threads() { return m_active_threads; }$/;"	c	class:kernel_info_t
activity	gpuwattch/arch_const.h	/^const int activity=0;$/;"	v	typeref:typename:const int
activity_coeff	gpuwattch/basic_components.h	/^    double activity_coeff;$/;"	m	class:DRAMParam	typeref:typename:double
actual_operating_clock	gpuwattch/basic_components.h	/^	int actual_operating_clock;$/;"	m	class:DRAMParam	typeref:typename:int
actual_vdd	gpuwattch/basic_components.h	/^	double actual_vdd;$/;"	m	class:DRAMParam	typeref:typename:double
adaptive_xy_yx_mesh	intersim2/routefunc.cpp	/^void adaptive_xy_yx_mesh( const Router *r, const Flit *f, $/;"	f	typeref:typename:void
adaptive_xyyx_flatfly	intersim2/networks/flatfly_onchip.cpp	/^void adaptive_xyyx_flatfly( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
add	gpgpu-sim/gpu-cache.cc	/^void mshr_table::add( new_addr_type block_addr, mem_fetch *mf ){$/;"	f	class:mshr_table	typeref:typename:void
add2bin	gpgpu-sim/histogram.cc	/^void binned_histogram::add2bin (int sample) {$/;"	f	class:binned_histogram	typeref:typename:void
add2bin	gpgpu-sim/histogram.cc	/^void linear_histogram::add2bin (int sample) {$/;"	f	class:linear_histogram	typeref:typename:void
add2bin	gpgpu-sim/histogram.cc	/^void pow2_histogram::add2bin (int sample) {$/;"	f	class:pow2_histogram	typeref:typename:void
addAttribute	gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::addAttribute(XMLCSTR lpszName, XMLCSTR lpszValue)$/;"	f	class:XMLNode	typeref:typename:XMLAttribute *
addAttribute_WOSD	gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::addAttribute_WOSD(XMLSTR lpszName, XMLSTR lpszValuev)$/;"	f	class:XMLNode	typeref:typename:XMLAttribute *
addAttribute_priv	gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::addAttribute_priv(int memoryIncrease,XMLSTR lpszName, XMLSTR lpszValuev)$/;"	f	class:XMLNode	typeref:typename:XMLAttribute *
addChild	gpuwattch/xmlParser.cc	/^XMLNode       XMLNode::addChild(XMLCSTR lpszName, char isDeclaration, XMLElementPosition pos)$/;"	f	class:XMLNode	typeref:typename:XMLNode
addChild	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::addChild(XMLNode childNode, int pos)$/;"	f	class:XMLNode	typeref:typename:XMLNode
addChild_WOSD	gpuwattch/xmlParser.cc	/^XMLNode       XMLNode::addChild_WOSD(XMLSTR lpszName, char isDeclaration, XMLElementPosition pos/;"	f	class:XMLNode	typeref:typename:XMLNode
addChild_priv	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::addChild_priv(int memoryIncrease, XMLSTR lpszName, char isDeclaration, int pos)$/;"	f	class:XMLNode	typeref:typename:XMLNode
addClear	gpuwattch/xmlParser.cc	/^XMLClear     *XMLNode::addClear(XMLCSTR lpszValue, XMLCSTR lpszOpen, XMLCSTR lpszClose, XMLEleme/;"	f	class:XMLNode	typeref:typename:XMLClear *
addClear_WOSD	gpuwattch/xmlParser.cc	/^XMLClear     *XMLNode::addClear_WOSD(XMLSTR lpszValue, XMLCSTR lpszOpen, XMLCSTR lpszClose, XMLE/;"	f	class:XMLNode	typeref:typename:XMLClear *
addClear_priv	gpuwattch/xmlParser.cc	/^XMLClear *XMLNode::addClear_priv(int memoryIncrease, XMLSTR lpszValue, XMLCSTR lpszOpen, XMLCSTR/;"	f	class:XMLNode	typeref:typename:XMLClear *
addText	gpuwattch/xmlParser.cc	/^XMLCSTR       XMLNode::addText(XMLCSTR lpszValue, XMLElementPosition pos)$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
addText_WOSD	gpuwattch/xmlParser.cc	/^XMLCSTR       XMLNode::addText_WOSD(XMLSTR lpszValue, XMLElementPosition pos)$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
addText_priv	gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::addText_priv(int memoryIncrease, XMLSTR lpszValue, int pos)$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
addToOrder	gpuwattch/xmlParser.cc	/^void *XMLNode::addToOrder(int memoryIncrease,int *_pos, int nc, void *p, int size, XMLElementTyp/;"	f	class:XMLNode	typeref:typename:void *
add_1vector_operand	cuda-sim/ptx_parser.cc	/^void add_1vector_operand( const char *d1 ) $/;"	f	typeref:typename:void
add_2vector_operand	cuda-sim/ptx_parser.cc	/^void add_2vector_operand( const char *d1, const char *d2 ) $/;"	f	typeref:typename:void
add_3vector_operand	cuda-sim/ptx_parser.cc	/^void add_3vector_operand( const char *d1, const char *d2, const char *d3 ) $/;"	f	typeref:typename:void
add_4vector_operand	cuda-sim/ptx_parser.cc	/^void add_4vector_operand( const char *d1, const char *d2, const char *d3, const char *d4 ) $/;"	f	typeref:typename:void
add_address_operand	cuda-sim/ptx_parser.cc	/^void add_address_operand( const char *identifier, int offset ) $/;"	f	typeref:typename:void
add_address_operand2	cuda-sim/ptx_parser.cc	/^void add_address_operand2( int offset )$/;"	f	typeref:typename:void
add_alignment_spec	cuda-sim/ptx_parser.cc	/^void add_alignment_spec( int spec )$/;"	f	typeref:typename:void
add_arg	cuda-sim/ptx_ir.h	/^   void add_arg( const symbol *arg )$/;"	f	class:function_info	typeref:typename:void
add_array_initializer	cuda-sim/ptx_parser.cc	/^void add_array_initializer()$/;"	f	typeref:typename:void
add_bits	gpuwattch/cacti/htree2.h	/^    int add_bits, data_in_bits,search_data_in_bits,data_out_bits,  search_data_out_bits;$/;"	m	class:Htree2	typeref:typename:int
add_builtin_operand	cuda-sim/ptx_parser.cc	/^void add_builtin_operand( int builtin, int dim_modifier ) $/;"	f	typeref:typename:void
add_callback	abstract_hardware_model.h	/^    void add_callback( unsigned lane_id, $/;"	f	class:warp_inst_t	typeref:typename:void
add_constptr	cuda-sim/ptx_parser.cc	/^void add_constptr(const char* identifier1, const char* identifier2, int offset)$/;"	f	typeref:typename:void
add_count	cuda-sim/ptx-stats.cc	/^    void add_count(const ptx_instruction * pInsn, int count = 1)$/;"	f	class:ptx_inflight_memory_insn_tracker	typeref:typename:void	file:
add_cu_set	gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::add_cu_set(unsigned set_id, unsigned num_cu, unsigned num_dispatch){$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
add_data	cuda-sim/ptx_ir.h	/^   void add_data( param_t v ) { $/;"	f	class:param_info	typeref:typename:void
add_directive	cuda-sim/ptx_parser.cc	/^void add_directive() $/;"	f	typeref:typename:void
add_double_operand	cuda-sim/ptx_parser.cc	/^void add_double_operand( const char *d1, const char *d2 )$/;"	f	typeref:typename:void
add_ecc_b_	gpuwattch/cacti/cacti_interface.h	/^    bool     add_ecc_b_;$/;"	m	class:InputParameter	typeref:typename:bool
add_extern_spec	cuda-sim/ptx_parser.cc	/^void add_extern_spec() $/;"	f	typeref:typename:void
add_file	cuda-sim/ptx_parser.cc	/^void add_file( unsigned num, const char *filename )$/;"	f	typeref:typename:void
add_function	cuda-sim/ptx_ir.cc	/^void symbol_table::add_function( function_info *func, const char *filename, unsigned linenumber /;"	f	class:symbol_table	typeref:typename:void
add_function_arg	cuda-sim/ptx_parser.cc	/^void add_function_arg()$/;"	f	typeref:typename:void
add_function_decl	cuda-sim/ptx_ir.cc	/^bool symbol_table::add_function_decl( const char *name, int entry_point, function_info **func_in/;"	f	class:symbol_table	typeref:typename:bool
add_function_name	cuda-sim/ptx_parser.cc	/^void add_function_name( const char *name ) $/;"	f	typeref:typename:void
add_identifier	cuda-sim/ptx_parser.cc	/^void add_identifier( const char *identifier, int array_dim, unsigned array_ident ) $/;"	f	typeref:typename:void
add_impl	cuda-sim/instructions.cc	/^void add_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
add_initializer	cuda-sim/ptx_ir.cc	/^void symbol::add_initializer( const std::list<operand_info> &init )$/;"	f	class:symbol	typeref:typename:void
add_inst	cuda-sim/ptx_ir.h	/^   void add_inst( const std::list<ptx_instruction*> &instructions )$/;"	f	class:function_info	typeref:typename:void
add_instruction	cuda-sim/ptx_parser.cc	/^void add_instruction() $/;"	f	typeref:typename:void
add_label	cuda-sim/ptx_parser.cc	/^void add_label( const char *identifier ) $/;"	f	typeref:typename:void
add_literal_double	cuda-sim/ptx_parser.cc	/^void add_literal_double( double value ) $/;"	f	typeref:typename:void
add_literal_float	cuda-sim/ptx_parser.cc	/^void add_literal_float( float value ) $/;"	f	typeref:typename:void
add_literal_int	cuda-sim/ptx_parser.cc	/^void add_literal_int( int value ) $/;"	f	typeref:typename:void
add_memory_operand	cuda-sim/ptx_parser.cc	/^void add_memory_operand() $/;"	f	typeref:typename:void
add_neg_pred_operand	cuda-sim/ptx_parser.cc	/^void add_neg_pred_operand( const char *identifier ) $/;"	f	typeref:typename:void
add_offset	cuda-sim/ptx_ir.h	/^   void add_offset( unsigned offset ) { m_offset = offset; }$/;"	f	class:param_info	typeref:typename:void
add_opcode	cuda-sim/ptx_parser.cc	/^void add_opcode( int opcode ) $/;"	f	typeref:typename:void
add_option	cuda-sim/ptx_parser.cc	/^void add_option( int option ) $/;"	f	typeref:typename:void
add_param	cuda-sim/ptx_ir.h	/^   void add_param( const char *name, struct param_t value )$/;"	f	class:function_info	typeref:typename:void
add_param_data	cuda-sim/cuda-sim.cc	/^void function_info::add_param_data( unsigned argn, struct gpgpu_ptx_sim_arg *args )$/;"	f	class:function_info	typeref:typename:void
add_param_name_type_size	cuda-sim/cuda-sim.cc	/^void function_info::add_param_name_type_size( unsigned index, std::string name, int type, size_t/;"	f	class:function_info	typeref:typename:void
add_port	gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::add_port(port_vector_t & input, port_vector_t & output, uint_vector_t cu_se/;"	f	class:opndcoll_rfu_t	typeref:typename:void
add_pragma	cuda-sim/ptx_parser.cc	/^void add_pragma( const char *str )$/;"	f	typeref:typename:void
add_pred	cuda-sim/ptx_parser.cc	/^void add_pred( const char *identifier, int neg, int predModifier ) $/;"	f	typeref:typename:void
add_ptr_spec	cuda-sim/ptx_parser.cc	/^void add_ptr_spec( enum _memory_space_t spec ) $/;"	f	typeref:typename:void
add_read_requests	gpgpu-sim/shader.h	/^      void add_read_requests( collector_unit_t *cu ) $/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:void
add_req	gpgpu-sim/dram_sched.cc	/^void frfcfs_scheduler::add_req( dram_req_t *req )$/;"	f	class:frfcfs_scheduler	typeref:typename:void
add_return_var	cuda-sim/ptx_ir.h	/^   void add_return_var( const symbol *rv )$/;"	f	class:function_info	typeref:typename:void
add_scalar_operand	cuda-sim/ptx_parser.cc	/^void add_scalar_operand( const char *identifier ) $/;"	f	typeref:typename:void
add_scalar_type_spec	cuda-sim/ptx_parser.cc	/^void add_scalar_type_spec( int type_spec ) $/;"	f	typeref:typename:void
add_snap_shot_trigger	gpgpu-sim/stat-tool.cc	/^void add_snap_shot_trigger (snap_shot_trigger* ss_trigger)$/;"	f	typeref:typename:void
add_space_spec	cuda-sim/ptx_parser.cc	/^void add_space_spec( enum _memory_space_t spec, int value ) $/;"	f	typeref:typename:void
add_spill_log	gpgpu-sim/stat-tool.cc	/^void add_spill_log (spill_log_interface* spill_log)$/;"	f	typeref:typename:void
add_stream	stream_manager.cc	/^void stream_manager::add_stream( struct CUstream_st *stream )$/;"	f	class:stream_manager	typeref:typename:void
add_supervised_warp_id	gpgpu-sim/shader.h	/^	void add_supervised_warp_id(int i) {$/;"	f	class:two_level_active_scheduler	typeref:typename:void
add_supervised_warp_id	gpgpu-sim/shader.h	/^    virtual void add_supervised_warp_id(int i) {$/;"	f	class:scheduler_unit	typeref:typename:void
add_thread	cuda-sim/ptx_sim.cc	/^void ptx_cta_info::add_thread( ptx_thread_info *thd )$/;"	f	class:ptx_cta_info	typeref:typename:void
add_type	cuda-sim/ptx_ir.cc	/^type_info *symbol_table::add_type( function_info *func )$/;"	f	class:symbol_table	typeref:typename:type_info *
add_type	cuda-sim/ptx_ir.cc	/^type_info *symbol_table::add_type( memory_space_t space_spec, int scalar_type_spec, int vector_s/;"	f	class:symbol_table	typeref:typename:type_info *
add_variable	cuda-sim/ptx_ir.cc	/^symbol *symbol_table::add_variable( const char *identifier, const type_info *type, unsigned size/;"	f	class:symbol_table	typeref:typename:symbol *
add_variables	cuda-sim/ptx_parser.cc	/^void add_variables() $/;"	f	typeref:typename:void
add_vector_spec	cuda-sim/ptx_parser.cc	/^void add_vector_spec(int spec ) $/;"	f	typeref:typename:void
add_version_info	cuda-sim/ptx_parser.cc	/^void add_version_info( float ver, unsigned ext )$/;"	f	typeref:typename:void
addc_impl	cuda-sim/instructions.cc	/^void addc_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
addp_impl	cuda-sim/instructions.cc	/^void addp_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f	typeref:typename:void
addr	gpgpu-sim/dram.h	/^   unsigned long long int addr;$/;"	m	class:dram_req_t	typeref:typename:unsigned long long int
addr_t	abstract_hardware_model.h	/^typedef unsigned addr_t;$/;"	t	typeref:typename:unsigned
addr_vector_t	abstract_hardware_model.h	/^typedef std::vector<address_type> addr_vector_t;$/;"	t	typeref:typename:std::vector<address_type>
addrdec_getmasklimit	gpgpu-sim/addrdec.cc	/^static void addrdec_getmasklimit(new_addr_type mask, unsigned char *high, unsigned char *low) $/;"	f	typeref:typename:void	file:
addrdec_mask	gpgpu-sim/addrdec.h	/^   new_addr_type addrdec_mask[N_ADDRDEC];$/;"	m	class:linear_to_raw_address_translation	typeref:typename:new_addr_type[]
addrdec_mkhigh	gpgpu-sim/addrdec.h	/^   unsigned char addrdec_mkhigh[N_ADDRDEC];$/;"	m	class:linear_to_raw_address_translation	typeref:typename:unsigned char[]
addrdec_mklow	gpgpu-sim/addrdec.h	/^   unsigned char addrdec_mklow[N_ADDRDEC];$/;"	m	class:linear_to_raw_address_translation	typeref:typename:unsigned char[]
addrdec_option	gpgpu-sim/addrdec.h	/^   const char *addrdec_option;$/;"	m	class:linear_to_raw_address_translation	typeref:typename:const char *
addrdec_packbits	gpgpu-sim/addrdec.cc	/^static new_addr_type addrdec_packbits( new_addr_type mask, new_addr_type val, unsigned char high/;"	f	typeref:typename:new_addr_type	file:
addrdec_parseoption	gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::addrdec_parseoption(const char *option)$/;"	f	class:linear_to_raw_address_translation	typeref:typename:void
addrdec_setoption	gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::addrdec_setoption(option_parser_t opp)$/;"	f	class:linear_to_raw_address_translation	typeref:typename:void
addrdec_t	gpgpu-sim/addrdec.h	/^struct addrdec_t {$/;"	s
addrdec_tlx	gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::addrdec_tlx(new_addr_type addr, addrdec_t *tlx) const$/;"	f	class:linear_to_raw_address_translation	typeref:typename:void
addressBusWidth	gpuwattch/basic_components.h	/^    int	   llcBlockSize, dataBusWidth, addressBusWidth;$/;"	m	class:MCParam	typeref:typename:int
addressMode	abstract_hardware_model.h	/^   enum cudaTextureAddressMode   addressMode[3];$/;"	m	struct:textureReference	typeref:enum:cudaTextureAddressMode[3]
address_expression	cuda-sim/ptx.y	/^address_expression: IDENTIFIER { add_address_operand($1,0); }$/;"	l
address_t	cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
address_type	abstract_hardware_model.h	/^typedef unsigned address_type;$/;"	t	typeref:typename:unsigned
addressable_spec	cuda-sim/ptx.y	/^addressable_spec: CONST_DIRECTIVE {  add_space_spec(const_space,$1); }$/;"	l
addressbus_width	gpuwattch/XML_Parse.h	/^	int addressbus_width;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:int
addsample	gpgpu-sim/stat-tool.h	/^   void addsample(int pos) {$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
adjust_area	gpuwattch/cacti/cacti_interface.cc	/^void uca_org_t::adjust_area()$/;"	f	class:uca_org_t	typeref:typename:void
age	gpgpu-sim/dram.h	/^   unsigned int age;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
age_based	intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_base/;"	e	enum:TrafficManager::ePriority
align_spec	cuda-sim/ptx.y	/^align_spec: ALIGN_DIRECTIVE INT_OPERAND { add_alignment_spec($2); }$/;"	l
all	gpuwattch/cacti/cacti.mk	/^all: $(OUTPUT_DIR)\/$(TARGET)$/;"	t
all	gpuwattch/cacti/makefile	/^all: opt$/;"	t
all	gpuwattch/makefile	/^all: opt$/;"	t
all	gpuwattch/mcpat.mk	/^all: $(OUTPUT_DIR)\/$(TARGET)$/;"	t
all	gpuwattch/mcpatXeonCore.mk	/^all: obj_$(TAG)\/$(TARGET)$/;"	t
all	intersim2/Makefile	/^all: $(OBJS)$/;"	t
all	intersim2/Makefile	/^all:$(PROG)$/;"	t
all_banks_height	gpuwattch/cacti/cacti_interface.h	/^  double all_banks_height,$/;"	m	class:mem_array	typeref:typename:double
all_banks_height	gpuwattch/cacti/cacti_interface.h	/^  double all_banks_height;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
all_banks_width	gpuwattch/cacti/cacti_interface.h	/^         all_banks_width,$/;"	m	class:mem_array	typeref:typename:double
all_banks_width	gpuwattch/cacti/cacti_interface.h	/^  double all_banks_width;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
alloc	gpgpu-sim/l2cache.cc	/^mem_fetch * partition_mf_allocator::alloc(new_addr_type addr, mem_access_type type, unsigned siz/;"	f	class:partition_mf_allocator	typeref:typename:mem_fetch *
alloc	gpgpu-sim/l2cache.h	/^    virtual mem_fetch * alloc(const class warp_inst_t &inst, const mem_access_t &access) const $/;"	f	class:partition_mf_allocator	typeref:typename:mem_fetch *
alloc	gpgpu-sim/shader.h	/^    mem_fetch *alloc( const warp_inst_t &inst, const mem_access_t &access ) const$/;"	f	class:shader_core_mem_fetch_allocator	typeref:typename:mem_fetch *
alloc	gpgpu-sim/shader.h	/^    mem_fetch *alloc( new_addr_type addr, mem_access_type type, unsigned size, bool wr ) const $/;"	f	class:shader_core_mem_fetch_allocator	typeref:typename:mem_fetch *
alloc	gpuwattch/xmlParser.cc	/^void XMLParserBase64Tool::alloc(int newsize)$/;"	f	class:XMLParserBase64Tool	typeref:typename:void
alloc_global	cuda-sim/ptx_ir.h	/^   void  alloc_global( unsigned num_bytes ) { m_global_next += num_bytes;}$/;"	f	class:symbol_table	typeref:typename:void
alloc_local	cuda-sim/ptx_ir.h	/^   void  alloc_local( unsigned num_bytes ) { m_local_next += num_bytes;}$/;"	f	class:symbol_table	typeref:typename:void
alloc_read	gpgpu-sim/shader.h	/^      void alloc_read( const op_t &op )  { assert(is_free()); m_allocation=READ_ALLOC; m_op=op; /;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:void
alloc_shared	cuda-sim/ptx_ir.h	/^   void  alloc_shared( unsigned num_bytes ) { m_shared_next += num_bytes;}$/;"	f	class:symbol_table	typeref:typename:void
alloc_t	gpgpu-sim/shader.h	/^   enum alloc_t {$/;"	g	class:opndcoll_rfu_t
alloc_tex	cuda-sim/ptx_ir.h	/^   void  alloc_tex( unsigned num_bytes ) { m_tex_next += num_bytes;}$/;"	f	class:symbol_table	typeref:typename:void
alloc_write	gpgpu-sim/shader.h	/^      void alloc_write( const op_t &op ) { assert(is_free()); m_allocation=WRITE_ALLOC; m_op=op;/;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:void
alloca	intersim2/y.tab.c	/^#    define alloca /;"	d	file:
allocate	gpgpu-sim/gpu-cache.h	/^    void allocate( new_addr_type tag, new_addr_type block_addr, unsigned time )$/;"	f	struct:cache_block_t	typeref:typename:void
allocate	gpgpu-sim/shader.cc	/^bool opndcoll_rfu_t::collector_unit_t::allocate( register_set* pipeline_reg_set, register_set* o/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:bool
allocate_bank_for_write	gpgpu-sim/shader.h	/^      void allocate_bank_for_write( unsigned bank, const op_t &op )$/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:void
allocate_barrier	gpgpu-sim/shader.cc	/^void barrier_set_t::allocate_barrier( unsigned cta_id, warp_set_t warps )$/;"	f	class:barrier_set_t	typeref:typename:void
allocate_cu	gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::allocate_cu( unsigned port_num )$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
allocate_for_read	gpgpu-sim/shader.h	/^      void allocate_for_read( unsigned bank, const op_t &op )$/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:void
allocate_reads	gpgpu-sim/shader.cc	/^std::list<opndcoll_rfu_t::op_t> opndcoll_rfu_t::arbiter_t::allocate_reads() $/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:std::list<opndcoll_rfu_t::op_t>
allocate_reads	gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::allocate_reads()$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
allocation_policy_t	gpgpu-sim/gpu-cache.h	/^enum allocation_policy_t {$/;"	g
allocation_t	gpgpu-sim/shader.h	/^      allocation_t() { m_allocation = NO_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t
allocation_t	gpgpu-sim/shader.h	/^   class allocation_t {$/;"	c	class:opndcoll_rfu_t
and_impl	cuda-sim/instructions.cc	/^void and_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
and_reduction	abstract_hardware_model.h	/^        void and_reduction(unsigned ctaid, unsigned barid, bool value) { reduction_storage[ctaid/;"	f	class:core_t	typeref:typename:void
and_reduction	cuda-sim/ptx_sim.h	/^   void and_reduction(unsigned ctaid, unsigned barid, bool value) {m_core->and_reduction(ctaid,b/;"	f	class:ptx_thread_info	typeref:typename:void
andn_impl	cuda-sim/instructions.cc	/^void andn_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
ar1	abstract_hardware_model.h	/^    int ar1, ar2;$/;"	m	class:inst_t	typeref:typename:int
ar2	abstract_hardware_model.h	/^    int ar1, ar2;$/;"	m	class:inst_t	typeref:typename:int
arb_grant	gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::arb_grant() {$/;"	f	class:MCPAT_Arbiter	typeref:typename:double
arb_int	gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::arb_int() {$/;"	f	class:MCPAT_Arbiter	typeref:typename:double
arb_pri	gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::arb_pri() {$/;"	f	class:MCPAT_Arbiter	typeref:typename:double
arb_req	gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::arb_req() {$/;"	f	class:MCPAT_Arbiter	typeref:typename:double
arb_tot	gpuwattch/cacti/highradix.h	/^    Component wire_tot, buff_tot, crossbar_tot, arb_tot;$/;"	m	class:HighRadix	typeref:typename:Component
arbiter	gpuwattch/cacti/router.h	/^    Component arbiter, crossbar, buffer;$/;"	m	class:MCPAT_Router	typeref:typename:Component
arbiter_rfu	gpuwattch/core.h	/^   MCPAT_Arbiter * arbiter_rfu;$/;"	m	class:RegFU	typeref:typename:MCPAT_Arbiter *
arbiter_t	gpgpu-sim/shader.h	/^      arbiter_t()$/;"	f	class:opndcoll_rfu_t::arbiter_t
arbiter_t	gpgpu-sim/shader.h	/^   class arbiter_t {$/;"	c	class:opndcoll_rfu_t
arbiter_type	gpuwattch/XML_Parse.h	/^	int arbiter_type;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int
arbitration_metadata	gpgpu-sim/l2cache.cc	/^memory_partition_unit::arbitration_metadata::arbitration_metadata(const struct memory_config *co/;"	f	class:memory_partition_unit::arbitration_metadata
arbitration_metadata	gpgpu-sim/l2cache.h	/^   class arbitration_metadata$/;"	c	class:memory_partition_unit
arch	gpuwattch/XML_Parse.h	/^	int arch;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
arch_freg_width	gpuwattch/basic_components.h	/^    int  arch_ireg_width, arch_freg_width, phy_ireg_width, phy_freg_width;$/;"	m	class:CoreDynParam	typeref:typename:int
arch_ireg_width	gpuwattch/basic_components.h	/^    int  arch_ireg_width, arch_freg_width, phy_ireg_width, phy_freg_width;$/;"	m	class:CoreDynParam	typeref:typename:int
arch_reg	abstract_hardware_model.h	/^    } arch_reg;$/;"	m	class:inst_t	typeref:struct:inst_t::__anon0cb733cc0108
arch_reg_num	cuda-sim/ptx_ir.h	/^   int arch_reg_num() const { return m_value.m_symbolic->arch_reg_num(); }$/;"	f	class:operand_info	typeref:typename:int
arch_reg_num	cuda-sim/ptx_ir.h	/^   int arch_reg_num(unsigned n) const { return (m_value.m_vector_symbolic[n])? m_value.m_vector_/;"	f	class:operand_info	typeref:typename:int
arch_reg_num	cuda-sim/ptx_ir.h	/^   unsigned arch_reg_num() const$/;"	f	class:symbol	typeref:typename:unsigned
archi_F_sz_nm	gpuwattch/arch_const.h	/^const double 		archi_F_sz_nm	=	90.0;$/;"	v	typeref:typename:const double
archi_Regs_FRF_size	gpuwattch/XML_Parse.h	/^	int archi_Regs_FRF_size;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
archi_Regs_IRF_size	gpuwattch/XML_Parse.h	/^	int archi_Regs_IRF_size;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
archi_float_regfile_reads	gpuwattch/XML_Parse.h	/^	double archi_float_regfile_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
archi_float_regfile_writes	gpuwattch/XML_Parse.h	/^	double archi_float_regfile_writes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
archi_int_regfile_reads	gpuwattch/XML_Parse.h	/^	double archi_int_regfile_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
archi_int_regfile_writes	gpuwattch/XML_Parse.h	/^	double archi_int_regfile_writes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
architecture	gpuwattch/XML_Parse.h	/^	int architecture;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
area	gpuwattch/cacti/Ucache.h	/^  double area;$/;"	m	struct:solution	typeref:typename:double
area	gpuwattch/cacti/area.h	/^  double area;$/;"	m	class:Area	typeref:typename:double
area	gpuwattch/cacti/cacti_interface.h	/^    double area;$/;"	m	class:uca_org_t	typeref:typename:double
area	gpuwattch/cacti/cacti_interface.h	/^  double area;$/;"	m	class:mem_array	typeref:typename:double
area	gpuwattch/cacti/cacti_interface.h	/^  double area;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
area	gpuwattch/cacti/component.h	/^    Area area;$/;"	m	class:Component	typeref:typename:Area
areaChannel	intersim2/power/power_module.cpp	/^double Power_Module:: areaChannel (double K, double N, double M){$/;"	f	class:Power_Module	typeref:typename:double
areaCrossbar	intersim2/power/power_module.cpp	/^double Power_Module:: areaCrossbar(double Inputs, double Outputs) {$/;"	f	class:Power_Module	typeref:typename:double
areaInputModule	intersim2/power/power_module.cpp	/^double Power_Module:: areaInputModule(double Words) {$/;"	f	class:Power_Module	typeref:typename:double
areaOutputModule	intersim2/power/power_module.cpp	/^double Power_Module:: areaOutputModule(double Outputs) {$/;"	f	class:Power_Module	typeref:typename:double
area_all_dataramcells	gpuwattch/cacti/uca.h	/^    double area_all_dataramcells;$/;"	m	class:UCA	typeref:typename:double
area_dev	gpuwattch/cacti/cacti_interface.h	/^        cycle_time_dev, area_dev;$/;"	m	class:InputParameter	typeref:typename:int
area_dev_nuca	gpuwattch/cacti/cacti_interface.h	/^        cycle_time_dev_nuca, area_dev_nuca;$/;"	m	class:InputParameter	typeref:typename:int
area_efficiency	gpuwattch/cacti/cacti_interface.h	/^         area_efficiency;$/;"	m	class:mem_array	typeref:typename:double
area_efficiency	gpuwattch/cacti/cacti_interface.h	/^    double area_efficiency;$/;"	m	class:uca_org_t	typeref:typename:double
area_efficiency	gpuwattch/cacti/cacti_interface.h	/^  double area_efficiency;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
area_ram_cells	gpuwattch/cacti/cacti_interface.h	/^  double area_ram_cells;$/;"	m	class:mem_array	typeref:typename:double
area_wt	gpuwattch/cacti/cacti_interface.h	/^        cycle_time_wt, area_wt;$/;"	m	class:InputParameter	typeref:typename:int
area_wt_nuca	gpuwattch/cacti/cacti_interface.h	/^        cycle_time_wt_nuca, area_wt_nuca;$/;"	m	class:InputParameter	typeref:typename:int
arg_buffer_list_t	cuda-sim/ptx_ir.h	/^typedef std::list< arg_buffer_t > arg_buffer_list_t;$/;"	t	typeref:typename:std::list<arg_buffer_t>
arg_buffer_t	cuda-sim/ptx_ir.h	/^   arg_buffer_t( const arg_buffer_t &another )$/;"	f	class:arg_buffer_t
arg_buffer_t	cuda-sim/ptx_ir.h	/^   arg_buffer_t( const symbol *dst_sym, const operand_info &src_op, ptx_reg_t source_value ) : m/;"	f	class:arg_buffer_t
arg_buffer_t	cuda-sim/ptx_ir.h	/^   arg_buffer_t( const symbol *dst_sym, const operand_info &src_op, void *source_param_value_arr/;"	f	class:arg_buffer_t
arg_buffer_t	cuda-sim/ptx_ir.h	/^   arg_buffer_t()$/;"	f	class:arg_buffer_t
arg_buffer_t	cuda-sim/ptx_ir.h	/^class arg_buffer_t {$/;"	c
arr_min	gpuwattch/cacti/cacti_interface.h	/^  min_values_t *arr_min;$/;"	m	class:mem_array	typeref:typename:min_values_t *
array_inputs	gpuwattch/arch_const.h	/^} array_inputs;$/;"	t	typeref:struct:__anoncc262ac50108
aspect_ratio	gpuwattch/cacti/parameter.h	/^    double aspect_ratio;$/;"	m	class:TechnologyParameter::InterconnectType	typeref:typename:double
assignDefault	option_parser.cc	/^   virtual bool assignDefault(const char *str) { return fromString(str); }$/;"	f	class:OptionRegistry	typeref:typename:bool	file:
assignDefault	option_parser.cc	/^bool OptionRegistry<char *>::assignDefault(const char *str) $/;"	f	class:OptionRegistry	typeref:typename:bool
assign_bb	cuda-sim/ptx_ir.h	/^   void assign_bb(basic_block_t* basic_block) \/\/assign instruction to a basic block$/;"	f	class:ptx_instruction	typeref:typename:void
assoc	gpuwattch/arch_const.h	/^	unsigned int assoc;\/\/fully$/;"	m	struct:__anoncc262ac50108	typeref:typename:unsigned int
assoc	gpuwattch/basic_components.h	/^    double    capacity, blockW, assoc, nbanks;$/;"	m	class:CacheDynParam	typeref:typename:double
assoc	gpuwattch/cacti/cacti_interface.h	/^    unsigned int assoc;$/;"	m	class:InputParameter	typeref:typename:unsigned int
atime	intersim2/flit.hpp	/^  int  atime;$/;"	m	class:Flit	typeref:typename:int
atom_callback	cuda-sim/instructions.cc	/^void atom_callback( const inst_t* inst, ptx_thread_info* thread)$/;"	f	typeref:typename:void
atom_impl	cuda-sim/instructions.cc	/^void atom_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f	typeref:typename:void
atomic_operation_spec	cuda-sim/ptx.y	/^atomic_operation_spec: ATOMIC_AND { add_option(ATOMIC_AND); } $/;"	l
attrib	gpuwattch/xmlParser.h	/^    XMLAttribute attrib;$/;"	m	struct:XMLNodeContents	typeref:typename:XMLAttribute
attribute_exposed_latency	cuda-sim/ptx-stats.cc	/^    void attribute_exposed_latency(int count = 1)$/;"	f	class:ptx_inflight_memory_insn_tracker	typeref:typename:void	file:
ave_mrqs	gpgpu-sim/dram.h	/^   unsigned int ave_mrqs;$/;"	m	class:dram_t	typeref:typename:unsigned int
ave_mrqs_partial	gpgpu-sim/dram.h	/^   unsigned int ave_mrqs_partial;$/;"	m	class:dram_t	typeref:typename:unsigned int
average_duty_cycle	gpgpu-sim/power_stat.h	/^   float average_duty_cycle;$/;"	m	class:power_core_stat_t	typeref:typename:float
average_pipeline_duty_cycle	gpgpu-sim/gpu-sim.h	/^   float * average_pipeline_duty_cycle;$/;"	m	class:gpgpu_sim	typeref:typename:float *
avg	gpuwattch/gpgpu_sim_wrapper.h	/^	T avg;$/;"	m	struct:avg_max_min_counters	typeref:typename:T
avg_hops	gpuwattch/cacti/nuca.h	/^    double avg_hops;$/;"	m	class:nuca_org_t	typeref:typename:double
avg_max_min_counters	gpuwattch/gpgpu_sim_wrapper.h	/^	avg_max_min_counters(){avg=0; max=0; min=0;}$/;"	f	struct:avg_max_min_counters
avg_max_min_counters	gpuwattch/gpgpu_sim_wrapper.h	/^struct avg_max_min_counters{$/;"	s
b	cuda-sim/instructions.cc	/^   float b;$/;"	m	union:intfloat	typeref:typename:float	file:
b_h	gpuwattch/cacti/parameter.h	/^    double b_h;$/;"	m	class:TechnologyParameter::MemoryType	typeref:typename:double
b_mux_predec	gpuwattch/cacti/mat.h	/^    Predec * b_mux_predec;$/;"	m	class:Mat	typeref:typename:Predec *
b_w	gpuwattch/cacti/parameter.h	/^    double b_w;$/;"	m	class:TechnologyParameter::MemoryType	typeref:typename:double
backComSize	gpuwattch/arch_const.h	/^const int backComSize=5;$/;"	v	typeref:typename:const int
bandwidth_management	gpgpu-sim/gpu-cache.cc	/^baseline_cache::bandwidth_management::bandwidth_management(cache_config &config) $/;"	f	class:baseline_cache::bandwidth_management
bandwidth_management	gpgpu-sim/gpu-cache.h	/^    class bandwidth_management $/;"	c	class:baseline_cache
bank	gpuwattch/cacti/uca.h	/^    Bank   bank;$/;"	m	class:UCA	typeref:typename:Bank
bank_count	gpuwattch/cacti/nuca.h	/^    int bank_count;$/;"	m	class:nuca_org_t	typeref:typename:int
bank_height	gpuwattch/cacti/cacti_interface.h	/^  double bank_height;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
bank_idle	gpgpu-sim/shader.h	/^      bool bank_idle( unsigned bank ) const$/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:bool
bank_pda	gpuwattch/cacti/nuca.h	/^    Component bank_pda;$/;"	m	class:nuca_org_t	typeref:typename:Component
bank_t	gpgpu-sim/dram.h	/^struct bank_t$/;"	s
bank_width	gpuwattch/basic_components.h	/^	int bank_width; \/\/ in bits$/;"	m	class:DRAMParam	typeref:typename:int
bank_width	gpuwattch/cacti/cacti_interface.h	/^  double bank_width;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
bankgrp_t	gpgpu-sim/dram.h	/^struct bankgrp_t$/;"	s
bankreads	gpgpu-sim/mem_latency_stat.h	/^   unsigned int ***bankreads; \/\/bankreads[shader id][dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int ***
bankwrites	gpgpu-sim/mem_latency_stat.h	/^   unsigned int ***bankwrites; \/\/bankwrites[shader id][dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int ***
bar_callback	cuda-sim/instructions.cc	/^void bar_callback( const inst_t* inst, ptx_thread_info* thread)$/;"	f	typeref:typename:void
bar_count	abstract_hardware_model.h	/^    unsigned bar_count;$/;"	m	class:inst_t	typeref:typename:unsigned
bar_id	abstract_hardware_model.h	/^    unsigned bar_id;$/;"	m	class:inst_t	typeref:typename:unsigned
bar_id_to_warp_t	gpgpu-sim/shader.h	/^   typedef std::map<unsigned, warp_set_t >  bar_id_to_warp_t; \/*set of warps reached a specific/;"	t	class:barrier_set_t	typeref:typename:std::map<unsigned,warp_set_t>
bar_impl	cuda-sim/instructions.cc	/^void bar_impl( const ptx_instruction *pIin, ptx_thread_info *thread )$/;"	f	typeref:typename:void
bar_type	abstract_hardware_model.h	/^    barrier_type bar_type;$/;"	m	class:inst_t	typeref:typename:barrier_type
barrier_op	cuda-sim/ptx_ir.h	/^   unsigned barrier_op() const {return m_barrier_op;}$/;"	f	class:ptx_instruction	typeref:typename:unsigned
barrier_set_t	gpgpu-sim/shader.cc	/^barrier_set_t::barrier_set_t(shader_core_ctx *shader,unsigned max_warps_per_core, unsigned max_c/;"	f	class:barrier_set_t
barrier_set_t	gpgpu-sim/shader.h	/^class barrier_set_t {$/;"	c
barrier_type	abstract_hardware_model.h	/^typedef enum uarch_bar_t barrier_type;$/;"	t	typeref:enum:uarch_bar_t
base64DecodeTable	gpuwattch/xmlParser.cc	/^const unsigned char base64DecodeTable[] = {$/;"	v	typeref:typename:const unsigned char[]
base64EncodeTable	gpuwattch/xmlParser.cc	/^XMLCSTR base64EncodeTable=_CXML("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/;"	v	typeref:typename:XMLCSTR
base64Fillchar	gpuwattch/xmlParser.cc	/^static const char base64Fillchar = _CXML('='); \/\/ used to mark partial words at the end$/;"	v	typeref:typename:const char	file:
base_energy	gpuwattch/logic.h	/^	double energy, base_energy,per_access_energy, leakage, gate_leakage;$/;"	m	class:FunctionalUnit	typeref:typename:double
base_height	gpuwattch/interconnect.h	/^    double base_height;$/;"	m	class:interconnect	typeref:typename:double
base_width	gpuwattch/interconnect.h	/^    double base_width;$/;"	m	class:interconnect	typeref:typename:double
baseline_cache	gpgpu-sim/gpu-cache.h	/^    baseline_cache( const char *name, cache_config &config, int core_id, int type_id, mem_fetch_/;"	f	class:baseline_cache
baseline_cache	gpgpu-sim/gpu-cache.h	/^    baseline_cache( const char *name,$/;"	f	class:baseline_cache
baseline_cache	gpgpu-sim/gpu-cache.h	/^class baseline_cache : public cache_t {$/;"	c
basic_block_t	cuda-sim/ptx_ir.h	/^   basic_block_t( unsigned ID, ptx_instruction *begin, ptx_instruction *end, bool entry, bool ex/;"	f	struct:basic_block_t
basic_block_t	cuda-sim/ptx_ir.h	/^struct basic_block_t {$/;"	s
bb_id	cuda-sim/ptx_ir.h	/^   unsigned bb_id;$/;"	m	struct:basic_block_t	typeref:typename:unsigned
bdata	option_parser.cc	/^   bool bdata;$/;"	m	class:testtype	typeref:typename:bool	file:
bfe_impl	cuda-sim/instructions.cc	/^void bfe_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); /;"	f	typeref:typename:void
bfi_impl	cuda-sim/instructions.cc	/^void bfi_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); /;"	f	typeref:typename:void
bfind_impl	cuda-sim/instructions.cc	/^void bfind_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI)/;"	f	typeref:typename:void
binned_histogram	gpgpu-sim/histogram.cc	/^binned_histogram::binned_histogram (const binned_histogram& other)$/;"	f	class:binned_histogram
binned_histogram	gpgpu-sim/histogram.cc	/^binned_histogram::binned_histogram (std::string name, int nbins, int* bins) $/;"	f	class:binned_histogram
binned_histogram	gpgpu-sim/histogram.h	/^class binned_histogram {$/;"	c
bit_mux_dec	gpuwattch/cacti/mat.h	/^    Decoder * bit_mux_dec;$/;"	m	class:Mat	typeref:typename:Decoder *
bit_to_byte	gpuwattch/cacti/const.h	/^const double    bit_to_byte  = 8.0;$/;"	v	typeref:typename:const double
bits	cuda-sim/ptx_sim.h	/^   } bits;$/;"	m	union:ptx_reg_t	typeref:struct:ptx_reg_t::__anondd5d98a10108
bk	gpgpu-sim/addrdec.h	/^   unsigned bk;$/;"	m	struct:addrdec_t	typeref:typename:unsigned
bk	gpgpu-sim/dram.h	/^   bank_t **bk;$/;"	m	class:dram_t	typeref:typename:bank_t **
bk	gpgpu-sim/dram.h	/^   unsigned int bk;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
bk_tag_length	gpgpu-sim/gpu-sim.h	/^   unsigned bk_tag_length; \/\/number of bits that define a bank inside a bank group$/;"	m	struct:memory_config	typeref:typename:unsigned
bkgrp	gpgpu-sim/dram.h	/^   bankgrp_t **bkgrp;$/;"	m	class:dram_t	typeref:typename:bankgrp_t **
bkgrpindex	gpgpu-sim/dram.h	/^   unsigned int bkgrpindex;$/;"	m	struct:bank_t	typeref:typename:unsigned int
bl_precharge_eq_drv	gpuwattch/cacti/mat.h	/^    Driver * bl_precharge_eq_drv;$/;"	m	class:Mat	typeref:typename:Driver *
blk	gpuwattch/cacti/decoder.h	/^  PredecBlk * blk;$/;"	m	class:PredecBlkDrv	typeref:typename:PredecBlk *
blk1	gpuwattch/cacti/decoder.h	/^    PredecBlk    * blk1;$/;"	m	class:Predec	typeref:typename:PredecBlk *
blk2	gpuwattch/cacti/decoder.h	/^    PredecBlk    * blk2;$/;"	m	class:Predec	typeref:typename:PredecBlk *
blockW	gpuwattch/basic_components.h	/^    double    capacity, blockW, assoc, nbanks;$/;"	m	class:CacheDynParam	typeref:typename:double
block_addr	gpgpu-sim/gpu-cache.h	/^    new_addr_type block_addr( new_addr_type addr ) const$/;"	f	class:cache_config	typeref:typename:new_addr_type
block_power	gpuwattch/cacti/decoder.h	/^    powerDef block_power;$/;"	m	class:Predec	typeref:typename:powerDef
block_spec	cuda-sim/ptx.y	/^block_spec: MAXNTID_DIRECTIVE INT_OPERAND COMMA INT_OPERAND COMMA INT_OPERAND {func_header_info_/;"	l
block_spec_list	cuda-sim/ptx.y	/^block_spec_list: block_spec$/;"	l
block_sz	gpuwattch/cacti/cacti_interface.h	/^    unsigned int block_sz;  \/\/ bytes$/;"	m	class:InputParameter	typeref:typename:unsigned int
blocksize	gpuwattch/arch_const.h	/^	unsigned int blocksize;$/;"	m	struct:__anoncc262ac50108	typeref:typename:unsigned int
boolint	option_parser.cc	/^   unsigned int boolint;$/;"	m	class:testtype	typeref:typename:unsigned int	file:
borrow_credit	gpgpu-sim/l2cache.cc	/^void memory_partition_unit::arbitration_metadata::borrow_credit(int inner_sub_partition_id) $/;"	f	class:memory_partition_unit::arbitration_metadata	typeref:typename:void
bra_impl	cuda-sim/instructions.cc	/^void bra_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
branch_effort_nand2_gate_output	gpuwattch/cacti/decoder.h	/^  int branch_effort_nand2_gate_output;$/;"	m	class:PredecBlk	typeref:typename:int
branch_effort_nand3_gate_output	gpuwattch/cacti/decoder.h	/^  int branch_effort_nand3_gate_output;$/;"	m	class:PredecBlk	typeref:typename:int
branch_instructions	gpuwattch/XML_Parse.h	/^	double branch_instructions;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
branch_mispredictions	gpuwattch/XML_Parse.h	/^	double branch_mispredictions;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
branch_taken	cuda-sim/ptx_sim.h	/^   bool branch_taken() const$/;"	f	class:ptx_thread_info	typeref:typename:bool
break_impl	cuda-sim/instructions.cc	/^void break_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
breakaddr_impl	cuda-sim/instructions.cc	/^void breakaddr_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
brev_impl	cuda-sim/instructions.cc	/^void brev_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
brk_pt	debug.h	/^   brk_pt( const char *fileline, unsigned uid )$/;"	f	class:brk_pt
brk_pt	debug.h	/^   brk_pt( unsigned addr, unsigned value )$/;"	f	class:brk_pt
brk_pt	debug.h	/^   brk_pt() { m_valid=false; }$/;"	f	class:brk_pt
brk_pt	debug.h	/^class brk_pt {$/;"	c
brkpt_impl	cuda-sim/instructions.cc	/^void brkpt_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI)/;"	f	typeref:typename:void
broadcast_addr_din_over_ver_htrees	gpuwattch/cacti/cacti_interface.h	/^    unsigned int broadcast_addr_din_over_ver_htrees;$/;"	m	class:InputParameter	typeref:typename:unsigned int
broadcast_barrier_reduction	abstract_hardware_model.cc	/^void warp_inst_t::broadcast_barrier_reduction(const active_mask_t& access_mask)$/;"	f	class:warp_inst_t	typeref:typename:void
broadcast_barrier_reduction	gpgpu-sim/shader.cc	/^void shader_core_ctx::broadcast_barrier_reduction(unsigned cta_id,unsigned bar_id,warp_set_t war/;"	f	class:shader_core_ctx	typeref:typename:void
brx_impl	cuda-sim/instructions.cc	/^void brx_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
buf	gpuwattch/xmlParser.h	/^    XMLSTR buf;$/;"	m	struct:ToXMLStringTool	typeref:typename:XMLSTR
buf	gpuwattch/xmlParser.h	/^    void *buf;$/;"	m	struct:XMLParserBase64Tool	typeref:typename:void *
buff_tot	gpuwattch/cacti/highradix.h	/^    Component wire_tot, buff_tot, crossbar_tot, arb_tot;$/;"	m	class:HighRadix	typeref:typename:Component
buffer	gpuwattch/cacti/router.h	/^    Component arbiter, crossbar, buffer;$/;"	m	class:MCPAT_Router	typeref:typename:Component
buffer_	gpuwattch/cacti/highradix.cc	/^Mat * HighRadix::buffer_(double block_sz, double sz)$/;"	f	class:HighRadix	typeref:typename:Mat *
buffer_sizes	gpuwattch/XML_Parse.h	/^	int buffer_sizes[20];$/;"	m	struct:__anon6448b92c0308	typeref:typename:int[20]
buffer_sizes	gpuwattch/XML_Parse.h	/^	int buffer_sizes[20];$/;"	m	struct:__anon6448b92c0508	typeref:typename:int[20]
buffer_sizes	gpuwattch/XML_Parse.h	/^	int buffer_sizes[20];$/;"	m	struct:__anon6448b92c0808	typeref:typename:int[20]
buffer_sizes	gpuwattch/XML_Parse.h	/^	int buffer_sizes[20];$/;"	m	struct:__anon6448b92c0908	typeref:typename:int[20]
buffer_sizes	gpuwattch/XML_Parse.h	/^	int buffer_sizes[20];$/;"	m	struct:__anon6448b92c0a08	typeref:typename:int[20]
buffer_sizes	gpuwattch/XML_Parse.h	/^	int buffer_sizes[20];$/;"	m	struct:__anon6448b92c0b08	typeref:typename:int[20]
buffer_stats	gpuwattch/cacti/router.cc	/^void MCPAT_Router::buffer_stats()$/;"	f	class:MCPAT_Router	typeref:typename:void
buflen	gpuwattch/xmlParser.h	/^    int buflen;$/;"	m	struct:ToXMLStringTool	typeref:typename:int
buflen	gpuwattch/xmlParser.h	/^    int buflen;$/;"	m	struct:XMLParserBase64Tool	typeref:typename:int
buildRoutingTable	intersim2/networks/anynet.cpp	/^void AnyNet::buildRoutingTable(){$/;"	f	class:AnyNet	typeref:typename:void
builtin_operand	cuda-sim/ptx.y	/^builtin_operand: SPECIAL_REGISTER DIMENSION_MODIFIER { add_builtin_operand($1,$2); }$/;"	l
builtin_t	cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
burst	gpgpu-sim/addrdec.h	/^   unsigned burst;$/;"	m	struct:addrdec_t	typeref:typename:unsigned
burst_len	gpuwattch/cacti/cacti_interface.h	/^    unsigned int burst_len;$/;"	m	class:InputParameter	typeref:typename:unsigned int
burstlength_of_DRAM_chip	gpuwattch/XML_Parse.h	/^	int burstlength_of_DRAM_chip;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:int
busW	gpgpu-sim/gpu-sim.h	/^   unsigned busW;$/;"	m	struct:memory_config	typeref:typename:unsigned
busy	gpgpu-sim/gpu-cache.h	/^    bool busy() const {return false;}$/;"	f	class:mshr_table	typeref:typename:bool
busy	gpgpu-sim/l2cache.cc	/^bool memory_partition_unit::busy() const $/;"	f	class:memory_partition_unit	typeref:typename:bool
busy	gpgpu-sim/l2cache.cc	/^bool memory_sub_partition::busy() const $/;"	f	class:memory_sub_partition	typeref:typename:bool
busy	intersim2/routers/event_router.hpp	/^  enum eNextVCState { idle, busy, tail_pending };$/;"	e	enum:EventNextVCState::eNextVCState
busy	stream_manager.cc	/^bool CUstream_st::busy()$/;"	f	class:CUstream_st	typeref:typename:bool
busy_cycles	gpuwattch/XML_Parse.h	/^	double busy_cycles;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
busy_cycles	gpuwattch/basic_components.h	/^    double pipeline_duty_cycle, total_cycles, busy_cycles, idle_cycles;$/;"	m	class:CoreDynParam	typeref:typename:double
bwutil	gpgpu-sim/dram.h	/^   unsigned int bwutil;$/;"	m	class:dram_t	typeref:typename:unsigned int
bwutil_partial	gpgpu-sim/dram.h	/^   unsigned int bwutil_partial;$/;"	m	class:dram_t	typeref:typename:unsigned int
bypass	gpuwattch/core.h	/^	Component  bypass;$/;"	m	class:EXECU	typeref:typename:Component
bytes	abstract_hardware_model.h	/^        mem_access_byte_mask_t bytes;$/;"	m	struct:warp_inst_t::transaction_info	typeref:typename:mem_access_byte_mask_t
c	gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR s; int l; XMLCHAR c;} XMLCharacterEntity;$/;"	m	struct:__anon33c5d5fd0208	typeref:typename:XMLCHAR	file:
c_arb	gpuwattch/cacti/highradix.h	/^    MCPAT_Arbiter *cb_arb, *vc_arb, *c_arb;$/;"	m	class:HighRadix	typeref:typename:MCPAT_Arbiter ***
c_buff	gpuwattch/cacti/highradix.h	/^    Mat *inp_buff, *r_buff, *c_buff;$/;"	m	class:HighRadix	typeref:typename:Mat ***
c_gate_load	gpuwattch/cacti/decoder.h	/^  double c_gate_load;$/;"	m	class:Driver	typeref:typename:double
c_load_nand2_path_out	gpuwattch/cacti/decoder.h	/^  double c_load_nand2_path_out;$/;"	m	class:PredecBlkDrv	typeref:typename:double
c_load_nand3_path_out	gpuwattch/cacti/decoder.h	/^  double c_load_nand3_path_out;$/;"	m	class:PredecBlkDrv	typeref:typename:double
c_wire_load	gpuwattch/cacti/decoder.h	/^  double c_wire_load;$/;"	m	class:Driver	typeref:typename:double
cacheL	gpuwattch/sharedcache.h	/^	enum cache_level cacheL;$/;"	m	class:SharedCache	typeref:enum:cache_level
cachePorts	gpuwattch/arch_const.h	/^const int cachePorts=200;$/;"	v	typeref:typename:const int
cache_access_logger_types	gpgpu-sim/stat-tool.cc	/^enum cache_access_logger_types {$/;"	g	file:
cache_block_state	gpgpu-sim/gpu-cache.h	/^enum cache_block_state {$/;"	g
cache_block_t	gpgpu-sim/gpu-cache.h	/^    cache_block_t()$/;"	f	struct:cache_block_t
cache_block_t	gpgpu-sim/gpu-cache.h	/^struct cache_block_t {$/;"	s
cache_config	gpgpu-sim/gpu-cache.h	/^    cache_config() $/;"	f	class:cache_config
cache_config	gpgpu-sim/gpu-cache.h	/^class cache_config {$/;"	c
cache_cycle	gpgpu-sim/l2cache.cc	/^void memory_partition_unit::cache_cycle(unsigned cycle) $/;"	f	class:memory_partition_unit	typeref:typename:void
cache_cycle	gpgpu-sim/l2cache.cc	/^void memory_sub_partition::cache_cycle( unsigned cycle )$/;"	f	class:memory_sub_partition	typeref:typename:void
cache_event	gpgpu-sim/gpu-cache.h	/^enum cache_event {$/;"	g
cache_flush	gpgpu-sim/shader.cc	/^void shader_core_ctx::cache_flush()$/;"	f	class:shader_core_ctx	typeref:typename:void
cache_flush	gpgpu-sim/shader.cc	/^void simt_core_cluster::cache_flush()$/;"	f	class:simt_core_cluster	typeref:typename:void
cache_ht	gpuwattch/cacti/cacti_interface.h	/^    double cache_ht;$/;"	m	class:uca_org_t	typeref:typename:double
cache_len	gpuwattch/cacti/cacti_interface.h	/^    double cache_len;$/;"	m	class:uca_org_t	typeref:typename:double
cache_level	gpuwattch/basic_components.h	/^enum cache_level {$/;"	g
cache_level	gpuwattch/cacti/cacti_interface.h	/^    int cache_level;$/;"	m	class:InputParameter	typeref:typename:int
cache_op	abstract_hardware_model.h	/^    cache_operator_type cache_op;$/;"	m	class:inst_t	typeref:typename:cache_operator_type
cache_operator_type	abstract_hardware_model.h	/^enum cache_operator_type {$/;"	g
cache_option	cuda-sim/ptx_ir.h	/^   unsigned cache_option() const { return m_cache_option; }$/;"	f	class:ptx_instruction	typeref:typename:unsigned
cache_p	gpuwattch/core.h	/^	enum Cache_policy cache_p;$/;"	m	class:InstFetchU	typeref:enum:Cache_policy
cache_p	gpuwattch/core.h	/^	enum Cache_policy cache_p;$/;"	m	class:LoadStoreU	typeref:enum:Cache_policy
cache_policy	gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write/;"	m	struct:__anon6448b92c0208	typeref:typename:int
cache_policy	gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write/;"	m	struct:__anon6448b92c0308	typeref:typename:int
cache_policy	gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write/;"	m	struct:__anon6448b92c0408	typeref:typename:int
cache_policy	gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write/;"	m	struct:__anon6448b92c0508	typeref:typename:int
cache_policy	gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write/;"	m	struct:__anon6448b92c0808	typeref:typename:int
cache_policy	gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write/;"	m	struct:__anon6448b92c0908	typeref:typename:int
cache_policy	gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write/;"	m	struct:__anon6448b92c0a08	typeref:typename:int
cache_policy	gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write/;"	m	struct:__anon6448b92c0b08	typeref:typename:int
cache_request_status	gpgpu-sim/gpu-cache.h	/^enum cache_request_status {$/;"	g
cache_request_status_str	gpgpu-sim/gpu-cache.cc	/^const char * cache_request_status_str(enum cache_request_status status) $/;"	f	typeref:typename:const char *
cache_stats	gpgpu-sim/gpu-cache.cc	/^cache_stats::cache_stats(){$/;"	f	class:cache_stats
cache_stats	gpgpu-sim/gpu-cache.h	/^class cache_stats {$/;"	c
cache_status	gpgpu-sim/gpu-cache.h	/^    FuncCache cache_status;$/;"	m	class:cache_config	typeref:typename:FuncCache
cache_sub_stats	gpgpu-sim/gpu-cache.h	/^    cache_sub_stats(){$/;"	f	struct:cache_sub_stats
cache_sub_stats	gpgpu-sim/gpu-cache.h	/^struct cache_sub_stats{$/;"	s
cache_sz	gpuwattch/cacti/cacti_interface.h	/^    unsigned int cache_sz;  \/\/ in bytes$/;"	m	class:InputParameter	typeref:typename:unsigned int
cache_t	gpgpu-sim/gpu-cache.h	/^class cache_t {$/;"	c
cachep	gpuwattch/sharedcache.h	/^    CacheDynParam cachep;$/;"	m	class:SharedCache	typeref:typename:CacheDynParam
caches	gpuwattch/array.h	/^  ArrayST* caches;$/;"	m	class:InstCache	typeref:typename:ArrayST *
cacti_interface	gpuwattch/cacti/io.cc	/^uca_org_t cacti_interface($/;"	f	typeref:typename:uca_org_t
cacti_interface	gpuwattch/cacti/io.cc	/^uca_org_t cacti_interface(InputParameter  * const local_interface)$/;"	f	typeref:typename:uca_org_t
cacti_interface	gpuwattch/cacti/io.cc	/^uca_org_t cacti_interface(const string & infile_name)$/;"	f	typeref:typename:uca_org_t
calcBuffer	intersim2/power/power_module.cpp	/^void Power_Module::calcBuffer(const BufferMonitor *bm){$/;"	f	class:Power_Module	typeref:typename:void
calcChannel	intersim2/power/power_module.cpp	/^void Power_Module::calcChannel(const FlitChannel* f){$/;"	f	class:Power_Module	typeref:typename:void
calcSwitch	intersim2/power/power_module.cpp	/^void Power_Module::calcSwitch(const SwitchMonitor* sm){$/;"	f	class:Power_Module	typeref:typename:void
calc_cycles	gpuwattch/cacti/nuca.cc	/^Nuca::calc_cycles(double lat, double oper_freq)$/;"	f	class:Nuca	typeref:typename:int
calc_router_parameters	gpuwattch/cacti/router.cc	/^MCPAT_Router::calc_router_parameters()$/;"	f	class:MCPAT_Router	typeref:typename:void
calc_time_mt_wrapper	gpuwattch/cacti/Ucache.cc	/^void * calc_time_mt_wrapper(void * void_obj)$/;"	f	typeref:typename:void *
calc_time_mt_wrapper_struct	gpuwattch/cacti/Ucache.h	/^struct calc_time_mt_wrapper_struct$/;"	s
calculate_dist	gpgpu-sim/visualizer.cc	/^   void calculate_dist() {$/;"	f	class:my_time_vector	typeref:typename:void	file:
calculate_ld_dist	gpgpu-sim/visualizer.cc	/^   void calculate_ld_dist(void) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
calculate_nuca_area	gpuwattch/cacti/nuca.cc	/^Nuca::calculate_nuca_area (nuca_org_t *nuca)$/;"	f	class:Nuca	typeref:typename:void
calculate_st_dist	gpgpu-sim/visualizer.cc	/^   void calculate_st_dist(void) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
calculate_time	gpuwattch/cacti/Ucache.cc	/^bool calculate_time($/;"	f	typeref:typename:bool
calculate_wire_stats	gpuwattch/cacti/wire.cc	/^Wire::calculate_wire_stats()$/;"	f	class:Wire	typeref:typename:void
call_impl	cuda-sim/instructions.cc	/^void call_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
callback	abstract_hardware_model.h	/^        dram_callback_t callback;$/;"	m	struct:warp_inst_t::per_thread_info	typeref:typename:dram_callback_t
callp_impl	cuda-sim/instructions.cc	/^void callp_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f	typeref:typename:void
callstack_pop	cuda-sim/ptx_sim.cc	/^bool ptx_thread_info::callstack_pop()$/;"	f	class:ptx_thread_info	typeref:typename:bool
callstack_pop_plus	cuda-sim/ptx_sim.cc	/^bool ptx_thread_info::callstack_pop_plus()$/;"	f	class:ptx_thread_info	typeref:typename:bool
callstack_push	cuda-sim/ptx_sim.cc	/^void ptx_thread_info::callstack_push( unsigned pc, unsigned rpc, const symbol *return_var_src, c/;"	f	class:ptx_thread_info	typeref:typename:void
callstack_push_plus	cuda-sim/ptx_sim.cc	/^void ptx_thread_info::callstack_push_plus( unsigned pc, unsigned rpc, const symbol *return_var_s/;"	f	class:ptx_thread_info	typeref:typename:void
cam	gpuwattch/cacti/parameter.h	/^  MemoryType cam;$/;"	m	class:TechnologyParameter	typeref:typename:MemoryType
camFlag	gpuwattch/cacti/mat.h	/^    bool     is_dram,is_fa, pure_cam, camFlag;$/;"	m	class:Mat	typeref:typename:bool
cam_bl_precharge_eq_drv	gpuwattch/cacti/mat.h	/^    Driver * cam_bl_precharge_eq_drv;\/\/bitline pre-charge circuit is separated for CAM and RAM/;"	m	class:Mat	typeref:typename:Driver *
cam_cell	gpuwattch/cacti/mat.h	/^    Area     cell,cam_cell;$/;"	m	class:Mat	typeref:typename:Area
cam_cell	gpuwattch/cacti/parameter.h	/^    Area   cell, cam_cell;\/\/cell is the sram_cell in both nomal cache\/ram and FA.$/;"	m	class:DynamicParameter	typeref:typename:Area
cam_cell	gpuwattch/cacti/parameter.h	/^  DeviceType cam_cell;   \/\/ SRAM cell transistor$/;"	m	class:TechnologyParameter	typeref:typename:DeviceType
cam_cell	gpuwattch/cacti/subarray.h	/^    Area    cell, cam_cell;$/;"	m	class:Subarray	typeref:typename:Area
can_issue	gpgpu-sim/shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const { return m_dispatch_reg->empty() && /;"	f	class:simd_function_unit	typeref:typename:bool
can_issue	gpgpu-sim/shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const$/;"	f	class:ldst_unit	typeref:typename:bool
can_issue	gpgpu-sim/shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const$/;"	f	class:pipelined_simd_unit	typeref:typename:bool
can_issue	gpgpu-sim/shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const$/;"	f	class:sfu	typeref:typename:bool
can_issue	gpgpu-sim/shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const$/;"	f	class:sp_unit	typeref:typename:bool
can_issue_to_dram	gpgpu-sim/l2cache.cc	/^bool memory_partition_unit::can_issue_to_dram(int inner_sub_partition_id) $/;"	f	class:memory_partition_unit	typeref:typename:bool
can_start_kernel	gpgpu-sim/gpu-sim.cc	/^bool gpgpu_sim::can_start_kernel()$/;"	f	class:gpgpu_sim	typeref:typename:bool
capacity	gpgpu-sim/gpu-cache.h	/^        unsigned capacity() const { return m_size;}$/;"	f	class:tex_cache::fifo	typeref:typename:unsigned
capacity	gpuwattch/arch_const.h	/^	unsigned int capacity;$/;"	m	struct:__anoncc262ac50108	typeref:typename:unsigned int
capacity	gpuwattch/basic_components.h	/^    double    capacity, blockW, assoc, nbanks;$/;"	m	class:CacheDynParam	typeref:typename:double
capacity_per_channel	gpuwattch/XML_Parse.h	/^	int capacity_per_channel;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:int
cas_latency	gpuwattch/cacti/cacti_interface.h	/^  double cas_latency;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
cb	gpuwattch/cacti/highradix.h	/^    Crossbar *cb, *out_cb;$/;"	m	class:HighRadix	typeref:typename:Crossbar *
cbEndTag	gpuwattch/xmlParser.cc	/^    int                    cbEndTag;$/;"	m	struct:XML	typeref:typename:int	file:
cbNewElement	gpuwattch/xmlParser.cc	/^    int                    cbNewElement;$/;"	m	struct:XML	typeref:typename:int	file:
cb_arb	gpuwattch/cacti/highradix.h	/^    MCPAT_Arbiter *cb_arb, *vc_arb, *c_arb;$/;"	m	class:HighRadix	typeref:typename:MCPAT_Arbiter *
cb_stats	gpuwattch/cacti/router.cc	/^MCPAT_Router::cb_stats ()$/;"	f	class:MCPAT_Router	typeref:typename:void
cc	gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor	typeref:typename:Component
cc	gpuwattch/sharedcache.h	/^    Component L2Tot, cc, cc1, ccTot;$/;"	m	class:CCdir	typeref:typename:Component
cc1	gpuwattch/sharedcache.h	/^    Component L2Tot, cc, cc1, ccTot;$/;"	m	class:CCdir	typeref:typename:Component
ccTot	gpuwattch/sharedcache.h	/^    Component L2Tot, cc, cc1, ccTot;$/;"	m	class:CCdir	typeref:typename:Component
ccache	gpuwattch/XML_Parse.h	/^	dcache_systemcore ccache;$/;"	m	struct:__anon6448b92c0708	typeref:typename:dcache_systemcore
ccache	gpuwattch/core.h	/^	DataCache ccache;$/;"	m	class:LoadStoreU	typeref:typename:DataCache
cdb_alu_accesses	gpuwattch/XML_Parse.h	/^	double cdb_alu_accesses;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
cdb_fpu_accesses	gpuwattch/XML_Parse.h	/^	double cdb_fpu_accesses;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
cdb_mul_accesses	gpuwattch/XML_Parse.h	/^	double cdb_mul_accesses;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
cdb_overhead	gpuwattch/basic_components.h	/^const double cdb_overhead = 1.1;$/;"	v	typeref:typename:const double
cell	gpuwattch/cacti/decoder.h	/^    const  Area & cell;$/;"	m	class:Decoder	typeref:typename:const Area &
cell	gpuwattch/cacti/mat.h	/^    Area     cell,cam_cell;$/;"	m	class:Mat	typeref:typename:Area
cell	gpuwattch/cacti/parameter.h	/^    Area   cell, cam_cell;\/\/cell is the sram_cell in both nomal cache\/ram and FA.$/;"	m	class:DynamicParameter	typeref:typename:Area
cell	gpuwattch/cacti/subarray.h	/^    Area    cell, cam_cell;$/;"	m	class:Subarray	typeref:typename:Area
cell_a_w	gpuwattch/cacti/parameter.h	/^    double cell_a_w;$/;"	m	class:TechnologyParameter::MemoryType	typeref:typename:double
cell_h_def	gpuwattch/cacti/parameter.h	/^  double cell_h_def;$/;"	m	class:TechnologyParameter	typeref:typename:double
cell_load	gpuwattch/logic.h	/^	double cell_load;$/;"	m	class:DFFCell	typeref:typename:double
cell_nmos_w	gpuwattch/cacti/parameter.h	/^    double cell_nmos_w;$/;"	m	class:TechnologyParameter::MemoryType	typeref:typename:double
cell_pmos_w	gpuwattch/cacti/parameter.h	/^    double cell_pmos_w;$/;"	m	class:TechnologyParameter::MemoryType	typeref:typename:double
cflog_print	gpgpu-sim/stat-tool.cc	/^void cflog_print(FILE *fout) $/;"	f	typeref:typename:void
cflog_snapshot	gpgpu-sim/stat-tool.cc	/^void cflog_snapshot( int logger_id, unsigned long long  cycle ) $/;"	f	typeref:typename:void
cflog_update_thread_pc	gpgpu-sim/stat-tool.cc	/^void cflog_update_thread_pc( int logger_id, int thread_id, address_type pc ) $/;"	f	typeref:typename:void
cflog_visualizer_gzprint	gpgpu-sim/stat-tool.cc	/^void cflog_visualizer_gzprint(gzFile fout) $/;"	f	typeref:typename:void
cflog_visualizer_print	gpgpu-sim/stat-tool.cc	/^void cflog_visualizer_print(FILE *fout) $/;"	f	typeref:typename:void
change_cache_config	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::change_cache_config(FuncCache cache_config)$/;"	f	class:gpgpu_sim	typeref:typename:void
change_double_operand_type	cuda-sim/ptx_parser.cc	/^void change_double_operand_type( int operand_type )$/;"	f	typeref:typename:void
change_memory_addr_space	cuda-sim/ptx_parser.cc	/^void change_memory_addr_space(const char *identifier) $/;"	f	typeref:typename:void
change_operand_lohi	cuda-sim/ptx_parser.cc	/^void change_operand_lohi( int lohi )$/;"	f	typeref:typename:void
change_operand_neg	cuda-sim/ptx_parser.cc	/^void change_operand_neg( )$/;"	f	typeref:typename:void
channelArea	intersim2/power/power_module.hpp	/^  double channelArea;$/;"	m	class:Power_Module	typeref:typename:double
channelClkPower	intersim2/power/power_module.hpp	/^  double channelClkPower;$/;"	m	class:Power_Module	typeref:typename:double
channelDFFPower	intersim2/power/power_module.hpp	/^  double channelDFFPower;$/;"	m	class:Power_Module	typeref:typename:double
channelDesc	abstract_hardware_model.h	/^   struct cudaChannelFormatDesc  channelDesc;$/;"	m	struct:textureReference	typeref:struct:cudaChannelFormatDesc
channelLeakPower	intersim2/power/power_module.hpp	/^  double channelLeakPower;$/;"	m	class:Power_Module	typeref:typename:double
channelWirePower	intersim2/power/power_module.hpp	/^  double channelWirePower;$/;"	m	class:Power_Module	typeref:typename:double
channel_sweep	intersim2/power/power_module.hpp	/^  double  channel_sweep; $/;"	m	class:Power_Module	typeref:typename:double
channel_width	intersim2/power/power_module.hpp	/^  double channel_width;$/;"	m	class:Power_Module	typeref:typename:double
chaos_mesh	intersim2/routefunc.cpp	/^void chaos_mesh( const Router *r, const Flit *f, $/;"	f	typeref:typename:void
chaos_torus	intersim2/routefunc.cpp	/^void chaos_torus( const Router *r, const Flit *f, $/;"	f	typeref:typename:void
char_encoding_Big5	gpuwattch/xmlParser.h	/^        char_encoding_Big5=5,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_GB2312	gpuwattch/xmlParser.h	/^        char_encoding_GB2312=4,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_GBK	gpuwattch/xmlParser.h	/^        char_encoding_GBK=6     \/\/ this is actually the same as Big5$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_ShiftJIS	gpuwattch/xmlParser.h	/^        char_encoding_ShiftJIS=3,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_UTF8	gpuwattch/xmlParser.h	/^        char_encoding_UTF8=1,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_error	gpuwattch/xmlParser.h	/^        char_encoding_error=0,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_legacy	gpuwattch/xmlParser.h	/^        char_encoding_legacy=2,$/;"	e	enum:XMLNode::XMLCharEncoding
characterEncoding	gpuwattch/xmlParser.cc	/^static XMLNode::XMLCharEncoding characterEncoding=XMLNode::char_encoding_UTF8;$/;"	v	typeref:typename:XMLNode::XMLCharEncoding	file:
charmemset	gpuwattch/xmlParser.cc	/^static inline void charmemset(XMLSTR dest,XMLCHAR c,int l) { while (l--) *(dest++)=c; }$/;"	f	typeref:typename:void	file:
checkCollision	gpgpu-sim/scoreboard.cc	/^bool Scoreboard::checkCollision( unsigned wid, const class inst_t *inst ) const$/;"	f	class:Scoreboard	typeref:typename:bool
checkExecutionStatusAndUpdate	cuda-sim/cuda-sim.h	/^    virtual void checkExecutionStatusAndUpdate(warp_inst_t &inst, unsigned t, unsigned tid)$/;"	f	class:functionalCoreSim	typeref:typename:void
checkExecutionStatusAndUpdate	gpgpu-sim/shader.cc	/^void shader_core_ctx::checkExecutionStatusAndUpdate(warp_inst_t &inst, unsigned t, unsigned tid)$/;"	f	class:shader_core_ctx	typeref:typename:void
check_cta_thread_status_and_reset	cuda-sim/ptx_sim.cc	/^void ptx_cta_info::check_cta_thread_status_and_reset()$/;"	f	class:ptx_cta_info	typeref:typename:void
check_finished_kernel	stream_manager.cc	/^bool stream_manager::check_finished_kernel()$/;"	f	class:stream_manager	typeref:typename:bool
check_for_duplicates	cuda-sim/ptx_parser.cc	/^bool check_for_duplicates( const char *identifier )$/;"	f	typeref:typename:bool
check_if_non_released_reduction_barrier	gpgpu-sim/shader.cc	/^bool shader_core_ctx::check_if_non_released_reduction_barrier(warp_inst_t &inst)$/;"	f	class:shader_core_ctx	typeref:typename:bool
check_ld_update	gpgpu-sim/visualizer.cc	/^   void check_ld_update(unsigned int uid,unsigned int slot, long int latency) { $/;"	f	class:my_time_vector	typeref:typename:void	file:
check_mem_org	gpuwattch/cacti/Ucache.cc	/^bool check_mem_org(mem_array & u, const min_values_t *minval)$/;"	f	typeref:typename:bool
check_mshr_parameters	gpgpu-sim/gpu-cache.h	/^    void check_mshr_parameters( unsigned num_entries, unsigned max_merged )$/;"	f	class:mshr_table	typeref:typename:void
check_nuca_org	gpuwattch/cacti/nuca.cc	/^Nuca::check_nuca_org (nuca_org_t *n, min_values_t *minval)$/;"	f	class:Nuca	typeref:typename:int
check_operands	cuda-sim/ptx_ir.cc	/^static std::list<operand_info> check_operands( int opcode,$/;"	f	typeref:typename:std::list<operand_info>	file:
check_st_update	gpgpu-sim/visualizer.cc	/^   void check_st_update(unsigned int uid,unsigned int slot, long int latency) { $/;"	f	class:my_time_vector	typeref:typename:void	file:
check_target_extension	cuda-sim/ptx_sim.h	/^      void check_target_extension( const char *ext ) $/;"	f	class:ptx_version	typeref:typename:void
check_time_vector_update	gpgpu-sim/visualizer.cc	/^void check_time_vector_update(unsigned int uid,int slot ,long int latency,int type) $/;"	f	typeref:typename:void
check_uca_org	gpuwattch/cacti/Ucache.cc	/^bool check_uca_org(uca_org_t & u, min_values_t *minval)$/;"	f	typeref:typename:bool
check_valid	gpgpu-sim/gpu-cache.cc	/^bool cache_stats::check_valid(int type, int status) const{$/;"	f	class:cache_stats	typeref:typename:bool
child	gpuwattch/xmlParser.h	/^    XMLNode child;$/;"	m	struct:XMLNodeContents	typeref:typename:XMLNode
chip	gpgpu-sim/addrdec.h	/^   unsigned chip;$/;"	m	struct:addrdec_t	typeref:typename:unsigned
chip_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:BranchPredictor	typeref:typename:double
chip_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:Core	typeref:typename:double
chip_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:EXECU	typeref:typename:double
chip_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:InstFetchU	typeref:typename:double
chip_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:LoadStoreU	typeref:typename:double
chip_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:MemManU	typeref:typename:double
chip_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:RegFU	typeref:typename:double
chip_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:SchedulerU	typeref:typename:double
chip_PR_overhead	gpuwattch/logic.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:UndiffCore	typeref:typename:double
chip_PR_overhead	gpuwattch/noc.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:NoC	typeref:typename:double
chip_coverage	gpuwattch/XML_Parse.h	/^	double chip_coverage;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:double
chip_coverage	gpuwattch/basic_components.h	/^		   duty_cycle, chip_coverage, route_over_perc;$/;"	m	class:NoCParam	typeref:typename:double
chip_layout_overhead	gpuwattch/cacti/parameter.h	/^  double chip_layout_overhead;$/;"	m	class:TechnologyParameter	typeref:typename:double
choiceCtrBits	gpuwattch/arch_const.h	/^const int choiceCtrBits=2;$/;"	v	typeref:typename:const int
choicePredictorSize	gpuwattch/arch_const.h	/^const int choicePredictorSize=8192;$/;"	v	typeref:typename:const int
chooser	gpuwattch/core.h	/^	ArrayST * chooser;$/;"	m	class:BranchPredictor	typeref:typename:ArrayST *
chooser_predictor_bits	gpuwattch/XML_Parse.h	/^	int chooser_predictor_bits;$/;"	m	struct:__anon6448b92c0108	typeref:typename:int
chooser_predictor_entries	gpuwattch/XML_Parse.h	/^	int chooser_predictor_entries;$/;"	m	struct:__anon6448b92c0108	typeref:typename:int
chop	cuda-sim/instructions.cc	/^ptx_reg_t chop( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_m/;"	f	typeref:typename:ptx_reg_t
chunks	abstract_hardware_model.h	/^        std::bitset<4> chunks; \/\/ bitmask: 32-byte chunks accessed$/;"	m	struct:warp_inst_t::transaction_info	typeref:typename:std::bitset<4>
cid_to_sid	gpgpu-sim/shader.h	/^    unsigned cid_to_sid( unsigned cid, unsigned cluster_id ) const { return cluster_id*n_simt_co/;"	f	struct:shader_core_config	typeref:typename:unsigned
cinterfacetest	option_parser.cc	/^int cinterfacetest(int argc, const char *argv[])$/;"	f	typeref:typename:int
cl	intersim2/flit.hpp	/^  int cl;$/;"	m	class:Flit	typeref:typename:int
clamp	cuda-sim/instructions.cc	/^unsigned clamp( unsigned x, unsigned y, unsigned mx, unsigned my, size_t elem_size )$/;"	f	typeref:typename:unsigned
class_based	intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_base/;"	e	enum:TrafficManager::ePriority
classes	intersim2/power/power_module.hpp	/^  int classes;$/;"	m	class:Power_Module	typeref:typename:int
classify_memfetch	gpgpu-sim/traffic_breakdown.cc	/^std::string traffic_breakdown::classify_memfetch(class mem_fetch * mf)$/;"	f	class:traffic_breakdown	typeref:typename:std::string
clean	Makefile	/^clean:$/;"	t
clean	cuda-sim/Makefile	/^clean:$/;"	t
clean	gpgpu-sim/Makefile	/^clean:$/;"	t
clean	gpuwattch/cacti/cacti.mk	/^clean:$/;"	t
clean	gpuwattch/cacti/makefile	/^clean: clean_dbg clean_opt$/;"	t
clean	gpuwattch/makefile	/^clean: clean_dbg clean_opt clean_cacti$/;"	t
clean	gpuwattch/mcpat.mk	/^clean:$/;"	t
clean	gpuwattch/mcpatXeonCore.mk	/^clean:$/;"	t
clean	intersim2/Makefile	/^clean:$/;"	t
clean_cacti	gpuwattch/makefile	/^clean_cacti: cacti$/;"	t
clean_dbg	gpuwattch/cacti/makefile	/^clean_dbg: obj_dbg$/;"	t
clean_dbg	gpuwattch/makefile	/^clean_dbg: obj_dbg$/;"	t
clean_opt	gpuwattch/cacti/makefile	/^clean_opt: obj_opt$/;"	t
clean_opt	gpuwattch/makefile	/^clean_opt: obj_opt$/;"	t
cleanup	gpuwattch/cacti/cacti_interface.cc	/^void uca_org_t :: cleanup()$/;"	f	class:uca_org_t	typeref:typename:void
clear	abstract_hardware_model.h	/^    void clear() $/;"	f	class:warp_inst_t	typeref:typename:void
clear	gpgpu-sim/gpu-cache.cc	/^void cache_stats::clear(){$/;"	f	class:cache_stats	typeref:typename:void
clear	gpgpu-sim/gpu-cache.h	/^    void clear(){$/;"	f	struct:cache_sub_stats	typeref:typename:void
clear	gpuwattch/xmlParser.h	/^    XMLClear clear;$/;"	m	struct:XMLNodeContents	typeref:typename:XMLClear
clearBits	gpgpu-sim/warp_status.cc	/^	void WST::clearBits () {$/;"	f	class:WST	typeref:typename:void
clearRPC	cuda-sim/ptx_sim.h	/^   void clearRPC()$/;"	f	class:ptx_thread_info	typeref:typename:void
clearStallBits	gpgpu-sim/warp_status.cc	/^	void WST::clearStallBits () {$/;"	f	class:WST	typeref:typename:void
clear_active	abstract_hardware_model.cc	/^void warp_inst_t::clear_active( const active_mask_t &inactive ) {$/;"	f	class:warp_inst_t	typeref:typename:void
clear_executed_kernel_info	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::clear_executed_kernel_info()$/;"	f	class:gpgpu_sim	typeref:typename:void
clear_imiss_pending	gpgpu-sim/shader.h	/^    void clear_imiss_pending() { m_imiss_pending=false; }$/;"	f	class:shd_warp_t	typeref:typename:void
clear_membar	gpgpu-sim/shader.h	/^    void clear_membar() { m_membar=false; }$/;"	f	class:shd_warp_t	typeref:typename:void
clear_modifiedregs	cuda-sim/ptx_sim.h	/^   void clear_modifiedregs() { m_debug_trace_regs_modified.back().clear(); m_debug_trace_regs_re/;"	f	class:ptx_thread_info	typeref:typename:void
clear_ptxinfo	cuda-sim/cuda-sim.cc	/^void clear_ptxinfo()$/;"	f	typeref:typename:void
clear_time_map_vectors	gpgpu-sim/visualizer.cc	/^   void clear_time_map_vectors(void) {   $/;"	f	class:my_time_vector	typeref:typename:void	file:
clock	stream_manager.h	/^   time_t clock() const { return m_wallclock; }$/;"	f	class:CUevent_st	typeref:typename:time_t
clockRate	gpuwattch/basic_components.h	/^	double clockRate,executionTime;$/;"	m	class:CacheDynParam	typeref:typename:double
clockRate	gpuwattch/basic_components.h	/^    double  clockRate,num_mcs, peakDataTransferRate, num_channels;$/;"	m	class:MCParam	typeref:typename:double
clockRate	gpuwattch/basic_components.h	/^    double  clockRate;$/;"	m	class:DRAMParam	typeref:typename:double
clockRate	gpuwattch/basic_components.h	/^    double  clockRate;$/;"	m	class:NIUParam	typeref:typename:double
clockRate	gpuwattch/basic_components.h	/^    double  clockRate;$/;"	m	class:NoCParam	typeref:typename:double
clockRate	gpuwattch/basic_components.h	/^    double  clockRate;$/;"	m	class:PCIeParam	typeref:typename:double
clockRate	gpuwattch/basic_components.h	/^    double clockRate,executionTime;$/;"	m	class:CoreDynParam	typeref:typename:double
clockRate	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:BranchPredictor	typeref:typename:double
clockRate	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:Core	typeref:typename:double
clockRate	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:EXECU	typeref:typename:double
clockRate	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:InstFetchU	typeref:typename:double
clockRate	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:LoadStoreU	typeref:typename:double
clockRate	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:MemManU	typeref:typename:double
clockRate	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:RENAMINGU	typeref:typename:double
clockRate	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:RegFU	typeref:typename:double
clockRate	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:SchedulerU	typeref:typename:double
clockRate	gpuwattch/logic.h	/^	double clockRate,executionTime;$/;"	m	class:FunctionalUnit	typeref:typename:double
clockRate	gpuwattch/logic.h	/^	double clockRate,executionTime;$/;"	m	class:UndiffCore	typeref:typename:double
clockRate	gpuwattch/sharedcache.h	/^    double scktRatio, clockRate, executionTime;$/;"	m	class:CCdir	typeref:typename:double
clock_cap	gpuwattch/logic.h	/^	double clock_cap;$/;"	m	class:DFFCell	typeref:typename:double
clock_multiplier	gpgpu-sim/shader.cc	/^unsigned ldst_unit::clock_multiplier() const$/;"	f	class:ldst_unit	typeref:typename:unsigned
clock_multiplier	gpgpu-sim/shader.h	/^    virtual unsigned clock_multiplier() const { return 1; }$/;"	f	class:simd_function_unit	typeref:typename:unsigned
clock_rate	gpuwattch/XML_Parse.h	/^	int clock_rate;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
clockrate	gpuwattch/XML_Parse.h	/^	int clockrate;$/;"	m	struct:__anon6448b92c0808	typeref:typename:int
clockrate	gpuwattch/XML_Parse.h	/^	int clockrate;$/;"	m	struct:__anon6448b92c0908	typeref:typename:int
clockrate	gpuwattch/XML_Parse.h	/^	int clockrate;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:int
clockrate	gpuwattch/XML_Parse.h	/^	int clockrate;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:int
clockrate	gpuwattch/XML_Parse.h	/^	int clockrate;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int
clockrate	gpuwattch/XML_Parse.h	/^    int clockrate;$/;"	m	struct:__anon6448b92c1008	typeref:typename:int
clockrate	gpuwattch/XML_Parse.h	/^    int clockrate;$/;"	m	struct:__anon6448b92c1108	typeref:typename:int
close_files	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::close_files()$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
clz_impl	cuda-sim/instructions.cc	/^void clz_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f	typeref:typename:void
cmd_coeff	gpuwattch/basic_components.h	/^    double cmd_coeff;$/;"	m	class:DRAMParam	typeref:typename:double
cmem	abstract_hardware_model.h	/^   int cmem;$/;"	m	struct:gpgpu_ptx_sim_kernel_info	typeref:typename:int
cmesh_next	intersim2/networks/cmesh.cpp	/^int cmesh_next( int cur, int dest ) {$/;"	f	typeref:typename:int
cmesh_next_no_express	intersim2/networks/cmesh.cpp	/^int cmesh_next_no_express( int cur, int dest ) {$/;"	f	typeref:typename:int
cmesh_xy	intersim2/networks/cmesh.cpp	/^int cmesh_xy( int cur, int dest ) {$/;"	f	typeref:typename:int
cmesh_xy_no_express	intersim2/networks/cmesh.cpp	/^int cmesh_xy_no_express( int cur, int dest ) {$/;"	f	typeref:typename:int
cmesh_yx	intersim2/networks/cmesh.cpp	/^int cmesh_yx( int cur, int dest ) {$/;"	f	typeref:typename:int
cmesh_yx_no_express	intersim2/networks/cmesh.cpp	/^int cmesh_yx_no_express( int cur, int dest ) {$/;"	f	typeref:typename:int
cmos_Ig_leakage	gpuwattch/cacti/basic_circuit.cc	/^double cmos_Ig_leakage($/;"	f	typeref:typename:double
cmos_Ig_n	gpuwattch/cacti/basic_circuit.cc	/^double cmos_Ig_n($/;"	f	typeref:typename:double
cmos_Ig_p	gpuwattch/cacti/basic_circuit.cc	/^double cmos_Ig_p($/;"	f	typeref:typename:double
cmos_Ileak	gpuwattch/cacti/basic_circuit.cc	/^double cmos_Ileak($/;"	f	typeref:typename:double
cmos_Isub_leakage	gpuwattch/cacti/basic_circuit.cc	/^double cmos_Isub_leakage($/;"	f	typeref:typename:double
cnot_impl	cuda-sim/instructions.cc	/^void cnot_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
coalesce_scale	gpuwattch/memoryctrl.h	/^	double coalesce_scale;$/;"	m	class:MCFrontEnd	typeref:typename:double
coalesced_segment	gpgpu-sim/shader.cc	/^address_type coalesced_segment(address_type addr, unsigned segment_size_lg2bytes)$/;"	f	typeref:typename:address_type
col	gpgpu-sim/addrdec.h	/^   unsigned col;$/;"	m	struct:addrdec_t	typeref:typename:unsigned
col	gpgpu-sim/dram.h	/^   unsigned int col;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
collect_operand	gpgpu-sim/shader.h	/^      void collect_operand( unsigned op )$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:void
collector_unit_t	gpgpu-sim/shader.h	/^      collector_unit_t()$/;"	f	class:opndcoll_rfu_t::collector_unit_t
collector_unit_t	gpgpu-sim/shader.h	/^   class collector_unit_t {$/;"	c	class:opndcoll_rfu_t
collector_units	gpuwattch/XML_Parse.h	/^   int collector_units;\/\/ (4)$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
columns	gpuwattch/cacti/nuca.h	/^    int columns;$/;"	m	class:nuca_org_t	typeref:typename:int
combination	gpuwattch/cacti/basic_circuit.cc	/^int combination(int n, int m)$/;"	f	typeref:typename:int
comm_dram	gpuwattch/cacti/const.h	/^  comm_dram = 4$/;"	e	enum:ram_cell_tech_type_num
comm_dram_num_cells_wl_stitching_	gpuwattch/cacti/const.h	/^const static uint32_t comm_dram_num_cells_wl_stitching_ = 256;$/;"	v	typeref:typename:const uint32_t
command	intersim2/config.y	/^command : STR '=' STR ';'   { config_assign_string( $1, $3 ); free( $1 ); free( $3 ); }$/;"	l
commands	intersim2/config.y	/^commands : commands command$/;"	l
commitW	gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_de/;"	m	class:CoreDynParam	typeref:typename:int
commitWidth	gpuwattch/arch_const.h	/^const int commitWidth=8;$/;"	v	typeref:typename:const int
commit_width	gpuwattch/XML_Parse.h	/^	int commit_width;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
committed_fp_instructions	gpuwattch/XML_Parse.h	/^	double committed_fp_instructions;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
committed_instructions	gpuwattch/XML_Parse.h	/^	double committed_instructions;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
committed_int_instructions	gpuwattch/XML_Parse.h	/^	double committed_int_instructions;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
compare_bits	gpuwattch/logic.h	/^	int compare_bits;$/;"	m	class:dep_resource_conflict_check	typeref:typename:int
compare_cap	gpuwattch/logic.cc	/^double dep_resource_conflict_check::compare_cap()$/;"	f	class:dep_resource_conflict_check	typeref:typename:double
compare_spec	cuda-sim/ptx.y	/^compare_spec:EQ_OPTION { add_option(EQ_OPTION); } $/;"	l
completed	abstract_hardware_model.cc	/^void warp_inst_t::completed( unsigned long long cycle ) const $/;"	f	class:warp_inst_t	typeref:typename:void
compute	gpuwattch/core.cc	/^void Core::compute()$/;"	f	class:Core	typeref:typename:void
compute	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::compute()$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
compute	gpuwattch/interconnect.cc	/^interconnect::compute()$/;"	f	class:interconnect	typeref:typename:void
compute	gpuwattch/logic.cc	/^void Pipeline::compute()$/;"	f	class:Pipeline	typeref:typename:void
compute	gpuwattch/memoryctrl.cc	/^void MCBackend::compute()$/;"	f	class:MCBackend	typeref:typename:void
compute	gpuwattch/memoryctrl.cc	/^void MCPHY::compute()$/;"	f	class:MCPHY	typeref:typename:void
compute	gpuwattch/processor.cc	/^void Processor::compute () $/;"	f	class:Processor	typeref:typename:void
computeEnergy	gpuwattch/core.cc	/^void BranchPredictor::computeEnergy(bool is_tdp)$/;"	f	class:BranchPredictor	typeref:typename:void
computeEnergy	gpuwattch/core.cc	/^void Core::computeEnergy(bool is_tdp)$/;"	f	class:Core	typeref:typename:void
computeEnergy	gpuwattch/core.cc	/^void EXECU::computeEnergy(bool is_tdp)$/;"	f	class:EXECU	typeref:typename:void
computeEnergy	gpuwattch/core.cc	/^void InstFetchU::computeEnergy(bool is_tdp)$/;"	f	class:InstFetchU	typeref:typename:void
computeEnergy	gpuwattch/core.cc	/^void LoadStoreU::computeEnergy(bool is_tdp)$/;"	f	class:LoadStoreU	typeref:typename:void
computeEnergy	gpuwattch/core.cc	/^void MemManU::computeEnergy(bool is_tdp)$/;"	f	class:MemManU	typeref:typename:void
computeEnergy	gpuwattch/core.cc	/^void RENAMINGU::computeEnergy(bool is_tdp)$/;"	f	class:RENAMINGU	typeref:typename:void
computeEnergy	gpuwattch/core.cc	/^void RegFU::computeEnergy(bool is_tdp)$/;"	f	class:RegFU	typeref:typename:void
computeEnergy	gpuwattch/core.cc	/^void SchedulerU::computeEnergy(bool is_tdp)$/;"	f	class:SchedulerU	typeref:typename:void
computeEnergy	gpuwattch/iocontrollers.cc	/^void FlashController::computeEnergy(bool is_tdp)$/;"	f	class:FlashController	typeref:typename:void
computeEnergy	gpuwattch/iocontrollers.cc	/^void NIUController::computeEnergy(bool is_tdp)$/;"	f	class:NIUController	typeref:typename:void
computeEnergy	gpuwattch/iocontrollers.cc	/^void PCIeController::computeEnergy(bool is_tdp)$/;"	f	class:PCIeController	typeref:typename:void
computeEnergy	gpuwattch/logic.cc	/^void FunctionalUnit::computeEnergy(bool is_tdp)$/;"	f	class:FunctionalUnit	typeref:typename:void
computeEnergy	gpuwattch/memoryctrl.cc	/^void DRAM::computeEnergy(bool is_tdp)$/;"	f	class:DRAM	typeref:typename:void
computeEnergy	gpuwattch/memoryctrl.cc	/^void MCBackend::computeEnergy(bool is_tdp)$/;"	f	class:MCBackend	typeref:typename:void
computeEnergy	gpuwattch/memoryctrl.cc	/^void MCFrontEnd::computeEnergy(bool is_tdp)$/;"	f	class:MCFrontEnd	typeref:typename:void
computeEnergy	gpuwattch/memoryctrl.cc	/^void MCPHY::computeEnergy(bool is_tdp)$/;"	f	class:MCPHY	typeref:typename:void
computeEnergy	gpuwattch/memoryctrl.cc	/^void MemoryController::computeEnergy(bool is_tdp)$/;"	f	class:MemoryController	typeref:typename:void
computeEnergy	gpuwattch/noc.cc	/^void NoC::computeEnergy(bool is_tdp)$/;"	f	class:NoC	typeref:typename:void
computeEnergy	gpuwattch/sharedcache.cc	/^void SharedCache::computeEnergy(bool is_tdp)$/;"	f	class:SharedCache	typeref:typename:void
compute_C	gpuwattch/cacti/subarray.cc	/^void Subarray::compute_C()$/;"	f	class:Subarray	typeref:typename:void
compute_DFF_cell	gpuwattch/logic.cc	/^void DFFCell::compute_DFF_cell()$/;"	f	class:DFFCell	typeref:typename:void
compute_arb_power	gpuwattch/cacti/highradix.cc	/^void HighRadix::compute_arb_power()$/;"	f	class:HighRadix	typeref:typename:void
compute_area	gpuwattch/cacti/decoder.cc	/^void Decoder::compute_area()$/;"	f	class:Decoder	typeref:typename:void
compute_area	gpuwattch/cacti/decoder.cc	/^void PredecBlk::compute_area()$/;"	f	class:PredecBlk	typeref:typename:void
compute_area	gpuwattch/cacti/decoder.cc	/^void PredecBlkDrv::compute_area()$/;"	f	class:PredecBlkDrv	typeref:typename:void
compute_base_power	gpuwattch/array.cc	/^void ArrayST::compute_base_power()$/;"	f	class:ArrayST	typeref:typename:void
compute_bit_mux_sa_precharge_sa_mux_wr_drv_wr_mux_h	gpuwattch/cacti/mat.cc	/^double Mat::compute_bit_mux_sa_precharge_sa_mux_wr_drv_wr_mux_h()$/;"	f	class:Mat	typeref:typename:double
compute_bitline_delay	gpuwattch/cacti/mat.cc	/^double Mat::compute_bitline_delay(double inrisetime)$/;"	f	class:Mat	typeref:typename:double
compute_buff_power	gpuwattch/cacti/highradix.cc	/^void HighRadix::compute_buff_power()$/;"	f	class:HighRadix	typeref:typename:void
compute_bus_power	gpuwattch/cacti/highradix.cc	/^void HighRadix::compute_bus_power()$/;"	f	class:HighRadix	typeref:typename:void
compute_cam_delay	gpuwattch/cacti/mat.cc	/^double Mat::compute_cam_delay(double inrisetime)$/;"	f	class:Mat	typeref:typename:double
compute_comparator_delay	gpuwattch/cacti/mat.cc	/^double Mat::compute_comparator_delay(double inrisetime)$/;"	f	class:Mat	typeref:typename:double
compute_comparators_height	gpuwattch/cacti/mat.cc	/^double Mat::compute_comparators_height($/;"	f	class:Mat	typeref:typename:double
compute_crossbar_power	gpuwattch/cacti/highradix.cc	/^void HighRadix::compute_crossbar_power()$/;"	f	class:HighRadix	typeref:typename:void
compute_delay	gpuwattch/cacti/decoder.cc	/^double Driver::compute_delay(double inrisetime)$/;"	f	class:Driver	typeref:typename:double
compute_delays	gpuwattch/cacti/bank.cc	/^double Bank::compute_delays(double inrisetime)$/;"	f	class:Bank	typeref:typename:double
compute_delays	gpuwattch/cacti/decoder.cc	/^double Decoder::compute_delays(double inrisetime)$/;"	f	class:Decoder	typeref:typename:double
compute_delays	gpuwattch/cacti/decoder.cc	/^double Predec::compute_delays(double inrisetime)$/;"	f	class:Predec	typeref:typename:double
compute_delays	gpuwattch/cacti/decoder.cc	/^pair<double, double> PredecBlk::compute_delays($/;"	f	class:PredecBlk	typeref:typename:pair<double,double>
compute_delays	gpuwattch/cacti/decoder.cc	/^pair<double, double> PredecBlkDrv::compute_delays($/;"	f	class:PredecBlkDrv	typeref:typename:pair<double,double>
compute_delays	gpuwattch/cacti/mat.cc	/^double Mat::compute_delays(double inrisetime)$/;"	f	class:Mat	typeref:typename:double
compute_delays	gpuwattch/cacti/uca.cc	/^double UCA::compute_delays(double inrisetime)$/;"	f	class:UCA	typeref:typename:double
compute_diffusion_width	gpuwattch/cacti/component.cc	/^double Component::compute_diffusion_width(int num_stacked_in, int num_folded_tr)$/;"	f	class:Component	typeref:typename:double
compute_gate_area	gpuwattch/cacti/component.cc	/^double Component::compute_gate_area($/;"	f	class:Component	typeref:typename:double
compute_power	gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::compute_power() {$/;"	f	class:MCPAT_Arbiter	typeref:typename:void
compute_power	gpuwattch/cacti/crossbar.cc	/^void Crossbar::compute_power()$/;"	f	class:Crossbar	typeref:typename:void
compute_power	gpuwattch/cacti/highradix.cc	/^HighRadix::compute_power()$/;"	f	class:HighRadix	typeref:typename:void
compute_power_energy	gpuwattch/cacti/bank.cc	/^void Bank::compute_power_energy()$/;"	f	class:Bank	typeref:typename:void
compute_power_energy	gpuwattch/cacti/mat.cc	/^void Mat::compute_power_energy()$/;"	f	class:Mat	typeref:typename:void
compute_power_energy	gpuwattch/cacti/uca.cc	/^void UCA::compute_power_energy()$/;"	f	class:UCA	typeref:typename:void
compute_ready_warps	gpgpu-sim/shader.h	/^    std::vector< shd_warp_t* > compute_ready_warps;$/;"	m	class:scheduler_unit	typeref:typename:std::vector<shd_warp_t * >
compute_sa_delay	gpuwattch/cacti/mat.cc	/^double Mat::compute_sa_delay(double inrisetime)$/;"	f	class:Mat	typeref:typename:double
compute_stage_vector	gpuwattch/logic.cc	/^void Pipeline::compute_stage_vector()$/;"	f	class:Pipeline	typeref:typename:void
compute_subarray_out_drv	gpuwattch/cacti/mat.cc	/^double Mat::compute_subarray_out_drv(double inrisetime)$/;"	f	class:Mat	typeref:typename:double
compute_tr_width_after_folding	gpuwattch/cacti/component.cc	/^double Component::compute_tr_width_after_folding($/;"	f	class:Component	typeref:typename:double
compute_widths	gpuwattch/cacti/decoder.cc	/^void Decoder::compute_widths()$/;"	f	class:Decoder	typeref:typename:void
compute_widths	gpuwattch/cacti/decoder.cc	/^void Driver::compute_widths()$/;"	f	class:Driver	typeref:typename:void
compute_widths	gpuwattch/cacti/decoder.cc	/^void PredecBlk::compute_widths()$/;"	f	class:PredecBlk	typeref:typename:void
compute_widths	gpuwattch/cacti/decoder.cc	/^void PredecBlkDrv::compute_widths()$/;"	f	class:PredecBlkDrv	typeref:typename:void
concrete_scheduler	gpgpu-sim/shader.h	/^enum concrete_scheduler$/;"	g
concurrent_row_access	gpgpu-sim/mem_latency_stat.h	/^   unsigned int **concurrent_row_access; \/\/concurrent_row_access[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
concurrent_streams_empty	stream_manager.cc	/^bool stream_manager::concurrent_streams_empty()$/;"	f	class:stream_manager	typeref:typename:bool
config_assign_float	intersim2/config_utils.cpp	/^extern "C" void config_assign_float( char const * field, double value )$/;"	f	typeref:typename:void
config_assign_int	intersim2/config_utils.cpp	/^extern "C" void config_assign_int( char const * field, int value )$/;"	f	typeref:typename:void
config_assign_string	intersim2/config_utils.cpp	/^extern "C" void config_assign_string( char const * field, char const * value )$/;"	f	typeref:typename:void
config_error	intersim2/config_utils.cpp	/^extern "C" void config_error( char const * msg, int lineno )$/;"	f	typeref:typename:void
config_input	intersim2/config_utils.cpp	/^extern "C" int config_input(char * line, int max_size)$/;"	f	typeref:typename:int
config_str	trace.cc	/^    const char* config_str;$/;"	v	namespace:Trace	typeref:typename:const char *
conflict_check_power	gpuwattch/logic.cc	/^void dep_resource_conflict_check::conflict_check_power()$/;"	f	class:dep_resource_conflict_check	typeref:typename:void
conflicts	gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon6448b92c0208	typeref:typename:double
conflicts	gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
conflicts	gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon6448b92c0408	typeref:typename:double
conflicts	gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
conflicts	gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon6448b92c0808	typeref:typename:double
conflicts	gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon6448b92c0908	typeref:typename:double
conflicts	gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
conflicts	gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
connect_basic_blocks	cuda-sim/ptx_ir.cc	/^void function_info::connect_basic_blocks( ) \/\/iterate across m_basic_blocks of function, conne/;"	f	class:function_info	typeref:typename:void
connect_break_targets	cuda-sim/ptx_ir.cc	/^bool function_info::connect_break_targets() \/\/connecting break instructions with proper target/;"	f	class:function_info	typeref:typename:bool
const_coeff	gpuwattch/basic_components.h	/^    double const_coeff;$/;"	m	class:DRAMParam	typeref:typename:double
const_dynamic_power	gpuwattch/gpgpu_sim_wrapper.h	/^    double const_dynamic_power;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:double
const_iterator	cuda-sim/ptx_ir.h	/^   typedef std::vector<operand_info>::const_iterator const_iterator;$/;"	t	class:ptx_instruction	typeref:typename:std::vector<operand_info>::const_iterator
const_iterator_begin	cuda-sim/ptx_ir.h	/^   iterator const_iterator_begin() { return m_consts.begin();}$/;"	f	class:symbol_table	typeref:typename:iterator
const_iterator_end	cuda-sim/ptx_ir.h	/^   iterator const_iterator_end() { return m_consts.end();}$/;"	f	class:symbol_table	typeref:typename:iterator
const_space	abstract_hardware_model.h	/^   const_space,$/;"	e	enum:_memory_space_t
constant_cycle	gpgpu-sim/shader.cc	/^bool ldst_unit::constant_cycle( warp_inst_t &inst, mem_stage_stall_type &rc_fail, mem_stage_acce/;"	f	class:ldst_unit	typeref:typename:bool
cont_stats	gpuwattch/cacti/nuca.cc	/^int cont_stats[2 \/*l2 or l3*\/][5\/* cores *\/][ROUTER_TYPES][7 \/*banks*\/][8 \/* cycle time */;"	v	typeref:typename:int[2][5][][7][8]
contention	gpuwattch/cacti/nuca.h	/^    double contention;$/;"	m	class:nuca_org_t	typeref:typename:double
context_switches	gpuwattch/XML_Parse.h	/^	double context_switches;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
convert_to_ptxplus	abstract_hardware_model.h	/^    bool convert_to_ptxplus() const { return m_ptx_convert_to_ptxplus; }$/;"	f	class:gpgpu_functional_sim_config	typeref:typename:bool
coption	option_parser.cc	/^   char * coption;$/;"	m	class:testtype	typeref:typename:char *	file:
copy_arg_to_buffer	cuda-sim/ptx_ir.cc	/^arg_buffer_t copy_arg_to_buffer(ptx_thread_info * thread, operand_info actual_param_op, const sy/;"	f	typeref:typename:arg_buffer_t
copy_args_into_buffer_list	cuda-sim/ptx_ir.cc	/^void copy_args_into_buffer_list( const ptx_instruction * pI, $/;"	f	typeref:typename:void
copy_buffer_list_into_frame	cuda-sim/ptx_ir.cc	/^void copy_buffer_list_into_frame(ptx_thread_info * thread, arg_buffer_list_t &arg_values) $/;"	f	typeref:typename:void
copy_buffer_to_frame	cuda-sim/ptx_ir.cc	/^void copy_buffer_to_frame(ptx_thread_info * thread, const arg_buffer_t &a) $/;"	f	typeref:typename:void
core	gpuwattch/XML_Parse.h	/^	system_core core[64];$/;"	m	struct:__anon6448b92c1208	typeref:typename:system_core[64]
core	gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor	typeref:typename:Component
core_cache_stats	gpgpu-sim/power_stat.h	/^    class cache_stats core_cache_stats[NUM_STAT_IDX]; \/\/ Total core stats$/;"	m	struct:mem_power_stats_pod	typeref:class:cache_stats[]
core_clock_ratio	gpuwattch/XML_Parse.h	/^   double core_clock_ratio;\/\/ (2.0)$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
core_config	abstract_hardware_model.h	/^    core_config() $/;"	f	struct:core_config
core_config	abstract_hardware_model.h	/^struct core_config {$/;"	s
core_cycle	gpgpu-sim/shader.cc	/^void simt_core_cluster::core_cycle()$/;"	f	class:simt_core_cluster	typeref:typename:void
core_freq	gpgpu-sim/gpu-sim.h	/^    double core_freq;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
core_period	gpgpu-sim/gpu-sim.h	/^    double core_period;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
core_t	abstract_hardware_model.h	/^        core_t( gpgpu_sim *gpu, $/;"	f	class:core_t
core_t	abstract_hardware_model.h	/^class core_t {$/;"	c
core_tech_node	gpuwattch/XML_Parse.h	/^	double core_tech_node;$/;"	m	struct:__anon6448b92c1208	typeref:typename:double
core_time	gpgpu-sim/gpu-sim.h	/^   double core_time;$/;"	m	class:gpgpu_sim	typeref:typename:double
core_tx_density	gpuwattch/cacti/parameter.h	/^    double core_tx_density;$/;"	m	class:TechnologyParameter::ScalingFactor	typeref:typename:double
core_ty	gpuwattch/array.h	/^  enum Core_type core_ty;$/;"	m	class:ArrayST	typeref:enum:Core_type
core_ty	gpuwattch/basic_components.h	/^    enum Core_type  core_ty;$/;"	m	class:CoreDynParam	typeref:enum:Core_type
core_ty	gpuwattch/interconnect.h	/^    enum Core_type core_ty;$/;"	m	class:interconnect	typeref:enum:Core_type
core_ty	gpuwattch/logic.h	/^	enum  Core_type core_ty;$/;"	m	class:UndiffCore	typeref:enum:Core_type
core_ty	gpuwattch/logic.h	/^	enum Core_type core_ty;$/;"	m	class:inst_decoder	typeref:enum:Core_type
core_ty	gpuwattch/logic.h	/^	enum Core_type core_ty;$/;"	m	class:selection_logic	typeref:enum:Core_type
coredynp	gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:BranchPredictor	typeref:typename:CoreDynParam
coredynp	gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:EXECU	typeref:typename:CoreDynParam
coredynp	gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:InstFetchU	typeref:typename:CoreDynParam
coredynp	gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:LoadStoreU	typeref:typename:CoreDynParam
coredynp	gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:MemManU	typeref:typename:CoreDynParam
coredynp	gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:RENAMINGU	typeref:typename:CoreDynParam
coredynp	gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:RegFU	typeref:typename:CoreDynParam
coredynp	gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:SchedulerU	typeref:typename:CoreDynParam
coredynp	gpuwattch/core.h	/^    CoreDynParam  coredynp;$/;"	m	class:Core	typeref:typename:CoreDynParam
coredynp	gpuwattch/logic.h	/^	CoreDynParam  coredynp;$/;"	m	class:FunctionalUnit	typeref:typename:CoreDynParam
coredynp	gpuwattch/logic.h	/^	CoreDynParam  coredynp;$/;"	m	class:Pipeline	typeref:typename:CoreDynParam
coredynp	gpuwattch/logic.h	/^	CoreDynParam  coredynp;$/;"	m	class:UndiffCore	typeref:typename:CoreDynParam
coredynp	gpuwattch/logic.h	/^	CoreDynParam  coredynp;$/;"	m	class:dep_resource_conflict_check	typeref:typename:CoreDynParam
corepipe	gpuwattch/core.h	/^    Pipeline   * corepipe;$/;"	m	class:Core	typeref:typename:Pipeline *
cores	gpuwattch/cacti/cacti_interface.h	/^    int cores;$/;"	m	class:InputParameter	typeref:typename:int
cores	gpuwattch/processor.h	/^	vector<Core *> cores;$/;"	m	class:Processor	typeref:typename:vector<Core * >
cos_impl	cuda-sim/instructions.cc	/^void cos_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
cppinterfacetest	option_parser.cc	/^int cppinterfacetest(int argc, const char *argv[])$/;"	f	typeref:typename:int
cpx_arbassoc	gpuwattch/arch_const.h	/^const int cpx_arbassoc=1;$/;"	v	typeref:typename:const int
cpx_arbblocksize	gpuwattch/arch_const.h	/^const int cpx_arbblocksize=2;$/;"	v	typeref:typename:const int
cpx_arbsize	gpuwattch/arch_const.h	/^const int cpx_arbsize=128;$/;"	v	typeref:typename:const int
cpx_bufferassoc	gpuwattch/arch_const.h	/^const int cpx_bufferassoc=1;$/;"	v	typeref:typename:const int
cpx_bufferblocksize	gpuwattch/arch_const.h	/^const int cpx_bufferblocksize=32;$/;"	v	typeref:typename:const int
cpx_buffersize	gpuwattch/arch_const.h	/^const int cpx_buffersize=1024;$/;"	v	typeref:typename:const int
cpx_numarb	gpuwattch/arch_const.h	/^const int cpx_numarb=8;$/;"	v	typeref:typename:const int
cpx_numbuffer	gpuwattch/arch_const.h	/^const int cpx_numbuffer=8;$/;"	v	typeref:typename:const int
cpy_tid_to_reg	cuda-sim/ptx_sim.cc	/^void ptx_thread_info::cpy_tid_to_reg( dim3 tid )$/;"	f	class:ptx_thread_info	typeref:typename:void
createWarp	cuda-sim/cuda-sim.cc	/^void  functionalCoreSim::createWarp(unsigned warpId)$/;"	f	class:functionalCoreSim	typeref:typename:void
createXMLString	gpuwattch/xmlParser.cc	/^XMLSTR XMLNode::createXMLString(int nFormat, int *pnSize) const$/;"	f	class:XMLNode	typeref:typename:XMLSTR
createXMLTopNode	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::createXMLTopNode(XMLCSTR lpszName, char isDeclaration) { return XMLNode(NULL,st/;"	f	class:XMLNode	typeref:typename:XMLNode
createXMLTopNode_WOSD	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::createXMLTopNode_WOSD(XMLSTR lpszName, char isDeclaration) { return XMLNode(NUL/;"	f	class:XMLNode	typeref:typename:XMLNode
create_basic_blocks	cuda-sim/ptx_ir.cc	/^void function_info::create_basic_blocks()$/;"	f	class:function_info	typeref:typename:void
create_thread_CFlogger	gpgpu-sim/stat-tool.cc	/^void create_thread_CFlogger( int n_loggers, int n_threads, address_type start_pc, unsigned long /;"	f	typeref:typename:void
crossbar	gpuwattch/cacti/router.h	/^    Component arbiter, crossbar, buffer;$/;"	m	class:MCPAT_Router	typeref:typename:Component
crossbar_accesses	gpuwattch/XML_Parse.h	/^	double crossbar_accesses;$/;"	m	struct:__anon6448b92c0c08	typeref:typename:double
crossbar_ctrline	gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::crossbar_ctrline() {$/;"	f	class:MCPAT_Arbiter	typeref:typename:double
crossbar_ctrline	gpuwattch/cacti/router.cc	/^MCPAT_Router::crossbar_ctrline() {$/;"	f	class:MCPAT_Router	typeref:typename:double
crossbar_inpline	gpuwattch/cacti/router.cc	/^MCPAT_Router::crossbar_inpline() {$/;"	f	class:MCPAT_Router	typeref:typename:double
crossbar_outline	gpuwattch/cacti/router.cc	/^MCPAT_Router::crossbar_outline() {$/;"	f	class:MCPAT_Router	typeref:typename:double
crossbar_tot	gpuwattch/cacti/highradix.h	/^    Component wire_tot, buff_tot, crossbar_tot, arb_tot;$/;"	m	class:HighRadix	typeref:typename:Component
crossbar_type	gpuwattch/XML_Parse.h	/^	char crossbar_type[20];$/;"	m	struct:__anon6448b92c0d08	typeref:typename:char[20]
crosspoint_type	gpuwattch/XML_Parse.h	/^	char crosspoint_type[20];$/;"	m	struct:__anon6448b92c0d08	typeref:typename:char[20]
cta_to_warp_t	gpgpu-sim/shader.h	/^   typedef std::map<unsigned, warp_set_t >  cta_to_warp_t;$/;"	t	class:barrier_set_t	typeref:typename:std::map<unsigned,warp_set_t>
ctime	intersim2/flit.hpp	/^  int  ctime;$/;"	m	class:Flit	typeref:typename:int
ctrlBit	gpgpu-sim/warp_status.h	/^			unsigned char ctrlBit;$/;"	m	union:WST::table_entry::__anona6602e20010a	typeref:typename:unsigned char
cu_sets_t	gpgpu-sim/shader.h	/^   typedef std::map<unsigned \/* collector set *\/, std::vector<collector_unit_t> \/*collector s/;"	t	class:opndcoll_rfu_t	typeref:typename:std::map<unsigned,std::vector<collector_unit_t>>
cudaAddressModeClamp	abstract_hardware_model.h	/^   cudaAddressModeClamp$/;"	e	enum:cudaTextureAddressMode
cudaAddressModeWrap	abstract_hardware_model.h	/^   cudaAddressModeWrap,$/;"	e	enum:cudaTextureAddressMode
cudaArray	abstract_hardware_model.h	/^struct cudaArray {$/;"	s
cudaChannelFormatDesc	abstract_hardware_model.h	/^struct cudaChannelFormatDesc {$/;"	s
cudaChannelFormatKind	abstract_hardware_model.h	/^enum cudaChannelFormatKind {$/;"	g
cudaChannelFormatKindFloat	abstract_hardware_model.h	/^   cudaChannelFormatKindFloat$/;"	e	enum:cudaChannelFormatKind
cudaChannelFormatKindSigned	abstract_hardware_model.h	/^   cudaChannelFormatKindSigned,$/;"	e	enum:cudaChannelFormatKind
cudaChannelFormatKindUnsigned	abstract_hardware_model.h	/^   cudaChannelFormatKindUnsigned,$/;"	e	enum:cudaChannelFormatKind
cudaFilterModeLinear	abstract_hardware_model.h	/^   cudaFilterModeLinear$/;"	e	enum:cudaTextureFilterMode
cudaFilterModePoint	abstract_hardware_model.h	/^   cudaFilterModePoint,$/;"	e	enum:cudaTextureFilterMode
cudaReadModeElementType	abstract_hardware_model.h	/^   cudaReadModeElementType,$/;"	e	enum:cudaTextureReadMode
cudaReadModeNormalizedFloat	abstract_hardware_model.h	/^   cudaReadModeNormalizedFloat$/;"	e	enum:cudaTextureReadMode
cudaTextureAddressMode	abstract_hardware_model.h	/^enum cudaTextureAddressMode {$/;"	g
cudaTextureFilterMode	abstract_hardware_model.h	/^enum cudaTextureFilterMode {$/;"	g
cudaTextureReadMode	abstract_hardware_model.h	/^enum cudaTextureReadMode {$/;"	g
cuda_math	cuda-sim/cuda-math.h	/^namespace cuda_math {$/;"	n
curr_row	gpgpu-sim/dram.h	/^   unsigned int curr_row;$/;"	m	struct:bank_t	typeref:typename:unsigned int
curr_row_service_time	gpgpu-sim/dram_sched.h	/^   unsigned *curr_row_service_time; \/\/one set of variables for each bank.$/;"	m	class:frfcfs_scheduler	typeref:typename:unsigned *
cut_through	intersim2/routers/chaos_router.hpp	/^    cut_through,   \/\/    >***>$/;"	e	enum:ChaosRouter::eQState
cvt_impl	cuda-sim/instructions.cc	/^void cvt_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
cvta_impl	cuda-sim/instructions.cc	/^void cvta_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
cycle	gpgpu-sim/dram.cc	/^void dram_t::cycle()$/;"	f	class:dram_t	typeref:typename:void
cycle	gpgpu-sim/gpu-cache.cc	/^void baseline_cache::cycle(){$/;"	f	class:baseline_cache	typeref:typename:void
cycle	gpgpu-sim/gpu-cache.cc	/^void tex_cache::cycle(){$/;"	f	class:tex_cache	typeref:typename:void
cycle	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::cycle()$/;"	f	class:gpgpu_sim	typeref:typename:void
cycle	gpgpu-sim/shader.cc	/^void ldst_unit::cycle()$/;"	f	class:ldst_unit	typeref:typename:void
cycle	gpgpu-sim/shader.cc	/^void pipelined_simd_unit::cycle()$/;"	f	class:pipelined_simd_unit	typeref:typename:void
cycle	gpgpu-sim/shader.cc	/^void scheduler_unit::cycle()$/;"	f	class:scheduler_unit	typeref:typename:void
cycle	gpgpu-sim/shader.cc	/^void shader_core_ctx::cycle()$/;"	f	class:shader_core_ctx	typeref:typename:void
cycle	intersim2/power/buffer_monitor.cpp	/^void BufferMonitor::cycle() {$/;"	f	class:BufferMonitor	typeref:typename:void
cycle	intersim2/power/switch_monitor.cpp	/^void SwitchMonitor::cycle() {$/;"	f	class:SwitchMonitor	typeref:typename:void
cycle_time	gpuwattch/cacti/Ucache.h	/^  double cycle_time;$/;"	m	struct:solution	typeref:typename:double
cycle_time	gpuwattch/cacti/cacti_interface.h	/^    double cycle_time;$/;"	m	class:uca_org_t	typeref:typename:double
cycle_time	gpuwattch/cacti/cacti_interface.h	/^  double cycle_time;$/;"	m	class:mem_array	typeref:typename:double
cycle_time	gpuwattch/cacti/cacti_interface.h	/^  double cycle_time;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
cycle_time	gpuwattch/cacti/component.h	/^    double cycle_time;$/;"	m	class:Component	typeref:typename:double
cycle_time	gpuwattch/cacti/router.h	/^    double cycle_time, max_cyc;$/;"	m	class:MCPAT_Router	typeref:typename:double
cycle_time_dev	gpuwattch/cacti/cacti_interface.h	/^        cycle_time_dev, area_dev;$/;"	m	class:InputParameter	typeref:typename:int
cycle_time_dev_nuca	gpuwattch/cacti/cacti_interface.h	/^        cycle_time_dev_nuca, area_dev_nuca;$/;"	m	class:InputParameter	typeref:typename:int
cycle_time_wt	gpuwattch/cacti/cacti_interface.h	/^        cycle_time_wt, area_wt;$/;"	m	class:InputParameter	typeref:typename:int
cycle_time_wt_nuca	gpuwattch/cacti/cacti_interface.h	/^        cycle_time_wt_nuca, area_wt_nuca;$/;"	m	class:InputParameter	typeref:typename:int
cycles	abstract_hardware_model.h	/^    unsigned cycles; \/\/ used for implementing initiation interval delay$/;"	m	class:warp_inst_t	typeref:typename:unsigned
cycles	intersim2/vc.hpp	/^    int cycles;$/;"	m	struct:VC::state_info_t	typeref:typename:int
d	gpuwattch/xmlParser.h	/^      XMLNodeData *d;$/;"	m	struct:XMLNode	typeref:typename:XMLNodeData *
d2d	cuda-sim/instructions.cc	/^ptx_reg_t d2d( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mo/;"	f	typeref:typename:ptx_reg_t
d2x	cuda-sim/instructions.cc	/^ptx_reg_t d2x( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mo/;"	f	typeref:typename:ptx_reg_t
data	gpgpu-sim/dram.h	/^   class mem_fetch * data;$/;"	m	class:dram_req_t	typeref:class:mem_fetch *
data	intersim2/flit.hpp	/^  void* data ;$/;"	m	class:Flit	typeref:typename:void *
dataBusWidth	gpuwattch/basic_components.h	/^    int	   llcBlockSize, dataBusWidth, addressBusWidth;$/;"	m	class:MCParam	typeref:typename:int
data_arr	gpuwattch/cacti/Ucache.h	/^  list<mem_array *> data_arr;$/;"	m	struct:calc_time_mt_wrapper_struct	typeref:typename:list<mem_array * >
data_arr_peri_global_tech_type	gpuwattch/cacti/cacti_interface.h	/^    unsigned int data_arr_peri_global_tech_type;$/;"	m	class:InputParameter	typeref:typename:unsigned int
data_arr_ram_cell_tech_type	gpuwattch/cacti/cacti_interface.h	/^    unsigned int data_arr_ram_cell_tech_type;$/;"	m	class:InputParameter	typeref:typename:unsigned int
data_array	gpuwattch/cacti/cacti_interface.h	/^    results_mem_array data_array;$/;"	m	class:uca_org_t	typeref:typename:results_mem_array
data_array2	gpuwattch/cacti/cacti_interface.h	/^    mem_array * data_array2;$/;"	m	class:uca_org_t	typeref:typename:mem_array *
data_array_index	gpuwattch/cacti/Ucache.h	/^  int    data_array_index;$/;"	m	struct:solution	typeref:typename:int
data_array_iter	gpuwattch/cacti/Ucache.h	/^  list<mem_array *>::iterator data_array_iter;$/;"	m	struct:solution	typeref:typename:list<mem_array * >::iterator
data_assoc	gpuwattch/cacti/cacti_interface.h	/^    unsigned int data_assoc;$/;"	m	class:InputParameter	typeref:typename:unsigned int
data_block	gpgpu-sim/gpu-cache.h	/^        data_block() { m_valid = false;}$/;"	f	struct:tex_cache::data_block
data_block	gpgpu-sim/gpu-cache.h	/^    struct data_block {$/;"	s	class:tex_cache
data_cache	gpgpu-sim/gpu-cache.h	/^    data_cache( const char *name, cache_config &config,$/;"	f	class:data_cache
data_cache	gpgpu-sim/gpu-cache.h	/^    data_cache( const char *name,$/;"	f	class:data_cache
data_cache	gpgpu-sim/gpu-cache.h	/^class data_cache : public baseline_cache {$/;"	c
data_collection	gpgpu-sim/dram_sched.cc	/^void frfcfs_scheduler::data_collection(unsigned int bank)$/;"	f	class:frfcfs_scheduler	typeref:typename:void
data_command_freq_ratio	gpgpu-sim/gpu-sim.h	/^   unsigned data_command_freq_ratio; \/\/ frequency ratio between DRAM data bus and command bus /;"	m	struct:memory_config	typeref:typename:unsigned
data_in_bits	gpuwattch/cacti/htree2.h	/^    int add_bits, data_in_bits,search_data_in_bits,data_out_bits,  search_data_out_bits;$/;"	m	class:Htree2	typeref:typename:int
data_num_c_subarray	gpuwattch/cacti/parameter.h	/^    int data_num_c_subarray;$/;"	m	class:DynamicParameter	typeref:typename:int
data_num_r_subarray	gpuwattch/cacti/parameter.h	/^    int data_num_r_subarray;$/;"	m	class:DynamicParameter	typeref:typename:int
data_out_bits	gpuwattch/cacti/htree2.h	/^    int add_bits, data_in_bits,search_data_in_bits,data_out_bits,  search_data_out_bits;$/;"	m	class:Htree2	typeref:typename:int
data_port_busy_cycles	gpgpu-sim/gpu-cache.h	/^    unsigned long long data_port_busy_cycles; $/;"	m	struct:cache_sub_stats	typeref:typename:unsigned long long
data_port_free	gpgpu-sim/gpu-cache.cc	/^bool baseline_cache::bandwidth_management::data_port_free() const$/;"	f	class:baseline_cache::bandwidth_management	typeref:typename:bool
data_port_free	gpgpu-sim/gpu-cache.h	/^    bool data_port_free() const { return m_bandwidth_management.data_port_free(); } $/;"	f	class:baseline_cache	typeref:typename:bool
data_port_free	gpgpu-sim/gpu-cache.h	/^    bool data_port_free() const { return true; }$/;"	f	class:tex_cache	typeref:typename:bool
data_res	gpuwattch/cacti/Ucache.h	/^  min_values_t * data_res;$/;"	m	struct:calc_time_mt_wrapper_struct	typeref:typename:min_values_t *
data_size	abstract_hardware_model.h	/^    unsigned data_size; \/\/ what is the size of the word being operated on?$/;"	m	class:inst_t	typeref:typename:unsigned
data_width	gpuwattch/arch_const.h	/^const int data_width			=	64;$/;"	v	typeref:typename:const int
data_width	gpuwattch/interconnect.h	/^    int data_width;$/;"	m	class:interconnect	typeref:typename:int
databus_width	gpuwattch/XML_Parse.h	/^	int databus_width;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:int
datasheet_operating_clock	gpuwattch/basic_components.h	/^	int datasheet_operating_clock; \/\/ this is specified by DATA SHEET. This is NOT the actual DRA/;"	m	class:DRAMParam	typeref:typename:int
datasheet_vdd	gpuwattch/basic_components.h	/^	double datasheet_vdd;$/;"	m	class:DRAMParam	typeref:typename:double
datatype2size	cuda-sim/cuda-sim.cc	/^static unsigned datatype2size( unsigned data_type )$/;"	f	typeref:typename:unsigned	file:
dbg	gpuwattch/cacti/makefile	/^dbg: $(TAR).mk obj_dbg$/;"	t
dbg	gpuwattch/makefile	/^dbg: $(TAR).mk obj_dbg$/;"	t
dc	gpuwattch/sharedcache.h	/^    DataCache dc;\/\/Shared cache$/;"	m	class:CCdir	typeref:typename:DataCache
dcache	gpuwattch/XML_Parse.h	/^	dcache_systemcore dcache;$/;"	m	struct:__anon6448b92c0708	typeref:typename:dcache_systemcore
dcache	gpuwattch/core.h	/^	DataCache dcache;$/;"	m	class:LoadStoreU	typeref:typename:DataCache
dcache_config	gpuwattch/XML_Parse.h	/^	double dcache_config[20];$/;"	m	struct:__anon6448b92c0508	typeref:typename:double[20]
dcache_systemcore	gpuwattch/XML_Parse.h	/^} dcache_systemcore;$/;"	t	typeref:struct:__anon6448b92c0508
dcache_write_buffers	gpuwattch/arch_const.h	/^const int dcache_write_buffers=8;$/;"	v	typeref:typename:const int
dcacheassoc	gpuwattch/arch_const.h	/^const int dcacheassoc=4;$/;"	v	typeref:typename:const int
dcacheblocksize	gpuwattch/arch_const.h	/^const int dcacheblocksize=32;$/;"	v	typeref:typename:const int
dcachesize	gpuwattch/arch_const.h	/^const int dcachesize=32768;$/;"	v	typeref:typename:const int
deadlock_check	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::deadlock_check()$/;"	f	class:gpgpu_sim	typeref:typename:void
deallocate_barrier	gpgpu-sim/shader.cc	/^void barrier_set_t::deallocate_barrier( unsigned cta_id )$/;"	f	class:barrier_set_t	typeref:typename:void
dec	gpuwattch/cacti/decoder.h	/^  Decoder   * dec;$/;"	m	class:PredecBlkDrv	typeref:typename:Decoder *
dec	gpuwattch/cacti/decoder.h	/^  Decoder * dec;$/;"	m	class:PredecBlk	typeref:typename:Decoder *
dec_inst_in_pipeline	gpgpu-sim/shader.h	/^    void dec_inst_in_pipeline( unsigned warp_id ) { m_warp[warp_id].dec_inst_in_pipeline(); } \//;"	f	class:shader_core_ctx	typeref:typename:void
dec_inst_in_pipeline	gpgpu-sim/shader.h	/^    void dec_inst_in_pipeline() $/;"	f	class:shd_warp_t	typeref:typename:void
dec_n_atomic	gpgpu-sim/shader.h	/^    void dec_n_atomic(unsigned n) { m_n_atomic-=n; }$/;"	f	class:shd_warp_t	typeref:typename:void
dec_running	abstract_hardware_model.h	/^   void dec_running()$/;"	f	class:kernel_info_t	typeref:typename:void
dec_store_req	gpgpu-sim/shader.h	/^    void dec_store_req() $/;"	f	class:shd_warp_t	typeref:typename:void
decl_location	cuda-sim/ptx_ir.h	/^   const std::string &decl_location() const { return m_decl_location;} $/;"	f	class:symbol	typeref:typename:const std::string &
decode	gpgpu-sim/shader.cc	/^void shader_core_ctx::decode()$/;"	f	class:shader_core_ctx	typeref:typename:void
decode	gpuwattch/xmlParser.cc	/^unsigned char *XMLParserBase64Tool::decode(XMLCSTR data, int *outlen, XMLError *xe)$/;"	f	class:XMLParserBase64Tool	typeref:typename:unsigned char *
decode	gpuwattch/xmlParser.cc	/^unsigned char XMLParserBase64Tool::decode(XMLCSTR data, unsigned char *buf, int len, XMLError *x/;"	f	class:XMLParserBase64Tool	typeref:typename:unsigned char
decodeSize	gpuwattch/xmlParser.cc	/^unsigned int XMLParserBase64Tool::decodeSize(XMLCSTR data,XMLError *xe)$/;"	f	class:XMLParserBase64Tool	typeref:typename:unsigned int
decodeW	gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_de/;"	m	class:CoreDynParam	typeref:typename:int
decodeWidth	gpuwattch/arch_const.h	/^const int decodeWidth=8;$/;"	v	typeref:typename:const int
decode_space	cuda-sim/instructions.cc	/^void decode_space( memory_space_t &space, ptx_thread_info *thread, const operand_info &op, memor/;"	f	typeref:typename:void
decode_token	cuda-sim/ptx_parser.cc	/^const char *decode_token( int type )$/;"	f	typeref:typename:const char *
decode_width	gpuwattch/XML_Parse.h	/^	int decode_width;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
decoded_stream_buffer_size	gpuwattch/XML_Parse.h	/^	int decoded_stream_buffer_size;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
decrement_atomic_count	gpgpu-sim/shader.cc	/^void shader_core_ctx::decrement_atomic_count( unsigned wid, unsigned n )$/;"	f	class:shader_core_ctx	typeref:typename:void
deepCopy	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::deepCopy() const$/;"	f	class:XMLNode	typeref:typename:XMLNode
default	cuda-sim/Makefile	/^default: libgpgpu_ptx_sim.a $/;"	t
deg_bl_muxing	gpuwattch/cacti/cacti_interface.h	/^  int    deg_bl_muxing;$/;"	m	class:mem_array	typeref:typename:int
deg_bl_muxing	gpuwattch/cacti/cacti_interface.h	/^  int deg_bl_muxing;$/;"	m	struct:__anon592e3c280108	typeref:typename:int
deg_bl_muxing	gpuwattch/cacti/mat.h	/^    int      deg_bl_muxing;$/;"	m	class:Mat	typeref:typename:int
deg_bl_muxing	gpuwattch/cacti/parameter.h	/^    int deg_bl_muxing;$/;"	m	class:DynamicParameter	typeref:typename:int
deg_senseamp_muxing_non_associativity	gpuwattch/cacti/parameter.h	/^    int deg_senseamp_muxing_non_associativity;$/;"	m	class:DynamicParameter	typeref:typename:int
delay	gpuwattch/cacti/component.h	/^    double delay;$/;"	m	class:Component	typeref:typename:double
delay	gpuwattch/cacti/decoder.h	/^    double delay;$/;"	m	class:Decoder	typeref:typename:double
delay	gpuwattch/cacti/decoder.h	/^  double delay;$/;"	m	class:Driver	typeref:typename:double
delay_addr_din_horizontal_htree	gpuwattch/cacti/cacti_interface.h	/^  double delay_addr_din_horizontal_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_addr_din_vertical_htree	gpuwattch/cacti/cacti_interface.h	/^  double delay_addr_din_vertical_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_array_to_sa_mux_lev_1_decoder	gpuwattch/cacti/uca.h	/^    double delay_array_to_sa_mux_lev_1_decoder;$/;"	m	class:UCA	typeref:typename:double
delay_array_to_sa_mux_lev_2_decoder	gpuwattch/cacti/uca.h	/^    double delay_array_to_sa_mux_lev_2_decoder;$/;"	m	class:UCA	typeref:typename:double
delay_before_decoder	gpuwattch/cacti/mat.h	/^    double   delay_before_decoder;$/;"	m	class:Mat	typeref:typename:double
delay_before_subarray_output_driver	gpuwattch/cacti/cacti_interface.h	/^  double delay_before_subarray_output_driver;$/;"	m	class:mem_array	typeref:typename:double
delay_before_subarray_output_driver	gpuwattch/cacti/uca.h	/^    double delay_before_subarray_output_driver;$/;"	m	class:UCA	typeref:typename:double
delay_bit_mux_decoder	gpuwattch/cacti/cacti_interface.h	/^  double delay_bit_mux_decoder;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_bit_mux_predecode_driver_and_block	gpuwattch/cacti/cacti_interface.h	/^  double delay_bit_mux_predecode_driver_and_block;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_bitline	gpuwattch/cacti/mat.h	/^    double   delay_bitline;$/;"	m	class:Mat	typeref:typename:double
delay_bitlines	gpuwattch/cacti/cacti_interface.h	/^         delay_bitlines,$/;"	m	class:mem_array	typeref:typename:double
delay_bitlines	gpuwattch/cacti/cacti_interface.h	/^  double delay_bitlines;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_bl_restore	gpuwattch/cacti/mat.h	/^    double   delay_bl_restore;$/;"	m	class:Mat	typeref:typename:double
delay_cam	gpuwattch/cacti/mat.h	/^    double   delay_fa_tag, delay_cam;$/;"	m	class:Mat	typeref:typename:double
delay_cam_ml_reset	gpuwattch/cacti/mat.h	/^    double   delay_cam_ml_reset;$/;"	m	class:Mat	typeref:typename:double
delay_cam_sl_restore	gpuwattch/cacti/mat.h	/^    double   delay_cam_sl_restore;$/;"	m	class:Mat	typeref:typename:double
delay_comparator	gpuwattch/cacti/cacti_interface.h	/^         delay_comparator,$/;"	m	class:mem_array	typeref:typename:double
delay_comparator	gpuwattch/cacti/cacti_interface.h	/^  double delay_comparator;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_comparator	gpuwattch/cacti/mat.h	/^    double   delay_comparator;$/;"	m	class:Mat	typeref:typename:double
delay_crossbar	gpuwattch/cacti/cacti_interface.h	/^  double delay_crossbar;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_dev	gpuwattch/cacti/cacti_interface.h	/^    int delay_dev, dynamic_power_dev, leakage_power_dev,$/;"	m	class:InputParameter	typeref:typename:int
delay_dev_nuca	gpuwattch/cacti/cacti_interface.h	/^    int delay_dev_nuca, dynamic_power_dev_nuca, leakage_power_dev_nuca,$/;"	m	class:InputParameter	typeref:typename:int
delay_dout_horizontal_htree	gpuwattch/cacti/cacti_interface.h	/^  double delay_dout_horizontal_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_dout_htree	gpuwattch/cacti/cacti_interface.h	/^         delay_dout_htree,$/;"	m	class:mem_array	typeref:typename:double
delay_dout_vertical_htree	gpuwattch/cacti/cacti_interface.h	/^  double delay_dout_vertical_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_fa_ram_wl	gpuwattch/cacti/mat.h	/^    double   delay_fa_ram_wl;$/;"	m	class:Mat	typeref:typename:double
delay_fa_tag	gpuwattch/cacti/mat.h	/^    double   delay_fa_tag, delay_cam;$/;"	m	class:Mat	typeref:typename:double
delay_from_subarray_out_drv_to_out	gpuwattch/cacti/uca.h	/^    double delay_from_subarray_out_drv_to_out;$/;"	m	class:UCA	typeref:typename:double
delay_from_subarray_output_driver_to_output	gpuwattch/cacti/cacti_interface.h	/^  double delay_from_subarray_output_driver_to_output;$/;"	m	class:mem_array	typeref:typename:double
delay_hit_miss	gpuwattch/cacti/mat.h	/^    double   delay_hit_miss;$/;"	m	class:Mat	typeref:typename:double
delay_hit_miss_reset	gpuwattch/cacti/mat.h	/^    double   delay_hit_miss_reset;$/;"	m	class:Mat	typeref:typename:double
delay_input_htree	gpuwattch/cacti/cacti_interface.h	/^         delay_input_htree,$/;"	m	class:mem_array	typeref:typename:double
delay_input_htree	gpuwattch/cacti/cacti_interface.h	/^  double delay_input_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_inside_mat	gpuwattch/cacti/cacti_interface.h	/^  double delay_inside_mat;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_matchchline	gpuwattch/cacti/mat.h	/^    double   delay_matchchline;$/;"	m	class:Mat	typeref:typename:double
delay_matchlines	gpuwattch/cacti/cacti_interface.h	/^         delay_matchlines;$/;"	m	class:mem_array	typeref:typename:double
delay_nand2_path	gpuwattch/cacti/decoder.h	/^  double delay_nand2_path;$/;"	m	class:PredecBlk	typeref:typename:double
delay_nand2_path	gpuwattch/cacti/decoder.h	/^  double delay_nand2_path;$/;"	m	class:PredecBlkDrv	typeref:typename:double
delay_nand3_path	gpuwattch/cacti/decoder.h	/^  double delay_nand3_path;$/;"	m	class:PredecBlk	typeref:typename:double
delay_nand3_path	gpuwattch/cacti/decoder.h	/^  double delay_nand3_path;$/;"	m	class:PredecBlkDrv	typeref:typename:double
delay_optimal_wire	gpuwattch/cacti/wire.cc	/^void Wire::delay_optimal_wire ()$/;"	f	class:Wire	typeref:typename:void
delay_output_htree	gpuwattch/cacti/cacti_interface.h	/^  double delay_output_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_reply_network	gpuwattch/cacti/cacti_interface.h	/^  double delay_reply_network;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_request_network	gpuwattch/cacti/cacti_interface.h	/^  double delay_request_network;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_route_to_bank	gpuwattch/cacti/cacti_interface.h	/^  double delay_route_to_bank,$/;"	m	class:mem_array	typeref:typename:double
delay_route_to_bank	gpuwattch/cacti/cacti_interface.h	/^  double delay_route_to_bank;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_row_decoder	gpuwattch/cacti/cacti_interface.h	/^         delay_row_decoder,$/;"	m	class:mem_array	typeref:typename:double
delay_row_decoder	gpuwattch/cacti/cacti_interface.h	/^  double delay_row_decoder;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_row_predecode_driver_and_block	gpuwattch/cacti/cacti_interface.h	/^         delay_row_predecode_driver_and_block,$/;"	m	class:mem_array	typeref:typename:double
delay_row_predecode_driver_and_block	gpuwattch/cacti/cacti_interface.h	/^  double delay_row_predecode_driver_and_block;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_sa	gpuwattch/cacti/mat.h	/^    double   delay_sa;$/;"	m	class:Mat	typeref:typename:double
delay_searchline	gpuwattch/cacti/mat.h	/^    double   delay_searchline;$/;"	m	class:Mat	typeref:typename:double
delay_sense_amp	gpuwattch/cacti/cacti_interface.h	/^         delay_sense_amp,$/;"	m	class:mem_array	typeref:typename:double
delay_sense_amp	gpuwattch/cacti/cacti_interface.h	/^  double delay_sense_amp;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_senseamp_mux_decoder	gpuwattch/cacti/cacti_interface.h	/^  double delay_senseamp_mux_decoder;$/;"	m	class:mem_array	typeref:typename:double
delay_senseamp_mux_lev_1_decoder	gpuwattch/cacti/cacti_interface.h	/^  double delay_senseamp_mux_lev_1_decoder;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_senseamp_mux_lev_1_predecode_driver_and_block	gpuwattch/cacti/cacti_interface.h	/^  double delay_senseamp_mux_lev_1_predecode_driver_and_block;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_senseamp_mux_lev_2_decoder	gpuwattch/cacti/cacti_interface.h	/^  double delay_senseamp_mux_lev_2_decoder;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_senseamp_mux_lev_2_predecode_driver_and_block	gpuwattch/cacti/cacti_interface.h	/^  double delay_senseamp_mux_lev_2_predecode_driver_and_block;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_subarray_out_drv	gpuwattch/cacti/mat.h	/^    double   delay_subarray_out_drv;$/;"	m	class:Mat	typeref:typename:double
delay_subarray_out_drv_htree	gpuwattch/cacti/mat.h	/^    double   delay_subarray_out_drv_htree;$/;"	m	class:Mat	typeref:typename:double
delay_subarray_output_driver	gpuwattch/cacti/cacti_interface.h	/^         delay_subarray_output_driver,$/;"	m	class:mem_array	typeref:typename:double
delay_subarray_output_driver	gpuwattch/cacti/cacti_interface.h	/^  double delay_subarray_output_driver;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
delay_wl_reset	gpuwattch/cacti/mat.h	/^    double   delay_wl_reset;$/;"	m	class:Mat	typeref:typename:double
delay_writeback	gpuwattch/cacti/mat.h	/^    double   delay_writeback;$/;"	m	class:Mat	typeref:typename:double
delay_wt	gpuwattch/cacti/cacti_interface.h	/^    int delay_wt, dynamic_power_wt, leakage_power_wt,$/;"	m	class:InputParameter	typeref:typename:int
delay_wt_nuca	gpuwattch/cacti/cacti_interface.h	/^    int delay_wt_nuca, dynamic_power_wt_nuca, leakage_power_wt_nuca,$/;"	m	class:InputParameter	typeref:typename:int
deleteAttribute	gpuwattch/xmlParser.cc	/^void XMLNode::deleteAttribute(XMLAttribute *a){ if (a) deleteAttribute(a->lpszName); }$/;"	f	class:XMLNode	typeref:typename:void
deleteAttribute	gpuwattch/xmlParser.cc	/^void XMLNode::deleteAttribute(XMLCSTR lpszName)$/;"	f	class:XMLNode	typeref:typename:void
deleteAttribute	gpuwattch/xmlParser.cc	/^void XMLNode::deleteAttribute(int i)$/;"	f	class:XMLNode	typeref:typename:void
deleteClear	gpuwattch/xmlParser.cc	/^void XMLNode::deleteClear(XMLCSTR lpszValue) { deleteClear(indexClear(lpszValue)); }$/;"	f	class:XMLNode	typeref:typename:void
deleteClear	gpuwattch/xmlParser.cc	/^void XMLNode::deleteClear(XMLClear *a) { if (a) deleteClear(a->lpszValue); }$/;"	f	class:XMLNode	typeref:typename:void
deleteClear	gpuwattch/xmlParser.cc	/^void XMLNode::deleteClear(int i)$/;"	f	class:XMLNode	typeref:typename:void
deleteNodeContent	gpuwattch/xmlParser.cc	/^void XMLNode::deleteNodeContent()$/;"	f	class:XMLNode	typeref:typename:void
deleteSIMTStack	abstract_hardware_model.cc	/^void core_t::deleteSIMTStack()$/;"	f	class:core_t	typeref:typename:void
deleteText	gpuwattch/xmlParser.cc	/^void XMLNode::deleteText(XMLCSTR lpszValue) { deleteText(indexText(lpszValue)); }$/;"	f	class:XMLNode	typeref:typename:void
deleteText	gpuwattch/xmlParser.cc	/^void XMLNode::deleteText(int i)$/;"	f	class:XMLNode	typeref:typename:void
dep_resource_conflict_check	gpuwattch/logic.cc	/^dep_resource_conflict_check::dep_resource_conflict_check($/;"	f	class:dep_resource_conflict_check
dep_resource_conflict_check	gpuwattch/logic.h	/^class dep_resource_conflict_check : public Component{$/;"	c
depend	Makefile	/^depend:$/;"	t
depend	cuda-sim/Makefile	/^depend:$/;"	t
depend	gpgpu-sim/Makefile	/^depend:$/;"	t
depend	gpuwattch/cacti/cacti.mk	/^depend:$/;"	t
depend	gpuwattch/cacti/makefile	/^depend:$/;"	t
depend	gpuwattch/makefile	/^depend:$/;"	t
depend	gpuwattch/mcpat.mk	/^depend:$/;"	t
depthVC	intersim2/power/power_module.hpp	/^  double depthVC;$/;"	m	class:Power_Module	typeref:typename:double
desc	abstract_hardware_model.h	/^   struct cudaChannelFormatDesc desc;$/;"	m	struct:cudaArray	typeref:struct:cudaChannelFormatDesc
dest	intersim2/flit.hpp	/^  int  dest;$/;"	m	class:Flit	typeref:typename:int
dest	intersim2/traffic.cpp	/^int AsymmetricTrafficPattern::dest(int source)$/;"	f	class:AsymmetricTrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int BadPermDFlyTrafficPattern::dest(int source)$/;"	f	class:BadPermDFlyTrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int BadPermYarcTrafficPattern::dest(int source)$/;"	f	class:BadPermYarcTrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int BitCompTrafficPattern::dest(int source)$/;"	f	class:BitCompTrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int BitRevTrafficPattern::dest(int source)$/;"	f	class:BitRevTrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int DiagonalTrafficPattern::dest(int source)$/;"	f	class:DiagonalTrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int HotSpotTrafficPattern::dest(int source)$/;"	f	class:HotSpotTrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int NeighborTrafficPattern::dest(int source)$/;"	f	class:NeighborTrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int RandomPermutationTrafficPattern::dest(int source)$/;"	f	class:RandomPermutationTrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int ShuffleTrafficPattern::dest(int source)$/;"	f	class:ShuffleTrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int Taper64TrafficPattern::dest(int source)$/;"	f	class:Taper64TrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int TornadoTrafficPattern::dest(int source)$/;"	f	class:TornadoTrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int TransposeTrafficPattern::dest(int source)$/;"	f	class:TransposeTrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int UniformBackgroundTrafficPattern::dest(int source)$/;"	f	class:UniformBackgroundTrafficPattern	typeref:typename:int
dest	intersim2/traffic.cpp	/^int UniformRandomTrafficPattern::dest(int source)$/;"	f	class:UniformRandomTrafficPattern	typeref:typename:int
dest_tag_fly	intersim2/routefunc.cpp	/^void dest_tag_fly( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
destroy_stream	stream_manager.cc	/^void stream_manager::destroy_stream( CUstream_st *stream )$/;"	f	class:stream_manager	typeref:typename:void
destroy_thread_CFlogger	gpgpu-sim/stat-tool.cc	/^void destroy_thread_CFlogger( ) $/;"	f	typeref:typename:void
detachFromParent	gpuwattch/xmlParser.cc	/^int XMLNode::detachFromParent(XMLNodeData *d)$/;"	f	class:XMLNode	typeref:typename:int
detailed_dram_model	gpuwattch/basic_components.h	/^	int detailed_dram_model; \/\/ 1 - to use newly added DRAM model (GDDR5 only), 0 - use empirical/;"	m	class:DRAMParam	typeref:typename:int
detect_print_steady_state	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::detect_print_steady_state(int position, double init_val)$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
devPtr	abstract_hardware_model.h	/^   void *devPtr;$/;"	m	struct:cudaArray	typeref:typename:void *
devPtr32	abstract_hardware_model.h	/^   int devPtr32;$/;"	m	struct:cudaArray	typeref:typename:int
dev_type	gpuwattch/arch_const.h	/^const unsigned int 	dev_type		=	0;$/;"	v	typeref:typename:const unsigned int
deviceType	gpuwattch/cacti/arbiter.h	/^    TechnologyParameter::DeviceType *deviceType;$/;"	m	class:MCPAT_Arbiter	typeref:typename:TechnologyParameter::DeviceType *
deviceType	gpuwattch/cacti/crossbar.h	/^	TechnologyParameter::DeviceType *deviceType;$/;"	m	class:Crossbar	typeref:typename:TechnologyParameter::DeviceType *
deviceType	gpuwattch/cacti/highradix.h	/^    TechnologyParameter::DeviceType *deviceType;$/;"	m	class:HighRadix	typeref:typename:TechnologyParameter::DeviceType *
deviceType	gpuwattch/cacti/htree2.h	/^    TechnologyParameter::DeviceType *deviceType;$/;"	m	class:Htree2	typeref:typename:TechnologyParameter::DeviceType *
deviceType	gpuwattch/cacti/nuca.h	/^    TechnologyParameter::DeviceType *deviceType;$/;"	m	class:Nuca	typeref:typename:TechnologyParameter::DeviceType *
deviceType	gpuwattch/cacti/router.h	/^	TechnologyParameter::DeviceType *deviceType;$/;"	m	class:MCPAT_Router	typeref:typename:TechnologyParameter::DeviceType *
deviceType	gpuwattch/cacti/wire.h	/^    TechnologyParameter::DeviceType *deviceType;$/;"	m	class:Wire	typeref:typename:TechnologyParameter::DeviceType *
deviceType	gpuwattch/interconnect.h	/^    TechnologyParameter::DeviceType *deviceType;$/;"	m	class:interconnect	typeref:typename:TechnologyParameter::DeviceType *
device_clock	gpuwattch/XML_Parse.h	/^	int device_clock;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:int
device_ty	gpuwattch/array.h	/^  enum Device_ty device_ty;$/;"	m	class:ArrayST	typeref:enum:Device_ty
device_ty	gpuwattch/interconnect.h	/^	enum Device_ty device_ty;$/;"	m	class:interconnect	typeref:enum:Device_ty
device_ty	gpuwattch/logic.h	/^	enum Device_ty device_ty;$/;"	m	class:Pipeline	typeref:enum:Device_ty
device_ty	gpuwattch/logic.h	/^	enum Device_ty device_ty;$/;"	m	class:inst_decoder	typeref:enum:Device_ty
device_ty	gpuwattch/logic.h	/^	enum Device_ty device_ty;$/;"	m	class:selection_logic	typeref:enum:Device_ty
device_type	gpuwattch/XML_Parse.h	/^	int device_type;$/;"	m	struct:__anon6448b92c0808	typeref:typename:int
device_type	gpuwattch/XML_Parse.h	/^	int device_type;$/;"	m	struct:__anon6448b92c0908	typeref:typename:int
device_type	gpuwattch/XML_Parse.h	/^	int device_type;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:int
device_type	gpuwattch/XML_Parse.h	/^	int device_type;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:int
device_type	gpuwattch/XML_Parse.h	/^	int device_type;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
dfqassoc	gpuwattch/arch_const.h	/^const int dfqassoc=1;$/;"	v	typeref:typename:const int
dfqblocksize	gpuwattch/arch_const.h	/^const int dfqblocksize=16;$/;"	v	typeref:typename:const int
dfqsize	gpuwattch/arch_const.h	/^const int dfqsize=1024;$/;"	v	typeref:typename:const int
diff_cap	gpuwattch/cacti/router.cc	/^MCPAT_Router::diff_cap(double w, int type \/*0 for n-mos and 1 for p-mos*\/,$/;"	f	class:MCPAT_Router	typeref:typename:double
dim3	abstract_hardware_model.h	/^struct dim3 {$/;"	s
dim_order_bal_torus	intersim2/routefunc.cpp	/^void dim_order_bal_torus( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
dim_order_mesh	intersim2/routefunc.cpp	/^void dim_order_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool in/;"	f	typeref:typename:void
dim_order_ni_mesh	intersim2/routefunc.cpp	/^void dim_order_ni_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool/;"	f	typeref:typename:void
dim_order_ni_torus	intersim2/routefunc.cpp	/^void dim_order_ni_torus( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
dim_order_pni_mesh	intersim2/routefunc.cpp	/^void dim_order_pni_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, boo/;"	f	typeref:typename:void
dim_order_torus	intersim2/routefunc.cpp	/^void dim_order_torus( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
dimension	cuda-sim/ptx_ir.h	/^   unsigned dimension() const { return m_geom_spec;}$/;"	f	class:ptx_instruction	typeref:typename:unsigned
dimensions	abstract_hardware_model.h	/^   unsigned dimensions;$/;"	m	struct:cudaArray	typeref:typename:unsigned
dir_duty_cycle	gpuwattch/XML_Parse.h	/^	double dir_duty_cycle;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
dir_duty_cycle	gpuwattch/XML_Parse.h	/^	double dir_duty_cycle;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
dir_duty_cycle	gpuwattch/basic_components.h	/^    double duty_cycle, dir_duty_cycle;$/;"	m	class:CacheDynParam	typeref:typename:double
dir_overhead	gpuwattch/sharedcache.h	/^    double	   dir_overhead;$/;"	m	class:SharedCache	typeref:typename:double
dir_ty	gpuwattch/basic_components.h	/^	enum Dir_type    dir_ty;$/;"	m	class:CacheDynParam	typeref:enum:Dir_type
directive_statement	cuda-sim/ptx.y	/^directive_statement: variable_declaration SEMI_COLON$/;"	l
disabled	gpgpu-sim/gpu-cache.h	/^    bool disabled() const { return m_disabled;}$/;"	f	class:cache_config	typeref:typename:bool
dispatch	gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::collector_unit_t::dispatch()$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:void
dispatchWidth	gpuwattch/arch_const.h	/^const int dispatchWidth=8;$/;"	v	typeref:typename:const int
dispatch_delay	abstract_hardware_model.h	/^    bool dispatch_delay()$/;"	f	class:warp_inst_t	typeref:typename:bool
dispatch_ready_cu	gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::dispatch_ready_cu()$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
dispatch_unit_t	gpgpu-sim/shader.h	/^      dispatch_unit_t(std::vector<collector_unit_t>* cus) $/;"	f	class:opndcoll_rfu_t::dispatch_unit_t
dispatch_unit_t	gpgpu-sim/shader.h	/^   class dispatch_unit_t {$/;"	c	class:opndcoll_rfu_t
display	gpgpu-sim/gpu-cache.cc	/^void mshr_table::display( FILE *fp ) const{$/;"	f	class:mshr_table	typeref:typename:void
display	gpuwattch/cacti/parameter.cc	/^void TechnologyParameter::DeviceType::display(uint32_t indent)$/;"	f	class:TechnologyParameter::DeviceType	typeref:typename:void
display	gpuwattch/cacti/parameter.cc	/^void TechnologyParameter::InterconnectType::display(uint32_t indent)$/;"	f	class:TechnologyParameter::InterconnectType	typeref:typename:void
display	gpuwattch/cacti/parameter.cc	/^void TechnologyParameter::MemoryType::display(uint32_t indent)$/;"	f	class:TechnologyParameter::MemoryType	typeref:typename:void
display	gpuwattch/cacti/parameter.cc	/^void TechnologyParameter::ScalingFactor::display(uint32_t indent)$/;"	f	class:TechnologyParameter::ScalingFactor	typeref:typename:void
display	gpuwattch/cacti/parameter.cc	/^void TechnologyParameter::display(uint32_t indent)$/;"	f	class:TechnologyParameter	typeref:typename:void
display	intersim2/power/buffer_monitor.cpp	/^void BufferMonitor::display(ostream & os) const {$/;"	f	class:BufferMonitor	typeref:typename:void
display	intersim2/power/switch_monitor.cpp	/^void SwitchMonitor::display(ostream & os) const {$/;"	f	class:SwitchMonitor	typeref:typename:void
displayDeviceType	gpuwattch/processor.cc	/^void Processor::displayDeviceType(int device_type_, uint32_t indent)$/;"	f	class:Processor	typeref:typename:void
displayEnergy	gpuwattch/core.cc	/^void BranchPredictor::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:BranchPredictor	typeref:typename:void
displayEnergy	gpuwattch/core.cc	/^void Core::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:Core	typeref:typename:void
displayEnergy	gpuwattch/core.cc	/^void EXECU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:EXECU	typeref:typename:void
displayEnergy	gpuwattch/core.cc	/^void InstFetchU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:InstFetchU	typeref:typename:void
displayEnergy	gpuwattch/core.cc	/^void LoadStoreU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:LoadStoreU	typeref:typename:void
displayEnergy	gpuwattch/core.cc	/^void MemManU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:MemManU	typeref:typename:void
displayEnergy	gpuwattch/core.cc	/^void RENAMINGU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:RENAMINGU	typeref:typename:void
displayEnergy	gpuwattch/core.cc	/^void RegFU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:RegFU	typeref:typename:void
displayEnergy	gpuwattch/core.cc	/^void SchedulerU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:SchedulerU	typeref:typename:void
displayEnergy	gpuwattch/iocontrollers.cc	/^void FlashController::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:FlashController	typeref:typename:void
displayEnergy	gpuwattch/iocontrollers.cc	/^void NIUController::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:NIUController	typeref:typename:void
displayEnergy	gpuwattch/iocontrollers.cc	/^void PCIeController::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:PCIeController	typeref:typename:void
displayEnergy	gpuwattch/logic.cc	/^void FunctionalUnit::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:FunctionalUnit	typeref:typename:void
displayEnergy	gpuwattch/logic.cc	/^void UndiffCore::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:UndiffCore	typeref:typename:void
displayEnergy	gpuwattch/memoryctrl.cc	/^void MCFrontEnd::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:MCFrontEnd	typeref:typename:void
displayEnergy	gpuwattch/memoryctrl.cc	/^void MemoryController::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:MemoryController	typeref:typename:void
displayEnergy	gpuwattch/noc.cc	/^void NoC::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:NoC	typeref:typename:void
displayEnergy	gpuwattch/processor.cc	/^void Processor::displayEnergy(uint32_t indent, int plevel, bool is_tdp_parm)$/;"	f	class:Processor	typeref:typename:void
displayEnergy	gpuwattch/sharedcache.cc	/^void SharedCache::displayEnergy(uint32_t indent,bool is_tdp)$/;"	f	class:SharedCache	typeref:typename:void
displayInterconnectType	gpuwattch/processor.cc	/^void Processor::displayInterconnectType(int interconnect_type_, uint32_t indent)$/;"	f	class:Processor	typeref:typename:void
display_ip	gpuwattch/cacti/io.cc	/^InputParameter::display_ip()$/;"	f	class:InputParameter	typeref:typename:void
display_pipeline	gpgpu-sim/shader.cc	/^void shader_core_ctx::display_pipeline(FILE *fout, int print_mem, int mask ) const$/;"	f	class:shader_core_ctx	typeref:typename:void
display_pipeline	gpgpu-sim/shader.cc	/^void simt_core_cluster::display_pipeline( unsigned sid, FILE *fout, int print_mem, int mask )$/;"	f	class:simt_core_cluster	typeref:typename:void
display_simt_state	gpgpu-sim/shader.cc	/^void shader_core_ctx::display_simt_state(FILE *fout, int mask ) const$/;"	f	class:shader_core_ctx	typeref:typename:void
display_state	gpgpu-sim/gpu-cache.cc	/^void baseline_cache::display_state( FILE *fp ) const{$/;"	f	class:baseline_cache	typeref:typename:void
display_state	gpgpu-sim/gpu-cache.cc	/^void tex_cache::display_state( FILE *fp ) const$/;"	f	class:tex_cache	typeref:typename:void
div_impl	cuda-sim/instructions.cc	/^void div_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
divergence_support_t	abstract_hardware_model.h	/^enum divergence_support_t {$/;"	g
divider_multiplier	gpuwattch/XML_Parse.h	/^	char divider_multiplier[20];$/;"	m	struct:__anon6448b92c0708	typeref:typename:char[20]
do_atomic	abstract_hardware_model.cc	/^void warp_inst_t::do_atomic( const active_mask_t& access_mask,bool forceDo ) {$/;"	f	class:warp_inst_t	typeref:typename:void
do_atomic	abstract_hardware_model.cc	/^void warp_inst_t::do_atomic(bool forceDo) {$/;"	f	class:warp_inst_t	typeref:typename:void
do_atomic	gpgpu-sim/mem_fetch.cc	/^void mem_fetch::do_atomic()$/;"	f	class:mem_fetch	typeref:typename:void
do_on_warp_issued	gpgpu-sim/shader.cc	/^void scheduler_unit::do_on_warp_issued( unsigned warp_id,$/;"	f	class:scheduler_unit	typeref:typename:void
do_on_warp_issued	gpgpu-sim/shader.cc	/^void two_level_active_scheduler::do_on_warp_issued( unsigned warp_id,$/;"	f	class:two_level_active_scheduler	typeref:typename:void
do_operation	stream_manager.cc	/^void stream_operation::do_operation( gpgpu_sim *gpu )$/;"	f	class:stream_operation	typeref:typename:void
dom	cuda-sim/ptx_ir.h	/^   bool dom(const basic_block_t *B) {$/;"	f	struct:basic_block_t	typeref:typename:bool
domain_size	gpuwattch/XML_Parse.h	/^    int domain_size;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
dominator_ids	cuda-sim/ptx_ir.h	/^   std::set<int> dominator_ids;$/;"	m	struct:basic_block_t	typeref:typename:std::set<int>
done	abstract_hardware_model.h	/^   bool done() const $/;"	f	class:kernel_info_t	typeref:typename:bool
done	intersim2/trafficmanager.hpp	/^  enum eSimState { warming_up, running, draining, done };$/;"	e	enum:TrafficManager::eSimState
done	stream_manager.h	/^   bool done() const { return m_done; }$/;"	f	class:CUevent_st	typeref:typename:bool
done_adding_supervised_warps	gpgpu-sim/shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:gto_scheduler	typeref:typename:void
done_adding_supervised_warps	gpgpu-sim/shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:lrr_scheduler	typeref:typename:void
done_adding_supervised_warps	gpgpu-sim/shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:mascar_scheduler	typeref:typename:void
done_adding_supervised_warps	gpgpu-sim/shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:scheduler_unit	typeref:typename:void
done_adding_supervised_warps	gpgpu-sim/shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:swl_scheduler	typeref:typename:void
done_adding_supervised_warps	gpgpu-sim/shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:two_level_active_scheduler	typeref:typename:void
done_exit	gpgpu-sim/shader.h	/^    bool done_exit() const { return m_done_exit; }$/;"	f	class:shd_warp_t	typeref:typename:bool
donecycle	cuda-sim/ptx_sim.h	/^   unsigned donecycle() const { return m_cycle_done; }$/;"	f	class:ptx_thread_info	typeref:typename:unsigned
dor_cmesh	intersim2/networks/cmesh.cpp	/^void dor_cmesh( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
dor_next_mesh	intersim2/routefunc.cpp	/^int dor_next_mesh( int cur, int dest, bool descending )$/;"	f	typeref:typename:int
dor_next_torus	intersim2/routefunc.cpp	/^void dor_next_torus( int cur, int dest, int in_port,$/;"	f	typeref:typename:void
dor_no_express_cmesh	intersim2/networks/cmesh.cpp	/^void dor_no_express_cmesh( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
double_op_t	cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
dp	gpuwattch/cacti/bank.h	/^    const DynamicParameter & dp;$/;"	m	class:Bank	typeref:typename:const DynamicParameter &
dp	gpuwattch/cacti/mat.h	/^    const DynamicParameter & dp;$/;"	m	class:Mat	typeref:typename:const DynamicParameter &
dp	gpuwattch/cacti/subarray.h	/^    const DynamicParameter & dp;$/;"	m	class:Subarray	typeref:typename:const DynamicParameter &
dp	gpuwattch/cacti/uca.h	/^    DynamicParameter dp;$/;"	m	class:UCA	typeref:typename:DynamicParameter
dq_lat_table	gpgpu-sim/mem_latency_stat.h	/^   unsigned dq_lat_table[32];$/;"	m	class:memory_stats_t	typeref:typename:unsigned[32]
dqbytes	gpgpu-sim/dram.h	/^   unsigned int dqbytes;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
dqs_signal_width	gpuwattch/basic_components.h	/^	int dqs_signal_width; \/\/ in bits$/;"	m	class:DRAMParam	typeref:typename:int
dragonfly_port	intersim2/networks/dragonfly.cpp	/^int dragonfly_port(int rID, int source, int dest){$/;"	f	typeref:typename:int
dragonflynew_hopcnt	intersim2/networks/dragonfly.cpp	/^int dragonflynew_hopcnt(int src, int dest) $/;"	f	typeref:typename:int
drain_C_	gpuwattch/cacti/basic_circuit.cc	/^double drain_C_($/;"	f	typeref:typename:double
draining	intersim2/trafficmanager.hpp	/^  enum eSimState { warming_up, running, draining, done };$/;"	e	enum:TrafficManager::eSimState
dram	gpuwattch/cacti/parameter.h	/^  MemoryType dram;$/;"	m	class:TechnologyParameter	typeref:typename:MemoryType
dram	gpuwattch/memoryctrl.h	/^    DRAM * dram;$/;"	m	class:MemoryController	typeref:typename:DRAM *
dram_L2_queue_full	gpgpu-sim/l2cache.cc	/^bool memory_sub_partition::dram_L2_queue_full() const$/;"	f	class:memory_sub_partition	typeref:typename:bool
dram_L2_queue_push	gpgpu-sim/l2cache.cc	/^void memory_sub_partition::dram_L2_queue_push( class mem_fetch* mf )$/;"	f	class:memory_sub_partition	typeref:typename:void
dram_acc	gpuwattch/cacti/parameter.h	/^  DeviceType dram_acc;    \/\/ DRAM access transistor$/;"	m	class:TechnologyParameter	typeref:typename:DeviceType
dram_act	gpuwattch/XML_Parse.h	/^	double dram_act;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_act_coeff	gpuwattch/XML_Parse.h	/^	double dram_act_coeff;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_activity	gpuwattch/XML_Parse.h	/^	double dram_activity;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_activity_coeff	gpuwattch/XML_Parse.h	/^	double dram_activity_coeff;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_array_availability	gpuwattch/cacti/cacti_interface.h	/^  double dram_array_availability;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
dram_atom_size	gpgpu-sim/gpu-sim.h	/^   unsigned dram_atom_size; \/\/ number of bytes transferred per read or write command $/;"	m	struct:memory_config	typeref:typename:unsigned
dram_callback_t	abstract_hardware_model.h	/^   dram_callback_t() { function=NULL; instruction=NULL; thread=NULL; }$/;"	f	struct:dram_callback_t
dram_callback_t	abstract_hardware_model.h	/^struct dram_callback_t {$/;"	s
dram_cell_C	gpuwattch/cacti/parameter.h	/^  double dram_cell_C;$/;"	m	class:TechnologyParameter	typeref:typename:double
dram_cell_I_off_worst_case_len_temp	gpuwattch/cacti/parameter.h	/^  double dram_cell_I_off_worst_case_len_temp;$/;"	m	class:TechnologyParameter	typeref:typename:double
dram_cell_I_on	gpuwattch/cacti/parameter.h	/^  double dram_cell_I_on;$/;"	m	class:TechnologyParameter	typeref:typename:double
dram_cell_Vdd	gpuwattch/cacti/parameter.h	/^  double dram_cell_Vdd;$/;"	m	class:TechnologyParameter	typeref:typename:double
dram_cell_tech_flavor	gpuwattch/cacti/const.h	/^const int dram_cell_tech_flavor = 3;$/;"	v	typeref:typename:const int
dram_cmd	gpuwattch/XML_Parse.h	/^	double dram_cmd;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_cmd_coeff	gpuwattch/XML_Parse.h	/^	double dram_cmd_coeff;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_const_coeff	gpuwattch/XML_Parse.h	/^	double dram_const_coeff;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_ctrl_t	gpgpu-sim/gpu-sim.h	/^enum dram_ctrl_t {$/;"	g
dram_cycle	gpgpu-sim/l2cache.cc	/^void memory_partition_unit::dram_cycle() $/;"	f	class:memory_partition_unit	typeref:typename:void
dram_delay_t	gpgpu-sim/l2cache.h	/^   struct dram_delay_t$/;"	s	class:memory_partition_unit
dram_eff_bins	gpgpu-sim/dram.h	/^   unsigned int dram_eff_bins[10];$/;"	m	class:dram_t	typeref:typename:unsigned int[10]
dram_freq	gpgpu-sim/gpu-sim.h	/^    double dram_freq;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
dram_latency	gpgpu-sim/gpu-sim.h	/^   unsigned dram_latency;$/;"	m	struct:memory_config	typeref:typename:unsigned
dram_log	gpgpu-sim/gpu-sim.cc	/^void dram_t::dram_log( int task ) $/;"	f	class:dram_t	typeref:typename:void
dram_nop	gpuwattch/XML_Parse.h	/^	double dram_nop;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_nop_coeff	gpuwattch/XML_Parse.h	/^	double dram_nop_coeff;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_num_cells_wl_stitching_	gpuwattch/cacti/const.h	/^const static uint32_t dram_num_cells_wl_stitching_ = 64;$/;"	v	typeref:typename:const uint32_t
dram_period	gpgpu-sim/gpu-sim.h	/^    double dram_period;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
dram_pre	gpuwattch/XML_Parse.h	/^	double dram_pre;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:double
dram_pre	gpuwattch/XML_Parse.h	/^	double dram_pre;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_pre_coeff	gpuwattch/XML_Parse.h	/^	double dram_pre_coeff;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_rd	gpuwattch/XML_Parse.h	/^	double dram_rd;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_rd_coeff	gpuwattch/XML_Parse.h	/^	double dram_rd_coeff;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_refresh_period	gpuwattch/cacti/cacti_interface.h	/^  double dram_refresh_period;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
dram_refresh_period	gpuwattch/cacti/parameter.h	/^    double dram_refresh_period;$/;"	m	class:DynamicParameter	typeref:typename:double
dram_req	gpuwattch/XML_Parse.h	/^	double dram_req;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_req_coeff	gpuwattch/XML_Parse.h	/^	double dram_req_coeff;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_req_t	gpgpu-sim/dram.cc	/^dram_req_t::dram_req_t( class mem_fetch *mf )$/;"	f	class:dram_req_t
dram_req_t	gpgpu-sim/dram.h	/^class dram_req_t {$/;"	c
dram_sched_h_INCLUDED	gpgpu-sim/dram_sched.h	/^#define dram_sched_h_INCLUDED$/;"	d
dram_t	gpgpu-sim/dram.cc	/^dram_t::dram_t( unsigned int partition_id, const struct memory_config *config, memory_stats_t *s/;"	f	class:dram_t
dram_t	gpgpu-sim/dram.h	/^class dram_t $/;"	c
dram_time	gpgpu-sim/gpu-sim.h	/^   double dram_time;$/;"	m	class:gpgpu_sim	typeref:typename:double
dram_traffic	cuda-sim/ptx-stats.cc	/^    unsigned long long dram_traffic;$/;"	m	class:ptx_file_line_stats	typeref:typename:unsigned long long	file:
dram_type	gpuwattch/memoryctrl.h	/^	enum Dram_type dram_type;$/;"	m	class:DRAM	typeref:enum:Dram_type
dram_util_bins	gpgpu-sim/dram.h	/^   unsigned int dram_util_bins[10];$/;"	m	class:dram_t	typeref:typename:unsigned int[10]
dram_wl	gpuwattch/cacti/parameter.h	/^  DeviceType dram_wl;     \/\/ DRAM wordline transistor$/;"	m	class:TechnologyParameter	typeref:typename:DeviceType
dram_wr	gpuwattch/XML_Parse.h	/^	double dram_wr;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dram_wr_coeff	gpuwattch/XML_Parse.h	/^	double dram_wr_coeff;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
dramp	gpuwattch/memoryctrl.h	/^    DRAMParam  dramp;$/;"	m	class:DRAM	typeref:typename:DRAMParam
driver_power	gpuwattch/cacti/decoder.h	/^    powerDef driver_power;$/;"	m	class:Predec	typeref:typename:powerDef
dropWhiteSpace	gpuwattch/xmlParser.cc	/^static char guessWideCharChars=1, dropWhiteSpace=1, removeCommentsInMiddleOfText=1;$/;"	v	typeref:typename:char	file:
drv1	gpuwattch/cacti/decoder.h	/^    PredecBlkDrv * drv1;$/;"	m	class:Predec	typeref:typename:PredecBlkDrv *
drv2	gpuwattch/cacti/decoder.h	/^    PredecBlkDrv * drv2;$/;"	m	class:Predec	typeref:typename:PredecBlkDrv *
dst	abstract_hardware_model.h	/^        int dst[MAX_REG_OPERANDS];$/;"	m	struct:inst_t::__anon0cb733cc0108	typeref:typename:int[]
dst	cuda-sim/ptx_ir.h	/^   const operand_info &dst() const $/;"	f	class:ptx_instruction	typeref:typename:const operand_info &
dst	cuda-sim/ptx_ir.h	/^   operand_info &dst() $/;"	f	class:ptx_instruction	typeref:typename:operand_info &
dst_vc	intersim2/routers/event_router.hpp	/^    int  dst_vc;$/;"	m	struct:EventRouter::tArrivalEvent	typeref:typename:int
dst_vc	intersim2/routers/event_router.hpp	/^    int  dst_vc;$/;"	m	struct:EventRouter::tTransportEvent	typeref:typename:int
dtlb	gpuwattch/XML_Parse.h	/^	dtlb_systemcore dtlb;$/;"	m	struct:__anon6448b92c0708	typeref:typename:dtlb_systemcore
dtlb	gpuwattch/core.h	/^	ArrayST * dtlb;$/;"	m	class:MemManU	typeref:typename:ArrayST *
dtlb_systemcore	gpuwattch/XML_Parse.h	/^} dtlb_systemcore;$/;"	t	typeref:struct:__anon6448b92c0408
dtlbassoc	gpuwattch/arch_const.h	/^const int dtlbassoc=0;\/\/fully$/;"	v	typeref:typename:const int
dtlbblocksize	gpuwattch/arch_const.h	/^const int dtlbblocksize=8;$/;"	v	typeref:typename:const int
dtlbsize	gpuwattch/arch_const.h	/^const int dtlbsize=512;$/;"	v	typeref:typename:const int
dual_pump	gpuwattch/XML_Parse.h	/^	int dual_pump;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int
dummy_way_sel_predec_blk1	gpuwattch/cacti/mat.h	/^    PredecBlk * dummy_way_sel_predec_blk1;$/;"	m	class:Mat	typeref:typename:PredecBlk *
dummy_way_sel_predec_blk2	gpuwattch/cacti/mat.h	/^    PredecBlk * dummy_way_sel_predec_blk2;$/;"	m	class:Mat	typeref:typename:PredecBlk *
dummy_way_sel_predec_blk_drv2	gpuwattch/cacti/mat.h	/^    PredecBlkDrv * dummy_way_sel_predec_blk_drv2;$/;"	m	class:Mat	typeref:typename:PredecBlkDrv *
dump	cuda-sim/ptx_ir.cc	/^void symbol_table::dump()$/;"	f	class:symbol_table	typeref:typename:void
dump	gpgpu-sim/shader.cc	/^void barrier_set_t::dump()$/;"	f	class:barrier_set_t	typeref:typename:void
dump	gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::collector_unit_t::dump(FILE *fp, const shader_core_ctx *shader ) const$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:void
dump	gpgpu-sim/shader.h	/^      void dump(FILE *fp) const $/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:void
dump	gpgpu-sim/shader.h	/^      void dump(FILE *fp) const {$/;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:void
dump	gpgpu-sim/shader.h	/^      void dump(FILE *fp) const$/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:void
dump	gpgpu-sim/shader.h	/^   void dump( FILE *fp ) const$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
dump	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::dump()$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
dump_callstack	cuda-sim/ptx_sim.cc	/^void ptx_thread_info::dump_callstack() const$/;"	f	class:ptx_thread_info	typeref:typename:void
dump_modifiedregs	cuda-sim/ptx_sim.cc	/^void ptx_thread_info::dump_modifiedregs(FILE *fp)$/;"	f	class:ptx_thread_info	typeref:typename:void
dump_pipeline	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::dump_pipeline( int mask, int s, int m ) const$/;"	f	class:gpgpu_sim	typeref:typename:void
dump_regs	cuda-sim/ptx_sim.cc	/^void ptx_thread_info::dump_regs( FILE *fp )$/;"	f	class:ptx_thread_info	typeref:typename:void
dump_warp_state	gpgpu-sim/gpu-sim.cc	/^void shader_core_ctx::dump_warp_state( FILE *fout ) const$/;"	f	class:shader_core_ctx	typeref:typename:void
duty_cycle	gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon6448b92c0808	typeref:typename:double
duty_cycle	gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon6448b92c0908	typeref:typename:double
duty_cycle	gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
duty_cycle	gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
duty_cycle	gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:double
duty_cycle	gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
duty_cycle	gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon6448b92c1008	typeref:typename:double
duty_cycle	gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon6448b92c1108	typeref:typename:double
duty_cycle	gpuwattch/basic_components.h	/^		   duty_cycle, chip_coverage, route_over_perc;$/;"	m	class:NoCParam	typeref:typename:double
duty_cycle	gpuwattch/basic_components.h	/^    double duty_cycle, dir_duty_cycle;$/;"	m	class:CacheDynParam	typeref:typename:double
duty_cycle	gpuwattch/basic_components.h	/^    double duty_cycle, perc_load;$/;"	m	class:NIUParam	typeref:typename:double
duty_cycle	gpuwattch/basic_components.h	/^    double duty_cycle, perc_load;$/;"	m	class:PCIeParam	typeref:typename:double
duty_cycle	gpuwattch/basic_components.h	/^    double frontend_duty_cycle, duty_cycle, perc_load;$/;"	m	class:MCParam	typeref:typename:double
dyn_power_before_scaling	gpuwattch/processor.h	/^		double dyn_power_before_scaling;$/;"	m	class:Processor	typeref:typename:double
dyn_read_energy_from_closed_page	gpuwattch/cacti/cacti_interface.h	/^  double dyn_read_energy_from_closed_page;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
dyn_read_energy_from_closed_page	gpuwattch/cacti/uca.h	/^    double dyn_read_energy_from_closed_page;$/;"	m	class:UCA	typeref:typename:double
dyn_read_energy_from_open_page	gpuwattch/cacti/cacti_interface.h	/^  double dyn_read_energy_from_open_page;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
dyn_read_energy_from_open_page	gpuwattch/cacti/uca.h	/^    double dyn_read_energy_from_open_page;$/;"	m	class:UCA	typeref:typename:double
dyn_read_energy_remaining_words_in_burst	gpuwattch/cacti/uca.h	/^    double dyn_read_energy_remaining_words_in_burst;$/;"	m	class:UCA	typeref:typename:double
dynamic	gpuwattch/cacti/cacti_interface.h	/^    double dynamic;$/;"	m	class:powerComponents	typeref:typename:double
dynamic_power_dev	gpuwattch/cacti/cacti_interface.h	/^    int delay_dev, dynamic_power_dev, leakage_power_dev,$/;"	m	class:InputParameter	typeref:typename:int
dynamic_power_dev_nuca	gpuwattch/cacti/cacti_interface.h	/^    int delay_dev_nuca, dynamic_power_dev_nuca, leakage_power_dev_nuca,$/;"	m	class:InputParameter	typeref:typename:int
dynamic_power_wt	gpuwattch/cacti/cacti_interface.h	/^    int delay_wt, dynamic_power_wt, leakage_power_wt,$/;"	m	class:InputParameter	typeref:typename:int
dynamic_power_wt_nuca	gpuwattch/cacti/cacti_interface.h	/^    int delay_wt_nuca, dynamic_power_wt_nuca, leakage_power_wt_nuca,$/;"	m	class:InputParameter	typeref:typename:int
dynamic_warp_id	abstract_hardware_model.h	/^    unsigned dynamic_warp_id() const $/;"	f	class:warp_inst_t	typeref:typename:unsigned
eAttribEquals	gpuwattch/xmlParser.cc	/^    eAttribEquals,$/;"	e	enum:Attrib	file:
eAttribName	gpuwattch/xmlParser.cc	/^    eAttribName = 0,$/;"	e	enum:Attrib	file:
eAttribValue	gpuwattch/xmlParser.cc	/^    eAttribValue$/;"	e	enum:Attrib	file:
eInsideTag	gpuwattch/xmlParser.cc	/^    eInsideTag = 0,$/;"	e	enum:Status	file:
eNextVCState	intersim2/routers/event_router.hpp	/^  enum eNextVCState { idle, busy, tail_pending };$/;"	g	class:EventNextVCState
eNodeAttribute	gpuwattch/xmlParser.h	/^    eNodeAttribute=1,$/;"	e	enum:XMLElementType
eNodeChild	gpuwattch/xmlParser.h	/^    eNodeChild=0,$/;"	e	enum:XMLElementType
eNodeClear	gpuwattch/xmlParser.h	/^    eNodeClear=3,$/;"	e	enum:XMLElementType
eNodeNULL	gpuwattch/xmlParser.h	/^    eNodeNULL=4$/;"	e	enum:XMLElementType
eNodeText	gpuwattch/xmlParser.h	/^    eNodeText=2,$/;"	e	enum:XMLElementType
eOutsideTag	gpuwattch/xmlParser.cc	/^    eOutsideTag$/;"	e	enum:Status	file:
ePrioType	intersim2/vc.hpp	/^  enum ePrioType { local_age_based, queue_length_based, hop_count_based, none, other };$/;"	g	class:VC
ePriority	intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_base/;"	g	class:TrafficManager
eQState	intersim2/routers/chaos_router.hpp	/^  enum eQState {$/;"	g	class:ChaosRouter
eSimState	intersim2/trafficmanager.hpp	/^  enum eSimState { warming_up, running, draining, done };$/;"	g	class:TrafficManager
eTokenClear	gpuwattch/xmlParser.cc	/^    eTokenClear,$/;"	e	enum:XMLTokenTypeTag	file:
eTokenCloseTag	gpuwattch/xmlParser.cc	/^    eTokenCloseTag,         \/* ">"            *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenDeclaration	gpuwattch/xmlParser.cc	/^    eTokenDeclaration,      \/* "<?"           *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenEquals	gpuwattch/xmlParser.cc	/^    eTokenEquals,           \/* "="            *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenError	gpuwattch/xmlParser.cc	/^    eTokenError$/;"	e	enum:XMLTokenTypeTag	file:
eTokenQuotedText	gpuwattch/xmlParser.cc	/^    eTokenQuotedText,$/;"	e	enum:XMLTokenTypeTag	file:
eTokenShortHandClose	gpuwattch/xmlParser.cc	/^    eTokenShortHandClose,   \/* "\/>"           *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenTagEnd	gpuwattch/xmlParser.cc	/^    eTokenTagEnd,           \/* "<\/"           *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenTagStart	gpuwattch/xmlParser.cc	/^    eTokenTagStart,         \/* "<"            *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenText	gpuwattch/xmlParser.cc	/^    eTokenText = 0,$/;"	e	enum:XMLTokenTypeTag	file:
eVCState	intersim2/vc.hpp	/^  enum eVCState { state_min = 0, idle = state_min, routing, vc_alloc, active, $/;"	g	class:VC
eXMLErrorBase64DataSizeIsNotMultipleOf4	gpuwattch/xmlParser.h	/^    eXMLErrorBase64DataSizeIsNotMultipleOf4,$/;"	e	enum:XMLError
eXMLErrorBase64DecodeBufferTooSmall	gpuwattch/xmlParser.h	/^    eXMLErrorBase64DecodeBufferTooSmall$/;"	e	enum:XMLError
eXMLErrorBase64DecodeIllegalCharacter	gpuwattch/xmlParser.h	/^    eXMLErrorBase64DecodeIllegalCharacter,$/;"	e	enum:XMLError
eXMLErrorBase64DecodeTruncatedData	gpuwattch/xmlParser.h	/^    eXMLErrorBase64DecodeTruncatedData,$/;"	e	enum:XMLError
eXMLErrorCannotOpenWriteFile	gpuwattch/xmlParser.h	/^    eXMLErrorCannotOpenWriteFile,$/;"	e	enum:XMLError
eXMLErrorCannotWriteFile	gpuwattch/xmlParser.h	/^    eXMLErrorCannotWriteFile,$/;"	e	enum:XMLError
eXMLErrorCharConversionError	gpuwattch/xmlParser.h	/^    eXMLErrorCharConversionError,$/;"	e	enum:XMLError
eXMLErrorCharacterCodeAbove255	gpuwattch/xmlParser.h	/^    eXMLErrorCharacterCodeAbove255,$/;"	e	enum:XMLError
eXMLErrorEmpty	gpuwattch/xmlParser.h	/^    eXMLErrorEmpty,$/;"	e	enum:XMLError
eXMLErrorFileNotFound	gpuwattch/xmlParser.h	/^    eXMLErrorFileNotFound,$/;"	e	enum:XMLError
eXMLErrorFirstTagNotFound	gpuwattch/xmlParser.h	/^    eXMLErrorFirstTagNotFound,$/;"	e	enum:XMLError
eXMLErrorMissingEndTag	gpuwattch/xmlParser.h	/^    eXMLErrorMissingEndTag,$/;"	e	enum:XMLError
eXMLErrorMissingEndTagName	gpuwattch/xmlParser.h	/^    eXMLErrorMissingEndTagName,$/;"	e	enum:XMLError
eXMLErrorMissingTagName	gpuwattch/xmlParser.h	/^    eXMLErrorMissingTagName,$/;"	e	enum:XMLError
eXMLErrorNoElements	gpuwattch/xmlParser.h	/^    eXMLErrorNoElements,$/;"	e	enum:XMLError
eXMLErrorNoXMLTagFound	gpuwattch/xmlParser.h	/^    eXMLErrorNoXMLTagFound,$/;"	e	enum:XMLError
eXMLErrorNone	gpuwattch/xmlParser.h	/^    eXMLErrorNone = 0,$/;"	e	enum:XMLError
eXMLErrorUnexpectedToken	gpuwattch/xmlParser.h	/^    eXMLErrorUnexpectedToken,$/;"	e	enum:XMLError
eXMLErrorUnknownCharacterEntity	gpuwattch/xmlParser.h	/^    eXMLErrorUnknownCharacterEntity,$/;"	e	enum:XMLError
eXMLErrorUnmatchedEndClearTag	gpuwattch/xmlParser.h	/^    eXMLErrorUnmatchedEndClearTag,$/;"	e	enum:XMLError
eXMLErrorUnmatchedEndTag	gpuwattch/xmlParser.h	/^    eXMLErrorUnmatchedEndTag,$/;"	e	enum:XMLError
e_clock	gpuwattch/logic.h	/^	powerDef e_clock;$/;"	m	class:DFFCell	typeref:typename:powerDef
e_keep_0	gpuwattch/logic.h	/^	powerDef e_keep_0;$/;"	m	class:DFFCell	typeref:typename:powerDef
e_keep_1	gpuwattch/logic.h	/^	powerDef e_keep_1;$/;"	m	class:DFFCell	typeref:typename:powerDef
e_switch	gpuwattch/logic.h	/^	powerDef e_switch;$/;"	m	class:DFFCell	typeref:typename:powerDef
ed	gpuwattch/cacti/cacti_interface.h	/^    int ed; \/\/ED or ED2 optimization$/;"	m	class:InputParameter	typeref:typename:int
efficiency	gpuwattch/cacti/Ucache.h	/^  double efficiency;$/;"	m	struct:solution	typeref:typename:double
effpower_coeff	gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> effpower_coeff;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:std::vector<double>
element_exist_stack	gpgpu-sim/stack.cc	/^int element_exist_stack(Stack *S, address_type value) {$/;"	f	typeref:typename:int
embedded	gpuwattch/arch_const.h	/^const bool			embedded		=	false; \/\/NEW$/;"	v	typeref:typename:const bool
embedded	gpuwattch/logic.h	/^	bool   opt_performance, embedded;$/;"	m	class:UndiffCore	typeref:typename:bool
empty	abstract_hardware_model.h	/^    bool empty() const { return m_empty; }$/;"	f	class:warp_inst_t	typeref:typename:bool
empty	gpgpu-sim/delayqueue.h	/^   bool empty() const { return m_head == NULL; }$/;"	f	class:fifo_pipeline	typeref:typename:bool
empty	gpgpu-sim/gpu-cache.h	/^        bool empty() const { return m_num == 0;}$/;"	f	class:tex_cache::fifo	typeref:typename:bool
empty	intersim2/routers/chaos_router.hpp	/^    empty,         \/\/            input avail$/;"	e	enum:ChaosRouter::eQState
empty	stream_manager.cc	/^bool CUstream_st::empty()$/;"	f	class:CUstream_st	typeref:typename:bool
empty	stream_manager.cc	/^bool stream_manager::empty()$/;"	f	class:stream_manager	typeref:typename:bool
emptyNode	gpuwattch/xmlParser.cc	/^XMLNode       XMLNode::emptyNode       (     )       { return XMLNode::emptyXMLNode; }$/;"	f	class:XMLNode	typeref:typename:XMLNode
emptyTheNode	gpuwattch/xmlParser.cc	/^void XMLNode::emptyTheNode(char force)$/;"	f	class:XMLNode	typeref:typename:void
emptyXMLAttribute	gpuwattch/xmlParser.cc	/^XMLAttribute XMLNode::emptyXMLAttribute={ NULL, NULL};$/;"	m	class:XMLNode	typeref:typename:XMLAttribute
emptyXMLAttribute	gpuwattch/xmlParser.h	/^    static XMLAttribute emptyXMLAttribute;$/;"	m	struct:XMLNode	typeref:typename:XMLAttribute
emptyXMLClear	gpuwattch/xmlParser.cc	/^XMLClear XMLNode::emptyXMLClear={ NULL, NULL, NULL};$/;"	m	class:XMLNode	typeref:typename:XMLClear
emptyXMLClear	gpuwattch/xmlParser.h	/^    static XMLClear emptyXMLClear;$/;"	m	struct:XMLNode	typeref:typename:XMLClear
emptyXMLNode	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::emptyXMLNode;$/;"	m	class:XMLNode	typeref:typename:XMLNode
emptyXMLNode	gpuwattch/xmlParser.h	/^    static XMLNode emptyXMLNode;$/;"	m	struct:XMLNode	typeref:typename:XMLNode
empty_protected	stream_manager.cc	/^bool stream_manager::empty_protected()$/;"	f	class:stream_manager	typeref:typename:bool
empty_stack	gpgpu-sim/stack.cc	/^int empty_stack(Stack *S) {$/;"	f	typeref:typename:int
enable_debug_trace	cuda-sim/ptx_sim.h	/^   void enable_debug_trace() { m_enable_debug_trace = true; }$/;"	f	class:ptx_thread_info	typeref:typename:void
enable_ptx_file_line_stats	cuda-sim/ptx-stats.cc	/^bool enable_ptx_file_line_stats;$/;"	v	typeref:typename:bool
enabled	trace.cc	/^    bool enabled = false;$/;"	v	namespace:Trace	typeref:typename:bool
encode	gpuwattch/xmlParser.cc	/^XMLSTR XMLParserBase64Tool::encode(unsigned char *inbuf, unsigned int inlen, char formatted)$/;"	f	class:XMLParserBase64Tool	typeref:typename:XMLSTR
encodeLength	gpuwattch/xmlParser.cc	/^int XMLParserBase64Tool::encodeLength(int inlen, char formatted)$/;"	f	class:XMLParserBase64Tool	typeref:typename:int
end_function	cuda-sim/ptx_parser.cc	/^void end_function() $/;"	f	typeref:typename:void
energy	gpuwattch/logic.h	/^	double energy, base_energy,per_access_energy, leakage, gate_leakage;$/;"	m	class:FunctionalUnit	typeref:typename:double
entry	abstract_hardware_model.h	/^   class function_info *entry() { return m_kernel_entry; }$/;"	c	class:kernel_info_t
entry	abstract_hardware_model.h	/^   const class function_info *entry() const { return m_kernel_entry; }$/;"	f	class:kernel_info_t	typeref:class:kernel_info_t::entry const class function_info *
entry_t	intersim2/arbiters/arbiter.hpp	/^  } entry_t ;$/;"	t	class:Arbiter	typeref:struct:Arbiter::__anond10b4dfb0108
enumContents	gpuwattch/xmlParser.cc	/^XMLNodeContents XMLNode::enumContents(int i) const$/;"	f	class:XMLNode	typeref:typename:XMLNodeContents
error	gpuwattch/xmlParser.cc	/^    enum XMLError          error;$/;"	m	struct:XML	typeref:enum:XMLError	file:
error	gpuwattch/xmlParser.h	/^    enum XMLError error;$/;"	m	struct:XMLResults	typeref:enum:XMLError
error_checking	gpuwattch/cacti/io.cc	/^bool InputParameter::error_checking()$/;"	f	class:InputParameter	typeref:typename:bool
etype	gpuwattch/xmlParser.h	/^    enum XMLElementType etype;$/;"	m	struct:XMLNodeContents	typeref:enum:XMLElementType
event_warp_issued	gpgpu-sim/shader.cc	/^void shader_core_stats::event_warp_issued( unsigned s_id, unsigned warp_id, unsigned num_issued,/;"	f	class:shader_core_stats	typeref:typename:void
ex2_impl	cuda-sim/instructions.cc	/^void ex2_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
exClockRate	gpuwattch/core.h	/^	double exClockRate;$/;"	m	class:Core	typeref:typename:double
exClockRate	gpuwattch/core.h	/^   double exClockRate; $/;"	m	class:RegFU	typeref:typename:double
exClockRate	gpuwattch/processor.h	/^    double exClockRate;$/;"	m	class:Processor	typeref:typename:double
exactMemory	gpuwattch/xmlParser.cc	/^void XMLNode::exactMemory(XMLNodeData *d)$/;"	f	class:XMLNode	typeref:typename:void
exec_count	cuda-sim/ptx-stats.cc	/^    unsigned long exec_count;$/;"	m	class:ptx_file_line_stats	typeref:typename:unsigned long	file:
execute	cuda-sim/cuda-sim.cc	/^void functionalCoreSim::execute()$/;"	f	class:functionalCoreSim	typeref:typename:void
execute	gpgpu-sim/shader.cc	/^void shader_core_ctx::execute()$/;"	f	class:shader_core_ctx	typeref:typename:void
executeWarp	cuda-sim/cuda-sim.cc	/^void functionalCoreSim::executeWarp(unsigned i, bool &allAtBarrier, bool & someOneLive)$/;"	f	class:functionalCoreSim	typeref:typename:void
execute_warp_inst_t	abstract_hardware_model.cc	/^void core_t::execute_warp_inst_t(warp_inst_t &inst, unsigned warpId)$/;"	f	class:core_t	typeref:typename:void
executed_kernel_info_string	gpgpu-sim/gpu-sim.cc	/^std::string gpgpu_sim::executed_kernel_info_string() $/;"	f	class:gpgpu_sim	typeref:typename:std::string
executionTime	gpuwattch/basic_components.h	/^	double clockRate,executionTime;$/;"	m	class:CacheDynParam	typeref:typename:double
executionTime	gpuwattch/basic_components.h	/^    double clockRate,executionTime;$/;"	m	class:CoreDynParam	typeref:typename:double
executionTime	gpuwattch/basic_components.h	/^    double executionTime, reads, writes;$/;"	m	class:MCParam	typeref:typename:double
executionTime	gpuwattch/basic_components.h	/^    double executionTime, total_access, link_throughput,link_latency,$/;"	m	class:NoCParam	typeref:typename:double
executionTime	gpuwattch/basic_components.h	/^    double executionTime;$/;"	m	class:DRAMParam	typeref:typename:double
executionTime	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:BranchPredictor	typeref:typename:double
executionTime	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:Core	typeref:typename:double
executionTime	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:EXECU	typeref:typename:double
executionTime	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:InstFetchU	typeref:typename:double
executionTime	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:LoadStoreU	typeref:typename:double
executionTime	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:MemManU	typeref:typename:double
executionTime	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:RENAMINGU	typeref:typename:double
executionTime	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:RegFU	typeref:typename:double
executionTime	gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:SchedulerU	typeref:typename:double
executionTime	gpuwattch/logic.h	/^	double clockRate,executionTime;$/;"	m	class:FunctionalUnit	typeref:typename:double
executionTime	gpuwattch/logic.h	/^	double clockRate,executionTime;$/;"	m	class:UndiffCore	typeref:typename:double
executionTime	gpuwattch/noc.h	/^	double executionTime;$/;"	m	class:NoC	typeref:typename:double
executionTime	gpuwattch/sharedcache.h	/^    double scktRatio, clockRate, executionTime;$/;"	m	class:CCdir	typeref:typename:double
executionTime	gpuwattch/sharedcache.h	/^    double scktRatio, executionTime;$/;"	m	class:SharedCache	typeref:typename:double
exeu	gpuwattch/core.h	/^    FunctionalUnit * exeu;$/;"	m	class:EXECU	typeref:typename:FunctionalUnit *
exist	gpuwattch/cacti/decoder.h	/^    bool   exist;$/;"	m	class:Decoder	typeref:typename:bool
exist	gpuwattch/cacti/decoder.h	/^  bool exist;$/;"	m	class:PredecBlk	typeref:typename:bool
exist	gpuwattch/core.h	/^	bool exist;$/;"	m	class:BranchPredictor	typeref:typename:bool
exist	gpuwattch/core.h	/^	bool exist;$/;"	m	class:EXECU	typeref:typename:bool
exist	gpuwattch/core.h	/^	bool exist;$/;"	m	class:InstFetchU	typeref:typename:bool
exist	gpuwattch/core.h	/^	bool exist;$/;"	m	class:LoadStoreU	typeref:typename:bool
exist	gpuwattch/core.h	/^	bool exist;$/;"	m	class:MemManU	typeref:typename:bool
exist	gpuwattch/core.h	/^	bool exist;$/;"	m	class:RENAMINGU	typeref:typename:bool
exist	gpuwattch/core.h	/^	bool exist;$/;"	m	class:RegFU	typeref:typename:bool
exist	gpuwattch/core.h	/^    bool exist;$/;"	m	class:SchedulerU	typeref:typename:bool
exist	gpuwattch/logic.h	/^	bool exist;$/;"	m	class:UndiffCore	typeref:typename:bool
exitCore	cuda-sim/ptx_sim.h	/^   void exitCore()$/;"	f	class:ptx_thread_info	typeref:typename:void
exit_impl	cuda-sim/instructions.cc	/^void exit_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
exit_parse_error	gpgpu-sim/gpu-cache.h	/^    void exit_parse_error()$/;"	f	class:cache_config	typeref:typename:void
exit_simulation	gpgpusim_entrypoint.cc	/^void exit_simulation()$/;"	f	typeref:typename:void
experimental_lib_support	abstract_hardware_model.h	/^    bool experimental_lib_support() const { return m_experimental_lib_support; }$/;"	f	class:gpgpu_functional_sim_config	typeref:typename:bool
exposed_latency	cuda-sim/ptx-stats.cc	/^    unsigned long long exposed_latency; \/\/ latency exposed as pipeline bubbles (attributed to /;"	m	class:ptx_file_line_stats	typeref:typename:unsigned long long	file:
extensions	cuda-sim/ptx_sim.h	/^      unsigned extensions() const { assert(m_valid); return m_ptx_extensions; }$/;"	f	class:ptx_version	typeref:typename:unsigned
extra_dq_write_signal_width	gpuwattch/basic_components.h	/^	int extra_dq_write_signal_width; \/\/in bits$/;"	m	class:DRAMParam	typeref:typename:int
extra_mf_fields	gpgpu-sim/gpu-cache.h	/^        extra_mf_fields( new_addr_type a, unsigned i, unsigned d ) $/;"	f	struct:baseline_cache::extra_mf_fields
extra_mf_fields	gpgpu-sim/gpu-cache.h	/^        extra_mf_fields( unsigned i ) $/;"	f	struct:tex_cache::extra_mf_fields
extra_mf_fields	gpgpu-sim/gpu-cache.h	/^        extra_mf_fields()  { m_valid = false;}$/;"	f	struct:baseline_cache::extra_mf_fields
extra_mf_fields	gpgpu-sim/gpu-cache.h	/^        extra_mf_fields()  { m_valid = false;}$/;"	f	struct:tex_cache::extra_mf_fields
extra_mf_fields	gpgpu-sim/gpu-cache.h	/^    struct extra_mf_fields {$/;"	s	class:baseline_cache
extra_mf_fields	gpgpu-sim/gpu-cache.h	/^    struct extra_mf_fields {$/;"	s	class:tex_cache
extra_mf_fields_lookup	gpgpu-sim/gpu-cache.h	/^    typedef std::map<mem_fetch*,extra_mf_fields> extra_mf_fields_lookup;$/;"	t	class:baseline_cache	typeref:typename:std::map<mem_fetch *,extra_mf_fields>
extra_mf_fields_lookup	gpgpu-sim/gpu-cache.h	/^    typedef std::map<mem_fetch*,extra_mf_fields> extra_mf_fields_lookup;$/;"	t	class:tex_cache	typeref:typename:std::map<mem_fetch *,extra_mf_fields>
exu	gpuwattch/core.h	/^	EXECU      * exu;$/;"	m	class:Core	typeref:typename:EXECU *
f	abstract_hardware_model.h	/^   enum cudaChannelFormatKind f;$/;"	m	struct:cudaChannelFormatDesc	typeref:enum:cudaChannelFormatKind
f16	cuda-sim/ptx_sim.h	/^   float             f16; $/;"	m	union:ptx_reg_t	typeref:typename:float
f2f	cuda-sim/instructions.cc	/^ptx_reg_t f2f( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mo/;"	f	typeref:typename:ptx_reg_t
f2x	cuda-sim/instructions.cc	/^ptx_reg_t f2x( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mo/;"	f	typeref:typename:ptx_reg_t
f32	cuda-sim/ptx_sim.h	/^   float          f32;$/;"	m	union:ptx_reg_t	typeref:typename:float
f64	cuda-sim/ptx_sim.h	/^   double            f64;$/;"	m	union:ptx_reg_t	typeref:typename:double
fCLK	intersim2/power/power_module.hpp	/^  double fCLK ;              $/;"	m	class:Power_Module	typeref:typename:double
fFRAT	gpuwattch/core.h	/^	ArrayST * fFRAT;$/;"	m	class:RENAMINGU	typeref:typename:ArrayST *
fRRAT	gpuwattch/core.h	/^	ArrayST * fRRAT;$/;"	m	class:RENAMINGU	typeref:typename:ArrayST *
factorial	gpuwattch/cacti/basic_circuit.cc	/^int factorial(int n, int m)$/;"	f	typeref:typename:int
fast_access	gpuwattch/cacti/cacti_interface.h	/^    bool     fast_access;$/;"	m	class:InputParameter	typeref:typename:bool
fattree_anca	intersim2/routefunc.cpp	/^void fattree_anca( const Router *r, const Flit *f,$/;"	f	typeref:typename:void
fattree_nca	intersim2/routefunc.cpp	/^void fattree_nca( const Router *r, const Flit *f,$/;"	f	typeref:typename:void
fcp	gpuwattch/iocontrollers.h	/^    MCParam  fcp;$/;"	m	class:FlashController	typeref:typename:MCParam
fdata	option_parser.cc	/^   float fdata;$/;"	m	class:testtype	typeref:typename:float	file:
fdcl	gpuwattch/core.h	/^	dep_resource_conflict_check * fdcl;$/;"	m	class:RENAMINGU	typeref:typename:dep_resource_conflict_check *
feature_not_implemented	cuda-sim/ptx_sim.cc	/^void feature_not_implemented( const char *f ) $/;"	f	typeref:typename:void
fetch	gpgpu-sim/shader.cc	/^void shader_core_ctx::fetch()$/;"	f	class:shader_core_ctx	typeref:typename:void
fetchW	gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_de/;"	m	class:CoreDynParam	typeref:typename:int
fetchWidth	gpuwattch/arch_const.h	/^const int fetchWidth=8;$/;"	v	typeref:typename:const int
fetch_unit_response_buffer_full	gpgpu-sim/shader.cc	/^bool shader_core_ctx::fetch_unit_response_buffer_full() const$/;"	f	class:shader_core_ctx	typeref:typename:bool
fetch_width	gpuwattch/XML_Parse.h	/^	int fetch_width;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
ffreeL	gpuwattch/core.h	/^	ArrayST * ffreeL;$/;"	m	class:RENAMINGU	typeref:typename:ArrayST *
fifo	gpgpu-sim/gpu-cache.h	/^        fifo( unsigned size ) $/;"	f	class:tex_cache::fifo
fifo	gpgpu-sim/gpu-cache.h	/^    template<class T> class fifo {$/;"	c	class:tex_cache
fifo_data	gpgpu-sim/delayqueue.h	/^struct fifo_data {$/;"	s
fifo_pipeline	gpgpu-sim/delayqueue.h	/^   fifo_pipeline(const char* nm, unsigned int minlen, unsigned int maxlen ) $/;"	f	class:fifo_pipeline
fifo_pipeline	gpgpu-sim/delayqueue.h	/^class fifo_pipeline {$/;"	c
fifo_pipeline	gpgpu-sim/dram.cc	/^template class fifo_pipeline<dram_req_t>;$/;"	v	typeref:typename:class
fifo_pipeline	gpgpu-sim/dram.cc	/^template class fifo_pipeline<mem_fetch>;$/;"	v	typeref:typename:class
file_n	gpuwattch/cacti/cacti_interface.h	/^    char file_n[100];$/;"	m	class:uca_org_t	typeref:typename:char[100]
file_name	intersim2/networks/anynet.hpp	/^  string file_name;$/;"	m	class:AnyNet	typeref:typename:string
fill	gpgpu-sim/gpu-cache.cc	/^void baseline_cache::fill(mem_fetch *mf, unsigned time){$/;"	f	class:baseline_cache	typeref:typename:void
fill	gpgpu-sim/gpu-cache.cc	/^void tag_array::fill( new_addr_type addr, unsigned time )$/;"	f	class:tag_array	typeref:typename:void
fill	gpgpu-sim/gpu-cache.cc	/^void tag_array::fill( unsigned index, unsigned time ) $/;"	f	class:tag_array	typeref:typename:void
fill	gpgpu-sim/gpu-cache.cc	/^void tex_cache::fill( mem_fetch *mf, unsigned time )$/;"	f	class:tex_cache	typeref:typename:void
fill	gpgpu-sim/gpu-cache.h	/^    void fill( unsigned time )$/;"	f	struct:cache_block_t	typeref:typename:void
fill	gpgpu-sim/shader.cc	/^void ldst_unit::fill( mem_fetch *mf )$/;"	f	class:ldst_unit	typeref:typename:void
fill_buffer_accesses	gpuwattch/XML_Parse.h	/^	double fill_buffer_accesses;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
fill_buffer_accesses	gpuwattch/XML_Parse.h	/^	double fill_buffer_accesses;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
fill_buffer_accesses	gpuwattch/XML_Parse.h	/^	double fill_buffer_accesses;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
fill_buffer_accesses	gpuwattch/XML_Parse.h	/^	double fill_buffer_accesses;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
fill_port_busy_cycles	gpgpu-sim/gpu-cache.h	/^    unsigned long long fill_port_busy_cycles; $/;"	m	struct:cache_sub_stats	typeref:typename:unsigned long long
fill_port_free	gpgpu-sim/gpu-cache.cc	/^bool baseline_cache::bandwidth_management::fill_port_free() const$/;"	f	class:baseline_cache::bandwidth_management	typeref:typename:bool
fill_port_free	gpgpu-sim/gpu-cache.h	/^    bool fill_port_free() const { return m_bandwidth_management.fill_port_free(); } $/;"	f	class:baseline_cache	typeref:typename:bool
fill_port_free	gpgpu-sim/gpu-cache.h	/^    bool fill_port_free() const { return true; }$/;"	f	class:tex_cache	typeref:typename:bool
filling	intersim2/routers/chaos_router.hpp	/^    filling,       \/\/    >**H    ready to send$/;"	e	enum:ChaosRouter::eQState
filterMode	abstract_hardware_model.h	/^   enum cudaTextureFilterMode    filterMode;$/;"	m	struct:textureReference	typeref:enum:cudaTextureFilterMode
filter_data_arr	gpuwattch/cacti/Ucache.cc	/^void filter_data_arr(list<mem_array *> & curr_list)$/;"	f	typeref:typename:void
filter_tag_arr	gpuwattch/cacti/Ucache.cc	/^void filter_tag_arr(const min_values_t * min, list<mem_array *> & list)$/;"	f	typeref:typename:void
final_dec	gpuwattch/logic.h	/^	Decoder * final_dec;$/;"	m	class:inst_decoder	typeref:typename:Decoder *
finalize	cuda-sim/cuda-sim.cc	/^void function_info::finalize( memory_space *param_mem ) $/;"	f	class:function_info	typeref:typename:void
findPosition	gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::findPosition(XMLNodeData *d, int index, XMLElementType xxtype)$/;"	f	class:XMLNode	typeref:typename:XMLElementPosition
find_area	gpuwattch/cacti/cacti_interface.cc	/^void uca_org_t::find_area()$/;"	f	class:uca_org_t	typeref:typename:void
find_break_target	cuda-sim/ptx_ir.cc	/^operand_info* function_info::find_break_target( ptx_instruction * p_break_insn ) \/\/find the ta/;"	f	class:function_info	typeref:typename:operand_info *
find_cyc	gpuwattch/cacti/cacti_interface.cc	/^void uca_org_t::find_cyc()$/;"	f	class:uca_org_t	typeref:typename:void
find_delay	gpuwattch/cacti/cacti_interface.cc	/^void uca_org_t::find_delay()$/;"	f	class:uca_org_t	typeref:typename:void
find_distance	intersim2/networks/flatfly_onchip.cpp	/^int find_distance (int src, int dest) {$/;"	f	typeref:typename:int
find_dominators	cuda-sim/ptx_ir.cc	/^void function_info::find_dominators( )$/;"	f	class:function_info	typeref:typename:void
find_energy	gpuwattch/cacti/cacti_interface.cc	/^void uca_org_t::find_energy()$/;"	f	class:uca_org_t	typeref:typename:void
find_idominators	cuda-sim/ptx_ir.cc	/^void function_info::find_idominators( )$/;"	f	class:function_info	typeref:typename:void
find_ipostdominators	cuda-sim/ptx_ir.cc	/^void function_info::find_ipostdominators( )$/;"	f	class:function_info	typeref:typename:void
find_next_real_instruction	cuda-sim/ptx_ir.cc	/^std::list<ptx_instruction*>::iterator function_info::find_next_real_instruction( std::list<ptx_i/;"	f	class:function_info	typeref:typename:std::list<ptx_instruction * >::iterator
find_optimal_nuca	gpuwattch/cacti/nuca.cc	/^Nuca::find_optimal_nuca (list<nuca_org_t *> *n, min_values_t *minval)$/;"	f	class:Nuca	typeref:typename:nuca_org_t *
find_optimal_uca	gpuwattch/cacti/Ucache.cc	/^void find_optimal_uca(uca_org_t *res, min_values_t * minval, list<uca_org_t> & ulist)$/;"	f	typeref:typename:void
find_postdominators	cuda-sim/ptx_ir.cc	/^void function_info::find_postdominators( )$/;"	f	class:function_info	typeref:typename:void
find_ran_intm	intersim2/networks/flatfly_onchip.cpp	/^int find_ran_intm (int src, int dest) {$/;"	f	typeref:typename:int
find_ready	gpgpu-sim/shader.h	/^      collector_unit_t *find_ready()$/;"	f	class:opndcoll_rfu_t::dispatch_unit_t	typeref:typename:collector_unit_t *
find_reconvergence_points	cuda-sim/cuda-sim.cc	/^struct rec_pts find_reconvergence_points( function_info *finfo )$/;"	f	typeref:struct:rec_pts
finished_kernel	gpgpu-sim/gpu-sim.cc	/^unsigned gpgpu_sim::finished_kernel()$/;"	f	class:gpgpu_sim	typeref:typename:unsigned
firstCheck	gpgpu-sim/shader.h	/^    int firstCheck;$/;"	m	class:scheduler_unit	typeref:typename:int
first_level_dir	gpuwattch/XML_Parse.h	/^    int first_level_dir;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
flag_L2_gate	gpuwattch/cacti/decoder.h	/^  int flag_L2_gate;$/;"	m	class:PredecBlk	typeref:typename:int
flag_driver_exists	gpuwattch/cacti/decoder.h	/^  int flag_driver_exists;$/;"	m	class:PredecBlkDrv	typeref:typename:int
flag_two_unique_paths	gpuwattch/cacti/decoder.h	/^  bool   flag_two_unique_paths;$/;"	m	class:PredecBlk	typeref:typename:bool
flashc	gpuwattch/XML_Parse.h	/^	system_mc flashc;$/;"	m	struct:__anon6448b92c1208	typeref:typename:system_mc
flashcontroller	gpuwattch/processor.h	/^    FlashController  * flashcontroller;$/;"	m	class:Processor	typeref:typename:FlashController *
flashcontrollers	gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor	typeref:typename:Component
flatfly_outport	intersim2/networks/flatfly_onchip.cpp	/^int flatfly_outport(int dest, int rID) {$/;"	f	typeref:typename:int
flatfly_outport_yx	intersim2/networks/flatfly_onchip.cpp	/^int flatfly_outport_yx(int dest, int rID) {$/;"	f	typeref:typename:int
flatfly_transformation	intersim2/networks/flatfly_onchip.cpp	/^int flatfly_transformation(int dest){$/;"	f	typeref:typename:int
flex_int16_t	intersim2/lex.yy.c	/^typedef int16_t flex_int16_t;$/;"	t	typeref:typename:int16_t	file:
flex_int16_t	intersim2/lex.yy.c	/^typedef short int flex_int16_t;$/;"	t	typeref:typename:short int	file:
flex_int32_t	intersim2/lex.yy.c	/^typedef int flex_int32_t;$/;"	t	typeref:typename:int	file:
flex_int32_t	intersim2/lex.yy.c	/^typedef int32_t flex_int32_t;$/;"	t	typeref:typename:int32_t	file:
flex_int8_t	intersim2/lex.yy.c	/^typedef int8_t flex_int8_t;$/;"	t	typeref:typename:int8_t	file:
flex_int8_t	intersim2/lex.yy.c	/^typedef signed char flex_int8_t;$/;"	t	typeref:typename:signed char	file:
flex_uint16_t	intersim2/lex.yy.c	/^typedef uint16_t flex_uint16_t;$/;"	t	typeref:typename:uint16_t	file:
flex_uint16_t	intersim2/lex.yy.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	typeref:typename:unsigned short int	file:
flex_uint32_t	intersim2/lex.yy.c	/^typedef uint32_t flex_uint32_t;$/;"	t	typeref:typename:uint32_t	file:
flex_uint32_t	intersim2/lex.yy.c	/^typedef unsigned int flex_uint32_t;$/;"	t	typeref:typename:unsigned int	file:
flex_uint8_t	intersim2/lex.yy.c	/^typedef uint8_t flex_uint8_t;$/;"	t	typeref:typename:uint8_t	file:
flex_uint8_t	intersim2/lex.yy.c	/^typedef unsigned char flex_uint8_t; $/;"	t	typeref:typename:unsigned char	file:
flit_bits	gpuwattch/XML_Parse.h	/^	int flit_bits;$/;"	m	struct:__anon6448b92c0c08	typeref:typename:int
flit_bits	gpuwattch/XML_Parse.h	/^	int flit_bits;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int
flit_size	gpuwattch/basic_components.h	/^    int	   flit_size;$/;"	m	class:NoCParam	typeref:typename:int
flit_size	gpuwattch/cacti/arbiter.h	/^    double flit_size;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
flit_size	gpuwattch/cacti/crossbar.h	/^    double flit_size;$/;"	m	class:Crossbar	typeref:typename:double
flit_size	gpuwattch/cacti/router.h	/^    double flit_size;$/;"	m	class:MCPAT_Router	typeref:typename:double
float2	cuda-sim/cuda-math.h	/^   struct float2 {$/;"	s	namespace:cuda_math
float2	cuda-sim/cuda-math.h	/^   typedef struct float2 float2;$/;"	t	namespace:cuda_math	typeref:struct:float2
float2int	cuda-sim/cuda-math.h	/^int float2int(float a, enum cudaRoundMode mode)$/;"	f	namespace:cuda_math	typeref:typename:int
float2uint	cuda-sim/cuda-math.h	/^unsigned int float2uint(float a, enum cudaRoundMode mode)$/;"	f	namespace:cuda_math	typeref:typename:unsigned int
float4	cuda-sim/cuda-math.h	/^   struct float4 {$/;"	s	namespace:cuda_math
float4	cuda-sim/cuda-math.h	/^   typedef struct float4 float4;$/;"	t	namespace:cuda_math	typeref:struct:float4
float_op_t	cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
float_regfile_reads	gpuwattch/XML_Parse.h	/^	double float_regfile_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
float_regfile_writes	gpuwattch/XML_Parse.h	/^	double float_regfile_writes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
floating_point_rounding_mode	cuda-sim/ptx.y	/^floating_point_rounding_mode: RN_OPTION { add_option(RN_OPTION); } $/;"	l
flush	gpgpu-sim/gpu-cache.cc	/^void tag_array::flush() $/;"	f	class:tag_array	typeref:typename:void
flush	gpgpu-sim/gpu-cache.h	/^    void flush(){m_tag_array->flush();}$/;"	f	class:baseline_cache	typeref:typename:void
flush	gpgpu-sim/shader.cc	/^void ldst_unit::flush(){$/;"	f	class:ldst_unit	typeref:typename:void
flushL2	gpgpu-sim/l2cache.cc	/^unsigned memory_sub_partition::flushL2() $/;"	f	class:memory_sub_partition	typeref:typename:unsigned
fma_impl	cuda-sim/instructions.cc	/^void fma_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
fnum	intersim2/y.tab.c	/^  double fnum;$/;"	m	union:YYSTYPE	typeref:typename:double	file:
fnum	intersim2/y.tab.h	/^  double fnum;$/;"	m	union:YYSTYPE	typeref:typename:double
fopt	gpuwattch/cacti/const.h	/^#define fopt /;"	d
force_cache_config	gpuwattch/cacti/cacti_interface.h	/^    bool force_cache_config;$/;"	m	class:InputParameter	typeref:typename:bool
force_nuca_bank	gpuwattch/cacti/cacti_interface.h	/^    int force_nuca_bank;$/;"	m	class:InputParameter	typeref:typename:int
force_wiretype	gpuwattch/cacti/cacti_interface.h	/^    int force_wiretype;$/;"	m	class:InputParameter	typeref:typename:int
fpTagBypass	gpuwattch/core.h	/^	interconnect * fpTagBypass;$/;"	m	class:EXECU	typeref:typename:interconnect *
fp_Iw_height	gpuwattch/core.h	/^	double Iw_height, fp_Iw_height,ROB_height;$/;"	m	class:SchedulerU	typeref:typename:double
fp_bypass	gpuwattch/core.h	/^	interconnect * fp_bypass;$/;"	m	class:EXECU	typeref:typename:interconnect *
fp_data_width	gpuwattch/basic_components.h	/^    int  int_data_width, fp_data_width,v_address_width, p_address_width;$/;"	m	class:CoreDynParam	typeref:typename:int
fp_decodeW	gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_de/;"	m	class:CoreDynParam	typeref:typename:int
fp_inst_window	gpuwattch/core.h	/^	ArrayST         * fp_inst_window;$/;"	m	class:SchedulerU	typeref:typename:ArrayST *
fp_inst_window_reads	gpuwattch/XML_Parse.h	/^	double fp_inst_window_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
fp_inst_window_selections	gpuwattch/XML_Parse.h	/^	double fp_inst_window_selections;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
fp_inst_window_wakeup_accesses	gpuwattch/XML_Parse.h	/^	double fp_inst_window_wakeup_accesses;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
fp_inst_window_writes	gpuwattch/XML_Parse.h	/^	double fp_inst_window_writes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
fp_instruction_window_size	gpuwattch/XML_Parse.h	/^	int fp_instruction_window_size;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
fp_instructions	gpuwattch/XML_Parse.h	/^	double fp_instructions;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
fp_issueW	gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_de/;"	m	class:CoreDynParam	typeref:typename:int
fp_issue_width	gpuwattch/XML_Parse.h	/^	int fp_issue_width;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
fp_pipeline_stages	gpuwattch/basic_components.h	/^    int  num_hthreads, pipeline_stages, fp_pipeline_stages, num_pipelines, num_fp_pipelines;$/;"	m	class:CoreDynParam	typeref:typename:int
fp_regfile_height	gpuwattch/core.h	/^	double int_regfile_height, fp_regfile_height;$/;"	m	class:RegFU	typeref:typename:double
fp_rename_accesses	gpuwattch/XML_Parse.h	/^	double fp_rename_accesses;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
fp_rename_reads	gpuwattch/XML_Parse.h	/^	double fp_rename_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
fp_rename_writes	gpuwattch/XML_Parse.h	/^	double fp_rename_writes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
fp_u	gpuwattch/core.h	/^    FunctionalUnit * fp_u;$/;"	m	class:EXECU	typeref:typename:FunctionalUnit *
fpfp_node_cap	gpuwattch/logic.cc	/^double DFFCell::fpfp_node_cap(unsigned int fan_in, unsigned int fan_out)$/;"	f	class:DFFCell	typeref:typename:double
fprint	gpgpu-sim/histogram.cc	/^void binned_histogram::fprint (FILE *fout) const$/;"	f	class:binned_histogram	typeref:typename:void
fpu_accesses	gpuwattch/XML_Parse.h	/^	double fpu_accesses;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
fragment_entry	gpgpu-sim/gpu-cache.h	/^        fragment_entry( mem_fetch *mf, unsigned idx, bool m, unsigned d )$/;"	f	struct:tex_cache::fragment_entry
fragment_entry	gpgpu-sim/gpu-cache.h	/^        fragment_entry() {}$/;"	f	struct:tex_cache::fragment_entry
fragment_entry	gpgpu-sim/gpu-cache.h	/^    struct fragment_entry {$/;"	s	class:tex_cache
freeBuffer	gpuwattch/xmlParser.cc	/^void ToXMLStringTool::freeBuffer(){ if (buf) free(buf); buf=NULL; buflen=0; }$/;"	f	class:ToXMLStringTool	typeref:typename:void
freeBuffer	gpuwattch/xmlParser.cc	/^void XMLParserBase64Tool::freeBuffer(){ if (buf) free(buf); buf=NULL; buflen=0; }$/;"	f	class:XMLParserBase64Tool	typeref:typename:void
freeXMLString	gpuwattch/xmlParser.cc	/^void freeXMLString(XMLSTR t){if(t)free(t);}$/;"	f	typeref:typename:void
free_stack	gpgpu-sim/stack.cc	/^void free_stack(Stack *S) {$/;"	f	typeref:typename:void
frfcfs_scheduler	gpgpu-sim/dram_sched.cc	/^frfcfs_scheduler::frfcfs_scheduler( const memory_config *config, dram_t *dm, memory_stats_t *sta/;"	f	class:frfcfs_scheduler
frfcfs_scheduler	gpgpu-sim/dram_sched.h	/^class frfcfs_scheduler {$/;"	c
fringe_cap	gpuwattch/cacti/parameter.h	/^  double fringe_cap;$/;"	m	class:TechnologyParameter	typeref:typename:double
fromString	option_parser.cc	/^   virtual bool fromString(const string str)$/;"	f	class:OptionRegistry	typeref:typename:bool	file:
fromString	option_parser.cc	/^bool OptionRegistry<bool>::fromString(const string str)$/;"	f	class:OptionRegistry	typeref:typename:bool
fromString	option_parser.cc	/^bool OptionRegistry<char *>::fromString(const string str)$/;"	f	class:OptionRegistry	typeref:typename:bool
fromString	option_parser.cc	/^bool OptionRegistry<string>::fromString(const string str)$/;"	f	class:OptionRegistry	typeref:typename:bool
fromXMLString	gpuwattch/xmlParser.cc	/^XMLSTR fromXMLString(XMLCSTR s, int lo, XML *pXML)$/;"	f	typeref:typename:XMLSTR
front	stream_manager.cc	/^stream_operation stream_manager::front() $/;"	f	class:stream_manager	typeref:typename:stream_operation
front	stream_manager.h	/^    stream_operation &front() { return m_operations.front(); }$/;"	f	struct:CUstream_st	typeref:typename:stream_operation &
frontend	gpuwattch/memoryctrl.h	/^	MCFrontEnd * frontend;$/;"	m	class:MemoryController	typeref:typename:MCFrontEnd *
frontendBuffer	gpuwattch/memoryctrl.h	/^	ArrayST  * frontendBuffer;$/;"	m	class:MCFrontEnd	typeref:typename:ArrayST *
frontend_duty_cycle	gpuwattch/basic_components.h	/^    double frontend_duty_cycle, duty_cycle, perc_load;$/;"	m	class:MCParam	typeref:typename:double
fu_size	gpuwattch/basic_components.h	/^    int missb_size, fu_size, prefetchb_size, wbb_size;$/;"	m	class:CacheDynParam	typeref:typename:int
fu_type	gpuwattch/logic.h	/^	enum FU_type fu_type;$/;"	m	class:FunctionalUnit	typeref:enum:FU_type
full	gpgpu-sim/delayqueue.h	/^   bool full() const { return (m_max_len && m_length >= m_max_len); }$/;"	f	class:fifo_pipeline	typeref:typename:bool
full	gpgpu-sim/dram.cc	/^bool dram_t::full() const $/;"	f	class:dram_t	typeref:typename:bool
full	gpgpu-sim/gpu-cache.cc	/^bool mshr_table::full( new_addr_type block_addr ) const{$/;"	f	class:mshr_table	typeref:typename:bool
full	gpgpu-sim/gpu-cache.h	/^        bool full() const { return m_num == m_size;}$/;"	f	class:tex_cache::fifo	typeref:typename:bool
full	gpgpu-sim/l2cache.cc	/^bool memory_sub_partition::full() const$/;"	f	class:memory_sub_partition	typeref:typename:bool
full	gpgpu-sim/l2cache.h	/^    virtual bool full( unsigned size, bool write) const $/;"	f	class:L2interface	typeref:typename:bool
full	gpgpu-sim/shader.h	/^    virtual bool full( unsigned size, bool write ) const $/;"	f	class:shader_memory_interface	typeref:typename:bool
full	gpgpu-sim/shader.h	/^    virtual bool full( unsigned size, bool write) const$/;"	f	class:perfect_memory_interface	typeref:typename:bool
full	intersim2/routers/chaos_router.hpp	/^    full,          \/\/  T****H    ready to send$/;"	e	enum:ChaosRouter::eQState
full_stack	gpgpu-sim/stack.cc	/^int full_stack(Stack *S) {$/;"	f	typeref:typename:int
fully_assoc	gpuwattch/cacti/cacti_interface.h	/^    bool     fully_assoc;$/;"	m	class:InputParameter	typeref:typename:bool
fully_assoc	gpuwattch/cacti/decoder.h	/^    bool   fully_assoc;$/;"	m	class:Decoder	typeref:typename:bool
fully_assoc	gpuwattch/cacti/parameter.h	/^    bool fully_assoc;$/;"	m	class:DynamicParameter	typeref:typename:bool
func_addr	cuda-sim/ptx_ir.h	/^   const operand_info &func_addr() const$/;"	f	class:ptx_instruction	typeref:typename:const operand_info &
func_exec_inst	gpgpu-sim/shader.cc	/^void shader_core_ctx::func_exec_inst( warp_inst_t &inst )$/;"	f	class:shader_core_ctx	typeref:typename:void
func_header	cuda-sim/ptx_parser.cc	/^void func_header(const char* a) {} \/\/intentional dummy function$/;"	f	typeref:typename:void
func_header_info	cuda-sim/ptx_parser.cc	/^void func_header_info(const char* a) {} \/\/intentional dummy function$/;"	f	typeref:typename:void
func_header_info_int	cuda-sim/ptx_parser.cc	/^void func_header_info_int(const char* a, int b) {} \/\/intentional dummy function$/;"	f	typeref:typename:void
func_info	cuda-sim/ptx_sim.h	/^   function_info *func_info()$/;"	f	class:ptx_thread_info	typeref:typename:function_info *
function	abstract_hardware_model.h	/^   void (*function)(const class inst_t*, class ptx_thread_info*);$/;"	m	struct:dram_callback_t	typeref:typename:void (*)(const class inst_t *,class ptx_thread_info *)
function_calls	gpuwattch/XML_Parse.h	/^	double function_calls;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
function_decl	cuda-sim/ptx.y	/^function_decl: function_decl_header LEFT_PAREN { start_function($1); func_header_info("(");} par/;"	l
function_decl_header	cuda-sim/ptx.y	/^function_decl_header: ENTRY_DIRECTIVE { $$ = 1; g_func_decl=1; func_header(".entry"); }$/;"	l
function_defn	cuda-sim/ptx.y	/^function_defn: function_decl { set_symtab($1); func_header(".skip"); } statement_block { end_fun/;"	l
function_ident_param	cuda-sim/ptx.y	/^function_ident_param: IDENTIFIER { add_function_name($1); } LEFT_PAREN {func_header_info("(");} /;"	l
function_info	cuda-sim/ptx_ir.cc	/^function_info::function_info(int entry_point ) $/;"	f	class:function_info
function_info	cuda-sim/ptx_ir.h	/^class function_info {$/;"	c
function_info	cuda-sim/ptxinfo.y	/^function_info: info$/;"	l
function_name	cuda-sim/ptxinfo.y	/^function_name: FUNC QUOTE IDENTIFIER QUOTE { ptxinfo_function($3); }$/;"	l
functionalCoreSim	cuda-sim/cuda-sim.h	/^    functionalCoreSim(kernel_info_t * kernel, gpgpu_sim *g, unsigned warp_size)$/;"	f	class:functionalCoreSim
functionalCoreSim	cuda-sim/cuda-sim.h	/^class functionalCoreSim: public core_t$/;"	c
functional_done	gpgpu-sim/shader.cc	/^bool shd_warp_t::functional_done() const$/;"	f	class:shd_warp_t	typeref:typename:bool
gA	intersim2/networks/dragonfly.cpp	/^int gP, gA, gG;$/;"	v	typeref:typename:int
gC	intersim2/main.cpp	/^int gC;\/\/concentration$/;"	v	typeref:typename:int
gG	intersim2/networks/dragonfly.cpp	/^int gP, gA, gG;$/;"	v	typeref:typename:int
gK	intersim2/main.cpp	/^int gK;\/\/radix$/;"	v	typeref:typename:int
gN	intersim2/main.cpp	/^int gN;\/\/dimension$/;"	v	typeref:typename:int
gNodes	intersim2/main.cpp	/^int gNodes;$/;"	v	typeref:typename:int
gNumVCs	intersim2/routefunc.cpp	/^int gNumVCs;$/;"	v	typeref:typename:int
gP	intersim2/networks/dragonfly.cpp	/^int gP, gA, gG;$/;"	v	typeref:typename:int
gPrintActivity	intersim2/main.cpp	/^bool gPrintActivity;$/;"	v	typeref:typename:bool
gReadReplyBeginVC	intersim2/routefunc.cpp	/^int gReadReplyBeginVC, gReadReplyEndVC;$/;"	v	typeref:typename:int
gReadReplyEndVC	intersim2/routefunc.cpp	/^int gReadReplyBeginVC, gReadReplyEndVC;$/;"	v	typeref:typename:int
gReadReqBeginVC	intersim2/routefunc.cpp	/^int gReadReqBeginVC, gReadReqEndVC;$/;"	v	typeref:typename:int
gReadReqEndVC	intersim2/routefunc.cpp	/^int gReadReqBeginVC, gReadReqEndVC;$/;"	v	typeref:typename:int
gRoutingFunctionMap	intersim2/routefunc.cpp	/^map<string, tRoutingFunction> gRoutingFunctionMap;$/;"	v	typeref:typename:map<string,tRoutingFunction>
gTrace	intersim2/main.cpp	/^bool gTrace;$/;"	v	typeref:typename:bool
gWatchOut	intersim2/main.cpp	/^ostream * gWatchOut;$/;"	v	typeref:typename:ostream *
gWriteReplyBeginVC	intersim2/routefunc.cpp	/^int gWriteReplyBeginVC, gWriteReplyEndVC;$/;"	v	typeref:typename:int
gWriteReplyEndVC	intersim2/routefunc.cpp	/^int gWriteReplyBeginVC, gWriteReplyEndVC;$/;"	v	typeref:typename:int
gWriteReqBeginVC	intersim2/routefunc.cpp	/^int gWriteReqBeginVC, gWriteReqEndVC;$/;"	v	typeref:typename:int
gWriteReqEndVC	intersim2/routefunc.cpp	/^int gWriteReqBeginVC, gWriteReqEndVC;$/;"	v	typeref:typename:int
g_add_identifier_cached__array_dim	cuda-sim/ptx_parser.cc	/^int g_add_identifier_cached__array_dim;$/;"	v	typeref:typename:int
g_add_identifier_cached__array_ident	cuda-sim/ptx_parser.cc	/^int g_add_identifier_cached__array_ident;$/;"	v	typeref:typename:int
g_add_identifier_cached__identifier	cuda-sim/ptx_parser.cc	/^char *g_add_identifier_cached__identifier = NULL;$/;"	v	typeref:typename:char *
g_alignment_spec	cuda-sim/ptx_parser.cc	/^int g_alignment_spec = -1;$/;"	v	typeref:typename:int
g_assemble_code_next_pc	cuda-sim/cuda-sim.cc	/^unsigned g_assemble_code_next_pc=0; $/;"	v	typeref:typename:unsigned
g_const_alloc	cuda-sim/ptx_parser.cc	/^unsigned g_const_alloc = 1;$/;"	v	typeref:typename:unsigned
g_const_name_lookup	cuda-sim/cuda-sim.cc	/^std::map<const void*,std::string>   g_const_name_lookup; \/\/ indexed by hostVar$/;"	v	typeref:typename:std::map<const void *,std::string>
g_constants	cuda-sim/cuda-sim.cc	/^std::set<std::string>   g_constants;$/;"	v	typeref:typename:std::set<std::string>
g_cuda_launch_blocking	cuda-sim/cuda-sim.cc	/^bool g_cuda_launch_blocking = false;$/;"	v	typeref:typename:bool
g_current_symbol_table	cuda-sim/ptx_parser.cc	/^static symbol_table *g_current_symbol_table = NULL;$/;"	v	typeref:typename:symbol_table *	file:
g_cvt_fn	cuda-sim/instructions.cc	/^ptx_reg_t (*g_cvt_fn[11][11])( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign,/;"	v	typeref:typename:ptx_reg_t (* [11][11])(ptx_reg_t x,unsigned from_width,unsigned to_width,int to_sign,int rounding_mode,int saturation_mode)
g_debug_execution	cuda-sim/cuda-sim.cc	/^int g_debug_execution = 0;$/;"	v	typeref:typename:int
g_debug_ir_generation	cuda-sim/ptx_parser.cc	/^static bool g_debug_ir_generation=false;$/;"	v	typeref:typename:bool	file:
g_debug_pc	cuda-sim/cuda-sim.cc	/^addr_t g_debug_pc = 0xBEEF1518;$/;"	v	typeref:typename:addr_t
g_debug_thread_uid	cuda-sim/cuda-sim.cc	/^int g_debug_thread_uid = 0;$/;"	v	typeref:typename:int
g_entry_func_param_index	cuda-sim/ptx_parser.cc	/^static unsigned g_entry_func_param_index=0;$/;"	v	typeref:typename:unsigned	file:
g_entry_point	cuda-sim/ptx_parser.cc	/^static int g_entry_point;$/;"	v	typeref:typename:int	file:
g_error_detected	cuda-sim/ptx_parser.cc	/^int g_error_detected = 0;$/;"	v	typeref:typename:int
g_extern_spec	cuda-sim/ptx_parser.cc	/^int g_extern_spec = 0;$/;"	v	typeref:typename:int
g_filename	cuda-sim/ptx_parser.cc	/^const char *g_filename;$/;"	v	typeref:typename:const char *
g_func_cta_info	cuda-sim/cuda-sim.cc	/^ptx_cta_info *g_func_cta_info = NULL;$/;"	v	typeref:typename:ptx_cta_info *
g_func_decl	cuda-sim/ptx_parser.cc	/^int g_func_decl = 0;$/;"	v	typeref:typename:int
g_func_info	cuda-sim/ptx_parser.cc	/^static function_info *g_func_info = NULL;$/;"	v	typeref:typename:function_info *	file:
g_global_allfiles_symbol_table	cuda-sim/ptx_parser.cc	/^static symbol_table *g_global_allfiles_symbol_table = NULL;$/;"	v	typeref:typename:symbol_table *	file:
g_global_mem	cuda-sim/ptx_loader.cc	/^memory_space *g_global_mem;$/;"	v	typeref:typename:memory_space *
g_global_name_lookup	cuda-sim/cuda-sim.cc	/^std::map<const void*,std::string>   g_global_name_lookup; \/\/ indexed by hostVar$/;"	v	typeref:typename:std::map<const void *,std::string>
g_global_symbol_table	cuda-sim/ptx_parser.cc	/^static symbol_table *g_global_symbol_table = NULL;$/;"	v	typeref:typename:symbol_table *	file:
g_globals	cuda-sim/cuda-sim.cc	/^std::set<std::string>   g_globals;$/;"	v	typeref:typename:std::set<std::string>
g_icnt_interface	intersim2/main.cpp	/^InterconnectInterface *g_icnt_interface;$/;"	v	typeref:typename:InterconnectInterface *
g_ident_add_uid	cuda-sim/ptx_parser.cc	/^int g_ident_add_uid = 0;$/;"	v	typeref:typename:int
g_inst_classification_stat	cuda-sim/cuda-sim.cc	/^void ** g_inst_classification_stat = NULL;$/;"	v	typeref:typename:void **
g_inst_lookup	cuda-sim/ptx_parser.cc	/^std::map<std::string,std::map<unsigned,const ptx_instruction*> > g_inst_lookup;$/;"	v	typeref:typename:std::map<std::string,std::map<unsigned,const ptx_instruction * >>
g_inst_op_classification_stat	cuda-sim/cuda-sim.cc	/^void ** g_inst_op_classification_stat= NULL;$/;"	v	typeref:typename:void **
g_instructions	cuda-sim/ptx_parser.cc	/^static std::list<ptx_instruction*> g_instructions;$/;"	v	typeref:typename:std::list<ptx_instruction * >	file:
g_interactive_debugger_enabled	gpgpu-sim/gpu-sim.cc	/^bool g_interactive_debugger_enabled=false;$/;"	v	typeref:typename:bool
g_ip	gpuwattch/cacti/parameter.cc	/^InputParameter * g_ip;$/;"	v	typeref:typename:InputParameter *
g_keep_intermediate_files	cuda-sim/ptx_loader.cc	/^bool g_keep_intermediate_files;$/;"	v	typeref:typename:bool
g_label	cuda-sim/ptx_parser.cc	/^symbol *g_label;$/;"	v	typeref:typename:symbol *
g_last_symbol	cuda-sim/ptx_parser.cc	/^static symbol *g_last_symbol = NULL;$/;"	v	typeref:typename:symbol *	file:
g_max_regs_per_thread	cuda-sim/ptx_parser.cc	/^unsigned g_max_regs_per_thread = 0;$/;"	v	typeref:typename:unsigned
g_metric_trace_filename	gpgpu-sim/gpu-sim.h	/^    char *g_metric_trace_filename;$/;"	m	struct:power_config	typeref:typename:char *
g_metric_trace_filename	gpuwattch/gpgpu_sim_wrapper.h	/^    char *g_metric_trace_filename;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:char *
g_my_time_vector	gpgpu-sim/visualizer.cc	/^my_time_vector* g_my_time_vector; $/;"	v	typeref:typename:my_time_vector *
g_neg_pred	cuda-sim/ptx_parser.cc	/^int g_neg_pred;$/;"	v	typeref:typename:int
g_network_config_filename	gpgpu-sim/icnt_wrapper.cc	/^char* g_network_config_filename;$/;"	v	typeref:typename:char *
g_network_mode	gpgpu-sim/icnt_wrapper.cc	/^int   g_network_mode;$/;"	v	typeref:typename:int
g_num_ptx_inst_uid	cuda-sim/instructions.cc	/^unsigned ptx_instruction::g_num_ptx_inst_uid=0;$/;"	m	class:ptx_instruction	typeref:typename:unsigned
g_num_ptx_inst_uid	cuda-sim/ptx_ir.h	/^   static unsigned g_num_ptx_inst_uid;$/;"	m	class:ptx_instruction	typeref:typename:unsigned
g_opcode	cuda-sim/ptx_parser.cc	/^int g_opcode = -1;$/;"	v	typeref:typename:int
g_opcode_string	cuda-sim/instructions.cc	/^const char *g_opcode_string[NUM_OPCODES] = {$/;"	v	typeref:typename:const char * []
g_operands	cuda-sim/ptx_parser.cc	/^std::list<operand_info> g_operands;$/;"	v	typeref:typename:std::list<operand_info>
g_options	cuda-sim/ptx_parser.cc	/^std::list<int> g_options;$/;"	v	typeref:typename:std::list<int>
g_override_embedded_ptx	cuda-sim/ptx_loader.cc	/^bool g_override_embedded_ptx = false;$/;"	v	typeref:typename:bool
g_param_mem	cuda-sim/ptx_loader.cc	/^memory_space *g_param_mem;$/;"	v	typeref:typename:memory_space *
g_pc_to_finfo	cuda-sim/cuda-sim.cc	/^std::map<unsigned,function_info*> g_pc_to_finfo;$/;"	v	typeref:typename:std::map<unsigned,function_info * >
g_power_config_name	gpgpu-sim/gpu-sim.h	/^	char *g_power_config_name;$/;"	m	struct:power_config	typeref:typename:char *
g_power_filename	gpgpu-sim/gpu-sim.h	/^    char *g_power_filename;$/;"	m	struct:power_config	typeref:typename:char *
g_power_filename	gpuwattch/gpgpu_sim_wrapper.h	/^    char *g_power_filename;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:char *
g_power_per_cycle_dump	gpgpu-sim/gpu-sim.h	/^    bool g_power_per_cycle_dump;$/;"	m	struct:power_config	typeref:typename:bool
g_power_per_cycle_dump	gpuwattch/gpgpu_sim_wrapper.h	/^    bool g_power_per_cycle_dump;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:bool
g_power_simulation_enabled	gpgpu-sim/gpu-sim.h	/^    bool g_power_simulation_enabled;$/;"	m	struct:power_config	typeref:typename:bool
g_power_simulation_enabled	gpuwattch/gpgpu_sim_wrapper.h	/^    bool g_power_simulation_enabled;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:bool
g_power_simulator_debug	gpgpu-sim/gpu-sim.h	/^    bool g_power_simulator_debug;$/;"	m	struct:power_config	typeref:typename:bool
g_power_trace_enabled	gpgpu-sim/gpu-sim.h	/^    bool g_power_trace_enabled;$/;"	m	struct:power_config	typeref:typename:bool
g_power_trace_enabled	gpuwattch/gpgpu_sim_wrapper.h	/^    bool g_power_trace_enabled;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:bool
g_power_trace_filename	gpgpu-sim/gpu-sim.h	/^    char *g_power_trace_filename;$/;"	m	struct:power_config	typeref:typename:char *
g_power_trace_filename	gpuwattch/gpgpu_sim_wrapper.h	/^    char *g_power_trace_filename;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:char *
g_power_trace_zlevel	gpgpu-sim/gpu-sim.h	/^    int g_power_trace_zlevel;$/;"	m	struct:power_config	typeref:typename:int
g_power_trace_zlevel	gpuwattch/gpgpu_sim_wrapper.h	/^	int g_power_trace_zlevel;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:int
g_pred	cuda-sim/ptx_parser.cc	/^const symbol *g_pred;$/;"	v	typeref:typename:const symbol *
g_pred_mod	cuda-sim/ptx_parser.cc	/^int g_pred_mod;$/;"	v	typeref:typename:int
g_print_memory_space	cuda-sim/memory.cc	/^void g_print_memory_space(memory_space *mem, const char *format = "%08x", FILE *fout = stdout) $/;"	f	typeref:typename:void
g_ptr_spec	cuda-sim/ptx_parser.cc	/^memory_space_t g_ptr_spec = undefined_space;$/;"	v	typeref:typename:memory_space_t
g_ptx_cta_info_sm_idx_used	cuda-sim/ptx_sim.cc	/^std::set<unsigned long long> g_ptx_cta_info_sm_idx_used;$/;"	v	typeref:typename:std::set<unsigned long long>
g_ptx_cta_info_uid	cuda-sim/ptx_sim.cc	/^unsigned long long g_ptx_cta_info_uid = 1;$/;"	v	typeref:typename:unsigned long long
g_ptx_inst_debug_file	abstract_hardware_model.h	/^    char* g_ptx_inst_debug_file;$/;"	m	class:gpgpu_functional_sim_config	typeref:typename:char *
g_ptx_inst_debug_thread_uid	abstract_hardware_model.h	/^    int   g_ptx_inst_debug_thread_uid;$/;"	m	class:gpgpu_functional_sim_config	typeref:typename:int
g_ptx_inst_debug_to_file	abstract_hardware_model.h	/^    int   g_ptx_inst_debug_to_file;$/;"	m	class:gpgpu_functional_sim_config	typeref:typename:int
g_ptx_kernel_count	cuda-sim/cuda-sim.cc	/^int g_ptx_kernel_count = -1; \/\/ used for classification stat collection purposes $/;"	v	typeref:typename:int
g_ptx_sim_mode	cuda-sim/cuda-sim.cc	/^int g_ptx_sim_mode; \/\/ if non-zero run functional simulation only (i.e., no notion of a clock /;"	v	typeref:typename:int
g_ptx_sim_num_insn	cuda-sim/cuda-sim.cc	/^unsigned g_ptx_sim_num_insn = 0;$/;"	v	typeref:typename:unsigned
g_ptx_thread_info_delete_count	cuda-sim/ptx_sim.cc	/^unsigned g_ptx_thread_info_delete_count=0;$/;"	v	typeref:typename:unsigned
g_ptx_thread_info_uid_next	cuda-sim/ptx_sim.cc	/^unsigned g_ptx_thread_info_uid_next=1;$/;"	v	typeref:typename:unsigned
g_ptx_token_decode	cuda-sim/ptx_parser.cc	/^static std::map<unsigned,std::string> g_ptx_token_decode;$/;"	v	typeref:typename:std::map<unsigned,std::string>	file:
g_ptxinfo_error_detected	cuda-sim/cuda-sim.cc	/^int g_ptxinfo_error_detected;$/;"	v	typeref:typename:int
g_ptxinfo_filename	cuda-sim/ptx_loader.cc	/^const char *g_ptxinfo_filename;$/;"	v	typeref:typename:const char *
g_ptxinfo_kinfo	cuda-sim/cuda-sim.cc	/^static struct gpgpu_ptx_sim_kernel_info g_ptxinfo_kinfo;$/;"	v	typeref:struct:gpgpu_ptx_sim_kernel_info	file:
g_ptxinfo_kname	cuda-sim/cuda-sim.cc	/^static char *g_ptxinfo_kname = NULL;$/;"	v	typeref:typename:char *	file:
g_return_var	cuda-sim/ptx_parser.cc	/^static operand_info g_return_var;$/;"	v	typeref:typename:operand_info	file:
g_rpts	cuda-sim/cuda-sim.cc	/^struct std::map<function_info*,rec_pts> g_rpts;$/;"	v	typeref:struct:std::map
g_save_embedded_ptx	cuda-sim/ptx_loader.cc	/^static bool g_save_embedded_ptx;$/;"	v	typeref:typename:bool	file:
g_scalar_type	cuda-sim/ptx_parser.cc	/^std::list<int> g_scalar_type;$/;"	v	typeref:typename:std::list<int>
g_scalar_type_spec	cuda-sim/ptx_parser.cc	/^int g_scalar_type_spec = -1;$/;"	v	typeref:typename:int
g_shader_core_config	cuda-sim/ptx_parser.cc	/^static const struct core_config *g_shader_core_config;$/;"	v	typeref:typename:const struct core_config *	file:
g_sim_active	gpgpusim_entrypoint.cc	/^bool g_sim_active = false;$/;"	v	typeref:typename:bool
g_sim_done	gpgpusim_entrypoint.cc	/^bool g_sim_done = true;$/;"	v	typeref:typename:bool
g_sim_lock	gpgpusim_entrypoint.cc	/^pthread_mutex_t g_sim_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	typeref:typename:pthread_mutex_t
g_sim_signal_exit	gpgpusim_entrypoint.cc	/^sem_t g_sim_signal_exit;$/;"	v	typeref:typename:sem_t
g_sim_signal_finish	gpgpusim_entrypoint.cc	/^sem_t g_sim_signal_finish;$/;"	v	typeref:typename:sem_t
g_sim_signal_start	gpgpusim_entrypoint.cc	/^sem_t g_sim_signal_start;$/;"	v	typeref:typename:sem_t
g_simulation_starttime	gpgpusim_entrypoint.cc	/^time_t g_simulation_starttime;$/;"	v	typeref:typename:time_t
g_simulation_thread	gpgpusim_entrypoint.cc	/^pthread_t g_simulation_thread;$/;"	v	typeref:typename:pthread_t
g_single_step	gpgpu-sim/gpu-sim.cc	/^unsigned long long g_single_step=0; \/\/ set this in gdb to single step the pipeline$/;"	v	typeref:typename:unsigned long long
g_space_spec	cuda-sim/ptx_parser.cc	/^memory_space_t g_space_spec = undefined_space;$/;"	v	typeref:typename:memory_space_t
g_steady_power_levels_enabled	gpgpu-sim/gpu-sim.h	/^    bool g_steady_power_levels_enabled;$/;"	m	struct:power_config	typeref:typename:bool
g_steady_power_levels_enabled	gpuwattch/gpgpu_sim_wrapper.h	/^    bool g_steady_power_levels_enabled;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:bool
g_steady_state_tracking_filename	gpgpu-sim/gpu-sim.h	/^    char * g_steady_state_tracking_filename;$/;"	m	struct:power_config	typeref:typename:char *
g_steady_state_tracking_filename	gpuwattch/gpgpu_sim_wrapper.h	/^    char * g_steady_state_tracking_filename;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:char *
g_stream_manager	gpgpusim_entrypoint.cc	/^stream_manager *g_stream_manager;$/;"	v	typeref:typename:stream_manager *
g_surf_mem	cuda-sim/ptx_loader.cc	/^memory_space *g_surf_mem;$/;"	v	typeref:typename:memory_space *
g_sym_name_to_symbol_table	cuda-sim/ptx_parser.cc	/^std::map<std::string,symbol_table*> g_sym_name_to_symbol_table;$/;"	v	typeref:typename:std::map<std::string,symbol_table * >
g_tex_mem	cuda-sim/ptx_loader.cc	/^memory_space *g_tex_mem;$/;"	v	typeref:typename:memory_space *
g_the_gpu	gpgpusim_entrypoint.cc	/^gpgpu_sim *g_the_gpu;$/;"	v	typeref:typename:gpgpu_sim *
g_the_gpu_config	gpgpusim_entrypoint.cc	/^gpgpu_sim_config g_the_gpu_config;$/;"	v	typeref:typename:gpgpu_sim_config
g_tp	gpuwattch/cacti/parameter.cc	/^TechnologyParameter g_tp;$/;"	v	typeref:typename:TechnologyParameter
g_use_nonlinear_model	gpgpu-sim/gpu-sim.h	/^    bool g_use_nonlinear_model;$/;"	m	struct:power_config	typeref:typename:bool
g_var_type	cuda-sim/ptx_parser.cc	/^type_info *g_var_type = NULL;$/;"	v	typeref:typename:type_info *
g_vector_spec	cuda-sim/ptx_parser.cc	/^int g_vector_spec = -1;$/;"	v	typeref:typename:int
g_visualizer_enabled	gpgpu-sim/gpu-sim.h	/^    bool  g_visualizer_enabled;$/;"	m	class:gpgpu_sim_config	typeref:typename:bool
g_visualizer_filename	gpgpu-sim/gpu-sim.h	/^    char *g_visualizer_filename;$/;"	m	class:gpgpu_sim_config	typeref:typename:char *
g_visualizer_zlevel	gpgpu-sim/gpu-sim.h	/^    int   g_visualizer_zlevel;$/;"	m	class:gpgpu_sim_config	typeref:typename:int
g_watchpoint_hits	debug.cc	/^std::map<unsigned,watchpoint_event> g_watchpoint_hits;$/;"	v	typeref:typename:std::map<unsigned,watchpoint_event>
gap	gpgpu-sim/addrdec.h	/^   unsigned int gap;$/;"	m	class:linear_to_raw_address_translation	typeref:typename:unsigned int
gate_C	gpuwattch/cacti/basic_circuit.cc	/^double gate_C($/;"	f	typeref:typename:double
gate_C_pass	gpuwattch/cacti/basic_circuit.cc	/^double gate_C_pass($/;"	f	typeref:typename:double
gate_cap	gpuwattch/cacti/router.cc	/^MCPAT_Router::gate_cap(double w) {$/;"	f	class:MCPAT_Router	typeref:typename:double
gate_leakage	gpuwattch/cacti/cacti_interface.h	/^    double gate_leakage;$/;"	m	class:powerComponents	typeref:typename:double
gate_leakage	gpuwattch/logic.h	/^	double energy, base_energy,per_access_energy, leakage, gate_leakage;$/;"	m	class:FunctionalUnit	typeref:typename:double
generate_mem_accesses	abstract_hardware_model.cc	/^void warp_inst_t::generate_mem_accesses()$/;"	f	class:warp_inst_t	typeref:typename:void
generic_space	abstract_hardware_model.h	/^   generic_space,$/;"	e	enum:_memory_space_t
generic_to_global	cuda-sim/cuda-sim.cc	/^addr_t generic_to_global( addr_t addr )$/;"	f	typeref:typename:addr_t
generic_to_local	cuda-sim/cuda-sim.cc	/^addr_t generic_to_local( unsigned smid, unsigned hwtid, addr_t addr )$/;"	f	typeref:typename:addr_t
generic_to_shared	cuda-sim/cuda-sim.cc	/^addr_t generic_to_shared( unsigned smid, addr_t addr )$/;"	f	typeref:typename:addr_t
getAttribute	gpuwattch/xmlParser.cc	/^XMLAttribute XMLNode::getAttribute     (int i) const { if ((!d)||(i>=d->nAttribute)) return empt/;"	f	class:XMLNode	typeref:typename:XMLAttribute
getAttribute	gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::getAttribute(XMLCSTR lpszAttrib, int *j) const$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
getAttribute	gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::getAttribute(XMLCSTR name, int j) const$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
getAttributeName	gpuwattch/xmlParser.cc	/^XMLCSTR      XMLNode::getAttributeName (int i) const { if ((!d)||(i>=d->nAttribute)) return NULL/;"	f	class:XMLNode	typeref:typename:XMLCSTR
getAttributeValue	gpuwattch/xmlParser.cc	/^XMLCSTR      XMLNode::getAttributeValue(int i) const { if ((!d)||(i>=d->nAttribute)) return NULL/;"	f	class:XMLNode	typeref:typename:XMLCSTR
getChildNode	gpuwattch/xmlParser.cc	/^XMLNode      XMLNode::getChildNode     (int i) const { if ((!d)||(i>=d->nChild    )) return empt/;"	f	class:XMLNode	typeref:typename:XMLNode
getChildNode	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::getChildNode(XMLCSTR name, int *j) const$/;"	f	class:XMLNode	typeref:typename:XMLNode
getChildNode	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::getChildNode(XMLCSTR name, int j) const$/;"	f	class:XMLNode	typeref:typename:XMLNode
getChildNodeByPath	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::getChildNodeByPath(XMLCSTR _path, char createMissing, XMLCHAR sep)$/;"	f	class:XMLNode	typeref:typename:XMLNode
getChildNodeByPathNonConst	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::getChildNodeByPathNonConst(XMLSTR path, char createIfMissing, XMLCHAR sep)$/;"	f	class:XMLNode	typeref:typename:XMLNode
getChildNodeWithAttribute	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::getChildNodeWithAttribute(XMLCSTR name,XMLCSTR attributeName,XMLCSTR attributeV/;"	f	class:XMLNode	typeref:typename:XMLNode
getClear	gpuwattch/xmlParser.cc	/^XMLClear     XMLNode::getClear         (int i) const { if ((!d)||(i>=d->nClear    )) return empt/;"	f	class:XMLNode	typeref:typename:XMLClear
getError	gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::getError(XMLError xerror)$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
getExecuteWarp	abstract_hardware_model.cc	/^warp_inst_t core_t::getExecuteWarp(unsigned warpId)$/;"	f	class:core_t	typeref:typename:warp_inst_t
getMemoryBit	gpgpu-sim/warp_status.cc	/^	char WST::getMemoryBit (unsigned warpId) const {$/;"	f	class:WST	typeref:typename:char
getMemoryConfig	gpgpu-sim/gpu-sim.cc	/^const struct memory_config * gpgpu_sim::getMemoryConfig()$/;"	f	class:gpgpu_sim	typeref:typename:const struct memory_config *
getName	gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::getName() const { if (!d) return NULL; return d->lpszName;   }$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
getNextChar	gpuwattch/xmlParser.cc	/^static inline XMLCHAR getNextChar(XML *pXML)$/;"	f	typeref:typename:XMLCHAR	file:
getParentNode	gpuwattch/xmlParser.cc	/^XMLNode      XMLNode::getParentNode    (     ) const { if ((!d)||(!d->pParent     )) return empt/;"	f	class:XMLNode	typeref:typename:XMLNode
getSIMTCluster	gpgpu-sim/gpu-sim.cc	/^simt_core_cluster * gpgpu_sim::getSIMTCluster()$/;"	f	class:gpgpu_sim	typeref:typename:simt_core_cluster *
getShaderCoreConfig	gpgpu-sim/gpu-sim.cc	/^const struct shader_core_config * gpgpu_sim::getShaderCoreConfig()$/;"	f	class:gpgpu_sim	typeref:typename:const struct shader_core_config *
getStallBit	gpgpu-sim/warp_status.cc	/^	char WST::getStallBit (unsigned warpId) const {$/;"	f	class:WST	typeref:typename:char
getStats	intersim2/trafficmanager.hpp	/^  Stats * getStats(const string & name) { return _stats[name]; }$/;"	f	class:TrafficManager	typeref:typename:Stats *
getText	gpuwattch/xmlParser.cc	/^XMLCSTR      XMLNode::getText          (int i) const { if ((!d)||(i>=d->nText     )) return NULL/;"	f	class:XMLNode	typeref:typename:XMLCSTR
getTime	intersim2/trafficmanager.hpp	/^  inline int getTime() { return _time;}$/;"	f	class:TrafficManager	typeref:typename:int
getVersion	gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::getVersion() { return _CXML("v2.39"); }$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
get_L1C_sub_stats	gpgpu-sim/shader.cc	/^void ldst_unit::get_L1C_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:ldst_unit	typeref:typename:void
get_L1C_sub_stats	gpgpu-sim/shader.cc	/^void shader_core_ctx::get_L1C_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:shader_core_ctx	typeref:typename:void
get_L1C_sub_stats	gpgpu-sim/shader.cc	/^void simt_core_cluster::get_L1C_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:simt_core_cluster	typeref:typename:void
get_L1D_sub_stats	gpgpu-sim/shader.cc	/^void ldst_unit::get_L1D_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:ldst_unit	typeref:typename:void
get_L1D_sub_stats	gpgpu-sim/shader.cc	/^void shader_core_ctx::get_L1D_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:shader_core_ctx	typeref:typename:void
get_L1D_sub_stats	gpgpu-sim/shader.cc	/^void simt_core_cluster::get_L1D_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:simt_core_cluster	typeref:typename:void
get_L1I_sub_stats	gpgpu-sim/shader.cc	/^void shader_core_ctx::get_L1I_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:shader_core_ctx	typeref:typename:void
get_L1I_sub_stats	gpgpu-sim/shader.cc	/^void simt_core_cluster::get_L1I_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:simt_core_cluster	typeref:typename:void
get_L1T_sub_stats	gpgpu-sim/shader.cc	/^void ldst_unit::get_L1T_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:ldst_unit	typeref:typename:void
get_L1T_sub_stats	gpgpu-sim/shader.cc	/^void shader_core_ctx::get_L1T_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:shader_core_ctx	typeref:typename:void
get_L1T_sub_stats	gpgpu-sim/shader.cc	/^void simt_core_cluster::get_L1T_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:simt_core_cluster	typeref:typename:void
get_L2cache_sub_stats	gpgpu-sim/l2cache.cc	/^void memory_sub_partition::get_L2cache_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:memory_sub_partition	typeref:typename:void
get_PC	cuda-sim/ptx_ir.h	/^   addr_t get_PC() const$/;"	f	class:ptx_instruction	typeref:typename:addr_t
get_access_byte_mask	gpgpu-sim/mem_fetch.h	/^   mem_access_byte_mask_t get_access_byte_mask() const { return m_access.get_byte_mask(); }$/;"	f	class:mem_fetch	typeref:typename:mem_access_byte_mask_t
get_access_type	gpgpu-sim/mem_fetch.h	/^   enum mem_access_type get_access_type() const { return m_access.get_type(); }$/;"	f	class:mem_fetch	typeref:enum:mem_access_type
get_access_warp_mask	gpgpu-sim/mem_fetch.h	/^   const active_mask_t& get_access_warp_mask() const { return m_access.get_warp_mask(); }$/;"	f	class:mem_fetch	typeref:typename:const active_mask_t &
get_active_count	gpgpu-sim/shader.h	/^      unsigned get_active_count() const { return m_warp->active_count(); }$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
get_active_count	gpgpu-sim/shader.h	/^      unsigned get_active_count() const$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
get_active_lanes_in_pipeline	gpgpu-sim/shader.h	/^    virtual unsigned get_active_lanes_in_pipeline()$/;"	f	class:pipelined_simd_unit	typeref:typename:unsigned
get_active_mask	abstract_hardware_model.cc	/^const simt_mask_t &simt_stack::get_active_mask() const$/;"	f	class:simt_stack	typeref:typename:const simt_mask_t &
get_active_mask	abstract_hardware_model.h	/^    const active_mask_t & get_active_mask() const$/;"	f	class:warp_inst_t	typeref:typename:const active_mask_t &
get_active_mask	gpgpu-sim/shader.h	/^      const active_mask_t & get_active_mask() const { return m_warp->get_active_mask(); }$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:const active_mask_t &
get_active_mask	gpgpu-sim/shader.h	/^      const active_mask_t & get_active_mask()$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:const active_mask_t &
get_addr	abstract_hardware_model.h	/^    new_addr_type get_addr( unsigned n ) const$/;"	f	class:warp_inst_t	typeref:typename:new_addr_type
get_addr	abstract_hardware_model.h	/^   new_addr_type get_addr() const { return m_addr; }$/;"	f	class:mem_access_t	typeref:typename:new_addr_type
get_addr	debug.h	/^   addr_t get_addr() const { return m_addr; }$/;"	f	class:brk_pt	typeref:typename:addr_t
get_addr	gpgpu-sim/mem_fetch.h	/^   new_addr_type get_addr() const { return m_access.get_addr(); }$/;"	f	class:mem_fetch	typeref:typename:new_addr_type
get_addr_offset	cuda-sim/ptx_ir.h	/^   int get_addr_offset() const { return m_addr_offset;}$/;"	f	class:operand_info	typeref:typename:int
get_addr_space	cuda-sim/ptx_ir.h	/^   enum _memory_space_t get_addr_space() const { return m_addr_space; }$/;"	f	class:operand_info	typeref:enum:_memory_space_t
get_address	cuda-sim/ptx_ir.h	/^   addr_t get_address() const $/;"	f	class:symbol	typeref:typename:addr_t
get_area	gpuwattch/cacti/area.h	/^  double get_area() const$/;"	f	class:Area	typeref:typename:double
get_arg	cuda-sim/ptx_ir.h	/^   const symbol* get_arg( unsigned n ) const$/;"	f	class:function_info	typeref:typename:const symbol *
get_array_dim	cuda-sim/ptx_ir.h	/^   int get_array_dim() const { assert(m_init); return m_array_dim; }$/;"	f	class:type_info_key	typeref:typename:int
get_array_type	cuda-sim/ptx_ir.cc	/^type_info *symbol_table::get_array_type( type_info *base_type, unsigned array_dim ) $/;"	f	class:symbol_table	typeref:typename:type_info *
get_atomic	cuda-sim/ptx_ir.h	/^   unsigned get_atomic() const { return m_atomic_spec;}$/;"	f	class:ptx_instruction	typeref:typename:unsigned
get_bank	abstract_hardware_model.h	/^   unsigned get_bank() const { return m_bank; }$/;"	f	class:memory_space_t	typeref:typename:unsigned
get_bank	gpgpu-sim/shader.h	/^      unsigned get_bank() const { return m_bank; }$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
get_bb	cuda-sim/ptx_ir.h	/^   basic_block_t* get_bb() { return m_basic_block;}$/;"	f	class:ptx_instruction	typeref:typename:basic_block_t *
get_bit	cuda-sim/ptx_sim.h	/^   int get_bit( unsigned bit )$/;"	f	union:ptx_reg_t	typeref:typename:int
get_block	gpgpu-sim/gpu-cache.h	/^    cache_block_t &get_block(unsigned idx) { return m_lines[idx];}$/;"	f	class:tag_array	typeref:typename:cache_block_t &
get_builtin	cuda-sim/ptx_sim.cc	/^unsigned ptx_thread_info::get_builtin( int builtin_id, unsigned dim_mod ) $/;"	f	class:ptx_thread_info	typeref:typename:unsigned
get_byte_mask	abstract_hardware_model.h	/^   mem_access_byte_mask_t get_byte_mask() const { return m_byte_mask; }$/;"	f	class:mem_access_t	typeref:typename:mem_access_byte_mask_t
get_cache_config	gpgpu-sim/gpu-sim.cc	/^FuncCache gpgpu_sim::get_cache_config(std::string kernel_name)$/;"	f	class:gpgpu_sim	typeref:typename:FuncCache
get_cache_misses	gpgpu-sim/power_stat.h	/^    unsigned get_cache_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_cache_read_misses	gpgpu-sim/power_stat.h	/^    unsigned get_cache_read_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_cache_stats	gpgpu-sim/shader.cc	/^void ldst_unit::get_cache_stats(cache_stats &cs) {$/;"	f	class:ldst_unit	typeref:typename:void
get_cache_stats	gpgpu-sim/shader.cc	/^void shader_core_ctx::get_cache_stats(cache_stats &cs){$/;"	f	class:shader_core_ctx	typeref:typename:void
get_cache_stats	gpgpu-sim/shader.cc	/^void simt_core_cluster::get_cache_stats(cache_stats &cs) const{$/;"	f	class:simt_core_cluster	typeref:typename:void
get_cache_status	gpgpu-sim/gpu-cache.h	/^    FuncCache get_cache_status() {return cache_status;}$/;"	f	class:cache_config	typeref:typename:FuncCache
get_cache_write_misses	gpgpu-sim/power_stat.h	/^    unsigned get_cache_write_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_cmpop	cuda-sim/ptx_ir.h	/^   unsigned get_cmpop() const { return m_compare_op;}$/;"	f	class:ptx_instruction	typeref:typename:unsigned
get_coefficient_ccache_readhits	gpuwattch/core.h	/^	float get_coefficient_ccache_readhits()$/;"	f	class:Core	typeref:typename:float
get_coefficient_ccache_readmisses	gpuwattch/core.h	/^	float get_coefficient_ccache_readmisses()$/;"	f	class:Core	typeref:typename:float
get_coefficient_dcache_readhits	gpuwattch/core.h	/^	float get_coefficient_dcache_readhits()$/;"	f	class:Core	typeref:typename:float
get_coefficient_dcache_readmisses	gpuwattch/core.h	/^	float get_coefficient_dcache_readmisses()$/;"	f	class:Core	typeref:typename:float
get_coefficient_dcache_writehits	gpuwattch/core.h	/^	float get_coefficient_dcache_writehits()$/;"	f	class:Core	typeref:typename:float
get_coefficient_dcache_writemisses	gpuwattch/core.h	/^	float get_coefficient_dcache_writemisses(){$/;"	f	class:Core	typeref:typename:float
get_coefficient_duty_cycle	gpuwattch/core.h	/^	float get_coefficient_duty_cycle()$/;"	f	class:Core	typeref:typename:float
get_coefficient_fpint_insts	gpuwattch/core.h	/^	float get_coefficient_fpint_insts(){$/;"	f	class:Core	typeref:typename:float
get_coefficient_fpu_accesses	gpuwattch/core.h	/^	float get_coefficient_fpu_accesses(){$/;"	f	class:Core	typeref:typename:float
get_coefficient_ialu_accesses	gpuwattch/core.h	/^	float get_coefficient_ialu_accesses(){$/;"	f	class:Core	typeref:typename:float
get_coefficient_icache_hits	gpuwattch/core.h	/^	float get_coefficient_icache_hits(){$/;"	f	class:Core	typeref:typename:float
get_coefficient_icache_misses	gpuwattch/core.h	/^	float get_coefficient_icache_misses(){$/;"	f	class:Core	typeref:typename:float
get_coefficient_l2_read_hits	gpuwattch/processor.h	/^	 double get_coefficient_l2_read_hits(){$/;"	f	class:Processor	typeref:typename:double
get_coefficient_l2_read_misses	gpuwattch/processor.h	/^	 double get_coefficient_l2_read_misses(){$/;"	f	class:Processor	typeref:typename:double
get_coefficient_l2_write_hits	gpuwattch/processor.h	/^	 double get_coefficient_l2_write_hits(){$/;"	f	class:Processor	typeref:typename:double
get_coefficient_l2_write_misses	gpuwattch/processor.h	/^	 double get_coefficient_l2_write_misses(){$/;"	f	class:Processor	typeref:typename:double
get_coefficient_lsq_accesses	gpuwattch/core.h	/^	float get_coefficient_lsq_accesses()$/;"	f	class:Core	typeref:typename:float
get_coefficient_mem_pre	gpuwattch/processor.h	/^	 double get_coefficient_mem_pre()$/;"	f	class:Processor	typeref:typename:double
get_coefficient_mem_reads	gpuwattch/processor.h	/^	 double get_coefficient_mem_reads()$/;"	f	class:Processor	typeref:typename:double
get_coefficient_mem_writes	gpuwattch/processor.h	/^	 double get_coefficient_mem_writes()$/;"	f	class:Processor	typeref:typename:double
get_coefficient_noc_accesses	gpuwattch/processor.h	/^	 double get_coefficient_noc_accesses() {$/;"	f	class:Processor	typeref:typename:double
get_coefficient_noregfileops_accesses	gpuwattch/core.h	/^	float get_coefficient_noregfileops_accesses(){return ((exu->rfu->xbar_rfu->power.readOp.dynamic/;"	f	class:Core	typeref:typename:float
get_coefficient_readcoalescing	gpuwattch/processor.h	/^    double get_coefficient_readcoalescing()$/;"	f	class:Processor	typeref:typename:double
get_coefficient_regreads_accesses	gpuwattch/core.h	/^	float get_coefficient_regreads_accesses(){$/;"	f	class:Core	typeref:typename:float
get_coefficient_regwrites_accesses	gpuwattch/core.h	/^	float get_coefficient_regwrites_accesses(){return ((exu->rfu->IRF->local_result.power.writeOp.d/;"	f	class:Core	typeref:typename:float
get_coefficient_sfu_accesses	gpuwattch/core.h	/^	float get_coefficient_sfu_accesses(){$/;"	f	class:Core	typeref:typename:float
get_coefficient_sharedmemory_readhits	gpuwattch/core.h	/^	float get_coefficient_sharedmemory_readhits()$/;"	f	class:Core	typeref:typename:float
get_coefficient_tcache_readhits	gpuwattch/core.h	/^	float get_coefficient_tcache_readhits()$/;"	f	class:Core	typeref:typename:float
get_coefficient_tcache_readmisses	gpuwattch/core.h	/^	float get_coefficient_tcache_readmisses()$/;"	f	class:Core	typeref:typename:float
get_coefficient_tcache_readmisses1	gpuwattch/core.h	/^	float get_coefficient_tcache_readmisses1(){$/;"	f	class:Core	typeref:typename:float
get_coefficient_tcache_readmisses2	gpuwattch/core.h	/^	float get_coefficient_tcache_readmisses2(){$/;"	f	class:Core	typeref:typename:float
get_coefficient_tot_insts	gpuwattch/core.h	/^	float get_coefficient_tot_insts(){$/;"	f	class:Core	typeref:typename:float
get_coefficient_writecoalescing	gpuwattch/processor.h	/^    double get_coefficient_writecoalescing()$/;"	f	class:Processor	typeref:typename:double
get_committed_inst	gpgpu-sim/power_stat.h	/^    unsigned get_committed_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_config	abstract_hardware_model.h	/^    const gpgpu_functional_sim_config &get_config() const { return m_function_model_config; }$/;"	f	class:gpgpu_t	typeref:typename:const gpgpu_functional_sim_config &
get_config	cuda-sim/ptx_sim.h	/^   const gpgpu_functional_sim_config &get_config() const { return m_gpu->get_config(); }$/;"	f	class:ptx_thread_info	typeref:typename:const gpgpu_functional_sim_config &
get_config	gpgpu-sim/gpu-sim.h	/^   const gpgpu_sim_config &get_config() const { return m_config; }$/;"	f	class:gpgpu_sim	typeref:typename:const gpgpu_sim_config &
get_config	gpgpu-sim/shader.h	/^    const shader_core_config *get_config() const { return m_config; }$/;"	f	class:shader_core_ctx	typeref:typename:const shader_core_config *
get_const_dynamic_power	gpuwattch/processor.h	/^    double get_const_dynamic_power()$/;"	f	class:Processor	typeref:typename:double
get_const_mem_offset	cuda-sim/ptx_ir.h	/^   addr_t get_const_mem_offset() const { return m_const_mem_offset; }$/;"	f	class:operand_info	typeref:typename:addr_t
get_constant_c_accesses	gpgpu-sim/power_stat.h	/^    unsigned get_constant_c_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_constant_c_hits	gpgpu-sim/power_stat.h	/^    unsigned get_constant_c_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_constant_c_misses	gpgpu-sim/power_stat.h	/^    unsigned get_constant_c_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_converge_point	cuda-sim/cuda-sim.cc	/^address_type get_converge_point( address_type pc ) $/;"	f	typeref:typename:address_type
get_core	cuda-sim/ptx_sim.h	/^   core_t *get_core() { return m_core; }$/;"	f	class:ptx_thread_info	typeref:typename:core_t *
get_cta_dim	abstract_hardware_model.h	/^   dim3 get_cta_dim() const { return m_block_dim; }$/;"	f	class:kernel_info_t	typeref:typename:dim3
get_cta_id	gpgpu-sim/shader.h	/^    unsigned get_cta_id() const { return m_cta_id; }$/;"	f	class:shd_warp_t	typeref:typename:unsigned
get_cta_uid	cuda-sim/ptx_sim.h	/^   unsigned long long get_cta_uid() { return m_cta_info->get_sm_idx();}$/;"	f	class:ptx_thread_info	typeref:typename:unsigned long long
get_ctaid	cuda-sim/ptx_sim.h	/^   dim3 get_ctaid() const { return m_ctaid; }$/;"	f	class:ptx_thread_info	typeref:typename:dim3
get_ctrl_size	gpgpu-sim/mem_fetch.h	/^   unsigned get_ctrl_size() const { return m_ctrl_size; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_data_size	gpgpu-sim/mem_fetch.h	/^   unsigned get_data_size() const { return m_data_size; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_double_operand_type	cuda-sim/ptx_ir.h	/^   int get_double_operand_type() const { return  m_double_operand_type; }$/;"	f	class:operand_info	typeref:typename:int
get_dram_act	gpgpu-sim/power_stat.h	/^    unsigned get_dram_act(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_activity	gpgpu-sim/power_stat.h	/^    unsigned get_dram_activity(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_cmd	gpgpu-sim/power_stat.h	/^    unsigned get_dram_cmd(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_nop	gpgpu-sim/power_stat.h	/^    unsigned get_dram_nop(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_pre	gpgpu-sim/power_stat.h	/^    unsigned get_dram_pre(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_rd	gpgpu-sim/power_stat.h	/^    unsigned get_dram_rd(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_req	gpgpu-sim/power_stat.h	/^    unsigned get_dram_req(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_wr	gpgpu-sim/power_stat.h	/^    unsigned get_dram_wr(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dst	cuda-sim/ptx_ir.h	/^   const symbol *get_dst() const { return m_dst; }$/;"	f	class:arg_buffer_t	typeref:typename:const symbol *
get_dynamic_warp_id	gpgpu-sim/shader.h	/^    unsigned get_dynamic_warp_id() const { return m_dynamic_warp_id; }$/;"	f	class:shd_warp_t	typeref:typename:unsigned
get_dynamic_warp_issue	gpgpu-sim/shader.h	/^    const std::vector< std::vector<unsigned> >& get_dynamic_warp_issue() const$/;"	f	class:shader_core_stats	typeref:typename:const std::vector<std::vector<unsigned>> &
get_finfo	cuda-sim/ptx_sim.h	/^   const function_info *get_finfo() const { return m_func_info;   }$/;"	f	class:ptx_thread_info	typeref:typename:const function_info *
get_finfo	cuda-sim/ptx_sim.h	/^   function_info *get_finfo() { return m_func_info;   }$/;"	f	class:ptx_thread_info	typeref:typename:function_info *
get_forced_max_capability	abstract_hardware_model.h	/^    unsigned get_forced_max_capability() const { return m_ptx_force_max_capability; }$/;"	f	class:gpgpu_functional_sim_config	typeref:typename:unsigned
get_fpdiv_accessess	gpgpu-sim/power_stat.h	/^    unsigned get_fpdiv_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_fpmul_accessess	gpgpu-sim/power_stat.h	/^    unsigned get_fpmul_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_free	abstract_hardware_model.h	/^	warp_inst_t ** get_free(){$/;"	f	class:register_set	typeref:typename:warp_inst_t **
get_function_size	cuda-sim/ptx_ir.h	/^   unsigned get_function_size() { return m_instructions.size();}$/;"	f	class:function_info	typeref:typename:unsigned
get_global_memory	abstract_hardware_model.h	/^    class memory_space *get_global_memory() { return m_global_mem; }$/;"	c	class:gpgpu_t
get_global_memory	cuda-sim/ptx_sim.h	/^   memory_space *get_global_memory() { return m_gpu->get_global_memory(); }$/;"	f	class:ptx_thread_info	typeref:typename:memory_space *
get_global_next	cuda-sim/ptx_ir.h	/^   addr_t get_global_next() { return m_global_next;}$/;"	f	class:symbol_table	typeref:typename:addr_t
get_gpu	abstract_hardware_model.h	/^        class gpgpu_sim * get_gpu() {return m_gpu;}$/;"	c	class:core_t
get_gpu	cuda-sim/ptx_sim.h	/^   class gpgpu_sim *get_gpu() { return (gpgpu_sim*)m_gpu;}$/;"	c	class:ptx_thread_info
get_gpu	gpgpu-sim/shader.h	/^    gpgpu_sim *get_gpu() { return m_gpu; }$/;"	f	class:simt_core_cluster	typeref:typename:gpgpu_sim *
get_grid_dim	abstract_hardware_model.h	/^   dim3 get_grid_dim() const { return m_grid_dim; }$/;"	f	class:kernel_info_t	typeref:typename:dim3
get_h	gpuwattch/cacti/area.h	/^  double get_h() const { return h; }$/;"	f	class:Area	typeref:typename:double
get_hw_ctaid	cuda-sim/ptx_sim.h	/^   unsigned get_hw_ctaid() const { return m_hw_ctaid;}$/;"	f	class:ptx_thread_info	typeref:typename:unsigned
get_hw_sid	cuda-sim/ptx_sim.h	/^   unsigned get_hw_sid() const { return m_hw_sid;}$/;"	f	class:ptx_thread_info	typeref:typename:unsigned
get_hw_tid	cuda-sim/ptx_sim.h	/^   unsigned get_hw_tid() const { return m_hw_tid;}$/;"	f	class:ptx_thread_info	typeref:class:ptx_thread_info::get_gpu unsigned
get_hw_wid	cuda-sim/ptx_sim.h	/^   unsigned get_hw_wid() const { return m_hw_wid;}$/;"	f	class:ptx_thread_info	typeref:typename:unsigned
get_ialu_accessess	gpgpu-sim/power_stat.h	/^    unsigned get_ialu_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_icnt_mem_to_simt	gpgpu-sim/power_stat.h	/^    long get_icnt_mem_to_simt(){$/;"	f	class:power_stat_t	typeref:typename:long
get_icnt_power_stats	gpgpu-sim/shader.cc	/^void shader_core_ctx::get_icnt_power_stats(long &n_simt_to_mem, long &n_mem_to_simt) const{$/;"	f	class:shader_core_ctx	typeref:typename:void
get_icnt_receive_time	gpgpu-sim/mem_fetch.h	/^   unsigned get_icnt_receive_time() const { return m_icnt_receive_time; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_icnt_simt_to_mem	gpgpu-sim/power_stat.h	/^    long get_icnt_simt_to_mem(){$/;"	f	class:power_stat_t	typeref:typename:long
get_icnt_stats	gpgpu-sim/shader.cc	/^void simt_core_cluster::get_icnt_stats(long &n_simt_to_mem, long &n_mem_to_simt) const {$/;"	f	class:simt_core_cluster	typeref:typename:void
get_icount	cuda-sim/ptx_sim.h	/^   unsigned get_icount() const { return m_icount;}$/;"	f	class:ptx_thread_info	typeref:typename:unsigned
get_id	gpgpu-sim/l2cache.h	/^   unsigned get_id() const { return m_id; } $/;"	f	class:memory_sub_partition	typeref:typename:unsigned
get_id	gpgpu-sim/shader.h	/^      unsigned get_id() const { return m_cuid; } \/\/ returns CU hw id$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
get_initializer	cuda-sim/ptx_ir.h	/^   std::list<operand_info> get_initializer() const$/;"	f	class:symbol	typeref:typename:std::list<operand_info>
get_insn_str	cuda-sim/ptx_ir.cc	/^std::string function_info::get_insn_str( unsigned pc ) const$/;"	f	class:function_info	typeref:typename:std::string
get_inst	cuda-sim/ptx_sim.cc	/^const ptx_instruction *ptx_thread_info::get_inst( addr_t pc ) const$/;"	f	class:ptx_thread_info	typeref:typename:const ptx_instruction *
get_inst	cuda-sim/ptx_sim.cc	/^const ptx_instruction *ptx_thread_info::get_inst() const$/;"	f	class:ptx_thread_info	typeref:typename:const ptx_instruction *
get_inst	gpgpu-sim/mem_fetch.h	/^   const warp_inst_t &get_inst() { return m_inst; }$/;"	f	class:mem_fetch	typeref:typename:const warp_inst_t &
get_inst_c_accesses	gpgpu-sim/power_stat.h	/^    unsigned get_inst_c_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_inst_c_hits	gpgpu-sim/power_stat.h	/^    unsigned get_inst_c_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_inst_c_misses	gpgpu-sim/power_stat.h	/^    unsigned get_inst_c_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_instruction	cuda-sim/ptx_ir.h	/^   const ptx_instruction *get_instruction( unsigned PC ) const$/;"	f	class:function_info	typeref:typename:const ptx_instruction *
get_int	cuda-sim/ptx_ir.h	/^   int get_int() const { return m_value.m_int;}$/;"	f	class:operand_info	typeref:typename:int
get_intdiv_accessess	gpgpu-sim/power_stat.h	/^    unsigned get_intdiv_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_interval	gpgpu-sim/stat-tool.h	/^   const unsigned long long & get_interval() const { return m_snap_shot_interval;}$/;"	f	class:snap_shot_trigger	typeref:typename:const unsigned long long &
get_intmul24_accessess	gpgpu-sim/power_stat.h	/^    unsigned get_intmul24_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_intmul32_accessess	gpgpu-sim/power_stat.h	/^    unsigned get_intmul32_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_intmul_accessess	gpgpu-sim/power_stat.h	/^    unsigned get_intmul_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_is_write	gpgpu-sim/mem_fetch.h	/^   bool     get_is_write() const { return m_access.is_write(); }$/;"	f	class:mem_fetch	typeref:typename:bool
get_kernel	gpgpu-sim/shader.h	/^    kernel_info_t *get_kernel() { return m_kernel; }$/;"	f	class:shader_core_ctx	typeref:typename:kernel_info_t *
get_kernel	stream_manager.h	/^    kernel_info_t *get_kernel() { return m_kernel; }$/;"	f	class:stream_operation	typeref:typename:kernel_info_t *
get_kernel_code_size	cuda-sim/cuda-sim.cc	/^size_t get_kernel_code_size( class function_info *entry )$/;"	f	typeref:typename:size_t
get_kernel_info	abstract_hardware_model.h	/^        kernel_info_t * get_kernel_info(){ return m_kernel;}$/;"	f	class:core_t	typeref:typename:kernel_info_t *
get_kernel_info	cuda-sim/ptx_ir.h	/^   const struct gpgpu_ptx_sim_kernel_info* get_kernel_info () const$/;"	f	class:function_info	typeref:typename:const struct gpgpu_ptx_sim_kernel_info *
get_key	cuda-sim/ptx_ir.h	/^   const type_info_key &get_key() const { return m_type_info;}$/;"	f	class:type_info	typeref:typename:const type_info_key &
get_l1d_read_accesses	gpgpu-sim/power_stat.h	/^    unsigned get_l1d_read_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l1d_read_hits	gpgpu-sim/power_stat.h	/^    unsigned get_l1d_read_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l1d_read_misses	gpgpu-sim/power_stat.h	/^    unsigned get_l1d_read_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l1d_write_accesses	gpgpu-sim/power_stat.h	/^    unsigned get_l1d_write_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l1d_write_hits	gpgpu-sim/power_stat.h	/^    unsigned get_l1d_write_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l1d_write_misses	gpgpu-sim/power_stat.h	/^    unsigned get_l1d_write_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l2_read_accesses	gpgpu-sim/power_stat.h	/^    unsigned get_l2_read_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l2_read_hits	gpgpu-sim/power_stat.h	/^    unsigned get_l2_read_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l2_read_misses	gpgpu-sim/power_stat.h	/^    unsigned get_l2_read_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l2_write_accesses	gpgpu-sim/power_stat.h	/^    unsigned get_l2_write_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l2_write_hits	gpgpu-sim/power_stat.h	/^    unsigned get_l2_write_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l2_write_misses	gpgpu-sim/power_stat.h	/^    unsigned get_l2_write_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_label	cuda-sim/ptx_ir.h	/^   const symbol *get_label() const { return m_label;}$/;"	f	class:ptx_instruction	typeref:typename:const symbol *
get_length	gpgpu-sim/delayqueue.h	/^   unsigned get_length() const { return m_length; }$/;"	f	class:fifo_pipeline	typeref:typename:unsigned
get_line_sz	gpgpu-sim/gpu-cache.h	/^    unsigned get_line_sz() const$/;"	f	class:cache_config	typeref:typename:unsigned
get_literal_value	cuda-sim/ptx_ir.h	/^   ptx_reg_t get_literal_value() const$/;"	f	class:operand_info	typeref:typename:ptx_reg_t
get_local_mem_stack_pointer	cuda-sim/ptx_sim.h	/^   unsigned get_local_mem_stack_pointer() const { return m_local_mem_stack_pointer; }$/;"	f	class:ptx_thread_info	typeref:typename:unsigned
get_local_next	cuda-sim/ptx_ir.h	/^   addr_t get_local_next() { return m_local_next;}$/;"	f	class:symbol_table	typeref:typename:addr_t
get_location	cuda-sim/ptx_sim.cc	/^std::string ptx_thread_info::get_location() const$/;"	f	class:ptx_thread_info	typeref:typename:std::string
get_m_instr_mem_index	cuda-sim/ptx_ir.h	/^   unsigned get_m_instr_mem_index() { return m_instr_mem_index;}$/;"	f	class:ptx_instruction	typeref:typename:unsigned
get_max_concurrent_kernel	gpgpu-sim/gpu-sim.h	/^    unsigned get_max_concurrent_kernel() const { return max_concurrent_kernel; }$/;"	f	class:gpgpu_sim_config	typeref:typename:unsigned
get_max_delay_before_decoder	gpuwattch/cacti/decoder.cc	/^pair<double, double> Predec::get_max_delay_before_decoder($/;"	f	class:Predec	typeref:typename:pair<double,double>
get_max_len	gpgpu-sim/delayqueue.h	/^   unsigned get_max_len() const { return m_max_len; }$/;"	f	class:fifo_pipeline	typeref:typename:unsigned
get_mem_accessess	gpgpu-sim/power_stat.h	/^    unsigned get_mem_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_mem_committed_inst	gpgpu-sim/power_stat.h	/^    unsigned get_mem_committed_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_mem_config	gpgpu-sim/mem_fetch.h	/^   const memory_config *get_mem_config(){return m_mem_config;}$/;"	f	class:mem_fetch	typeref:typename:const memory_config *
get_membar	gpgpu-sim/shader.h	/^    bool get_membar() const { return m_membar; }$/;"	f	class:shd_warp_t	typeref:typename:bool
get_memory_space	cuda-sim/ptx_ir.h	/^   memory_space_t get_memory_space() const { return m_space_spec; }$/;"	f	class:type_info_key	typeref:typename:memory_space_t
get_more_cta_left	gpgpu-sim/gpu-sim.cc	/^bool gpgpu_sim::get_more_cta_left() const$/;"	f	class:gpgpu_sim	typeref:typename:bool
get_mpid	gpgpu-sim/l2cache.h	/^   unsigned get_mpid() const { return m_id; }$/;"	f	class:memory_partition_unit	typeref:typename:unsigned
get_n_active_cta	gpgpu-sim/shader.cc	/^unsigned simt_core_cluster::get_n_active_cta() const$/;"	f	class:simt_core_cluster	typeref:typename:unsigned
get_n_active_cta	gpgpu-sim/shader.h	/^    unsigned get_n_active_cta() const { return m_n_active_cta; }$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
get_n_active_sms	gpgpu-sim/shader.cc	/^unsigned simt_core_cluster::get_n_active_sms() const$/;"	f	class:simt_core_cluster	typeref:typename:unsigned
get_n_atomic	gpgpu-sim/shader.h	/^    unsigned get_n_atomic() const { return m_n_atomic; }$/;"	f	class:shd_warp_t	typeref:typename:unsigned
get_n_completed	gpgpu-sim/shader.h	/^    unsigned get_n_completed() const { return n_completed; }$/;"	f	class:shd_warp_t	typeref:typename:unsigned
get_n_element	gpgpu-sim/delayqueue.h	/^   unsigned get_n_element() const { return m_n_element; }$/;"	f	class:fifo_pipeline	typeref:typename:unsigned
get_name	cuda-sim/ptx_ir.h	/^   std::string get_name() const { assert(m_valid); return m_name; }$/;"	f	class:param_info	typeref:typename:std::string
get_name	cuda-sim/ptx_ir.h	/^   std::string get_name() const$/;"	f	class:function_info	typeref:typename:std::string
get_next_cta_id	abstract_hardware_model.h	/^   dim3 get_next_cta_id() const { return m_next_cta; }$/;"	f	class:kernel_info_t	typeref:typename:dim3
get_next_thread_id	abstract_hardware_model.h	/^   unsigned get_next_thread_id() const $/;"	f	class:kernel_info_t	typeref:typename:unsigned
get_next_thread_id_3d	abstract_hardware_model.h	/^   dim3 get_next_thread_id_3d() const  { return m_next_tid; }$/;"	f	class:kernel_info_t	typeref:typename:dim3
get_non_regfile_operands	gpgpu-sim/power_stat.h	/^    unsigned get_non_regfile_operands(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_not_completed	gpgpu-sim/shader.cc	/^unsigned simt_core_cluster::get_not_completed() const$/;"	f	class:simt_core_cluster	typeref:typename:unsigned
get_not_completed	gpgpu-sim/shader.h	/^    unsigned get_not_completed() const { return m_not_completed; }$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
get_num_flits	gpgpu-sim/mem_fetch.cc	/^unsigned mem_fetch::get_num_flits(bool simt_to_mem){$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_num_lines	gpgpu-sim/gpu-cache.h	/^    unsigned get_num_lines() const$/;"	f	class:cache_config	typeref:typename:unsigned
get_num_operands	abstract_hardware_model.h	/^    unsigned get_num_operands() const {return num_operands;}$/;"	f	class:inst_t	typeref:typename:unsigned
get_num_operands	cuda-sim/ptx_ir.h	/^   unsigned get_num_operands() const { return m_operands.size();}$/;"	f	class:ptx_instruction	typeref:typename:unsigned
get_num_operands	gpgpu-sim/shader.h	/^      unsigned get_num_operands() const{$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
get_num_reconvergence_pairs	cuda-sim/ptx_ir.cc	/^unsigned function_info::get_num_reconvergence_pairs()$/;"	f	class:function_info	typeref:typename:unsigned
get_num_regs	abstract_hardware_model.h	/^    unsigned get_num_regs() const {return num_regs;}$/;"	f	class:inst_t	typeref:typename:unsigned
get_num_regs	gpgpu-sim/shader.h	/^      unsigned get_num_regs() const{$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
get_oc_id	gpgpu-sim/shader.h	/^      unsigned get_oc_id() const { return m_cu->get_id(); }$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
get_offset	cuda-sim/ptx_ir.h	/^   unsigned get_offset() { assert(m_valid); return m_offset; }$/;"	f	class:param_info	typeref:typename:unsigned
get_opcode	cuda-sim/ptx_ir.h	/^   int get_opcode() const { return m_opcode;}$/;"	f	class:ptx_instruction	typeref:typename:int
get_opcode_cstr	cuda-sim/ptx_ir.h	/^   const char *get_opcode_cstr() const $/;"	f	class:ptx_instruction	typeref:typename:const char *
get_operand	gpgpu-sim/shader.h	/^      unsigned get_operand() const { return m_operand; }$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
get_operand_lohi	cuda-sim/ptx_ir.h	/^   int get_operand_lohi() const { return m_operand_lohi; }$/;"	f	class:operand_info	typeref:typename:int
get_operand_nbits	cuda-sim/instructions.cc	/^unsigned get_operand_nbits( const operand_info &op )$/;"	f	typeref:typename:unsigned
get_operand_neg	cuda-sim/ptx_ir.h	/^   bool get_operand_neg() const { return m_operand_neg; }$/;"	f	class:operand_info	typeref:typename:bool
get_operand_value	cuda-sim/instructions.cc	/^ptx_reg_t ptx_thread_info::get_operand_value( const operand_info &op, operand_info dstInfo, unsi/;"	f	class:ptx_thread_info	typeref:typename:ptx_reg_t
get_operands	gpgpu-sim/shader.h	/^      const op_t *get_operands() const { return m_src_op; }$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:const op_t *
get_param_buffer	cuda-sim/ptx_ir.h	/^   const void *get_param_buffer() const$/;"	f	class:arg_buffer_t	typeref:typename:const void *
get_param_buffer_size	cuda-sim/ptx_ir.h	/^   size_t get_param_buffer_size() const$/;"	f	class:arg_buffer_t	typeref:typename:size_t
get_param_memory	abstract_hardware_model.h	/^   class memory_space *get_param_memory() { return m_param_mem; }$/;"	f	class:kernel_info_t	typeref:class:kernel_info_t::active_threads class memory_space *
get_param_memory	cuda-sim/ptx_sim.h	/^   memory_space *get_param_memory() { return m_kernel.get_param_memory(); }$/;"	f	class:ptx_thread_info	typeref:typename:memory_space *
get_partition_addr	gpgpu-sim/mem_fetch.h	/^   new_addr_type get_partition_addr() const { return m_partition_addr; }$/;"	f	class:mem_fetch	typeref:typename:new_addr_type
get_pc	cuda-sim/ptx_ir.h	/^   function_info *get_pc() const$/;"	f	class:symbol	typeref:typename:function_info *
get_pc	cuda-sim/ptx_sim.h	/^   unsigned get_pc() const$/;"	f	class:ptx_thread_info	typeref:typename:unsigned
get_pc	gpgpu-sim/mem_fetch.h	/^   address_type get_pc() const { return m_inst.empty()?-1:m_inst.pc; }$/;"	f	class:mem_fetch	typeref:typename:address_type
get_pc	gpgpu-sim/shader.h	/^    address_type get_pc() const { return m_next_pc; }$/;"	f	class:shd_warp_t	typeref:typename:address_type
get_pdom_stack_top_info	abstract_hardware_model.cc	/^void core_t::get_pdom_stack_top_info( unsigned warpId, unsigned *pc, unsigned *rpc ) const$/;"	f	class:core_t	typeref:typename:void
get_pdom_stack_top_info	abstract_hardware_model.cc	/^void simt_stack::get_pdom_stack_top_info( unsigned *pc, unsigned *rpc ) const$/;"	f	class:simt_stack	typeref:typename:void
get_pdom_stack_top_info	gpgpu-sim/shader.cc	/^void gpgpu_sim::get_pdom_stack_top_info( unsigned sid, unsigned tid, unsigned *pc, unsigned *rpc/;"	f	class:gpgpu_sim	typeref:typename:void
get_pdom_stack_top_info	gpgpu-sim/shader.cc	/^void shader_core_ctx::get_pdom_stack_top_info( unsigned tid, unsigned *pc, unsigned *rpc ) const$/;"	f	class:shader_core_ctx	typeref:typename:void
get_pdom_stack_top_info	gpgpu-sim/shader.cc	/^void simt_core_cluster::get_pdom_stack_top_info( unsigned sid, unsigned tid, unsigned *pc, unsig/;"	f	class:simt_core_cluster	typeref:typename:void
get_pipeline_duty	gpgpu-sim/power_stat.h	/^    float get_pipeline_duty(){$/;"	f	class:power_stat_t	typeref:typename:float
get_pred	cuda-sim/ptx_ir.h	/^   operand_info get_pred() const { return operand_info( m_pred );}$/;"	f	class:ptx_instruction	typeref:typename:operand_info
get_pred_mod	cuda-sim/ptx_ir.h	/^   int get_pred_mod() const { return m_pred_mod;}$/;"	f	class:ptx_instruction	typeref:typename:int
get_pred_neg	cuda-sim/ptx_ir.h	/^   bool get_pred_neg() const { return m_neg_pred;}$/;"	f	class:ptx_instruction	typeref:typename:bool
get_prop	gpgpu-sim/gpu-sim.cc	/^const struct cudaDeviceProp *gpgpu_sim::get_prop() const$/;"	f	class:gpgpu_sim	typeref:typename:const struct cudaDeviceProp *
get_ptx_inst_debug_file	abstract_hardware_model.h	/^    FILE* get_ptx_inst_debug_file() { return ptx_inst_debug_file; }$/;"	f	class:gpgpu_t	typeref:typename:FILE *
get_ptx_inst_debug_file	abstract_hardware_model.h	/^    const char* get_ptx_inst_debug_file() const  { return g_ptx_inst_debug_file; }$/;"	f	class:gpgpu_functional_sim_config	typeref:typename:const char *
get_ptx_inst_debug_thread_uid	abstract_hardware_model.h	/^    int         get_ptx_inst_debug_thread_uid() const { return g_ptx_inst_debug_thread_uid; }$/;"	f	class:gpgpu_functional_sim_config	typeref:typename:int
get_ptx_inst_debug_to_file	abstract_hardware_model.h	/^    int         get_ptx_inst_debug_to_file() const { return g_ptx_inst_debug_to_file; }$/;"	f	class:gpgpu_functional_sim_config	typeref:typename:int
get_ptx_version	cuda-sim/ptx_ir.cc	/^const ptx_version &symbol_table::get_ptx_version() const $/;"	f	class:symbol_table	typeref:typename:const ptx_version &
get_ptx_version	cuda-sim/ptx_ir.h	/^   const ptx_version &get_ptx_version() const { return m_symtab->get_ptx_version(); }$/;"	f	class:function_info	typeref:typename:const ptx_version &
get_ptx_version	cuda-sim/ptx_sim.cc	/^const ptx_version &ptx_thread_info::get_ptx_version() const $/;"	f	class:ptx_thread_info	typeref:typename:const ptx_version &
get_ptxinfo_kinfo	cuda-sim/cuda-sim.cc	/^struct gpgpu_ptx_sim_kernel_info get_ptxinfo_kinfo()$/;"	f	typeref:struct:gpgpu_ptx_sim_kernel_info
get_ptxinfo_kname	cuda-sim/cuda-sim.cc	/^const char *get_ptxinfo_kname() $/;"	f	typeref:typename:const char *
get_rdOp_dynamic_E	gpuwattch/cacti/decoder.cc	/^double PredecBlkDrv::get_rdOp_dynamic_E(int num_act_mats_hor_dir)$/;"	f	class:PredecBlkDrv	typeref:typename:double
get_ready	abstract_hardware_model.h	/^	warp_inst_t** get_ready(){$/;"	f	class:register_set	typeref:typename:warp_inst_t **
get_reconvergence_pairs	cuda-sim/ptx_ir.cc	/^void function_info::get_reconvergence_pairs(gpgpu_recon_t* recon_points)$/;"	f	class:function_info	typeref:typename:void
get_reduction_value	abstract_hardware_model.h	/^        unsigned get_reduction_value(unsigned ctaid, unsigned barid) {return reduction_storage[c/;"	f	class:core_t	typeref:typename:unsigned
get_reduction_value	cuda-sim/ptx_sim.h	/^   unsigned get_reduction_value(unsigned ctaid, unsigned barid) {return m_core->get_reduction_va/;"	f	class:ptx_thread_info	typeref:typename:unsigned
get_reg	cuda-sim/instructions.cc	/^ptx_reg_t ptx_thread_info::get_reg( const symbol *reg )$/;"	f	class:ptx_thread_info	typeref:typename:ptx_reg_t
get_reg	cuda-sim/ptx_ir.h	/^   ptx_reg_t get_reg() const $/;"	f	class:arg_buffer_t	typeref:typename:ptx_reg_t
get_reg	gpgpu-sim/shader.h	/^      unsigned get_reg() const$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
get_reg_string	gpgpu-sim/shader.h	/^      std::string get_reg_string() const$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:std::string
get_regfile_reads	gpgpu-sim/power_stat.h	/^    unsigned get_regfile_reads(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_regfile_writes	gpgpu-sim/power_stat.h	/^    unsigned get_regfile_writes(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_regs_written	gpgpu-sim/shader.cc	/^std::list<unsigned> shader_core_ctx::get_regs_written( const inst_t &fvt ) const$/;"	f	class:shader_core_ctx	typeref:typename:std::list<unsigned>
get_request_uid	gpgpu-sim/mem_fetch.h	/^   unsigned get_request_uid() const { return m_request_uid; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_return_PC	cuda-sim/ptx_sim.h	/^   unsigned get_return_PC()$/;"	f	class:ptx_thread_info	typeref:typename:unsigned
get_return_pc	cuda-sim/cuda-sim.cc	/^address_type get_return_pc( void *thd )$/;"	f	typeref:typename:address_type
get_return_timestamp	gpgpu-sim/mem_fetch.h	/^   unsigned get_return_timestamp() const { return m_timestamp2; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_return_var	cuda-sim/ptx_ir.h	/^   const symbol *get_return_var() const$/;"	f	class:function_info	typeref:typename:const symbol *
get_router_area	gpuwattch/cacti/router.cc	/^MCPAT_Router::get_router_area()$/;"	f	class:MCPAT_Router	typeref:typename:void
get_router_delay	gpuwattch/cacti/router.cc	/^MCPAT_Router::get_router_delay ()$/;"	f	class:MCPAT_Router	typeref:typename:void
get_router_power	gpuwattch/cacti/router.cc	/^MCPAT_Router::get_router_power()$/;"	f	class:MCPAT_Router	typeref:typename:void
get_rp	abstract_hardware_model.cc	/^unsigned simt_stack::get_rp() const $/;"	f	class:simt_stack	typeref:typename:unsigned
get_rpc	cuda-sim/ptx_sim.h	/^   unsigned get_rpc() const { return m_RPC; }$/;"	f	class:ptx_thread_info	typeref:typename:unsigned
get_scope_name	cuda-sim/ptx_ir.h	/^   std::string get_scope_name() const { return m_scope_name; }$/;"	f	class:symbol_table	typeref:typename:std::string
get_sfu_accessess	gpgpu-sim/power_stat.h	/^    unsigned get_sfu_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_sfu_active_lanes	gpgpu-sim/power_stat.h	/^    float get_sfu_active_lanes(){$/;"	f	class:power_stat_t	typeref:typename:float
get_sfu_committed_inst	gpgpu-sim/power_stat.h	/^    unsigned get_sfu_committed_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_shader_constant_cache_id	gpgpu-sim/stat-tool.cc	/^int get_shader_constant_cache_id() { return CONSTANT; }$/;"	f	typeref:typename:int
get_shader_instruction_cache_id	gpgpu-sim/stat-tool.cc	/^int get_shader_instruction_cache_id() { return INSTRUCTION; }$/;"	f	typeref:typename:int
get_shader_normal_cache_id	gpgpu-sim/stat-tool.cc	/^int get_shader_normal_cache_id() { return NORMAL; }$/;"	f	typeref:typename:int
get_shader_texture_cache_id	gpgpu-sim/stat-tool.cc	/^int get_shader_texture_cache_id() { return TEXTURE; }$/;"	f	typeref:typename:int
get_shared_next	cuda-sim/ptx_ir.h	/^   addr_t get_shared_next() { return m_shared_next;}$/;"	f	class:symbol_table	typeref:typename:addr_t
get_shmem_read_access	gpgpu-sim/power_stat.h	/^    unsigned get_shmem_read_access(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_sid	gpgpu-sim/mem_fetch.h	/^   unsigned get_sid() const { return m_sid; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_sid	gpgpu-sim/scoreboard.h	/^    int get_sid() const { return m_sid; }$/;"	f	class:Scoreboard	typeref:typename:int
get_sid	gpgpu-sim/shader.h	/^    unsigned get_sid() const {return m_sid;}$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
get_sid	gpgpu-sim/shader.h	/^inline int scheduler_unit::get_sid() const { return m_shader->get_sid(); }$/;"	f	class:scheduler_unit	typeref:typename:int
get_size	abstract_hardware_model.h	/^   unsigned get_size() const { return m_req_size; }$/;"	f	class:mem_access_t	typeref:typename:unsigned
get_size	cuda-sim/ptx_ir.h	/^   size_t get_size() const { assert(m_valid); return m_size; }$/;"	f	class:param_info	typeref:typename:size_t
get_size	gpgpu-sim/gpu-cache.cc	/^bool mshr_table::get_size() const {$/;"	f	class:mshr_table	typeref:typename:bool
get_size_in_bytes	cuda-sim/ptx_ir.h	/^   unsigned get_size_in_bytes() const$/;"	f	class:symbol	typeref:typename:unsigned
get_size_reset	gpgpu-sim/gpu-cache.cc	/^bool mshr_table::get_size_reset() const {$/;"	f	class:mshr_table	typeref:typename:bool
get_sm_idx	cuda-sim/ptx_sim.cc	/^unsigned ptx_cta_info::get_sm_idx() const$/;"	f	class:ptx_cta_info	typeref:typename:unsigned
get_sm_target	cuda-sim/ptx_ir.cc	/^unsigned symbol_table::get_sm_target() const $/;"	f	class:symbol_table	typeref:typename:unsigned
get_sm_target	cuda-sim/ptx_ir.h	/^   unsigned get_sm_target() const { return m_symtab->get_sm_target(); }$/;"	f	class:function_info	typeref:typename:unsigned
get_source	cuda-sim/ptx_ir.h	/^   const char *get_source() const { return m_source.c_str();}$/;"	f	class:ptx_instruction	typeref:typename:const char *
get_sp_accessess	gpgpu-sim/power_stat.h	/^    unsigned get_sp_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_sp_active_lanes	gpgpu-sim/power_stat.h	/^    float get_sp_active_lanes(){$/;"	f	class:power_stat_t	typeref:typename:float
get_sp_committed_inst	gpgpu-sim/power_stat.h	/^    unsigned get_sp_committed_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_sp_op	gpgpu-sim/shader.h	/^      unsigned get_sp_op() const { return m_warp->sp_op; }$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
get_sp_op	gpgpu-sim/shader.h	/^      unsigned get_sp_op() const$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
get_space	cuda-sim/ptx_ir.h	/^   memory_space_t get_space() const { return m_space_spec;}$/;"	f	class:ptx_instruction	typeref:typename:memory_space_t
get_start_PC	cuda-sim/ptx_ir.h	/^   addr_t get_start_PC() const$/;"	f	class:function_info	typeref:typename:addr_t
get_stats	gpgpu-sim/gpu-cache.cc	/^unsigned cache_stats::get_stats(enum mem_access_type *access_type, unsigned num_access_type, enu/;"	f	class:cache_stats	typeref:typename:unsigned
get_stats	gpgpu-sim/gpu-cache.cc	/^void tag_array::get_stats(unsigned &total_access, unsigned &total_misses, unsigned &total_hit_re/;"	f	class:tag_array	typeref:typename:void
get_stats	gpgpu-sim/gpu-cache.h	/^    const cache_stats &get_stats() const {$/;"	f	class:baseline_cache	typeref:typename:const cache_stats &
get_stats	gpgpu-sim/gpu-cache.h	/^    const cache_stats &get_stats() const {$/;"	f	class:tex_cache	typeref:typename:const cache_stats &
get_stats	gpgpu-sim/gpu-cache.h	/^    unsigned get_stats(enum mem_access_type *access_type, unsigned num_access_type, enum cache_r/;"	f	class:baseline_cache	typeref:typename:unsigned
get_stats	gpgpu-sim/gpu-cache.h	/^    unsigned get_stats(enum mem_access_type *access_type, unsigned num_access_type, enum cache_r/;"	f	class:tex_cache	typeref:typename:unsigned
get_status	gpgpu-sim/mem_fetch.h	/^   enum mem_fetch_status get_status() const { return m_status; }$/;"	f	class:mem_fetch	typeref:enum:mem_fetch_status
get_stream	stream_manager.h	/^    struct CUstream_st *get_stream() { return m_stream; }$/;"	f	class:stream_operation	typeref:struct:CUstream_st *
get_sub_partition	gpgpu-sim/l2cache.h	/^   class memory_sub_partition * get_sub_partition(int sub_partition_id) $/;"	c	class:memory_partition_unit
get_sub_partition_id	gpgpu-sim/mem_fetch.h	/^   unsigned get_sub_partition_id() const { return m_raw_addr.sub_partition; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_sub_stats	gpgpu-sim/gpu-cache.cc	/^void cache_stats::get_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:cache_stats	typeref:typename:void
get_sub_stats	gpgpu-sim/gpu-cache.h	/^    void get_sub_stats(struct cache_sub_stats &css) const {$/;"	f	class:baseline_cache	typeref:typename:void
get_sub_stats	gpgpu-sim/gpu-cache.h	/^    void get_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:tex_cache	typeref:typename:void
get_surf_memory	abstract_hardware_model.h	/^    class memory_space *get_surf_memory() { return m_surf_mem; }$/;"	c	class:gpgpu_t
get_surf_memory	cuda-sim/ptx_sim.h	/^   memory_space *get_surf_memory() { return m_gpu->get_surf_memory(); }$/;"	f	class:ptx_thread_info	typeref:typename:memory_space *
get_symbol	cuda-sim/ptx_ir.h	/^   const symbol *get_symbol() const { return m_value.m_symbolic;}$/;"	f	class:operand_info	typeref:typename:const symbol *
get_symtab	cuda-sim/ptx_ir.h	/^   symbol_table *get_symtab()$/;"	f	class:function_info	typeref:typename:symbol_table *
get_tex_datasize	cuda-sim/cuda-sim.cc	/^static unsigned get_tex_datasize( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f	typeref:typename:unsigned	file:
get_tex_inst	gpgpu-sim/power_stat.h	/^    unsigned get_tex_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_tex_memory	abstract_hardware_model.h	/^    class memory_space *get_tex_memory() { return m_tex_mem; }$/;"	f	class:gpgpu_t	typeref:class:gpgpu_t::get_global_memory class memory_space *
get_tex_memory	cuda-sim/ptx_sim.h	/^   memory_space *get_tex_memory() { return m_gpu->get_tex_memory(); }$/;"	f	class:ptx_thread_info	typeref:typename:memory_space *
get_tex_next	cuda-sim/ptx_ir.h	/^   addr_t get_tex_next() { return m_tex_next;}$/;"	f	class:symbol_table	typeref:typename:addr_t
get_texarray	abstract_hardware_model.h	/^    const struct cudaArray* get_texarray( const struct textureReference *texref ) const$/;"	f	class:gpgpu_t	typeref:typename:const struct cudaArray *
get_texattr	abstract_hardware_model.h	/^    const struct textureReferenceAttr* get_texattr( const struct textureReference *texref ) cons/;"	f	class:gpgpu_t	typeref:typename:const struct textureReferenceAttr *
get_texcache_linesize	abstract_hardware_model.h	/^    unsigned    get_texcache_linesize() const { return m_texcache_linesize; }$/;"	f	class:gpgpu_functional_sim_config	typeref:typename:unsigned
get_texinfo	abstract_hardware_model.h	/^    const struct textureInfo* get_texinfo( const struct textureReference *texref ) const$/;"	f	class:gpgpu_t	typeref:typename:const struct textureInfo *
get_texref	abstract_hardware_model.h	/^    const struct textureReference* get_texref(const std::string &texname) const$/;"	f	class:gpgpu_t	typeref:typename:const struct textureReference *
get_texture_c_accesses	gpgpu-sim/power_stat.h	/^    unsigned get_texture_c_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_texture_c_hits	gpgpu-sim/power_stat.h	/^    unsigned get_texture_c_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_texture_c_misses	gpgpu-sim/power_stat.h	/^    unsigned get_texture_c_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_tid	cuda-sim/ptx_sim.h	/^   dim3 get_tid() const { return m_tid; }$/;"	f	class:ptx_thread_info	typeref:typename:dim3
get_timestamp	gpgpu-sim/mem_fetch.h	/^   unsigned get_timestamp() const { return m_timestamp; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_tlx_addr	gpgpu-sim/mem_fetch.h	/^   const addrdec_t &get_tlx_addr() const { return m_raw_addr; }$/;"	f	class:mem_fetch	typeref:typename:const addrdec_t &
get_tot_fpu_accessess	gpgpu-sim/power_stat.h	/^    unsigned get_tot_fpu_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_tot_sfu_accessess	gpgpu-sim/power_stat.h	/^    unsigned get_tot_sfu_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_total_cell_area	gpuwattch/cacti/subarray.cc	/^double Subarray::get_total_cell_area()$/;"	f	class:Subarray	typeref:typename:double
get_total_fp_inst	gpgpu-sim/power_stat.h	/^    unsigned get_total_fp_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_total_inst	gpgpu-sim/power_stat.h	/^    unsigned get_total_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_total_int_inst	gpgpu-sim/power_stat.h	/^    unsigned get_total_int_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_total_load_inst	gpgpu-sim/power_stat.h	/^    unsigned get_total_load_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_total_store_inst	gpgpu-sim/power_stat.h	/^    unsigned get_total_store_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_tpc	gpgpu-sim/mem_fetch.h	/^   unsigned get_tpc() const { return m_tpc; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_trans_accessess	gpgpu-sim/power_stat.h	/^    unsigned get_trans_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_type	abstract_hardware_model.h	/^   enum _memory_space_t get_type() const { return m_type; }$/;"	f	class:memory_space_t	typeref:enum:_memory_space_t
get_type	abstract_hardware_model.h	/^   enum mem_access_type get_type() const { return m_type; }$/;"	f	class:mem_access_t	typeref:enum:mem_access_type
get_type	cuda-sim/ptx_ir.h	/^   enum operand_type get_type() const {$/;"	f	class:operand_info	typeref:enum:operand_type
get_type	cuda-sim/ptx_ir.h	/^   int get_type() const $/;"	f	class:ptx_instruction	typeref:typename:int
get_type	cuda-sim/ptx_ir.h	/^   int get_type() const { assert(m_valid);  return m_type; }$/;"	f	class:param_info	typeref:typename:int
get_type	gpgpu-sim/mem_fetch.h	/^   enum mf_type get_type() const { return m_type; }$/;"	f	class:mem_fetch	typeref:enum:mf_type
get_type2	cuda-sim/ptx_ir.h	/^   int get_type2() const $/;"	f	class:ptx_instruction	typeref:typename:int
get_uid	abstract_hardware_model.h	/^    unsigned get_uid() const { return m_uid; }$/;"	f	class:warp_inst_t	typeref:typename:unsigned
get_uid	abstract_hardware_model.h	/^   unsigned get_uid() const { return m_uid; }$/;"	f	class:kernel_info_t	typeref:typename:unsigned
get_uid	cuda-sim/ptx_ir.cc	/^unsigned operand_info::get_uid()$/;"	f	class:operand_info	typeref:typename:unsigned
get_uid	cuda-sim/ptx_ir.cc	/^unsigned symbol::get_uid()$/;"	f	class:symbol	typeref:typename:unsigned
get_uid	cuda-sim/ptx_sim.h	/^   unsigned get_uid() const$/;"	f	class:ptx_thread_info	typeref:typename:unsigned
get_uid	stream_manager.h	/^    unsigned get_uid() const { return m_uid; }$/;"	f	struct:CUstream_st	typeref:typename:unsigned
get_uid	stream_manager.h	/^   int get_uid() const { return m_uid; }$/;"	f	class:CUevent_st	typeref:typename:int
get_value	cuda-sim/ptx_ir.h	/^   param_t get_value() const { assert(m_value_set); return m_value; }$/;"	f	class:param_info	typeref:typename:param_t
get_value	debug.h	/^   unsigned get_value() const { return m_value; }$/;"	f	class:brk_pt	typeref:typename:unsigned
get_vect_nelem	cuda-sim/ptx_ir.h	/^   unsigned get_vect_nelem() const$/;"	f	class:operand_info	typeref:typename:unsigned
get_vector	cuda-sim/ptx_ir.h	/^   unsigned get_vector() const { return m_vector_spec;}$/;"	f	class:ptx_instruction	typeref:typename:unsigned
get_vector_operand_values	cuda-sim/instructions.cc	/^void ptx_thread_info::get_vector_operand_values( const operand_info &op, ptx_reg_t* ptx_regs, un/;"	f	class:ptx_thread_info	typeref:typename:void
get_w	gpuwattch/cacti/area.h	/^  double get_w() const { return w; }$/;"	f	class:Area	typeref:typename:double
get_warp_id	gpgpu-sim/shader.h	/^      unsigned get_warp_id() const { return m_warp_id; }$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
get_warp_id	gpgpu-sim/shader.h	/^    unsigned get_warp_id() const { return m_warp_id; }$/;"	f	class:shd_warp_t	typeref:typename:unsigned
get_warp_mask	abstract_hardware_model.h	/^   const active_mask_t &get_warp_mask() const { return m_warp_mask; }$/;"	f	class:mem_access_t	typeref:typename:const active_mask_t &
get_warp_size	abstract_hardware_model.h	/^        unsigned get_warp_size() const { return m_warp_size; }$/;"	f	class:core_t	typeref:typename:unsigned
get_warp_slot_issue	gpgpu-sim/shader.h	/^    const std::vector< std::vector<unsigned> >& get_warp_slot_issue() const$/;"	f	class:shader_core_stats	typeref:typename:const std::vector<std::vector<unsigned>> &
get_wid	gpgpu-sim/mem_fetch.h	/^   unsigned get_wid() const { return m_wid; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_wid	gpgpu-sim/shader.h	/^      unsigned get_wid() const$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
global	gpuwattch/cacti/wire.cc	/^    Component Wire::global;$/;"	m	class:Wire	typeref:typename:Component
global	gpuwattch/cacti/wire.h	/^    static Component global;$/;"	m	class:Wire	typeref:typename:Component
globalBPT	gpuwattch/core.h	/^	ArrayST * globalBPT;$/;"	m	class:BranchPredictor	typeref:typename:ArrayST *
globalCheckpoint	gpuwattch/basic_components.h	/^    int  perThreadState, globalCheckpoint, instruction_length, pc_width, opcode_length, micro_op/;"	m	class:CoreDynParam	typeref:typename:int
globalCtrBits	gpuwattch/arch_const.h	/^const int globalCtrBits=2;$/;"	v	typeref:typename:const int
globalHistoryBits	gpuwattch/arch_const.h	/^const int globalHistoryBits=13;$/;"	v	typeref:typename:const int
globalPredictorSize	gpuwattch/arch_const.h	/^const int globalPredictorSize=8192;$/;"	v	typeref:typename:const int
global_10	gpuwattch/cacti/wire.cc	/^    Component Wire::global_10;$/;"	m	class:Wire	typeref:typename:Component
global_10	gpuwattch/cacti/wire.h	/^    static Component global_10;$/;"	m	class:Wire	typeref:typename:Component
global_20	gpuwattch/cacti/wire.cc	/^    Component Wire::global_20;$/;"	m	class:Wire	typeref:typename:Component
global_20	gpuwattch/cacti/wire.h	/^    static Component global_20;$/;"	m	class:Wire	typeref:typename:Component
global_30	gpuwattch/cacti/wire.cc	/^    Component Wire::global_30;$/;"	m	class:Wire	typeref:typename:Component
global_30	gpuwattch/cacti/wire.h	/^    static Component global_30;$/;"	m	class:Wire	typeref:typename:Component
global_5	gpuwattch/cacti/wire.cc	/^    Component Wire::global_5;$/;"	m	class:Wire	typeref:typename:Component
global_5	gpuwattch/cacti/wire.h	/^    static Component global_5;$/;"	m	class:Wire	typeref:typename:Component
global_iterator_begin	cuda-sim/ptx_ir.h	/^   iterator global_iterator_begin() { return m_globals.begin();}$/;"	f	class:symbol_table	typeref:typename:iterator
global_iterator_end	cuda-sim/ptx_ir.h	/^   iterator global_iterator_end() { return m_globals.end();}$/;"	f	class:symbol_table	typeref:typename:iterator
global_linked_ports	gpuwattch/basic_components.h	/^    int    input_ports, output_ports, min_ports, global_linked_ports;$/;"	m	class:NoCParam	typeref:typename:int
global_predictor_bits	gpuwattch/XML_Parse.h	/^	int global_predictor_bits;$/;"	m	struct:__anon6448b92c0108	typeref:typename:int
global_predictor_entries	gpuwattch/XML_Parse.h	/^	int global_predictor_entries;$/;"	m	struct:__anon6448b92c0108	typeref:typename:int
global_routing_table	intersim2/networks/anynet.cpp	/^map<int, int>* global_routing_table;$/;"	v	typeref:typename:map<int,int> *
global_space	abstract_hardware_model.h	/^   global_space,$/;"	e	enum:_memory_space_t
global_sub_partition_id_to_local_id	gpgpu-sim/l2cache.cc	/^int memory_partition_unit::global_sub_partition_id_to_local_id(int global_sub_partition_id) cons/;"	f	class:memory_partition_unit	typeref:typename:int
global_to_generic	cuda-sim/cuda-sim.cc	/^addr_t global_to_generic( addr_t addr )$/;"	f	typeref:typename:addr_t
gm_sense_amp_latch	gpuwattch/cacti/parameter.h	/^  double gm_sense_amp_latch;$/;"	m	class:TechnologyParameter	typeref:typename:double
gmem_n_access_total	cuda-sim/ptx-stats.cc	/^    unsigned long long gmem_n_access_total; \/\/ number of uncoalesced access in total from this/;"	m	class:ptx_file_line_stats	typeref:typename:unsigned long long	file:
gmem_skip_L1D	gpgpu-sim/shader.h	/^    bool gmem_skip_L1D; \/\/ on = global memory access always skip the L1 cache $/;"	m	struct:shader_core_config	typeref:typename:bool
gmem_warp_count	cuda-sim/ptx-stats.cc	/^    unsigned long gmem_warp_count;          \/\/ number of warps causing these uncoalesced acces/;"	m	class:ptx_file_line_stats	typeref:typename:unsigned long	file:
gpgpu_L2_queue_config	gpgpu-sim/gpu-sim.h	/^   char *gpgpu_L2_queue_config;$/;"	m	struct:memory_config	typeref:typename:char *
gpgpu_cache_constl1_linesize	abstract_hardware_model.h	/^    unsigned gpgpu_cache_constl1_linesize;$/;"	m	struct:core_config	typeref:typename:unsigned
gpgpu_cache_texl1_linesize	abstract_hardware_model.h	/^    unsigned gpgpu_cache_texl1_linesize;$/;"	m	struct:core_config	typeref:typename:unsigned
gpgpu_cflog_interval	gpgpu-sim/gpu-sim.h	/^    int   gpgpu_cflog_interval;$/;"	m	class:gpgpu_sim_config	typeref:typename:int
gpgpu_clock_domains	gpgpu-sim/gpu-sim.h	/^    char * gpgpu_clock_domains;$/;"	m	class:gpgpu_sim_config	typeref:typename:char *
gpgpu_clock_gated_lanes	gpgpu-sim/shader.h	/^    bool gpgpu_clock_gated_lanes;$/;"	m	struct:shader_core_config	typeref:typename:bool
gpgpu_clock_gated_lanes	gpuwattch/XML_Parse.h	/^	bool gpgpu_clock_gated_lanes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:bool
gpgpu_clock_gated_reg_file	gpgpu-sim/shader.h	/^    bool gpgpu_clock_gated_reg_file;$/;"	m	struct:shader_core_config	typeref:typename:bool
gpgpu_coalesce_arch	abstract_hardware_model.h	/^    int gpgpu_coalesce_arch;$/;"	m	struct:core_config	typeref:typename:int
gpgpu_cuda_ptx_sim_main_func	cuda-sim/cuda-sim.cc	/^void gpgpu_cuda_ptx_sim_main_func( kernel_info_t &kernel, bool openCL )$/;"	f	typeref:typename:void
gpgpu_debug	debug.cc	/^void gpgpu_sim::gpgpu_debug()$/;"	f	class:gpgpu_sim	typeref:typename:void
gpgpu_dram_return_queue_size	gpgpu-sim/gpu-sim.h	/^   unsigned gpgpu_dram_return_queue_size;$/;"	m	struct:memory_config	typeref:typename:unsigned
gpgpu_dram_timing_opt	gpgpu-sim/gpu-sim.h	/^   char *gpgpu_dram_timing_opt;$/;"	m	struct:memory_config	typeref:typename:char *
gpgpu_dwf_reg_bankconflict	gpgpu-sim/shader.h	/^    bool gpgpu_dwf_reg_bankconflict;$/;"	m	struct:shader_core_config	typeref:typename:bool
gpgpu_flush_l1_cache	gpgpu-sim/gpu-sim.h	/^    bool  gpgpu_flush_l1_cache;$/;"	m	class:gpgpu_sim_config	typeref:typename:bool
gpgpu_flush_l2_cache	gpgpu-sim/gpu-sim.h	/^    bool  gpgpu_flush_l2_cache;$/;"	m	class:gpgpu_sim_config	typeref:typename:bool
gpgpu_frfcfs_dram_sched_queue_size	gpgpu-sim/gpu-sim.h	/^    int   gpgpu_frfcfs_dram_sched_queue_size; $/;"	m	class:gpgpu_sim_config	typeref:typename:int
gpgpu_frfcfs_dram_sched_queue_size	gpgpu-sim/gpu-sim.h	/^   unsigned gpgpu_frfcfs_dram_sched_queue_size;$/;"	m	struct:memory_config	typeref:typename:unsigned
gpgpu_functional_sim_config	abstract_hardware_model.h	/^class gpgpu_functional_sim_config $/;"	c
gpgpu_local_mem_map	gpgpu-sim/shader.h	/^    bool gpgpu_local_mem_map;$/;"	m	struct:shader_core_config	typeref:typename:bool
gpgpu_max_insn_issue_per_warp	abstract_hardware_model.h	/^	unsigned gpgpu_max_insn_issue_per_warp;$/;"	m	struct:core_config	typeref:typename:unsigned
gpgpu_max_insn_issue_per_warp	gpgpu-sim/shader.h	/^    int gpgpu_max_insn_issue_per_warp;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_mem_address_mask	gpgpu-sim/addrdec.h	/^   int gpgpu_mem_address_mask;$/;"	m	class:linear_to_raw_address_translation	typeref:typename:int
gpgpu_memlatency_stat	gpgpu-sim/gpu-sim.h	/^   bool gpgpu_memlatency_stat;$/;"	m	struct:memory_config	typeref:typename:bool
gpgpu_n_cache_bkconflict	gpgpu-sim/shader.h	/^    unsigned gpgpu_n_cache_bkconflict;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_cmem_portconflict	gpgpu-sim/shader.h	/^    unsigned gpgpu_n_cmem_portconflict;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_const_insn	gpgpu-sim/shader.h	/^    unsigned gpgpu_n_const_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_intrawarp_mshr_merge	gpgpu-sim/shader.h	/^    int      gpgpu_n_intrawarp_mshr_merge;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_load_insn	gpgpu-sim/shader.h	/^    unsigned gpgpu_n_load_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_mem_const	gpgpu-sim/shader.h	/^    int gpgpu_n_mem_const;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_l1_write_allocate	gpgpu-sim/shader.h	/^    int gpgpu_n_mem_l1_write_allocate; $/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_l2_write_allocate	gpgpu-sim/shader.h	/^    int gpgpu_n_mem_l2_write_allocate;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_l2_writeback	gpgpu-sim/shader.h	/^    int gpgpu_n_mem_l2_writeback;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_read_global	gpgpu-sim/shader.h	/^    int gpgpu_n_mem_read_global;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_read_inst	gpgpu-sim/shader.h	/^    int gpgpu_n_mem_read_inst;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_read_local	gpgpu-sim/shader.h	/^    int gpgpu_n_mem_read_local;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_texture	gpgpu-sim/shader.h	/^    int gpgpu_n_mem_texture;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_write_global	gpgpu-sim/shader.h	/^    int gpgpu_n_mem_write_global;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_write_local	gpgpu-sim/shader.h	/^    int gpgpu_n_mem_write_local;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_param_insn	gpgpu-sim/shader.h	/^    unsigned gpgpu_n_param_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_shmem_bank_access	gpgpu-sim/shader.h	/^    unsigned *gpgpu_n_shmem_bank_access;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
gpgpu_n_shmem_bkconflict	gpgpu-sim/shader.h	/^    unsigned gpgpu_n_shmem_bkconflict;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_shmem_insn	gpgpu-sim/shader.h	/^    unsigned gpgpu_n_shmem_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_stall_shd_mem	gpgpu-sim/shader.h	/^    unsigned gpgpu_n_stall_shd_mem;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_store_insn	gpgpu-sim/shader.h	/^    unsigned gpgpu_n_store_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_tex_insn	gpgpu-sim/shader.h	/^    unsigned gpgpu_n_tex_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_num_mem_units	gpgpu-sim/shader.h	/^    int gpgpu_num_mem_units;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_num_reg_banks	gpgpu-sim/shader.h	/^    unsigned gpgpu_num_reg_banks;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
gpgpu_num_sched_per_core	gpgpu-sim/shader.h	/^    int gpgpu_num_sched_per_core;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_num_sfu_units	gpgpu-sim/shader.h	/^    int gpgpu_num_sfu_units;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_num_sp_units	gpgpu-sim/shader.h	/^    int gpgpu_num_sp_units;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_opencl_ptx_sim_init_grid	cuda-sim/cuda-sim.cc	/^kernel_info_t *gpgpu_opencl_ptx_sim_init_grid(class function_info *entry,$/;"	f	typeref:typename:kernel_info_t *
gpgpu_opencl_ptx_sim_main_func	gpgpusim_entrypoint.cc	/^int gpgpu_opencl_ptx_sim_main_func( kernel_info_t *grid )$/;"	f	typeref:typename:int
gpgpu_opencl_ptx_sim_main_perf	gpgpusim_entrypoint.cc	/^int gpgpu_opencl_ptx_sim_main_perf( kernel_info_t *grid )$/;"	f	typeref:typename:int
gpgpu_operand_collector_num_in_ports_gen	gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_in_ports_gen;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_in_ports_mem	gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_in_ports_mem;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_in_ports_sfu	gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_in_ports_sfu;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_in_ports_sp	gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_in_ports_sp;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_out_ports_gen	gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_out_ports_gen;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_out_ports_mem	gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_out_ports_mem;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_out_ports_sfu	gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_out_ports_sfu;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_out_ports_sp	gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_out_ports_sp;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_units_gen	gpgpu-sim/shader.h	/^    int gpgpu_operand_collector_num_units_gen;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_operand_collector_num_units_mem	gpgpu-sim/shader.h	/^    int gpgpu_operand_collector_num_units_mem;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_operand_collector_num_units_sfu	gpgpu-sim/shader.h	/^    int gpgpu_operand_collector_num_units_sfu;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_operand_collector_num_units_sp	gpgpu-sim/shader.h	/^    int gpgpu_operand_collector_num_units_sp;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_param_num_shaders	cuda-sim/cuda-sim.cc	/^unsigned gpgpu_param_num_shaders = 0;$/;"	v	typeref:typename:unsigned
gpgpu_perfect_mem	gpgpu-sim/shader.h	/^    bool gpgpu_perfect_mem;$/;"	m	struct:shader_core_config	typeref:typename:bool
gpgpu_ptx_assemble	cuda-sim/ptx_ir.cc	/^void gpgpu_ptx_assemble( std::string kname, void *kinfo )$/;"	f	typeref:typename:void
gpgpu_ptx_instruction_classification	cuda-sim/cuda-sim.cc	/^int gpgpu_ptx_instruction_classification;$/;"	v	typeref:typename:int
gpgpu_ptx_sim_arg	abstract_hardware_model.h	/^   gpgpu_ptx_sim_arg() { m_start=NULL; }$/;"	f	struct:gpgpu_ptx_sim_arg
gpgpu_ptx_sim_arg	abstract_hardware_model.h	/^   gpgpu_ptx_sim_arg(const void *arg, size_t size, size_t offset)$/;"	f	struct:gpgpu_ptx_sim_arg
gpgpu_ptx_sim_arg	abstract_hardware_model.h	/^struct gpgpu_ptx_sim_arg {$/;"	s
gpgpu_ptx_sim_arg_list_t	abstract_hardware_model.h	/^typedef std::list<gpgpu_ptx_sim_arg> gpgpu_ptx_sim_arg_list_t;$/;"	t	typeref:typename:std::list<gpgpu_ptx_sim_arg>
gpgpu_ptx_sim_bindNameToTexture	cuda-sim/cuda-sim.cc	/^void gpgpu_t::gpgpu_ptx_sim_bindNameToTexture(const char* name, const struct textureReference* t/;"	f	class:gpgpu_t	typeref:typename:void
gpgpu_ptx_sim_bindTextureToArray	cuda-sim/cuda-sim.cc	/^void gpgpu_t::gpgpu_ptx_sim_bindTextureToArray(const struct textureReference* texref, const stru/;"	f	class:gpgpu_t	typeref:typename:void
gpgpu_ptx_sim_convert_ptx_and_sass_to_ptxplus	cuda-sim/ptx_loader.cc	/^char* gpgpu_ptx_sim_convert_ptx_and_sass_to_ptxplus(const std::string ptxfilename, const std::st/;"	f	typeref:typename:char *
gpgpu_ptx_sim_findNamefromTexture	cuda-sim/cuda-sim.cc	/^const char* gpgpu_t::gpgpu_ptx_sim_findNamefromTexture(const struct textureReference* texref)$/;"	f	class:gpgpu_t	typeref:typename:const char *
gpgpu_ptx_sim_init_perf	gpgpusim_entrypoint.cc	/^gpgpu_sim *gpgpu_ptx_sim_init_perf()$/;"	f	typeref:typename:gpgpu_sim *
gpgpu_ptx_sim_kernel_info	abstract_hardware_model.h	/^struct gpgpu_ptx_sim_kernel_info $/;"	s
gpgpu_ptx_sim_load_ptx_from_string	cuda-sim/ptx_loader.cc	/^symbol_table *gpgpu_ptx_sim_load_ptx_from_string( const char *p, unsigned source_num )$/;"	f	typeref:typename:symbol_table *
gpgpu_ptx_sim_memcpy_symbol	cuda-sim/cuda-sim.cc	/^void gpgpu_ptx_sim_memcpy_symbol(const char *hostVar, const void *src, size_t count, size_t offs/;"	f	typeref:typename:void
gpgpu_ptx_sim_register_const_variable	cuda-sim/cuda-sim.cc	/^void gpgpu_ptx_sim_register_const_variable(void *hostVar, const char *deviceName, size_t size )$/;"	f	typeref:typename:void
gpgpu_ptx_sim_register_global_variable	cuda-sim/cuda-sim.cc	/^void gpgpu_ptx_sim_register_global_variable(void *hostVar, const char *deviceName, size_t size )$/;"	f	typeref:typename:void
gpgpu_ptxinfo_load_from_string	cuda-sim/ptx_loader.cc	/^void gpgpu_ptxinfo_load_from_string( const char *p_for_info, unsigned source_num )$/;"	f	typeref:typename:void
gpgpu_recon_t	cuda-sim/ptx_ir.h	/^struct gpgpu_recon_t {$/;"	s
gpgpu_reg_bank_use_warp_id	gpgpu-sim/shader.h	/^    bool gpgpu_reg_bank_use_warp_id;$/;"	m	struct:shader_core_config	typeref:typename:bool
gpgpu_runtime_stat	gpgpu-sim/gpu-sim.h	/^    char *gpgpu_runtime_stat;$/;"	m	class:gpgpu_sim_config	typeref:typename:char *
gpgpu_scheduler_string	gpgpu-sim/shader.h	/^    char * gpgpu_scheduler_string;$/;"	m	struct:shader_core_config	typeref:typename:char *
gpgpu_shader_core_pipeline_opt	gpgpu-sim/shader.h	/^    char *gpgpu_shader_core_pipeline_opt;$/;"	m	struct:shader_core_config	typeref:typename:char *
gpgpu_shader_registers	gpgpu-sim/shader.h	/^    unsigned gpgpu_shader_registers;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
gpgpu_shmem_size	abstract_hardware_model.h	/^    mutable unsigned gpgpu_shmem_size;$/;"	m	struct:core_config	typeref:typename:unsigned
gpgpu_shmem_sizeDefault	abstract_hardware_model.h	/^    unsigned gpgpu_shmem_sizeDefault;$/;"	m	struct:core_config	typeref:typename:unsigned
gpgpu_shmem_sizePrefL1	abstract_hardware_model.h	/^    unsigned gpgpu_shmem_sizePrefL1;$/;"	m	struct:core_config	typeref:typename:unsigned
gpgpu_shmem_sizePrefShared	abstract_hardware_model.h	/^    unsigned gpgpu_shmem_sizePrefShared;$/;"	m	struct:core_config	typeref:typename:unsigned
gpgpu_sim	gpgpu-sim/gpu-sim.cc	/^gpgpu_sim::gpgpu_sim( const gpgpu_sim_config &config ) $/;"	f	class:gpgpu_sim
gpgpu_sim	gpgpu-sim/gpu-sim.h	/^class gpgpu_sim : public gpgpu_t {$/;"	c
gpgpu_sim_config	gpgpu-sim/gpu-sim.h	/^    gpgpu_sim_config() { m_valid = false; }$/;"	f	class:gpgpu_sim_config
gpgpu_sim_config	gpgpu-sim/gpu-sim.h	/^class gpgpu_sim_config : public power_config, public gpgpu_functional_sim_config {$/;"	c
gpgpu_sim_thread_concurrent	gpgpusim_entrypoint.cc	/^void *gpgpu_sim_thread_concurrent(void*)$/;"	f	typeref:typename:void *
gpgpu_sim_thread_sequential	gpgpusim_entrypoint.cc	/^void *gpgpu_sim_thread_sequential(void*)$/;"	f	typeref:typename:void *
gpgpu_sim_wrapper	gpgpu-sim/gpu-sim.cc	/^class  gpgpu_sim_wrapper {};$/;"	c	file:
gpgpu_sim_wrapper	gpuwattch/gpgpu_sim_wrapper.cc	/^gpgpu_sim_wrapper::gpgpu_sim_wrapper( bool power_simulation_enabled, char* xmlfile) {$/;"	f	class:gpgpu_sim_wrapper
gpgpu_sim_wrapper	gpuwattch/gpgpu_sim_wrapper.h	/^class gpgpu_sim_wrapper {$/;"	c
gpgpu_t	abstract_hardware_model.cc	/^gpgpu_t::gpgpu_t( const gpgpu_functional_sim_config &config )$/;"	f	class:gpgpu_t
gpgpu_t	abstract_hardware_model.h	/^class gpgpu_t {$/;"	c
gpgpu_warp_issue_shader	gpgpu-sim/shader.h	/^    int gpgpu_warp_issue_shader;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_warpdistro_shader	gpgpu-sim/shader.h	/^    int gpgpu_warpdistro_shader;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpusim_cuda_vprintf	cuda-sim/cuda_device_printf.cc	/^void gpgpusim_cuda_vprintf(const ptx_instruction * pI, ptx_thread_info * thread, const function_/;"	f	typeref:typename:void
gpu_deadlock	gpgpu-sim/gpu-sim.h	/^   bool gpu_deadlock;$/;"	m	class:gpgpu_sim	typeref:typename:bool
gpu_deadlock_detect	gpgpu-sim/gpu-sim.h	/^    bool  gpu_deadlock_detect;$/;"	m	class:gpgpu_sim_config	typeref:typename:bool
gpu_idle_core_power	gpgpu-sim/gpu-sim.h	/^    double gpu_idle_core_power;$/;"	m	struct:power_config	typeref:typename:double
gpu_malloc	cuda-sim/cuda-sim.cc	/^void* gpgpu_t::gpu_malloc( size_t size )$/;"	f	class:gpgpu_t	typeref:typename:void *
gpu_mallocarray	cuda-sim/cuda-sim.cc	/^void* gpgpu_t::gpu_mallocarray( size_t size )$/;"	f	class:gpgpu_t	typeref:typename:void *
gpu_max_cta_opt	gpgpu-sim/gpu-sim.h	/^    unsigned gpu_max_cta_opt;$/;"	m	class:gpgpu_sim_config	typeref:typename:unsigned
gpu_max_cycle_opt	gpgpu-sim/gpu-sim.h	/^    unsigned gpu_max_cycle_opt;$/;"	m	class:gpgpu_sim_config	typeref:typename:unsigned
gpu_max_insn_opt	gpgpu-sim/gpu-sim.h	/^    unsigned gpu_max_insn_opt;$/;"	m	class:gpgpu_sim_config	typeref:typename:unsigned
gpu_memset	cuda-sim/cuda-sim.cc	/^void gpgpu_t::gpu_memset( size_t dst_start_addr, int c, size_t count )$/;"	f	class:gpgpu_t	typeref:typename:void
gpu_min_inc_per_active_sm	gpgpu-sim/gpu-sim.h	/^    double gpu_min_inc_per_active_sm;$/;"	m	struct:power_config	typeref:typename:double
gpu_n_mem_per_ctrlr	gpgpu-sim/gpu-sim.h	/^   unsigned gpu_n_mem_per_ctrlr;$/;"	m	struct:memory_config	typeref:typename:unsigned
gpu_nonlinear_model_config	gpgpu-sim/gpu-sim.h	/^    char * gpu_nonlinear_model_config;$/;"	m	struct:power_config	typeref:typename:char *
gpu_print_stat	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::gpu_print_stat() $/;"	f	class:gpgpu_sim	typeref:typename:void
gpu_reg_bank_conflict_stalls	gpgpu-sim/shader.h	/^    unsigned gpu_reg_bank_conflict_stalls;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpu_runtime_stat_flag	gpgpu-sim/gpu-sim.h	/^    int gpu_runtime_stat_flag;$/;"	m	class:gpgpu_sim_config	typeref:typename:int
gpu_sim_cycle	gpgpu-sim/gpu-sim.cc	/^unsigned long long  gpu_sim_cycle = 0;$/;"	v	typeref:typename:unsigned long long
gpu_sim_insn	gpgpu-sim/gpu-sim.h	/^   unsigned long long  gpu_sim_insn;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned long long
gpu_sim_insn_last_update	gpgpu-sim/gpu-sim.h	/^   unsigned long long  gpu_sim_insn_last_update;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned long long
gpu_sim_insn_last_update_sid	gpgpu-sim/gpu-sim.h	/^   unsigned gpu_sim_insn_last_update_sid;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned
gpu_stall_dramfull	gpgpu-sim/gpu-sim.cc	/^unsigned int gpu_stall_dramfull = 0; $/;"	v	typeref:typename:unsigned int
gpu_stall_icnt2sh	gpgpu-sim/gpu-sim.cc	/^unsigned int gpu_stall_icnt2sh = 0;$/;"	v	typeref:typename:unsigned int
gpu_stall_shd_mem_breakdown	gpgpu-sim/shader.h	/^    unsigned gpu_stall_shd_mem_breakdown[N_MEM_STAGE_ACCESS_TYPE][N_MEM_STAGE_STALL_TYPE];$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned[][]
gpu_stat_sample_freq	gpgpu-sim/gpu-sim.h	/^    int gpu_stat_sample_freq;$/;"	m	class:gpgpu_sim_config	typeref:typename:int
gpu_stat_sample_freq	gpuwattch/gpgpu_sim_wrapper.h	/^    int gpu_stat_sample_freq;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:int
gpu_stat_sample_frequency	gpuwattch/gpgpu_sim_wrapper.h	/^    double gpu_stat_sample_frequency;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:double
gpu_steady_min_period	gpgpu-sim/gpu-sim.h	/^    double gpu_steady_min_period;$/;"	m	struct:power_config	typeref:typename:double
gpu_steady_min_period	gpuwattch/gpgpu_sim_wrapper.h	/^	double   gpu_steady_min_period;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:double
gpu_steady_power_deviation	gpgpu-sim/gpu-sim.h	/^    double gpu_steady_power_deviation;$/;"	m	struct:power_config	typeref:typename:double
gpu_steady_power_deviation	gpuwattch/gpgpu_sim_wrapper.h	/^	double   gpu_steady_power_deviation;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:double
gpu_steady_state_definition	gpgpu-sim/gpu-sim.h	/^    char * gpu_steady_state_definition;$/;"	m	struct:power_config	typeref:typename:char *
gpu_tot_issued_cta	gpgpu-sim/gpu-sim.h	/^   unsigned long long  gpu_tot_issued_cta;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned long long
gpu_tot_power	gpuwattch/gpgpu_sim_wrapper.h	/^    avg_max_min_counters<double> gpu_tot_power; \/\/ Global GPU power avg\/max\/min values (acro/;"	m	class:gpgpu_sim_wrapper	typeref:typename:avg_max_min_counters<double>
gpu_tot_sim_cycle	gpgpu-sim/gpu-sim.cc	/^unsigned long long  gpu_tot_sim_cycle = 0;$/;"	v	typeref:typename:unsigned long long
gpu_tot_sim_insn	gpgpu-sim/gpu-sim.h	/^   unsigned long long  gpu_tot_sim_insn;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned long long
gpu_uarch_simlib	Makefile	/^gpu_uarch_simlib:$/;"	t
grid_params	gpgpusim_entrypoint.cc	/^struct gpgpu_ptx_sim_arg *grid_params;$/;"	v	typeref:struct:gpgpu_ptx_sim_arg *
gs_min2	gpgpu-sim/gpu-misc.h	/^#define gs_min2(/;"	d
gto_scheduler	gpgpu-sim/shader.h	/^	gto_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:gto_scheduler
gto_scheduler	gpgpu-sim/shader.h	/^class gto_scheduler : public scheduler_unit {$/;"	c
guessCharEncoding	gpuwattch/xmlParser.cc	/^XMLNode::XMLCharEncoding XMLNode::guessCharEncoding(void *buf,int l, char useXMLEncodingAttribut/;"	f	class:XMLNode	typeref:typename:XMLNode::XMLCharEncoding
guessWideCharChars	gpuwattch/xmlParser.cc	/^static char guessWideCharChars=1, dropWhiteSpace=1, removeCommentsInMiddleOfText=1;$/;"	v	typeref:typename:char	file:
h	gpuwattch/cacti/area.h	/^  double h;$/;"	m	class:Area	typeref:typename:double
h_dec	gpuwattch/cacti/parameter.h	/^  uint64_t h_dec;$/;"	m	class:TechnologyParameter	typeref:typename:uint64_t
h_wire	gpuwattch/cacti/nuca.h	/^    Wire *h_wire;$/;"	m	class:nuca_org_t	typeref:typename:Wire *
hardware_done	gpgpu-sim/shader.cc	/^bool shd_warp_t::hardware_done() const$/;"	f	class:shd_warp_t	typeref:typename:bool
has_callback	abstract_hardware_model.h	/^    bool has_callback( unsigned n ) const$/;"	f	class:warp_inst_t	typeref:typename:bool
has_credits	gpgpu-sim/l2cache.cc	/^bool memory_partition_unit::arbitration_metadata::has_credits(int inner_sub_partition_id) const $/;"	f	class:memory_partition_unit::arbitration_metadata	typeref:typename:bool
has_dispatch_delay	abstract_hardware_model.h	/^    bool has_dispatch_delay(){$/;"	f	class:warp_inst_t	typeref:typename:bool
has_free	abstract_hardware_model.h	/^	bool has_free(){$/;"	f	class:register_set	typeref:typename:bool
has_global_link	gpuwattch/XML_Parse.h	/^	bool has_global_link;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:bool
has_global_link	gpuwattch/basic_components.h	/^    bool   has_global_link, type;$/;"	m	class:NoCParam	typeref:typename:bool
has_initializer	cuda-sim/ptx_ir.h	/^   bool has_initializer() const $/;"	f	class:symbol	typeref:typename:bool
has_memory_read	cuda-sim/ptx_ir.h	/^   bool has_memory_read() const {$/;"	f	class:ptx_instruction	typeref:typename:bool
has_memory_write	cuda-sim/ptx_ir.h	/^   bool has_memory_write() const {$/;"	f	class:ptx_instruction	typeref:typename:bool
has_pred	cuda-sim/ptx_ir.h	/^   bool has_pred() const { return m_pred != NULL;}$/;"	f	class:ptx_instruction	typeref:typename:bool
has_ready	abstract_hardware_model.h	/^	bool has_ready(){$/;"	f	class:register_set	typeref:typename:bool
has_return	cuda-sim/ptx_ir.h	/^   bool has_return() const$/;"	f	class:function_info	typeref:typename:bool
has_return	cuda-sim/ptx_ir.h	/^   bool has_return() const$/;"	f	class:ptx_instruction	typeref:typename:bool
has_special_cache_config	gpgpu-sim/gpu-sim.cc	/^bool gpgpu_sim::has_special_cache_config(std::string kernel_name)$/;"	f	class:gpgpu_sim	typeref:typename:bool
has_written_avg	gpuwattch/gpgpu_sim_wrapper.h	/^    bool has_written_avg;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:bool
hash_addrdec_t	gpgpu-sim/addrdec.cc	/^class hash_addrdec_t$/;"	c	file:
hash_ptx_file_line	cuda-sim/ptx-stats.cc	/^struct hash_ptx_file_line$/;"	s	file:
head	intersim2/credit.hpp	/^  bool head, tail;$/;"	m	class:Credit	typeref:typename:bool
head	intersim2/flit.hpp	/^  bool head;$/;"	m	class:Flit	typeref:typename:bool
head	intersim2/routers/event_router.hpp	/^    bool head;$/;"	m	struct:EventRouter::tArrivalEvent	typeref:typename:bool
height	abstract_hardware_model.h	/^   int height;$/;"	m	struct:cudaArray	typeref:typename:int
height	gpuwattch/cacti/cacti_interface.h	/^  double height;$/;"	m	class:mem_array	typeref:typename:double
height_sense_amplifier	gpuwattch/cacti/component.cc	/^double Component::height_sense_amplifier(double pitch_sense_amp)$/;"	f	class:Component	typeref:typename:double
high	cuda-sim/ptx_sim.h	/^       unsigned int high;$/;"	m	struct:ptx_reg_t::__anondd5d98a10208	typeref:typename:unsigned int
highest	cuda-sim/ptx_sim.h	/^       unsigned int highest;$/;"	m	struct:ptx_reg_t::__anondd5d98a10208	typeref:typename:unsigned int
history_map_t	gpgpu-sim/addrdec.cc	/^   typedef tr1_hash_map<addrdec_t, new_addr_type, hash_addrdec_t> history_map_t; $/;"	t	function:linear_to_raw_address_translation::sweep_test	typeref:typename:tr1_hash_map<addrdec_t,new_addr_type,hash_addrdec_t>	file:
history_map_t	gpgpu-sim/addrdec.cc	/^   typedef tr1_hash_map<addrdec_t, new_addr_type> history_map_t; $/;"	t	function:linear_to_raw_address_translation::sweep_test	typeref:typename:tr1_hash_map<addrdec_t,new_addr_type>	file:
hit	gpuwattch/basic_components.h	/^    double hit;$/;"	m	class:statsComponents	typeref:typename:double
hit_watchpoint	debug.cc	/^void hit_watchpoint( unsigned watchpoint_num, ptx_thread_info *thd, const ptx_instruction *pI )$/;"	f	typeref:typename:void
homenode_read_accesses	gpuwattch/XML_Parse.h	/^	double homenode_read_accesses;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
homenode_read_accesses	gpuwattch/XML_Parse.h	/^	double homenode_read_accesses;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
homenode_read_hits	gpuwattch/XML_Parse.h	/^	double homenode_read_hits;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
homenode_read_hits	gpuwattch/XML_Parse.h	/^	double homenode_read_hits;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
homenode_read_misses	gpuwattch/XML_Parse.h	/^	double homenode_read_misses;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
homenode_read_misses	gpuwattch/XML_Parse.h	/^	double homenode_read_misses;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
homenode_rtp_stats	gpuwattch/sharedcache.h	/^    statsDef   homenode_rtp_stats;$/;"	m	class:SharedCache	typeref:typename:statsDef
homenode_stats_t	gpuwattch/sharedcache.h	/^    statsDef   homenode_stats_t;$/;"	m	class:SharedCache	typeref:typename:statsDef
homenode_tdp_stats	gpuwattch/sharedcache.h	/^    statsDef   homenode_tdp_stats;$/;"	m	class:SharedCache	typeref:typename:statsDef
homenode_write_accesses	gpuwattch/XML_Parse.h	/^	double homenode_write_accesses;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
homenode_write_accesses	gpuwattch/XML_Parse.h	/^	double homenode_write_accesses;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
homenode_write_hits	gpuwattch/XML_Parse.h	/^	double homenode_write_hits;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
homenode_write_hits	gpuwattch/XML_Parse.h	/^	double homenode_write_hits;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
homenode_write_misses	gpuwattch/XML_Parse.h	/^	double homenode_write_misses;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
homenode_write_misses	gpuwattch/XML_Parse.h	/^	double homenode_write_misses;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
homoCore	gpuwattch/basic_components.h	/^    bool homoCore, homoL2, homoL3, homoNOC, homoL1Dir, homoL2Dir;$/;"	m	class:ProcParam	typeref:typename:bool
homoL1Dir	gpuwattch/basic_components.h	/^    bool homoCore, homoL2, homoL3, homoNOC, homoL1Dir, homoL2Dir;$/;"	m	class:ProcParam	typeref:typename:bool
homoL2	gpuwattch/basic_components.h	/^    bool homoCore, homoL2, homoL3, homoNOC, homoL1Dir, homoL2Dir;$/;"	m	class:ProcParam	typeref:typename:bool
homoL2Dir	gpuwattch/basic_components.h	/^    bool homoCore, homoL2, homoL3, homoNOC, homoL1Dir, homoL2Dir;$/;"	m	class:ProcParam	typeref:typename:bool
homoL3	gpuwattch/basic_components.h	/^    bool homoCore, homoL2, homoL3, homoNOC, homoL1Dir, homoL2Dir;$/;"	m	class:ProcParam	typeref:typename:bool
homoNOC	gpuwattch/basic_components.h	/^    bool homoCore, homoL2, homoL3, homoNOC, homoL1Dir, homoL2Dir;$/;"	m	class:ProcParam	typeref:typename:bool
homogeneous_L1Directories	gpuwattch/XML_Parse.h	/^	int homogeneous_L1Directories;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
homogeneous_L2Directories	gpuwattch/XML_Parse.h	/^	int homogeneous_L2Directories;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
homogeneous_L2s	gpuwattch/XML_Parse.h	/^	int homogeneous_L2s;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
homogeneous_L2s	gpuwattch/arch_const.h	/^const bool	    	homogeneous_L2s	=	true;$/;"	v	typeref:typename:const bool
homogeneous_L3s	gpuwattch/XML_Parse.h	/^	int homogeneous_L3s;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
homogeneous_L3s	gpuwattch/arch_const.h	/^const bool 			homogeneous_L3s	=	true;$/;"	v	typeref:typename:const bool
homogeneous_NoCs	gpuwattch/XML_Parse.h	/^	int homogeneous_NoCs;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
homogeneous_ccs	gpuwattch/XML_Parse.h	/^	int homogeneous_ccs;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
homogeneous_cores	gpuwattch/XML_Parse.h	/^	int homogeneous_cores;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
homogeneous_cores	gpuwattch/arch_const.h	/^const bool 			homogeneous_cores	= 	true;$/;"	v	typeref:typename:const bool
hop_count_based	intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_base/;"	e	enum:TrafficManager::ePriority
hop_count_based	intersim2/vc.hpp	/^  enum ePrioType { local_age_based, queue_length_based, hop_count_based, none, other };$/;"	e	enum:VC::ePrioType
hops	intersim2/flit.hpp	/^  int  hops;$/;"	m	class:Flit	typeref:typename:int
hor_bus	gpuwattch/cacti/highradix.h	/^    Wire *hor_bus, *ver_bus;$/;"	m	class:HighRadix	typeref:typename:Wire *
horiz_dielectric_constant	gpuwattch/cacti/parameter.h	/^    double horiz_dielectric_constant;$/;"	m	class:TechnologyParameter::InterconnectType	typeref:typename:double
horizontal_nodes	gpuwattch/XML_Parse.h	/^	int horizontal_nodes;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int
horizontal_nodes	gpuwattch/basic_components.h	/^    int    horizontal_nodes,vertical_nodes, total_nodes;$/;"	m	class:NoCParam	typeref:typename:int
horowitz	gpuwattch/cacti/basic_circuit.cc	/^double horowitz($/;"	f	typeref:typename:double
ht	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
htree_hnodes	gpuwattch/cacti/htree2.h	/^    double htree_hnodes;$/;"	m	class:Htree2	typeref:typename:double
htree_in_add	gpuwattch/cacti/bank.h	/^    Htree2 *htree_in_add;$/;"	m	class:Bank	typeref:typename:Htree2 *
htree_in_add	gpuwattch/cacti/uca.h	/^    Htree2   * htree_in_add;$/;"	m	class:UCA	typeref:typename:Htree2 *
htree_in_data	gpuwattch/cacti/bank.h	/^    Htree2 *htree_in_data;$/;"	m	class:Bank	typeref:typename:Htree2 *
htree_in_data	gpuwattch/cacti/uca.h	/^    Htree2   * htree_in_data;$/;"	m	class:UCA	typeref:typename:Htree2 *
htree_in_search	gpuwattch/cacti/bank.h	/^    Htree2 *htree_in_search;$/;"	m	class:Bank	typeref:typename:Htree2 *
htree_in_search	gpuwattch/cacti/uca.h	/^    Htree2   * htree_in_search;$/;"	m	class:UCA	typeref:typename:Htree2 *
htree_out_data	gpuwattch/cacti/bank.h	/^    Htree2 *htree_out_data;$/;"	m	class:Bank	typeref:typename:Htree2 *
htree_out_data	gpuwattch/cacti/uca.h	/^    Htree2   * htree_out_data;$/;"	m	class:UCA	typeref:typename:Htree2 *
htree_out_search	gpuwattch/cacti/bank.h	/^    Htree2 *htree_out_search;$/;"	m	class:Bank	typeref:typename:Htree2 *
htree_out_search	gpuwattch/cacti/uca.h	/^    Htree2   * htree_out_search;$/;"	m	class:UCA	typeref:typename:Htree2 *
htree_vnodes	gpuwattch/cacti/htree2.h	/^    double htree_vnodes;$/;"	m	class:Htree2	typeref:typename:double
hw_tid_from_wid	gpgpu-sim/shader.h	/^inline unsigned hw_tid_from_wid(unsigned wid, unsigned warp_size, unsigned i){return wid * warp_/;"	f	typeref:typename:unsigned
iFRAT	gpuwattch/core.h	/^	ArrayST * iFRAT;$/;"	m	class:RENAMINGU	typeref:typename:ArrayST *
iRRAT	gpuwattch/core.h	/^	ArrayST * iRRAT;$/;"	m	class:RENAMINGU	typeref:typename:ArrayST *
iSLIP_Sparse	intersim2/allocators/islip.cpp	/^iSLIP_Sparse::iSLIP_Sparse( Module *parent, const string& name,$/;"	f	class:iSLIP_Sparse
iSLIP_Sparse	intersim2/allocators/islip.hpp	/^class iSLIP_Sparse : public SparseAllocator {$/;"	c
ialu_accesses	gpuwattch/XML_Parse.h	/^	double ialu_accesses;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
ibuffer_empty	gpgpu-sim/shader.h	/^    bool ibuffer_empty() const$/;"	f	class:shd_warp_t	typeref:typename:bool
ibuffer_entry	gpgpu-sim/shader.h	/^       ibuffer_entry() { m_valid = false; m_inst = NULL; }$/;"	f	struct:shd_warp_t::ibuffer_entry
ibuffer_entry	gpgpu-sim/shader.h	/^    struct ibuffer_entry {$/;"	s	class:shd_warp_t
ibuffer_fill	gpgpu-sim/shader.h	/^    void ibuffer_fill( unsigned slot, const warp_inst_t *pI )$/;"	f	class:shd_warp_t	typeref:typename:void
ibuffer_flush	gpgpu-sim/shader.h	/^    void ibuffer_flush()$/;"	f	class:shd_warp_t	typeref:typename:void
ibuffer_free	gpgpu-sim/shader.h	/^    void ibuffer_free()$/;"	f	class:shd_warp_t	typeref:typename:void
ibuffer_next_inst	gpgpu-sim/shader.h	/^    const warp_inst_t *ibuffer_next_inst() { return m_ibuffer[m_next].m_inst; }$/;"	f	class:shd_warp_t	typeref:typename:const warp_inst_t *
ibuffer_next_valid	gpgpu-sim/shader.h	/^    bool ibuffer_next_valid() { return m_ibuffer[m_next].m_valid; }$/;"	f	class:shd_warp_t	typeref:typename:bool
ibuffer_step	gpgpu-sim/shader.h	/^    void ibuffer_step() { m_next = (m_next+1)%IBUFFER_SIZE; }$/;"	f	class:shd_warp_t	typeref:typename:void
ic_proj_type	gpuwattch/cacti/cacti_interface.h	/^    unsigned int ic_proj_type;      \/\/ interconnect_projection_type$/;"	m	class:InputParameter	typeref:typename:unsigned int
icache	gpuwattch/XML_Parse.h	/^	icache_systemcore icache;$/;"	m	struct:__anon6448b92c0708	typeref:typename:icache_systemcore
icache	gpuwattch/core.h	/^	InstCache icache;$/;"	m	class:InstFetchU	typeref:typename:InstCache
icache_config	gpuwattch/XML_Parse.h	/^	double icache_config[20];$/;"	m	struct:__anon6448b92c0308	typeref:typename:double[20]
icache_systemcore	gpuwattch/XML_Parse.h	/^} icache_systemcore;$/;"	t	typeref:struct:__anon6448b92c0308
icache_write_buffers	gpuwattch/arch_const.h	/^const int icache_write_buffers=8;$/;"	v	typeref:typename:const int
icacheassoc	gpuwattch/arch_const.h	/^const int icacheassoc=4;$/;"	v	typeref:typename:const int
icacheblocksize	gpuwattch/arch_const.h	/^const int icacheblocksize=32;$/;"	v	typeref:typename:const int
icachesize	gpuwattch/arch_const.h	/^const int icachesize=32768;$/;"	v	typeref:typename:const int
icnt2mem_lat_table	gpgpu-sim/mem_latency_stat.h	/^   unsigned icnt2mem_lat_table[24];$/;"	m	class:memory_stats_t	typeref:typename:unsigned[24]
icnt2sh_lat_table	gpgpu-sim/mem_latency_stat.h	/^   unsigned icnt2sh_lat_table[24];$/;"	m	class:memory_stats_t	typeref:typename:unsigned[24]
icnt_busy	gpgpu-sim/icnt_wrapper.cc	/^icnt_busy_p                  icnt_busy;$/;"	v	typeref:typename:icnt_busy_p
icnt_busy_p	gpgpu-sim/icnt_wrapper.h	/^typedef bool (*icnt_busy_p)( );$/;"	t	typeref:typename:bool (*)()
icnt_create	gpgpu-sim/icnt_wrapper.cc	/^icnt_create_p                icnt_create;$/;"	v	typeref:typename:icnt_create_p
icnt_create_p	gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_create_p)(unsigned n_shader,  unsigned n_mem);$/;"	t	typeref:typename:void (*)(unsigned n_shader,unsigned n_mem)
icnt_cycle	gpgpu-sim/shader.cc	/^void simt_core_cluster::icnt_cycle()$/;"	f	class:simt_core_cluster	typeref:typename:void
icnt_display_overall_stats	gpgpu-sim/icnt_wrapper.cc	/^icnt_display_overall_stats_p icnt_display_overall_stats;$/;"	v	typeref:typename:icnt_display_overall_stats_p
icnt_display_overall_stats_p	gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_display_overall_stats_p)( );$/;"	t	typeref:typename:void (*)()
icnt_display_state	gpgpu-sim/icnt_wrapper.cc	/^icnt_display_state_p         icnt_display_state;$/;"	v	typeref:typename:icnt_display_state_p
icnt_display_state_p	gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_display_state_p)(FILE* fp);$/;"	t	typeref:typename:void (*)(FILE * fp)
icnt_display_stats	gpgpu-sim/icnt_wrapper.cc	/^icnt_display_stats_p         icnt_display_stats;$/;"	v	typeref:typename:icnt_display_stats_p
icnt_display_stats_p	gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_display_stats_p)( );$/;"	t	typeref:typename:void (*)()
icnt_drain_p	gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_drain_p)( );$/;"	t	typeref:typename:void (*)()
icnt_flit_size	gpgpu-sim/gpu-sim.h	/^   unsigned icnt_flit_size;$/;"	m	struct:memory_config	typeref:typename:unsigned
icnt_flit_size	gpgpu-sim/mem_fetch.h	/^   unsigned icnt_flit_size;$/;"	m	class:mem_fetch	typeref:typename:unsigned
icnt_freq	gpgpu-sim/gpu-sim.h	/^    double icnt_freq;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
icnt_get_flit_size	gpgpu-sim/icnt_wrapper.cc	/^icnt_get_flit_size_p         icnt_get_flit_size;$/;"	v	typeref:typename:icnt_get_flit_size_p
icnt_get_flit_size_p	gpgpu-sim/icnt_wrapper.h	/^typedef unsigned (*icnt_get_flit_size_p)();$/;"	t	typeref:typename:unsigned (*)()
icnt_has_buffer	gpgpu-sim/icnt_wrapper.cc	/^icnt_has_buffer_p            icnt_has_buffer;$/;"	v	typeref:typename:icnt_has_buffer_p
icnt_has_buffer_p	gpgpu-sim/icnt_wrapper.h	/^typedef bool (*icnt_has_buffer_p)(unsigned input, unsigned int size);$/;"	t	typeref:typename:bool (*)(unsigned input,unsigned int size)
icnt_init	gpgpu-sim/icnt_wrapper.cc	/^icnt_init_p                  icnt_init;$/;"	v	typeref:typename:icnt_init_p
icnt_init_p	gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_init_p)( );$/;"	t	typeref:typename:void (*)()
icnt_inject_request_packet	gpgpu-sim/shader.cc	/^void simt_core_cluster::icnt_inject_request_packet(class mem_fetch *mf)$/;"	f	class:simt_core_cluster	typeref:typename:void
icnt_injection_buffer_full	gpgpu-sim/shader.cc	/^bool simt_core_cluster::icnt_injection_buffer_full(unsigned size, bool write)$/;"	f	class:simt_core_cluster	typeref:typename:bool
icnt_period	gpgpu-sim/gpu-sim.h	/^    double icnt_period;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
icnt_pop	gpgpu-sim/icnt_wrapper.cc	/^icnt_pop_p                   icnt_pop;$/;"	v	typeref:typename:icnt_pop_p
icnt_pop_p	gpgpu-sim/icnt_wrapper.h	/^typedef void* (*icnt_pop_p)(unsigned output);$/;"	t	typeref:typename:void * (*)(unsigned output)
icnt_push	gpgpu-sim/icnt_wrapper.cc	/^icnt_push_p                  icnt_push;$/;"	v	typeref:typename:icnt_push_p
icnt_push_p	gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_push_p)(unsigned input, unsigned output, void* data, unsigned int size);$/;"	t	typeref:typename:void (*)(unsigned input,unsigned output,void * data,unsigned int size)
icnt_reg_options	gpgpu-sim/icnt_wrapper.cc	/^void icnt_reg_options( class OptionParser * opp )$/;"	f	typeref:typename:void
icnt_time	gpgpu-sim/gpu-sim.h	/^   double icnt_time;$/;"	m	class:gpgpu_sim	typeref:typename:double
icnt_transfer	gpgpu-sim/icnt_wrapper.cc	/^icnt_transfer_p              icnt_transfer;$/;"	v	typeref:typename:icnt_transfer_p
icnt_transfer_p	gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_transfer_p)( );$/;"	t	typeref:typename:void (*)()
icnt_wrapper_init	gpgpu-sim/icnt_wrapper.cc	/^void icnt_wrapper_init()$/;"	f	typeref:typename:void
id	gpgpu-sim/dram.h	/^   unsigned int id;$/;"	m	class:dram_t	typeref:typename:unsigned int
id	intersim2/arbiters/arbiter.hpp	/^    int id ;$/;"	m	struct:Arbiter::__anond10b4dfb0108	typeref:typename:int
id	intersim2/credit.hpp	/^  int  id;$/;"	m	class:Credit	typeref:typename:int
id	intersim2/flit.hpp	/^  int  id;$/;"	m	class:Flit	typeref:typename:int
id	intersim2/routers/event_router.hpp	/^    int  id;    \/\/ debug$/;"	m	struct:EventRouter::tArrivalEvent	typeref:typename:int
id	intersim2/routers/event_router.hpp	/^    int  id;    \/\/ debug$/;"	m	struct:EventRouter::tTransportEvent	typeref:typename:int
id	intersim2/routers/event_router.hpp	/^    int  id;$/;"	m	struct:EventNextVCState::tWaiting	typeref:typename:int
idata	option_parser.cc	/^   int idata;$/;"	m	class:testtype	typeref:typename:int	file:
idcl	gpuwattch/core.h	/^	dep_resource_conflict_check * idcl;$/;"	m	class:RENAMINGU	typeref:typename:dep_resource_conflict_check *
idd0	gpuwattch/basic_components.h	/^	int idd0;$/;"	m	class:DRAMParam	typeref:typename:int
idd1	gpuwattch/basic_components.h	/^	int idd1;$/;"	m	class:DRAMParam	typeref:typename:int
idd2n	gpuwattch/basic_components.h	/^	int idd2n;$/;"	m	class:DRAMParam	typeref:typename:int
idd2p	gpuwattch/basic_components.h	/^	int idd2p;$/;"	m	class:DRAMParam	typeref:typename:int
idd3n	gpuwattch/basic_components.h	/^	int idd3n;$/;"	m	class:DRAMParam	typeref:typename:int
idd3p	gpuwattch/basic_components.h	/^	int idd3p;$/;"	m	class:DRAMParam	typeref:typename:int
idd4r	gpuwattch/basic_components.h	/^	int idd4r;$/;"	m	class:DRAMParam	typeref:typename:int
idd4w	gpuwattch/basic_components.h	/^	int idd4w;$/;"	m	class:DRAMParam	typeref:typename:int
idd5	gpuwattch/basic_components.h	/^	int idd5;$/;"	m	class:DRAMParam	typeref:typename:int
idd6	gpuwattch/basic_components.h	/^	int idd6;$/;"	m	class:DRAMParam	typeref:typename:int
idd7	gpuwattch/basic_components.h	/^	int idd7;$/;"	m	class:DRAMParam	typeref:typename:int
identifier_list	cuda-sim/ptx.y	/^identifier_list: identifier_spec$/;"	l
identifier_spec	cuda-sim/ptx.y	/^identifier_spec: IDENTIFIER { add_identifier($1,0,NON_ARRAY_IDENTIFIER); func_header_info($1);}$/;"	l
idle	intersim2/routers/event_router.hpp	/^  enum eNextVCState { idle, busy, tail_pending };$/;"	e	enum:EventNextVCState::eNextVCState
idle	intersim2/vc.hpp	/^  enum eVCState { state_min = 0, idle = state_min, routing, vc_alloc, active, $/;"	e	enum:VC::eVCState
idle_core_power	gpuwattch/XML_Parse.h	/^	double idle_core_power;$/;"	m	struct:__anon6448b92c1208	typeref:typename:double
idle_core_power	gpuwattch/processor.h	/^	double idle_core_power;$/;"	m	class:Processor	typeref:typename:double
idle_cycles	gpuwattch/XML_Parse.h	/^	double idle_cycles;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
idle_cycles	gpuwattch/basic_components.h	/^    double pipeline_duty_cycle, total_cycles, busy_cycles, idle_cycles;$/;"	m	class:CoreDynParam	typeref:typename:double
ifb	gpuwattch/array.h	/^  ArrayST* ifb;$/;"	m	class:InstCache	typeref:typename:ArrayST *
ifetch_buffer_t	gpgpu-sim/shader.h	/^    ifetch_buffer_t( address_type pc, unsigned nbytes, unsigned warp_id ) $/;"	f	struct:ifetch_buffer_t
ifetch_buffer_t	gpgpu-sim/shader.h	/^    ifetch_buffer_t() { m_valid=false; }$/;"	f	struct:ifetch_buffer_t
ifetch_buffer_t	gpgpu-sim/shader.h	/^struct ifetch_buffer_t {$/;"	s
ifreeL	gpuwattch/core.h	/^	ArrayST * ifreeL;$/;"	m	class:RENAMINGU	typeref:typename:ArrayST *
ifu	gpuwattch/core.h	/^	InstFetchU * ifu;$/;"	m	class:Core	typeref:typename:InstFetchU *
ild_thickness	gpuwattch/cacti/parameter.h	/^    double ild_thickness;$/;"	m	class:TechnologyParameter::InterconnectType	typeref:typename:double
imiss_pending	gpgpu-sim/shader.h	/^    bool imiss_pending() const { return m_imiss_pending; }$/;"	f	class:shd_warp_t	typeref:typename:bool
immediatedominator_id	cuda-sim/ptx_ir.h	/^   int immediatedominator_id;$/;"	m	struct:basic_block_t	typeref:typename:int
immediatepostdominator_id	cuda-sim/ptx_ir.h	/^   int immediatepostdominator_id;$/;"	m	struct:basic_block_t	typeref:typename:int
in	abstract_hardware_model.h	/^    unsigned in[4];$/;"	m	class:inst_t	typeref:typename:unsigned[4]
in	intersim2/arbiters/prio_arb.hpp	/^    int in;$/;"	m	struct:PriorityArbiter::sRequest	typeref:typename:int
in_htree	gpuwattch/cacti/htree2.cc	/^Htree2::in_htree()$/;"	f	class:Htree2	typeref:typename:void
in_pri	intersim2/allocators/allocator.hpp	/^    int in_pri;$/;"	m	struct:Allocator::sRequest	typeref:typename:int
in_rise_time	gpuwattch/cacti/htree2.h	/^    double in_rise_time, out_rise_time;$/;"	m	class:Htree2	typeref:typename:double
in_rise_time	gpuwattch/cacti/wire.h	/^    double in_rise_time, out_rise_time;$/;"	m	class:Wire	typeref:typename:double
in_rise_time	gpuwattch/interconnect.h	/^    double in_rise_time, out_rise_time;$/;"	m	class:interconnect	typeref:typename:double
inactive_lanes_accesses_nonsfu	gpgpu-sim/shader.h	/^	 unsigned inactive_lanes_accesses_nonsfu(unsigned active_count,double latency){$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
inactive_lanes_accesses_sfu	gpgpu-sim/shader.h	/^	 unsigned inactive_lanes_accesses_sfu(unsigned active_count,double latency){$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
inc_head	gpgpu-sim/gpu-cache.h	/^        void inc_head() { m_head = (m_head+1)%m_size; m_num++;}$/;"	f	class:tex_cache::fifo	typeref:typename:void
inc_inst_in_pipeline	gpgpu-sim/shader.h	/^    void inc_inst_in_pipeline() { m_inst_in_pipeline++; }$/;"	f	class:shd_warp_t	typeref:typename:void
inc_n_atomic	gpgpu-sim/shader.h	/^    void inc_n_atomic() { m_n_atomic++; }$/;"	f	class:shd_warp_t	typeref:typename:void
inc_running	abstract_hardware_model.h	/^   void inc_running() { m_num_cores_running++; }$/;"	f	class:kernel_info_t	typeref:typename:void
inc_simt_to_mem	gpgpu-sim/shader.h	/^	 void inc_simt_to_mem(unsigned n_flits){ m_stats->n_simt_to_mem[m_sid] += n_flits; }$/;"	f	class:shader_core_ctx	typeref:typename:void
inc_stats	gpgpu-sim/gpu-cache.cc	/^void cache_stats::inc_stats(int access_type, int access_outcome){$/;"	f	class:cache_stats	typeref:typename:void
inc_store_req	gpgpu-sim/shader.h	/^    void inc_store_req( unsigned warp_id) { m_warp[warp_id].inc_store_req(); }$/;"	f	class:shader_core_ctx	typeref:typename:void
inc_store_req	gpgpu-sim/shader.h	/^    void inc_store_req() { m_stores_outstanding++; }$/;"	f	class:shd_warp_t	typeref:typename:void
inc_tail	gpgpu-sim/gpu-cache.h	/^        void inc_tail() { assert(m_num>0); m_tail = (m_tail+1)%m_size; m_num--;}$/;"	f	class:tex_cache::fifo	typeref:typename:void
incexecstat	gpgpu-sim/shader.cc	/^void shader_core_ctx::incexecstat(warp_inst_t *&inst)$/;"	f	class:shader_core_ctx	typeref:typename:void
incfpalu_stat	gpgpu-sim/shader.h	/^	 void incfpalu_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incfpdiv_stat	gpgpu-sim/shader.h	/^	 void incfpdiv_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incfpmul_stat	gpgpu-sim/shader.h	/^	 void incfpmul_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incfuactivelanes_stat	gpgpu-sim/shader.h	/^	 void incfuactivelanes_stat(unsigned active_count) {m_stats->m_active_fu_lanes[m_sid]=m_stats->/;"	f	class:shader_core_ctx	typeref:typename:void
incfumemactivelanes_stat	gpgpu-sim/shader.h	/^	 void incfumemactivelanes_stat(unsigned active_count) {m_stats->m_active_fu_mem_lanes[m_sid]=m_/;"	f	class:shader_core_ctx	typeref:typename:void
incialu_stat	gpgpu-sim/shader.h	/^    void incialu_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incidiv_stat	gpgpu-sim/shader.h	/^	 void incidiv_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incimul24_stat	gpgpu-sim/shader.h	/^    void incimul24_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incimul32_stat	gpgpu-sim/shader.h	/^	 void incimul32_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incimul_stat	gpgpu-sim/shader.h	/^    void incimul_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incload_stat	gpgpu-sim/shader.h	/^    void incload_stat() {m_stats->m_num_loadqueued_insn[m_sid]++;}$/;"	f	class:shader_core_ctx	typeref:typename:void
incmem_stat	gpgpu-sim/shader.h	/^	 void incmem_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incnon_rf_operands	gpgpu-sim/shader.h	/^	 void incnon_rf_operands(unsigned active_count){m_stats->m_non_rf_operands[m_sid]=m_stats->m_no/;"	f	class:shader_core_ctx	typeref:typename:void
incregfile_reads	gpgpu-sim/shader.h	/^	 void incregfile_reads(unsigned active_count) {m_stats->m_read_regfile_acesses[m_sid]=m_stats->/;"	f	class:shader_core_ctx	typeref:typename:void
incregfile_writes	gpgpu-sim/shader.h	/^	 void incregfile_writes(unsigned active_count){m_stats->m_write_regfile_acesses[m_sid]=m_stats-/;"	f	class:shader_core_ctx	typeref:typename:void
increment_cta_id	abstract_hardware_model.h	/^   void increment_cta_id() $/;"	f	class:kernel_info_t	typeref:typename:void
increment_thread_id	abstract_hardware_model.h	/^   void increment_thread_id() { increment_x_then_y_then_z(m_next_tid,m_block_dim); }$/;"	f	class:kernel_info_t	typeref:typename:void
increment_x_then_y_then_z	gpgpu-sim/gpu-sim.cc	/^void increment_x_then_y_then_z( dim3 &i, const dim3 &bound)$/;"	f	typeref:typename:void
incsfu_stat	gpgpu-sim/shader.h	/^	 void incsfu_stat(unsigned active_count,double latency) {m_stats->m_num_sfu_acesses[m_sid]=m_st/;"	f	class:shader_core_ctx	typeref:typename:void
incsfuactivelanes_stat	gpgpu-sim/shader.h	/^	 void incsfuactivelanes_stat(unsigned active_count) {m_stats->m_active_sfu_lanes[m_sid]=m_stats/;"	f	class:shader_core_ctx	typeref:typename:void
incsp_stat	gpgpu-sim/shader.h	/^	 void incsp_stat(unsigned active_count,double latency) {m_stats->m_num_sp_acesses[m_sid]=m_stat/;"	f	class:shader_core_ctx	typeref:typename:void
incspactivelanes_stat	gpgpu-sim/shader.h	/^	 void incspactivelanes_stat(unsigned active_count) {m_stats->m_active_sp_lanes[m_sid]=m_stats->/;"	f	class:shader_core_ctx	typeref:typename:void
incstore_stat	gpgpu-sim/shader.h	/^    void incstore_stat() {m_stats->m_num_storequeued_insn[m_sid]++;}$/;"	f	class:shader_core_ctx	typeref:typename:void
inctex_stat	gpgpu-sim/shader.h	/^    void inctex_stat(unsigned active_count,double latency){$/;"	f	class:shader_core_ctx	typeref:typename:void
inctrans_stat	gpgpu-sim/shader.h	/^	 void inctrans_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
index	intersim2/power/buffer_monitor.cpp	/^int BufferMonitor::index( int input, int cl ) const {$/;"	f	class:BufferMonitor	typeref:typename:int
index	intersim2/power/switch_monitor.cpp	/^int SwitchMonitor::index( int input, int output, int cl ) const {$/;"	f	class:SwitchMonitor	typeref:typename:int
indexClear	gpuwattch/xmlParser.cc	/^int XMLNode::indexClear(XMLCSTR lpszValue) const$/;"	f	class:XMLNode	typeref:typename:int
indexText	gpuwattch/xmlParser.cc	/^int XMLNode::indexText(XMLCSTR lpszValue) const$/;"	f	class:XMLNode	typeref:typename:int
inflight_mem_tracker	cuda-sim/ptx-stats.cc	/^static ptx_inflight_memory_insn_tracker *inflight_mem_tracker = NULL;$/;"	v	typeref:typename:ptx_inflight_memory_insn_tracker *	file:
info	cuda-sim/ptxinfo.y	/^info: 	  USED INT_OPERAND REGS { ptxinfo_regs($2); }$/;"	l
init	abstract_hardware_model.h	/^   void init() $/;"	f	class:mem_access_t	typeref:typename:void
init	cuda-sim/ptx_ir.h	/^   void init()$/;"	f	class:operand_info	typeref:typename:void
init	cuda-sim/ptx_sim.h	/^   void init(gpgpu_t *gpu, core_t *core, unsigned sid, unsigned cta_id, unsigned wid, unsigned t/;"	f	class:ptx_thread_info	typeref:typename:void
init	gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::init(unsigned int n_channel, unsigned int n_sub_partitio/;"	f	class:linear_to_raw_address_translation	typeref:typename:void
init	gpgpu-sim/gpu-cache.cc	/^void l2_cache_config::init(linear_to_raw_address_translation *address_mapping){$/;"	f	class:l2_cache_config	typeref:typename:void
init	gpgpu-sim/gpu-cache.cc	/^void tag_array::init( int core_id, int type_id )$/;"	f	class:tag_array	typeref:typename:void
init	gpgpu-sim/gpu-cache.h	/^    virtual void init( mem_fetch_allocator *mfcreator )$/;"	f	class:data_cache	typeref:typename:void
init	gpgpu-sim/gpu-cache.h	/^    void init( const char *name,$/;"	f	class:baseline_cache	typeref:typename:void
init	gpgpu-sim/gpu-cache.h	/^    void init(char * config, FuncCache status)$/;"	f	class:cache_config	typeref:typename:void
init	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::init()$/;"	f	class:gpgpu_sim	typeref:typename:void
init	gpgpu-sim/gpu-sim.h	/^	void init()$/;"	f	struct:power_config	typeref:typename:void
init	gpgpu-sim/gpu-sim.h	/^    void init() $/;"	f	class:gpgpu_sim_config	typeref:typename:void
init	gpgpu-sim/gpu-sim.h	/^   void init()$/;"	f	struct:memory_config	typeref:typename:void
init	gpgpu-sim/power_stat.cc	/^void power_core_stat_t::init()$/;"	f	class:power_core_stat_t	typeref:typename:void
init	gpgpu-sim/power_stat.cc	/^void power_mem_stat_t::init(){$/;"	f	class:power_mem_stat_t	typeref:typename:void
init	gpgpu-sim/shader.cc	/^void ldst_unit::init( mem_fetch_interface *icnt,$/;"	f	class:ldst_unit	typeref:typename:void
init	gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::collector_unit_t::init( unsigned n, $/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:void
init	gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::init( unsigned num_banks, shader_core_ctx *shader )$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
init	gpgpu-sim/shader.h	/^      void init( unsigned num_cu, unsigned num_banks ) $/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:void
init	gpgpu-sim/shader.h	/^    void init( address_type start_pc,$/;"	f	class:shd_warp_t	typeref:typename:void
init	gpgpu-sim/shader.h	/^    void init()$/;"	f	struct:shader_core_config	typeref:typename:void
init	trace.cc	/^    void init()$/;"	f	namespace:Trace	typeref:typename:void
init_clock_domains	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim_config::init_clock_domains(void ) $/;"	f	class:gpgpu_sim_config	typeref:typename:void
init_cont	gpuwattch/cacti/nuca.cc	/^Nuca::init_cont()$/;"	f	class:Nuca	typeref:typename:void
init_directive_state	cuda-sim/ptx_parser.cc	/^void init_directive_state()$/;"	f	typeref:typename:void
init_inst_classification_stat	cuda-sim/cuda-sim.cc	/^void init_inst_classification_stat() $/;"	f	typeref:typename:void
init_inst_val	gpuwattch/gpgpu_sim_wrapper.h	/^    double init_inst_val;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:double
init_instruction_state	cuda-sim/ptx_parser.cc	/^void init_instruction_state()$/;"	f	typeref:typename:void
init_interface	gpuwattch/cacti/io.cc	/^uca_org_t init_interface(InputParameter* const local_interface)$/;"	f	typeref:typename:uca_org_t
init_link_bus	gpuwattch/noc.cc	/^void NoC ::init_link_bus(double link_len_)$/;"	f	class:NoC	typeref:typename:void
init_mcpat	gpgpu-sim/power_interface.cc	/^void init_mcpat(const gpgpu_sim_config &config, class gpgpu_sim_wrapper *wrapper, unsigned stat_/;"	f	typeref:typename:void
init_mcpat	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::init_mcpat(char* xmlfile, char* powerfilename, char* power_trace_filenam/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
init_parser	cuda-sim/ptx_parser.cc	/^symbol_table *init_parser( const char *ptx_filename )$/;"	f	typeref:typename:symbol_table *
init_router	gpuwattch/noc.cc	/^void NoC::init_router()$/;"	f	class:NoC	typeref:typename:void
init_tech_params	gpuwattch/cacti/technology.cc	/^void init_tech_params(double technology, bool is_tag)$/;"	f	typeref:typename:void
init_tech_params	gpuwattch/technology_xeon_core.cc	/^void init_tech_params(double technology, bool is_tag)$/;"	f	typeref:typename:void
init_warps	gpgpu-sim/shader.cc	/^void shader_core_ctx::init_warps( unsigned cta_id, unsigned start_thread, unsigned end_thread )$/;"	f	class:shader_core_ctx	typeref:typename:void
init_wire	gpuwattch/cacti/wire.cc	/^Wire::init_wire(){$/;"	f	class:Wire	typeref:typename:void
init_wire_bw	gpuwattch/cacti/htree2.h	/^    double init_wire_bw;  \/\/ bus width at root$/;"	m	class:Htree2	typeref:typename:double
init_wire_bw	gpuwattch/interconnect.h	/^    double init_wire_bw;  \/\/ bus width at root$/;"	m	class:interconnect	typeref:typename:double
initialize	gpuwattch/XML_Parse.cc	/^void ParseXML::initialize() \/\/Initialize all$/;"	f	class:ParseXML	typeref:typename:void
initializeCTA	cuda-sim/cuda-sim.cc	/^void functionalCoreSim::initializeCTA()$/;"	f	class:functionalCoreSim	typeref:typename:void
initialized	gpuwattch/cacti/wire.cc	/^    int Wire::initialized;$/;"	m	class:Wire	typeref:typename:int
initialized	gpuwattch/cacti/wire.h	/^    static int initialized;$/;"	m	class:Wire	typeref:typename:int
initializer_list	cuda-sim/ptx.y	/^initializer_list: LEFT_BRACE literal_list RIGHT_BRACE { add_array_initializer(); } $/;"	l
initiation_interval	abstract_hardware_model.h	/^    unsigned initiation_interval;$/;"	m	class:inst_t	typeref:typename:unsigned
initilizeSIMTStack	abstract_hardware_model.cc	/^void core_t::initilizeSIMTStack(unsigned warp_count, unsigned warp_size)$/;"	f	class:core_t	typeref:typename:void
initpower_coeff	gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> initpower_coeff;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:std::vector<double>
inp_buff	gpuwattch/cacti/highradix.h	/^    Mat *inp_buff, *r_buff, *c_buff;$/;"	m	class:HighRadix	typeref:typename:Mat *
input	cuda-sim/ptx.y	/^input:	\/* empty *\/$/;"	l
input	cuda-sim/ptxinfo.y	/^input:	\/* empty *\/$/;"	l
input	intersim2/routers/event_router.hpp	/^    int  input;$/;"	m	struct:EventNextVCState::tWaiting	typeref:typename:int
input	intersim2/routers/event_router.hpp	/^    int  input;$/;"	m	struct:EventRouter::tArrivalEvent	typeref:typename:int
input	intersim2/routers/event_router.hpp	/^    int  input;$/;"	m	struct:EventRouter::tTransportEvent	typeref:typename:int
inputArea	intersim2/power/power_module.hpp	/^  double inputArea;$/;"	m	class:Power_Module	typeref:typename:double
inputLeakagePower	intersim2/power/power_module.hpp	/^  double inputLeakagePower;$/;"	m	class:Power_Module	typeref:typename:double
inputReadPower	intersim2/power/power_module.hpp	/^  double inputReadPower;$/;"	m	class:Power_Module	typeref:typename:double
inputWritePower	intersim2/power/power_module.hpp	/^  double inputWritePower;$/;"	m	class:Power_Module	typeref:typename:double
input_buffer_entries_per_port	gpuwattch/XML_Parse.h	/^	int input_buffer_entries_per_port;$/;"	m	struct:__anon6448b92c0c08	typeref:typename:int
input_buffer_entries_per_vc	gpuwattch/XML_Parse.h	/^	int input_buffer_entries_per_vc;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int
input_buffer_entries_per_vc	gpuwattch/basic_components.h	/^    int    virtual_channel_per_port,input_buffer_entries_per_vc;$/;"	m	class:NoCParam	typeref:typename:int
input_nand	gpuwattch/cacti/htree2.cc	/^void Htree2::input_nand(double s1, double s2, double l_eff)$/;"	f	class:Htree2	typeref:typename:void
input_port_t	gpgpu-sim/shader.h	/^       input_port_t(port_vector_t & input, port_vector_t & output, uint_vector_t cu_sets)$/;"	f	class:opndcoll_rfu_t::input_port_t
input_port_t	gpgpu-sim/shader.h	/^   class input_port_t {$/;"	c	class:opndcoll_rfu_t
input_ports	gpuwattch/XML_Parse.h	/^	int input_ports;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int
input_ports	gpuwattch/basic_components.h	/^    int    input_ports, output_ports, min_ports, global_linked_ports;$/;"	m	class:NoCParam	typeref:typename:int
insertion_time	gpgpu-sim/dram.h	/^   unsigned int insertion_time;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
inside_mat	gpuwattch/cacti/basic_circuit.h	/^    inside_mat,$/;"	e	enum:Wire_placement
insn_count_map	cuda-sim/ptx-stats.cc	/^    typedef std::map<const ptx_instruction *, int> insn_count_map;$/;"	t	class:ptx_inflight_memory_insn_tracker	typeref:typename:std::map<const ptx_instruction *,int>	file:
insn_latency_info	gpgpu-sim/shader.h	/^struct insn_latency_info {$/;"	s
insn_warp_occ_create	gpgpu-sim/stat-tool.cc	/^void insn_warp_occ_create( int n_loggers, int simd_width )$/;"	f	typeref:typename:void
insn_warp_occ_log	gpgpu-sim/stat-tool.cc	/^void insn_warp_occ_log( int logger_id, address_type pc, int warp_occ)$/;"	f	typeref:typename:void
insn_warp_occ_logger	gpgpu-sim/stat-tool.h	/^   insn_warp_occ_logger(const insn_warp_occ_logger& other)$/;"	f	class:insn_warp_occ_logger
insn_warp_occ_logger	gpgpu-sim/stat-tool.h	/^   insn_warp_occ_logger(int simd_width)$/;"	f	class:insn_warp_occ_logger
insn_warp_occ_logger	gpgpu-sim/stat-tool.h	/^class insn_warp_occ_logger {$/;"	c
insn_warp_occ_print	gpgpu-sim/stat-tool.cc	/^void insn_warp_occ_print( FILE *fout )$/;"	f	typeref:typename:void
inst	debug.cc	/^   const ptx_instruction *inst() const { return m_inst; }$/;"	f	class:watchpoint_event	typeref:typename:const ptx_instruction *	file:
inst_decoder	gpuwattch/logic.cc	/^inst_decoder::inst_decoder($/;"	f	class:inst_decoder
inst_decoder	gpuwattch/logic.h	/^class inst_decoder: public Component{$/;"	c
inst_decoder_delay_power	gpuwattch/logic.cc	/^void inst_decoder::inst_decoder_delay_power()$/;"	f	class:inst_decoder	typeref:typename:void
inst_in_pipeline	gpgpu-sim/shader.h	/^    bool inst_in_pipeline() const { return m_inst_in_pipeline > 0; }$/;"	f	class:shd_warp_t	typeref:typename:bool
inst_not_implemented	cuda-sim/instructions.cc	/^void inst_not_implemented( const ptx_instruction * pI ) $/;"	f	typeref:typename:void
inst_size	cuda-sim/ptx_ir.h	/^   unsigned inst_size() const { return m_inst_size; }$/;"	f	class:ptx_instruction	typeref:typename:unsigned
inst_t	abstract_hardware_model.h	/^    inst_t()$/;"	f	class:inst_t
inst_t	abstract_hardware_model.h	/^class inst_t {$/;"	c
inst_window_reads	gpuwattch/XML_Parse.h	/^	double inst_window_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
inst_window_selections	gpuwattch/XML_Parse.h	/^	double inst_window_selections;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
inst_window_wakeup_accesses	gpuwattch/XML_Parse.h	/^	double inst_window_wakeup_accesses;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
inst_window_writes	gpuwattch/XML_Parse.h	/^	double inst_window_writes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
instruction	abstract_hardware_model.h	/^   const class inst_t* instruction;$/;"	m	struct:dram_callback_t	typeref:typename:const class inst_t *
instruction	cuda-sim/ptx.y	/^instruction: opcode_spec LEFT_PAREN operand RIGHT_PAREN { set_return(); } COMMA operand COMMA LE/;"	l
instruction_buffer_reads	gpuwattch/XML_Parse.h	/^	double instruction_buffer_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
instruction_buffer_size	gpuwattch/XML_Parse.h	/^	int instruction_buffer_size;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
instruction_buffer_write	gpuwattch/XML_Parse.h	/^	double instruction_buffer_write;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
instruction_length	gpuwattch/XML_Parse.h	/^	int instruction_length;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
instruction_length	gpuwattch/arch_const.h	/^const int instruction_length	=	32;\/\/Niagara$/;"	v	typeref:typename:const int
instruction_length	gpuwattch/basic_components.h	/^    int  perThreadState, globalCheckpoint, instruction_length, pc_width, opcode_length, micro_op/;"	m	class:CoreDynParam	typeref:typename:int
instruction_selection	gpuwattch/core.h	/^    selection_logic * instruction_selection;$/;"	m	class:SchedulerU	typeref:typename:selection_logic *
instruction_space	abstract_hardware_model.h	/^   instruction_space$/;"	e	enum:_memory_space_t
instruction_statement	cuda-sim/ptx.y	/^instruction_statement:  instruction SEMI_COLON$/;"	l
instruction_window_scheme	gpuwattch/XML_Parse.h	/^	int instruction_window_scheme;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
instruction_window_size	gpuwattch/XML_Parse.h	/^	int instruction_window_size;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
int4	cuda-sim/cuda-math.h	/^   struct int4 {$/;"	s	namespace:cuda_math
int4	cuda-sim/cuda-math.h	/^   typedef struct int4 int4;$/;"	t	namespace:cuda_math	typeref:struct:int4
intLOGB2	cuda-sim/cuda-sim.cc	/^unsigned int intLOGB2( unsigned int v ) {$/;"	f	typeref:typename:unsigned int
intTagBypass	gpuwattch/core.h	/^	interconnect * intTagBypass;$/;"	m	class:EXECU	typeref:typename:interconnect *
intTag_mul_Bypass	gpuwattch/core.h	/^	interconnect * intTag_mul_Bypass;$/;"	m	class:EXECU	typeref:typename:interconnect *
int_bypass	gpuwattch/core.h	/^	interconnect * int_bypass;$/;"	m	class:EXECU	typeref:typename:interconnect *
int_data_width	gpuwattch/basic_components.h	/^    int  int_data_width, fp_data_width,v_address_width, p_address_width;$/;"	m	class:CoreDynParam	typeref:typename:int
int_inst_window	gpuwattch/core.h	/^	ArrayST         * int_inst_window;$/;"	m	class:SchedulerU	typeref:typename:ArrayST *
int_instructions	gpuwattch/XML_Parse.h	/^	double int_instructions;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
int_mul_bypass	gpuwattch/core.h	/^	interconnect * int_mul_bypass;$/;"	m	class:EXECU	typeref:typename:interconnect *
int_prefetch_w	gpuwattch/cacti/cacti_interface.h	/^    unsigned int int_prefetch_w;$/;"	m	class:InputParameter	typeref:typename:unsigned int
int_regfile_height	gpuwattch/core.h	/^	double int_regfile_height, fp_regfile_height;$/;"	m	class:RegFU	typeref:typename:double
int_regfile_reads	gpuwattch/XML_Parse.h	/^	double int_regfile_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
int_regfile_writes	gpuwattch/XML_Parse.h	/^	double int_regfile_writes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
int_t	cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
integer_rounding_mode	cuda-sim/ptx.y	/^integer_rounding_mode: RNI_OPTION { add_option(RNI_OPTION); } $/;"	l
interconnect	gpuwattch/interconnect.cc	/^interconnect::interconnect($/;"	f	class:interconnect
interconnect	gpuwattch/interconnect.h	/^class interconnect : public Component$/;"	c
interconnect_latency	gpuwattch/interconnect.h	/^    double  interconnect_latency;$/;"	m	class:interconnect	typeref:typename:double
interconnect_projection_type	gpuwattch/XML_Parse.h	/^	int interconnect_projection_type;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
interconnect_projection_type	gpuwattch/arch_const.h	/^const int			interconnect_projection_type	=	0;$/;"	v	typeref:typename:const int
interconnect_throughput	gpuwattch/interconnect.h	/^    double  interconnect_throughput;$/;"	m	class:interconnect	typeref:typename:double
interface_ip	gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:BranchPredictor	typeref:typename:InputParameter
interface_ip	gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:Core	typeref:typename:InputParameter
interface_ip	gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:EXECU	typeref:typename:InputParameter
interface_ip	gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:InstFetchU	typeref:typename:InputParameter
interface_ip	gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:LoadStoreU	typeref:typename:InputParameter
interface_ip	gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:MemManU	typeref:typename:InputParameter
interface_ip	gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:RENAMINGU	typeref:typename:InputParameter
interface_ip	gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:RegFU	typeref:typename:InputParameter
interface_ip	gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:SchedulerU	typeref:typename:InputParameter
interface_ip	gpuwattch/iocontrollers.h	/^	InputParameter interface_ip;$/;"	m	class:FlashController	typeref:typename:InputParameter
interface_ip	gpuwattch/iocontrollers.h	/^	InputParameter interface_ip;$/;"	m	class:NIUController	typeref:typename:InputParameter
interface_ip	gpuwattch/iocontrollers.h	/^	InputParameter interface_ip;$/;"	m	class:PCIeController	typeref:typename:InputParameter
interface_ip	gpuwattch/logic.h	/^	InputParameter interface_ip;$/;"	m	class:FunctionalUnit	typeref:typename:InputParameter
interface_ip	gpuwattch/logic.h	/^	InputParameter interface_ip;$/;"	m	class:UndiffCore	typeref:typename:InputParameter
interface_ip	gpuwattch/memoryctrl.h	/^	InputParameter interface_ip;$/;"	m	class:DRAM	typeref:typename:InputParameter
interface_ip	gpuwattch/memoryctrl.h	/^	InputParameter interface_ip;$/;"	m	class:MCFrontEnd	typeref:typename:InputParameter
interface_ip	gpuwattch/memoryctrl.h	/^	InputParameter interface_ip;$/;"	m	class:MemoryController	typeref:typename:InputParameter
interface_ip	gpuwattch/noc.h	/^	InputParameter interface_ip;$/;"	m	class:NoC	typeref:typename:InputParameter
interface_ip	gpuwattch/processor.h	/^    InputParameter interface_ip;$/;"	m	class:Processor	typeref:typename:InputParameter
interface_ip	gpuwattch/sharedcache.h	/^	InputParameter interface_ip;$/;"	m	class:CCdir	typeref:typename:InputParameter
interface_ip	gpuwattch/sharedcache.h	/^	InputParameter interface_ip;$/;"	m	class:SharedCache	typeref:typename:InputParameter
internal_datapath_width	gpuwattch/XML_Parse.h	/^	int internal_datapath_width;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
internal_prefetch_of_DRAM_chip	gpuwattch/XML_Parse.h	/^	int internal_prefetch_of_DRAM_chip;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:int
intersect	cuda-sim/ptx_ir.cc	/^void intersect( std::set<int> &A, const std::set<int> &B )$/;"	f	typeref:typename:void
intersim2_busy	gpgpu-sim/icnt_wrapper.cc	/^static bool intersim2_busy()$/;"	f	typeref:typename:bool	file:
intersim2_create	gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_create(unsigned int n_shader, unsigned int n_mem)$/;"	f	typeref:typename:void	file:
intersim2_display_overall_stats	gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_display_overall_stats()$/;"	f	typeref:typename:void	file:
intersim2_display_state	gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_display_state(FILE *fp)$/;"	f	typeref:typename:void	file:
intersim2_display_stats	gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_display_stats()$/;"	f	typeref:typename:void	file:
intersim2_get_flit_size	gpgpu-sim/icnt_wrapper.cc	/^static unsigned intersim2_get_flit_size()$/;"	f	typeref:typename:unsigned	file:
intersim2_has_buffer	gpgpu-sim/icnt_wrapper.cc	/^static bool intersim2_has_buffer(unsigned input, unsigned int size)$/;"	f	typeref:typename:bool	file:
intersim2_init	gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_init()$/;"	f	typeref:typename:void	file:
intersim2_pop	gpgpu-sim/icnt_wrapper.cc	/^static void* intersim2_pop(unsigned output)$/;"	f	typeref:typename:void *	file:
intersim2_push	gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_push(unsigned input, unsigned output, void* data, unsigned int size)$/;"	f	typeref:typename:void	file:
intersim2_transfer	gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_transfer()$/;"	f	typeref:typename:void	file:
intfloat	cuda-sim/instructions.cc	/^union intfloat {$/;"	u	file:
intm	intersim2/flit.hpp	/^  mutable int intm;$/;"	m	class:Flit	typeref:typename:int
inv	gpuwattch/cacti/basic_circuit.h	/^	inv,$/;"	e	enum:Gate_type
isAttributeSet	gpuwattch/xmlParser.cc	/^char XMLNode::isAttributeSet(XMLCSTR lpszAttrib) const$/;"	f	class:XMLNode	typeref:typename:char
isDeclaration	gpuwattch/xmlParser.cc	/^char         XMLNode::isDeclaration    (     ) const { if (!d) return 0;             return d->i/;"	f	class:XMLNode	typeref:typename:char
isDeclaration	gpuwattch/xmlParser.h	/^          char                   isDeclaration;   \/\/ Whether node is an XML declaration - '<?x/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:typename:char
isEmpty	gpuwattch/xmlParser.cc	/^char         XMLNode::isEmpty          (     ) const { return (d==NULL); }$/;"	f	class:XMLNode	typeref:typename:char
isFlag	option_parser.cc	/^   virtual bool isFlag() { return false; }$/;"	f	class:OptionRegistry	typeref:typename:bool	file:
isFlag	option_parser.cc	/^bool OptionRegistry<bool>::isFlag() { return true; }$/;"	f	class:OptionRegistry	typeref:typename:bool
isFloat	cuda-sim/instructions.cc	/^bool isFloat(int type) $/;"	f	typeref:typename:bool
isInFunctionalSimulationMode	cuda-sim/ptx_sim.h	/^   bool isInFunctionalSimulationMode(){ return m_functionalSimulationMode;}$/;"	f	class:ptx_thread_info	typeref:typename:bool
isNaN	cuda-sim/instructions.cc	/^bool isNaN(double x)$/;"	f	typeref:typename:bool
isNaN	cuda-sim/instructions.cc	/^bool isNaN(float x)$/;"	f	typeref:typename:bool
isParsed	option_parser.cc	/^   const bool isParsed() { return m_isParsed; }$/;"	f	class:OptionRegistryInterface	typeref:typename:const bool	file:
is_abs	cuda-sim/ptx_ir.h	/^   bool is_abs() const { return m_abs;}$/;"	f	class:ptx_instruction	typeref:typename:bool
is_builtin	cuda-sim/ptx_ir.h	/^   bool is_builtin() const { return m_type == builtin_t;}$/;"	f	class:operand_info	typeref:typename:bool
is_cache	gpuwattch/cacti/cacti_interface.h	/^    bool     is_cache;$/;"	m	class:InputParameter	typeref:typename:bool
is_const	abstract_hardware_model.h	/^   bool is_const() const { return (m_type == const_space) || (m_type == param_space_kernel); }$/;"	f	class:memory_space_t	typeref:typename:bool
is_const	cuda-sim/ptx_ir.h	/^   bool is_const() const { return m_is_const;}$/;"	f	class:symbol	typeref:typename:bool
is_const	cuda-sim/ptx_ir.h	/^   bool is_const() const { return m_space_spec.get_type() == const_space;}$/;"	f	class:type_info_key	typeref:typename:bool
is_const	cuda-sim/ptx_ir.h	/^   bool is_const() const { return m_value.m_symbolic->is_const();}$/;"	f	class:operand_info	typeref:typename:bool
is_core_pipeline	gpuwattch/logic.h	/^	bool is_core_pipeline, is_default;$/;"	m	class:Pipeline	typeref:typename:bool
is_default	gpuwattch/array.h	/^  bool           is_default;$/;"	m	class:ArrayST	typeref:typename:bool
is_default	gpuwattch/logic.h	/^	bool   is_default;$/;"	m	class:UndiffCore	typeref:typename:bool
is_default	gpuwattch/logic.h	/^	bool  is_default;$/;"	m	class:FunctionalUnit	typeref:typename:bool
is_default	gpuwattch/logic.h	/^	bool is_core_pipeline, is_default;$/;"	m	class:Pipeline	typeref:typename:bool
is_default	gpuwattch/logic.h	/^	bool is_default;$/;"	m	class:dep_resource_conflict_check	typeref:typename:bool
is_default	gpuwattch/logic.h	/^	bool is_default;$/;"	m	class:inst_decoder	typeref:typename:bool
is_default	gpuwattch/logic.h	/^	bool is_default;$/;"	m	class:selection_logic	typeref:typename:bool
is_done	cuda-sim/ptx_sim.h	/^   bool is_done() { return m_thread_done;}$/;"	f	class:ptx_thread_info	typeref:typename:bool
is_done	stream_manager.h	/^    bool is_done() const { return m_done; }$/;"	f	class:stream_operation	typeref:typename:bool
is_dram	gpuwattch/cacti/decoder.h	/^    bool   is_dram;$/;"	m	class:Decoder	typeref:typename:bool
is_dram	gpuwattch/cacti/mat.h	/^    bool     is_dram,is_fa, pure_cam, camFlag;$/;"	m	class:Mat	typeref:typename:bool
is_dram	gpuwattch/cacti/parameter.h	/^    bool is_dram;$/;"	m	class:DynamicParameter	typeref:typename:bool
is_dram	gpuwattch/logic.h	/^	bool is_dram;$/;"	m	class:DFFCell	typeref:typename:bool
is_dram_	gpuwattch/cacti/decoder.h	/^  bool   is_dram_;$/;"	m	class:Driver	typeref:typename:bool
is_dram_	gpuwattch/cacti/decoder.h	/^  bool  is_dram_;$/;"	m	class:PredecBlkDrv	typeref:typename:bool
is_dram_	gpuwattch/cacti/decoder.h	/^  bool is_dram_;$/;"	m	class:PredecBlk	typeref:typename:bool
is_entry	cuda-sim/ptx_ir.h	/^   bool is_entry;$/;"	m	struct:basic_block_t	typeref:typename:bool
is_entry_point	cuda-sim/ptx_ir.h	/^   bool is_entry_point() const { return m_entry_point; }$/;"	f	class:function_info	typeref:typename:bool
is_equal	cuda-sim/ptx_ir.cc	/^bool is_equal( const std::set<int> &A, const std::set<int> &B )$/;"	f	typeref:typename:bool
is_equal	debug.h	/^   bool is_equal( const std::string &fileline, unsigned uid ) const$/;"	f	class:brk_pt	typeref:typename:bool
is_exit	cuda-sim/ptx_ir.h	/^   bool is_exit() const { return m_exit;}$/;"	f	class:ptx_instruction	typeref:typename:bool
is_exit	cuda-sim/ptx_ir.h	/^   bool is_exit;$/;"	m	struct:basic_block_t	typeref:typename:bool
is_extern	cuda-sim/ptx_ir.h	/^   bool is_extern() const { return m_extern; }$/;"	f	class:function_info	typeref:typename:bool
is_fa	gpuwattch/cacti/mat.h	/^    bool     is_dram,is_fa, pure_cam, camFlag;$/;"	m	class:Mat	typeref:typename:bool
is_fa	gpuwattch/cacti/subarray.h	/^    bool    is_fa;$/;"	m	class:Subarray	typeref:typename:bool
is_free	gpgpu-sim/shader.h	/^      bool is_free() const {return m_allocation==NO_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:bool
is_free	gpgpu-sim/shader.h	/^      bool is_free(){return m_free;}$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:bool
is_func_addr	cuda-sim/ptx_ir.h	/^   bool is_func_addr() const { return m_is_func_addr; }$/;"	f	class:symbol	typeref:typename:bool
is_func_addr	cuda-sim/ptx_ir.h	/^   bool is_func_addr() const { return m_is_function?true:false; }$/;"	f	class:type_info_key	typeref:typename:bool
is_function_address	cuda-sim/ptx_ir.h	/^   bool is_function_address() const$/;"	f	class:operand_info	typeref:typename:bool
is_global	abstract_hardware_model.h	/^   bool is_global() const { return (m_type == global_space); }$/;"	f	class:memory_space_t	typeref:typename:bool
is_global	cuda-sim/ptx_ir.h	/^   bool is_global() const { return m_is_global;}$/;"	f	class:symbol	typeref:typename:bool
is_global	cuda-sim/ptx_ir.h	/^   bool is_global() const { return m_space_spec == global_space;}$/;"	f	class:type_info_key	typeref:typename:bool
is_global	cuda-sim/ptx_ir.h	/^   bool is_global() const { return m_value.m_symbolic->is_global();}$/;"	f	class:operand_info	typeref:typename:bool
is_hi	cuda-sim/ptx_ir.h	/^   bool is_hi() const { return m_hi;}$/;"	f	class:ptx_instruction	typeref:typename:bool
is_immediate_address	cuda-sim/ptx_ir.h	/^   bool is_immediate_address() const {$/;"	f	class:operand_info	typeref:typename:bool
is_kernel	stream_manager.h	/^    bool is_kernel() const { return m_type == stream_kernel_launch; }$/;"	f	class:stream_operation	typeref:typename:bool
is_label	cuda-sim/ptx_ir.h	/^   bool is_label() const { if(m_label){ assert(m_opcode==-1);return true;} return false;}$/;"	f	class:ptx_instruction	typeref:typename:bool
is_label	cuda-sim/ptx_ir.h	/^   bool is_label() const { return m_is_label;}$/;"	f	class:symbol	typeref:typename:bool
is_label	cuda-sim/ptx_ir.h	/^   bool is_label() const { return m_type == label_t;}$/;"	f	class:operand_info	typeref:typename:bool
is_literal	cuda-sim/ptx_ir.h	/^   bool is_literal() const { return m_type == int_t ||$/;"	f	class:operand_info	typeref:typename:bool
is_lo	cuda-sim/ptx_ir.h	/^   bool is_lo() const { return m_lo;}$/;"	f	class:ptx_instruction	typeref:typename:bool
is_load	abstract_hardware_model.h	/^    bool is_load() const { return (op == LOAD_OP || memory_op == memory_load); }$/;"	f	class:inst_t	typeref:typename:bool
is_local	abstract_hardware_model.h	/^   bool is_local() const { return (m_type == local_space) || (m_type == param_space_local); }$/;"	f	class:memory_space_t	typeref:typename:bool
is_local	cuda-sim/ptx_ir.h	/^   bool is_local() const { return m_is_local;}$/;"	f	class:symbol	typeref:typename:bool
is_local	cuda-sim/ptx_ir.h	/^   bool is_local() const { return m_space_spec == local_space;}$/;"	f	class:type_info_key	typeref:typename:bool
is_local	cuda-sim/ptx_ir.h	/^   bool is_local() const { return m_value.m_symbolic->is_local();}$/;"	f	class:operand_info	typeref:typename:bool
is_main_mem	gpuwattch/cacti/Ucache.h	/^  bool     is_main_mem;$/;"	m	struct:calc_time_mt_wrapper_struct	typeref:typename:bool
is_main_mem	gpuwattch/cacti/cacti_interface.h	/^    bool     is_main_mem;$/;"	m	class:InputParameter	typeref:typename:bool
is_main_mem	gpuwattch/cacti/parameter.h	/^    bool   is_main_mem;$/;"	m	class:DynamicParameter	typeref:typename:bool
is_mem	stream_manager.h	/^    bool is_mem() const {$/;"	f	class:stream_operation	typeref:typename:bool
is_memory_operand	cuda-sim/ptx_ir.h	/^   bool is_memory_operand() const { return m_type == memory_t;}$/;"	f	class:operand_info	typeref:typename:bool
is_memory_operand2	cuda-sim/ptx_ir.h	/^   bool is_memory_operand2() const { $/;"	f	class:operand_info	typeref:typename:bool
is_neg	cuda-sim/ptx_ir.h	/^   bool is_neg() const { return m_neg;}$/;"	f	class:ptx_instruction	typeref:typename:bool
is_neg_pred	cuda-sim/ptx_ir.h	/^   bool is_neg_pred() const { return m_neg_pred; }$/;"	f	class:operand_info	typeref:typename:bool
is_non_arch_reg	cuda-sim/ptx_ir.h	/^   bool is_non_arch_reg() const { return m_is_non_arch_reg; }$/;"	f	class:operand_info	typeref:typename:bool
is_non_arch_reg	cuda-sim/ptx_ir.h	/^   bool is_non_arch_reg() const { return m_is_non_arch_reg; }$/;"	f	class:type_info_key	typeref:typename:bool
is_non_arch_reg	cuda-sim/ptx_ir.h	/^   bool is_non_arch_reg() const$/;"	f	class:symbol	typeref:typename:bool
is_noop	stream_manager.h	/^    bool is_noop() const { return m_type == stream_no_op; }$/;"	f	class:stream_operation	typeref:typename:bool
is_odd	intersim2/rng-double.c	/^#define is_odd(/;"	d	file:
is_odd	intersim2/rng.c	/^#define is_odd(/;"	d	file:
is_param_kernel	cuda-sim/ptx_ir.h	/^   bool is_param_kernel() const { return m_space_spec == param_space_kernel;}$/;"	f	class:type_info_key	typeref:typename:bool
is_param_local	cuda-sim/ptx_ir.h	/^   bool is_param_local() const { return m_is_param_local; }$/;"	f	class:symbol	typeref:typename:bool
is_param_local	cuda-sim/ptx_ir.h	/^   bool is_param_local() const { return m_space_spec == param_space_local; }$/;"	f	class:type_info_key	typeref:typename:bool
is_param_local	cuda-sim/ptx_ir.h	/^   bool is_param_local() const$/;"	f	class:operand_info	typeref:typename:bool
is_param_unclassified	cuda-sim/ptx_ir.h	/^   bool is_param_unclassified() const { return m_space_spec == param_space_unclassified; }$/;"	f	class:type_info_key	typeref:typename:bool
is_pow2	gpuwattch/cacti/basic_circuit.cc	/^bool is_pow2(int64_t val)$/;"	f	typeref:typename:bool
is_ptr_shared	cuda-sim/ptx_ir.h	/^   bool is_ptr_shared() const { assert(m_valid); return (m_is_ptr and m_ptr_space == shared_spac/;"	f	class:param_info	typeref:typename:bool
is_read	gpgpu-sim/shader.h	/^      bool is_read() const { return m_allocation==READ_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:bool
is_reg	cuda-sim/ptx_ir.h	/^   bool is_reg() const { return m_is_reg; }$/;"	f	class:arg_buffer_t	typeref:typename:bool
is_reg	cuda-sim/ptx_ir.h	/^   bool is_reg() const { return m_space_spec == reg_space;} $/;"	f	class:type_info_key	typeref:typename:bool
is_reg	cuda-sim/ptx_ir.h	/^   bool is_reg() const$/;"	f	class:operand_info	typeref:typename:bool
is_reg	cuda-sim/ptx_ir.h	/^   bool is_reg() const$/;"	f	class:symbol	typeref:typename:bool
is_return_var	cuda-sim/ptx_ir.h	/^   bool is_return_var() const { return m_is_return_var; }$/;"	f	class:operand_info	typeref:typename:bool
is_seq_acc	gpuwattch/cacti/cacti_interface.h	/^    bool     is_seq_acc;$/;"	m	class:InputParameter	typeref:typename:bool
is_shared	cuda-sim/ptx_ir.h	/^   bool is_shared() const { return m_is_shared;}$/;"	f	class:symbol	typeref:typename:bool
is_shared	cuda-sim/ptx_ir.h	/^   bool is_shared() const { return m_space_spec == shared_space;}$/;"	f	class:type_info_key	typeref:typename:bool
is_shared	cuda-sim/ptx_ir.h	/^   bool is_shared() const {$/;"	f	class:operand_info	typeref:typename:bool
is_store	abstract_hardware_model.h	/^    bool is_store() const { return (op == STORE_OP || memory_op == memory_store); }$/;"	f	class:inst_t	typeref:typename:bool
is_tag	gpuwattch/cacti/Ucache.h	/^  bool     is_tag;$/;"	m	struct:calc_time_mt_wrapper_struct	typeref:typename:bool
is_tag	gpuwattch/cacti/parameter.h	/^    bool is_tag;$/;"	m	class:DynamicParameter	typeref:typename:bool
is_tex	cuda-sim/ptx_ir.h	/^   bool is_tex() const { return m_is_tex;}$/;"	f	class:symbol	typeref:typename:bool
is_tex	cuda-sim/ptx_ir.h	/^   bool is_tex() const { return m_space_spec == tex_space;}$/;"	f	class:type_info_key	typeref:typename:bool
is_tex	cuda-sim/ptx_ir.h	/^   bool is_tex() const { return m_value.m_symbolic->is_tex();}$/;"	f	class:operand_info	typeref:typename:bool
is_to	cuda-sim/ptx_ir.h	/^   bool is_to() const { return m_to_option; }$/;"	f	class:ptx_instruction	typeref:typename:bool
is_uni	cuda-sim/ptx_ir.h	/^   bool is_uni() const { return m_uni;}$/;"	f	class:ptx_instruction	typeref:typename:bool
is_valid	cuda-sim/ptx_ir.h	/^   bool is_valid() const { return m_valid; }$/;"	f	class:operand_info	typeref:typename:bool
is_valid	debug.h	/^   bool is_valid() const { return m_valid; }$/;"	f	class:brk_pt	typeref:typename:bool
is_valid	gpuwattch/cacti/parameter.h	/^    bool   is_valid;$/;"	m	class:DynamicParameter	typeref:typename:bool
is_vector	cuda-sim/ptx_ir.h	/^   bool is_vector() const$/;"	f	class:operand_info	typeref:typename:bool
is_vectorin	abstract_hardware_model.h	/^    unsigned char is_vectorin;$/;"	m	class:inst_t	typeref:typename:unsigned char
is_vectorout	abstract_hardware_model.h	/^    unsigned char is_vectorout;$/;"	m	class:inst_t	typeref:typename:unsigned char
is_watchpoint	debug.h	/^   bool is_watchpoint() const { return m_watch; }$/;"	f	class:brk_pt	typeref:typename:bool
is_wide	cuda-sim/ptx_ir.h	/^   bool is_wide() const { return m_wide;}$/;"	f	class:ptx_instruction	typeref:typename:bool
is_wl_tr	gpuwattch/cacti/decoder.h	/^    bool   is_wl_tr;$/;"	m	class:Decoder	typeref:typename:bool
is_write	abstract_hardware_model.h	/^   bool is_write() const { return m_write; }$/;"	f	class:mem_access_t	typeref:typename:bool
is_write	gpgpu-sim/mem_fetch.h	/^   bool is_write() {return m_access.is_write();}$/;"	f	class:mem_fetch	typeref:typename:bool
is_write	gpgpu-sim/shader.h	/^      bool is_write() const {return m_allocation==WRITE_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:bool
isactive	gpgpu-sim/shader.h	/^    unsigned isactive() const {if(m_n_active_cta>0) return 1; else return 0;}$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
isatomic	abstract_hardware_model.h	/^    bool isatomic() const { return m_isatomic; }$/;"	f	class:warp_inst_t	typeref:typename:bool
isatomic	gpgpu-sim/mem_fetch.cc	/^bool mem_fetch::isatomic() const$/;"	f	class:mem_fetch	typeref:typename:bool
isconst	gpgpu-sim/mem_fetch.cc	/^bool mem_fetch::isconst() const$/;"	f	class:mem_fetch	typeref:typename:bool
isize	abstract_hardware_model.h	/^    unsigned isize;         \/\/ size of instruction in bytes $/;"	m	class:inst_t	typeref:typename:unsigned
islongop	gpgpu-sim/scoreboard.cc	/^const bool Scoreboard::islongop (unsigned warp_id,unsigned regnum) {$/;"	f	class:Scoreboard	typeref:typename:const bool
isnanf	cuda-sim/cuda-math.h	/^int isnanf(float a) $/;"	f	typeref:typename:int
isspace_global	cuda-sim/cuda-sim.cc	/^bool isspace_global( addr_t addr )$/;"	f	typeref:typename:bool
isspace_local	cuda-sim/cuda-sim.cc	/^bool isspace_local( unsigned smid, unsigned hwtid, addr_t addr )$/;"	f	typeref:typename:bool
isspace_shared	cuda-sim/cuda-sim.cc	/^bool isspace_shared( unsigned smid, addr_t addr )$/;"	f	typeref:typename:bool
isspacep_impl	cuda-sim/instructions.cc	/^void isspacep_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
issue	abstract_hardware_model.h	/^    void issue( const active_mask_t &mask, unsigned warp_id, unsigned long long cycle, int dynam/;"	f	class:warp_inst_t	typeref:typename:void
issue	gpgpu-sim/shader.cc	/^void ldst_unit:: issue( register_set &reg_set )$/;"	f	class:ldst_unit	typeref:typename:void
issue	gpgpu-sim/shader.cc	/^void pipelined_simd_unit::issue( register_set& source_reg )$/;"	f	class:pipelined_simd_unit	typeref:typename:void
issue	gpgpu-sim/shader.cc	/^void sfu::issue( register_set& source_reg )$/;"	f	class:sfu	typeref:typename:void
issue	gpgpu-sim/shader.cc	/^void shader_core_ctx::issue(){$/;"	f	class:shader_core_ctx	typeref:typename:void
issue	gpgpu-sim/shader.cc	/^void sp_unit :: issue(register_set& source_reg)$/;"	f	class:sp_unit	typeref:typename:void
issue	gpgpu-sim/shader.h	/^    virtual void issue( register_set& source_reg ) { source_reg.move_out_to(m_dispatch_reg); occ/;"	f	class:simd_function_unit	typeref:typename:void
issueW	gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_de/;"	m	class:CoreDynParam	typeref:typename:int
issueWidth	gpuwattch/arch_const.h	/^const int issueWidth=1;$/;"	v	typeref:typename:const int
issue_block2core	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::issue_block2core()$/;"	f	class:gpgpu_sim	typeref:typename:void
issue_block2core	gpgpu-sim/gpu-sim.cc	/^void shader_core_ctx::issue_block2core( kernel_info_t &kernel ) $/;"	f	class:shader_core_ctx	typeref:typename:void
issue_block2core	gpgpu-sim/shader.cc	/^unsigned simt_core_cluster::issue_block2core()$/;"	f	class:simt_core_cluster	typeref:typename:unsigned
issue_cycle	abstract_hardware_model.h	/^    unsigned long long issue_cycle;$/;"	m	class:warp_inst_t	typeref:typename:unsigned long long
issue_warp	gpgpu-sim/shader.cc	/^void shader_core_ctx::issue_warp( register_set& pipe_reg_set, const warp_inst_t* next_inst, cons/;"	f	class:shader_core_ctx	typeref:typename:void
issue_width	gpuwattch/XML_Parse.h	/^	int issue_width;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
issue_width	gpuwattch/logic.h	/^	double pipeline_stage,num_hthreads,issue_width;$/;"	m	class:UndiffCore	typeref:typename:double
issue_width	gpuwattch/logic.h	/^	int issue_width;$/;"	m	class:selection_logic	typeref:typename:int
issuedWarp	gpgpu-sim/wrc.h	/^		unsigned issuedWarp;	$/;"	m	class:Wrc	typeref:typename:unsigned
issued_count	abstract_hardware_model.h	/^    unsigned issued_count() const { assert(m_empty == false); return m_warp_issued_mask.count();/;"	f	class:warp_inst_t	typeref:typename:unsigned
istexture	gpgpu-sim/mem_fetch.cc	/^bool mem_fetch::istexture() const$/;"	f	class:mem_fetch	typeref:typename:bool
iterator	cuda-sim/ptx_ir.h	/^   typedef std::list<symbol*>::iterator iterator;$/;"	t	class:symbol_table	typeref:typename:std::list<symbol * >::iterator
iterator	gpgpu-sim/warp_status.h	/^	typedef std::vector<table_entry>::iterator iterator;$/;"	t	class:WST	typeref:typename:std::vector<table_entry>::iterator
ithCache	gpuwattch/sharedcache.h	/^    int ithCache;$/;"	m	class:CCdir	typeref:typename:int
ithCache	gpuwattch/sharedcache.h	/^    int ithCache;$/;"	m	class:SharedCache	typeref:typename:int
ithCore	gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:BranchPredictor	typeref:typename:int
ithCore	gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:Core	typeref:typename:int
ithCore	gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:EXECU	typeref:typename:int
ithCore	gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:InstFetchU	typeref:typename:int
ithCore	gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:LoadStoreU	typeref:typename:int
ithCore	gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:MemManU	typeref:typename:int
ithCore	gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:RENAMINGU	typeref:typename:int
ithCore	gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:RegFU	typeref:typename:int
ithCore	gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:SchedulerU	typeref:typename:int
ithCore	gpuwattch/logic.h	/^	int  ithCore;$/;"	m	class:FunctionalUnit	typeref:typename:int
ithCore	gpuwattch/logic.h	/^	int  ithCore;$/;"	m	class:UndiffCore	typeref:typename:int
ithNoC	gpuwattch/noc.h	/^	int  ithNoC;$/;"	m	class:NoC	typeref:typename:int
itime	intersim2/flit.hpp	/^  int  itime;$/;"	m	class:Flit	typeref:typename:int
itlb	gpuwattch/XML_Parse.h	/^	itlb_systemcore itlb;$/;"	m	struct:__anon6448b92c0708	typeref:typename:itlb_systemcore
itlb	gpuwattch/core.h	/^	ArrayST * itlb;$/;"	m	class:MemManU	typeref:typename:ArrayST *
itlb_systemcore	gpuwattch/XML_Parse.h	/^} itlb_systemcore;$/;"	t	typeref:struct:__anon6448b92c0208
itlbassoc	gpuwattch/arch_const.h	/^const int itlbassoc=0;\/\/fully$/;"	v	typeref:typename:const int
itlbblocksize	gpuwattch/arch_const.h	/^const int itlbblocksize=8;$/;"	v	typeref:typename:const int
itlbsize	gpuwattch/arch_const.h	/^const int itlbsize=512;$/;"	v	typeref:typename:const int
itrs_hp	gpuwattch/cacti/const.h	/^  itrs_hp   = 0,$/;"	e	enum:ram_cell_tech_type_num
itrs_lop	gpuwattch/cacti/const.h	/^  itrs_lop  = 2,$/;"	e	enum:ram_cell_tech_type_num
itrs_lstp	gpuwattch/cacti/const.h	/^  itrs_lstp = 1,$/;"	e	enum:ram_cell_tech_type_num
iwo_logger	gpgpu-sim/stat-tool.cc	/^static std::vector<insn_warp_occ_logger> iwo_logger;$/;"	v	typeref:typename:std::vector<insn_warp_occ_logger>	file:
keep_intermediate_files	cuda-sim/ptx_loader.cc	/^bool keep_intermediate_files() {return g_keep_intermediate_files;}$/;"	f	typeref:typename:bool
kernel_cmp_perf_counters	gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector< avg_max_min_counters<double> > kernel_cmp_perf_counters; \/\/ Per-kernel compon/;"	m	class:gpgpu_sim_wrapper	typeref:typename:std::vector<avg_max_min_counters<double>>
kernel_cmp_pwr	gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector< avg_max_min_counters<double> > kernel_cmp_pwr; \/\/ Per-kernel component power /;"	m	class:gpgpu_sim_wrapper	typeref:typename:std::vector<avg_max_min_counters<double>>
kernel_info_t	abstract_hardware_model.cc	/^kernel_info_t::kernel_info_t( dim3 gridDim, dim3 blockDim, class function_info *entry )$/;"	f	class:kernel_info_t
kernel_info_t	abstract_hardware_model.h	/^class kernel_info_t {$/;"	c
kernel_max_cta_per_shader	gpgpu-sim/shader.h	/^    unsigned kernel_max_cta_per_shader;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned
kernel_padded_threads_per_cta	gpgpu-sim/shader.h	/^    unsigned kernel_padded_threads_per_cta;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned
kernel_power	gpuwattch/gpgpu_sim_wrapper.h	/^    avg_max_min_counters<double> kernel_power; \/\/ Per-kernel power avg\/max\/min values$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:avg_max_min_counters<double>
kernel_sample_count	gpuwattch/gpgpu_sim_wrapper.h	/^    int kernel_sample_count; \/\/ # of samples per kernel$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:int
kernel_tot_power	gpuwattch/gpgpu_sim_wrapper.h	/^    double kernel_tot_power; \/\/ Total per-kernel power$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:double
kinv	gpuwattch/cacti/parameter.h	/^  double kinv;$/;"	m	class:TechnologyParameter	typeref:typename:double
l	gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR s; int l; XMLCHAR c;} XMLCharacterEntity;$/;"	m	struct:__anon33c5d5fd0208	typeref:typename:int	file:
l1_cache	gpgpu-sim/gpu-cache.h	/^    l1_cache( const char *name,$/;"	f	class:l1_cache
l1_cache	gpgpu-sim/gpu-cache.h	/^    l1_cache(const char *name, cache_config &config,$/;"	f	class:l1_cache
l1_cache	gpgpu-sim/gpu-cache.h	/^class l1_cache : public data_cache {$/;"	c
l1d_cache_config	gpgpu-sim/gpu-cache.h	/^	l1d_cache_config() : cache_config(){}$/;"	f	class:l1d_cache_config
l1d_cache_config	gpgpu-sim/gpu-cache.h	/^class l1d_cache_config : public cache_config{$/;"	c
l1dir	gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor	typeref:typename:Component
l1dirarray	gpuwattch/processor.h	/^    vector<SharedCache *> l1dirarray;$/;"	m	class:Processor	typeref:typename:vector<SharedCache * >
l2	gpuwattch/XML_Parse.h	/^    system_L2 l2;$/;"	m	struct:__anon6448b92c1208	typeref:typename:system_L2
l2	gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor	typeref:typename:Component
l2_cache	gpgpu-sim/gpu-cache.h	/^    l2_cache(const char *name,  cache_config &config,$/;"	f	class:l2_cache
l2_cache	gpgpu-sim/gpu-cache.h	/^class l2_cache : public data_cache {$/;"	c
l2_cache_config	gpgpu-sim/gpu-cache.h	/^	l2_cache_config() : cache_config(){}$/;"	f	class:l2_cache_config
l2_cache_config	gpgpu-sim/gpu-cache.h	/^class l2_cache_config : public cache_config {$/;"	c
l2_cache_stats	gpgpu-sim/power_stat.h	/^    class cache_stats l2_cache_stats[NUM_STAT_IDX]; \/\/ Total L2 partition stats$/;"	m	struct:mem_power_stats_pod	typeref:class:cache_stats[]
l2_freq	gpgpu-sim/gpu-sim.h	/^    double l2_freq;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
l2_ideal	gpgpu-sim/gpu-sim.h	/^   bool l2_ideal;$/;"	m	struct:memory_config	typeref:typename:bool
l2_period	gpgpu-sim/gpu-sim.h	/^    double l2_period;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
l2_power	gpuwattch/processor.h	/^    double l2_power;$/;"	m	class:Processor	typeref:typename:double
l2_time	gpgpu-sim/gpu-sim.h	/^   double l2_time;$/;"	m	class:gpgpu_sim	typeref:typename:double
l2array	gpuwattch/processor.h	/^    vector<SharedCache *> l2array;$/;"	m	class:Processor	typeref:typename:vector<SharedCache * >
l2cache	gpuwattch/core.h	/^    SharedCache * l2cache;$/;"	m	class:Core	typeref:typename:SharedCache *
l2cacheassoc	gpuwattch/arch_const.h	/^const int l2cacheassoc=16;$/;"	v	typeref:typename:const int
l2cacheblocksize	gpuwattch/arch_const.h	/^const int l2cacheblocksize=64;$/;"	v	typeref:typename:const int
l2cachesize	gpuwattch/arch_const.h	/^const int l2cachesize=262144;$/;"	v	typeref:typename:const int
l2dir	gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor	typeref:typename:Component
l2dirarray	gpuwattch/processor.h	/^    vector<SharedCache *> l2dirarray;$/;"	m	class:Processor	typeref:typename:vector<SharedCache * >
l2dirassoc	gpuwattch/arch_const.h	/^const int l2dirassoc=0;$/;"	v	typeref:typename:const int
l2dirblocksize	gpuwattch/arch_const.h	/^const int l2dirblocksize=2;$/;"	v	typeref:typename:const int
l2dirsize	gpuwattch/arch_const.h	/^const int l2dirsize=1024;$/;"	v	typeref:typename:const int
l3	gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor	typeref:typename:Component
l3array	gpuwattch/processor.h	/^    vector<SharedCache *> l3array;$/;"	m	class:Processor	typeref:typename:vector<SharedCache * >
l_elec	gpuwattch/cacti/parameter.h	/^    double l_elec;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
l_ip	gpuwattch/array.h	/^  InputParameter l_ip;$/;"	m	class:ArrayST	typeref:typename:InputParameter
l_ip	gpuwattch/interconnect.h	/^	InputParameter l_ip;$/;"	m	class:interconnect	typeref:typename:InputParameter
l_ip	gpuwattch/logic.h	/^	InputParameter l_ip;$/;"	m	class:DFFCell	typeref:typename:InputParameter
l_ip	gpuwattch/logic.h	/^	InputParameter l_ip;$/;"	m	class:Pipeline	typeref:typename:InputParameter
l_ip	gpuwattch/logic.h	/^	InputParameter l_ip;$/;"	m	class:dep_resource_conflict_check	typeref:typename:InputParameter
l_ip	gpuwattch/logic.h	/^	InputParameter l_ip;$/;"	m	class:inst_decoder	typeref:typename:InputParameter
l_ip	gpuwattch/logic.h	/^	InputParameter l_ip;$/;"	m	class:selection_logic	typeref:typename:InputParameter
l_ip	gpuwattch/memoryctrl.h	/^    InputParameter l_ip;$/;"	m	class:MCBackend	typeref:typename:InputParameter
l_ip	gpuwattch/memoryctrl.h	/^    InputParameter l_ip;$/;"	m	class:MCPHY	typeref:typename:InputParameter
l_phy	gpuwattch/cacti/parameter.h	/^    double l_phy;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
l_wire	gpuwattch/cacti/wire.h	/^    Component l_wire;$/;"	m	class:Wire	typeref:typename:Component
la_route_set	intersim2/flit.hpp	/^  OutputSet la_route_set;$/;"	m	class:Flit	typeref:typename:OutputSet
label	intersim2/allocators/allocator.hpp	/^    int label;$/;"	m	struct:Allocator::sRequest	typeref:typename:int
label	intersim2/arbiters/prio_arb.hpp	/^    int label;$/;"	m	struct:PriorityArbiter::sRequest	typeref:typename:int
label_t	cuda-sim/ptx_ir.h	/^   unsigned_t, symbolic_t, label_t, v_reg_t, v_float_op_t, v_double_op_t,$/;"	e	enum:operand_type
labels	cuda-sim/ptx_ir.h	/^   std::map<std::string,unsigned> labels;$/;"	m	class:function_info	typeref:typename:std::map<std::string,unsigned>
last_borrower	gpgpu-sim/l2cache.h	/^      int last_borrower() const { return m_last_borrower; } $/;"	f	class:memory_partition_unit::arbitration_metadata	typeref:typename:int
last_bwutil	gpgpu-sim/dram.h	/^   unsigned int last_n_cmd, last_n_activity, last_bwutil;$/;"	m	class:dram_t	typeref:typename:unsigned int
last_callback	cuda-sim/ptx_sim.h	/^   dram_callback_t last_callback() const { return m_last_dram_callback;}$/;"	f	class:ptx_thread_info	typeref:typename:dram_callback_t
last_eaddr	cuda-sim/ptx_sim.h	/^   addr_t last_eaddr() const { return m_last_effective_address;}$/;"	f	class:ptx_thread_info	typeref:typename:addr_t
last_gpu_sim_insn	gpgpu-sim/gpu-sim.h	/^   unsigned long long  last_gpu_sim_insn;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned long long
last_liveness_message_time	gpgpu-sim/gpu-sim.h	/^   unsigned long long  last_liveness_message_time; $/;"	m	class:gpgpu_sim	typeref:typename:unsigned long long
last_n_activity	gpgpu-sim/dram.h	/^   unsigned int last_n_cmd, last_n_activity, last_bwutil;$/;"	m	class:dram_t	typeref:typename:unsigned int
last_n_cmd	gpgpu-sim/dram.h	/^   unsigned int last_n_cmd, last_n_activity, last_bwutil;$/;"	m	class:dram_t	typeref:typename:unsigned int
last_shader_cycle_distro	gpgpu-sim/shader.h	/^    unsigned *last_shader_cycle_distro;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
last_space	cuda-sim/ptx_sim.h	/^   memory_space_t last_space() const { return m_last_memory_space;}$/;"	f	class:ptx_thread_info	typeref:typename:memory_space_t
last_was_call	cuda-sim/ptx_sim.h	/^   bool last_was_call() const { return m_last_was_call; }$/;"	f	class:ptx_thread_info	typeref:typename:bool
latency	abstract_hardware_model.h	/^    unsigned latency; \/\/ operation latency $/;"	m	class:inst_t	typeref:typename:unsigned
latency	cuda-sim/ptx-stats.cc	/^    unsigned long long latency;$/;"	m	class:ptx_file_line_stats	typeref:typename:unsigned long long	file:
latency	gpgpu-sim/shader.h	/^   unsigned long latency;$/;"	m	struct:insn_latency_info	typeref:typename:unsigned long
latency	gpuwattch/basic_components.h	/^    double throughput, latency;$/;"	m	class:CacheDynParam	typeref:typename:double
latency	gpuwattch/cacti/cacti_interface.h	/^  double latency;$/;"	m	class:InputParameter	typeref:typename:double
latency	gpuwattch/interconnect.h	/^    double latency, throughput;$/;"	m	class:interconnect	typeref:typename:double
latency_overflow	gpuwattch/interconnect.h	/^    bool  latency_overflow;$/;"	m	class:interconnect	typeref:typename:bool
launch	abstract_hardware_model.cc	/^void simt_stack::launch( address_type start_pc, const simt_mask_t &active_mask )$/;"	f	class:simt_stack	typeref:typename:void
launch	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::launch( kernel_info_t *kinfo )$/;"	f	class:gpgpu_sim	typeref:typename:void
ld_exec	cuda-sim/instructions.cc	/^void ld_exec( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
ld_impl	cuda-sim/instructions.cc	/^void ld_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
ld_time_dist	gpgpu-sim/visualizer.cc	/^   std::vector<double>  ld_time_dist;$/;"	m	class:my_time_vector	typeref:typename:std::vector<double>	file:
ld_time_map	gpgpu-sim/visualizer.cc	/^   std::map< unsigned int, std::vector<long int> > ld_time_map;$/;"	m	class:my_time_vector	typeref:typename:std::map<unsigned int,std::vector<long int>>	file:
ld_vector_size	gpgpu-sim/visualizer.cc	/^   unsigned ld_vector_size;$/;"	m	class:my_time_vector	typeref:typename:unsigned	file:
ldst_unit	gpgpu-sim/shader.cc	/^ldst_unit::ldst_unit( mem_fetch_interface *icnt,$/;"	f	class:ldst_unit
ldst_unit	gpgpu-sim/shader.h	/^class ldst_unit: public pipelined_simd_unit {$/;"	c
ldst_unit_response_buffer_full	gpgpu-sim/shader.cc	/^bool shader_core_ctx::ldst_unit_response_buffer_full() const$/;"	f	class:shader_core_ctx	typeref:typename:bool
ldst_unit_response_queue_size	gpgpu-sim/shader.h	/^    unsigned ldst_unit_response_queue_size;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
ldu_impl	cuda-sim/instructions.cc	/^void ldu_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
leak_power_request_and_reply_networks	gpuwattch/cacti/cacti_interface.h	/^  double leak_power_request_and_reply_networks;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
leak_power_request_and_reply_networks	gpuwattch/cacti/cacti_interface.h	/^  leak_power_request_and_reply_networks;$/;"	m	class:mem_array	typeref:typename:double
leak_power_request_and_reply_networks	gpuwattch/cacti/uca.h	/^    double leak_power_request_and_reply_networks;$/;"	m	class:UCA	typeref:typename:double
leak_power_sense_amps_closed_page_state	gpuwattch/cacti/mat.h	/^    double   leak_power_sense_amps_closed_page_state;$/;"	m	class:Mat	typeref:typename:double
leak_power_sense_amps_open_page_state	gpuwattch/cacti/mat.h	/^    double   leak_power_sense_amps_open_page_state;$/;"	m	class:Mat	typeref:typename:double
leak_power_subbank_closed_page	gpuwattch/cacti/cacti_interface.h	/^  double leak_power_subbank_closed_page;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
leak_power_subbank_closed_page	gpuwattch/cacti/cacti_interface.h	/^  refresh_power, leak_power_subbank_closed_page, leak_power_subbank_open_page,$/;"	m	class:mem_array	typeref:typename:double
leak_power_subbank_closed_page	gpuwattch/cacti/uca.h	/^    double leak_power_subbank_closed_page;$/;"	m	class:UCA	typeref:typename:double
leak_power_subbank_open_page	gpuwattch/cacti/cacti_interface.h	/^  double leak_power_subbank_open_page;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
leak_power_subbank_open_page	gpuwattch/cacti/cacti_interface.h	/^  refresh_power, leak_power_subbank_closed_page, leak_power_subbank_open_page,$/;"	m	class:mem_array	typeref:typename:double
leak_power_subbank_open_page	gpuwattch/cacti/uca.h	/^    double leak_power_subbank_open_page;$/;"	m	class:UCA	typeref:typename:double
leak_power_with_sleep_transistors_in_mats	gpuwattch/cacti/cacti_interface.h	/^    double leak_power_with_sleep_transistors_in_mats;$/;"	m	class:uca_org_t	typeref:typename:double
leakage	gpuwattch/cacti/cacti_interface.h	/^    double leakage;$/;"	m	class:powerComponents	typeref:typename:double
leakage	gpuwattch/logic.h	/^	double energy, base_energy,per_access_energy, leakage, gate_leakage;$/;"	m	class:FunctionalUnit	typeref:typename:double
leakage_feedback	gpuwattch/array.cc	/^void ArrayST::leakage_feedback(double temperature)$/;"	f	class:ArrayST	typeref:typename:void
leakage_feedback	gpuwattch/cacti/decoder.cc	/^void Decoder::leakage_feedback(double temperature)$/;"	f	class:Decoder	typeref:typename:void
leakage_feedback	gpuwattch/cacti/decoder.cc	/^void Predec::leakage_feedback(double temperature)$/;"	f	class:Predec	typeref:typename:void
leakage_feedback	gpuwattch/cacti/decoder.cc	/^void PredecBlk::leakage_feedback(double temperature)$/;"	f	class:PredecBlk	typeref:typename:void
leakage_feedback	gpuwattch/cacti/decoder.cc	/^void PredecBlkDrv::leakage_feedback(double temperature)$/;"	f	class:PredecBlkDrv	typeref:typename:void
leakage_feedback	gpuwattch/interconnect.cc	/^void interconnect::leakage_feedback(double temperature)$/;"	f	class:interconnect	typeref:typename:void
leakage_feedback	gpuwattch/logic.cc	/^void FunctionalUnit::leakage_feedback(double temperature)$/;"	f	class:FunctionalUnit	typeref:typename:void
leakage_feedback	gpuwattch/logic.cc	/^void dep_resource_conflict_check::leakage_feedback(double temperature)$/;"	f	class:dep_resource_conflict_check	typeref:typename:void
leakage_feedback	gpuwattch/logic.cc	/^void inst_decoder::leakage_feedback(double temperature)$/;"	f	class:inst_decoder	typeref:typename:void
leakage_power_dev	gpuwattch/cacti/cacti_interface.h	/^    int delay_dev, dynamic_power_dev, leakage_power_dev,$/;"	m	class:InputParameter	typeref:typename:int
leakage_power_dev_nuca	gpuwattch/cacti/cacti_interface.h	/^    int delay_dev_nuca, dynamic_power_dev_nuca, leakage_power_dev_nuca,$/;"	m	class:InputParameter	typeref:typename:int
leakage_power_wt	gpuwattch/cacti/cacti_interface.h	/^    int delay_wt, dynamic_power_wt, leakage_power_wt,$/;"	m	class:InputParameter	typeref:typename:int
leakage_power_wt_nuca	gpuwattch/cacti/cacti_interface.h	/^    int delay_wt_nuca, dynamic_power_wt_nuca, leakage_power_wt_nuca,$/;"	m	class:InputParameter	typeref:typename:int
leaving	intersim2/routers/chaos_router.hpp	/^    leaving,       \/\/    T***>   input avail$/;"	e	enum:ChaosRouter::eQState
length	gpuwattch/interconnect.h	/^    double length;$/;"	m	class:interconnect	typeref:typename:double
lengthXMLString	gpuwattch/xmlParser.cc	/^int ToXMLStringTool::lengthXMLString(XMLCSTR source)$/;"	f	class:ToXMLStringTool	typeref:typename:int
lex.yy.c	intersim2/Makefile	/^lex.yy.c: config.l$/;"	t
lg2_impl	cuda-sim/instructions.cc	/^void lg2_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
libgpgpu_ptx_sim.a	cuda-sim/Makefile	/^libgpgpu_ptx_sim.a: $(OBJS) $/;"	t
libgpu_uarch_sim.a	gpgpu-sim/Makefile	/^libgpu_uarch_sim.a:$(OBJS)$/;"	t
line	cuda-sim/ptx-stats.cc	/^    unsigned line;$/;"	m	class:ptx_file_line	typeref:typename:unsigned	file:
line	cuda-sim/ptxinfo.y	/^line: 	HEADER INFO COLON line_info$/;"	l
line_info	cuda-sim/ptxinfo.y	/^line_info: function_name$/;"	l
line_size_based_tag_func	abstract_hardware_model.cc	/^address_type line_size_based_tag_func(new_addr_type address, new_addr_type line_size)$/;"	f	typeref:typename:address_type
line_sz	gpuwattch/cacti/cacti_interface.h	/^    unsigned int line_sz;$/;"	m	class:InputParameter	typeref:typename:unsigned int
linear_histogram	gpgpu-sim/histogram.cc	/^linear_histogram::linear_histogram (int stride, const char *name, int nbins, int* bins) $/;"	f	class:linear_histogram
linear_histogram	gpgpu-sim/histogram.h	/^class linear_histogram : public binned_histogram {$/;"	c
linear_histogram_logger	gpgpu-sim/stat-tool.cc	/^linear_histogram_logger::linear_histogram_logger(const linear_histogram_logger& other) $/;"	f	class:linear_histogram_logger
linear_histogram_logger	gpgpu-sim/stat-tool.cc	/^linear_histogram_logger::linear_histogram_logger(int n_bins, $/;"	f	class:linear_histogram_logger
linear_histogram_logger	gpgpu-sim/stat-tool.h	/^class linear_histogram_logger : public snap_shot_trigger, public spill_log_interface {$/;"	c
linear_histogram_snapshot	gpgpu-sim/stat-tool.h	/^   linear_histogram_snapshot(const linear_histogram_snapshot& other) $/;"	f	class:linear_histogram_snapshot
linear_histogram_snapshot	gpgpu-sim/stat-tool.h	/^   linear_histogram_snapshot(int n_bins, unsigned long long  cycle) $/;"	f	class:linear_histogram_snapshot
linear_histogram_snapshot	gpgpu-sim/stat-tool.h	/^class linear_histogram_snapshot {$/;"	c
linear_to_raw_address_translation	gpgpu-sim/addrdec.cc	/^linear_to_raw_address_translation::linear_to_raw_address_translation()$/;"	f	class:linear_to_raw_address_translation
linear_to_raw_address_translation	gpgpu-sim/addrdec.h	/^class linear_to_raw_address_translation {$/;"	c
lineno	intersim2/lex.yy.c	/^static unsigned int lineno = 1;$/;"	v	typeref:typename:unsigned int	file:
link_bus	gpuwattch/noc.h	/^	interconnect * link_bus;$/;"	m	class:NoC	typeref:typename:interconnect *
link_bus_exist	gpuwattch/noc.h	/^	bool link_bus_exist;$/;"	m	class:NoC	typeref:typename:bool
link_bus_tot_per_Router	gpuwattch/noc.h	/^	Component      link_bus_tot_per_Router;$/;"	m	class:NoC	typeref:typename:Component
link_latency	gpuwattch/XML_Parse.h	/^	int link_latency;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int
link_latency	gpuwattch/basic_components.h	/^    double executionTime, total_access, link_throughput,link_latency,$/;"	m	class:NoCParam	typeref:typename:double
link_len	gpuwattch/noc.h	/^	double link_len;$/;"	m	class:NoC	typeref:typename:double
link_name	gpuwattch/noc.h	/^	string name, link_name;$/;"	m	class:NoC	typeref:typename:string
link_throughput	gpuwattch/XML_Parse.h	/^	int link_throughput;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int
link_throughput	gpuwattch/basic_components.h	/^    double executionTime, total_access, link_throughput,link_latency,$/;"	m	class:NoCParam	typeref:typename:double
list_param	cuda-sim/cuda-sim.cc	/^void function_info::list_param( FILE *fout ) const$/;"	f	class:function_info	typeref:typename:void
list_spill_log	gpgpu-sim/stat-tool.cc	/^static std::list<spill_log_interface*> list_spill_log;$/;"	v	typeref:typename:std::list<spill_log_interface * >	file:
list_ss_trigger	gpgpu-sim/stat-tool.cc	/^static std::list<snap_shot_trigger*> list_ss_trigger;$/;"	v	typeref:typename:std::list<snap_shot_trigger * >	file:
literal_list	cuda-sim/ptx.y	/^literal_list: literal_operand$/;"	l
literal_operand	cuda-sim/ptx.y	/^literal_operand : INT_OPERAND { add_literal_int($1); }$/;"	l
liveness_message_freq	gpgpu-sim/gpu-sim.h	/^    unsigned long long liveness_message_freq; $/;"	m	class:gpgpu_sim_config	typeref:typename:unsigned long long
llcBlockSize	gpuwattch/basic_components.h	/^    int	   llcBlockSize, dataBusWidth, addressBusWidth;$/;"	m	class:MCParam	typeref:typename:int
llc_line_length	gpuwattch/XML_Parse.h	/^    int llc_line_length;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:int
lmem	abstract_hardware_model.h	/^   int lmem;$/;"	m	struct:gpgpu_ptx_sim_kernel_info	typeref:typename:int
load_buffer_cams	gpuwattch/XML_Parse.h	/^	double load_buffer_cams;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
load_buffer_reads	gpuwattch/XML_Parse.h	/^	double load_buffer_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
load_buffer_size	gpuwattch/XML_Parse.h	/^	int load_buffer_size;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
load_buffer_writes	gpuwattch/XML_Parse.h	/^	double load_buffer_writes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
load_instructions	gpuwattch/XML_Parse.h	/^	double load_instructions;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
load_per_pipeline_stage	gpuwattch/logic.h	/^	double load_per_pipeline_stage;$/;"	m	class:Pipeline	typeref:typename:double
localBPT	gpuwattch/core.h	/^	ArrayST * localBPT;$/;"	m	class:BranchPredictor	typeref:typename:ArrayST *
localCtrBits	gpuwattch/arch_const.h	/^const int localCtrBits=2;$/;"	v	typeref:typename:const int
localHistoryBits	gpuwattch/arch_const.h	/^const int localHistoryBits=11;$/;"	v	typeref:typename:const int
localHistoryTableSize	gpuwattch/arch_const.h	/^const int localHistoryTableSize=2048;$/;"	v	typeref:typename:const int
localPredictorSize	gpuwattch/arch_const.h	/^const int localPredictorSize=2048;$/;"	v	typeref:typename:const int
local_age_based	intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_base/;"	e	enum:TrafficManager::ePriority
local_age_based	intersim2/vc.hpp	/^  enum ePrioType { local_age_based, queue_length_based, hop_count_based, none, other };$/;"	e	enum:VC::ePrioType
local_mem_framesize	cuda-sim/ptx_ir.h	/^   unsigned local_mem_framesize() const $/;"	f	class:function_info	typeref:typename:unsigned
local_predictor_entries	gpuwattch/XML_Parse.h	/^	int local_predictor_entries;$/;"	m	struct:__anon6448b92c0108	typeref:typename:int
local_predictor_size	gpuwattch/XML_Parse.h	/^	int local_predictor_size[20];$/;"	m	struct:__anon6448b92c0108	typeref:typename:int[20]
local_result	gpuwattch/array.h	/^  uca_org_t      local_result;$/;"	m	class:ArrayST	typeref:typename:uca_org_t
local_result	gpuwattch/interconnect.h	/^	uca_org_t local_result;$/;"	m	class:interconnect	typeref:typename:uca_org_t
local_result	gpuwattch/iocontrollers.h	/^    uca_org_t local_result;$/;"	m	class:FlashController	typeref:typename:uca_org_t
local_result	gpuwattch/iocontrollers.h	/^    uca_org_t local_result;$/;"	m	class:NIUController	typeref:typename:uca_org_t
local_result	gpuwattch/iocontrollers.h	/^    uca_org_t local_result;$/;"	m	class:PCIeController	typeref:typename:uca_org_t
local_result	gpuwattch/logic.h	/^	uca_org_t local_result;$/;"	m	class:Pipeline	typeref:typename:uca_org_t
local_result	gpuwattch/logic.h	/^	uca_org_t local_result;$/;"	m	class:dep_resource_conflict_check	typeref:typename:uca_org_t
local_result	gpuwattch/logic.h	/^	uca_org_t local_result;$/;"	m	class:inst_decoder	typeref:typename:uca_org_t
local_result	gpuwattch/logic.h	/^	uca_org_t local_result;$/;"	m	class:selection_logic	typeref:typename:uca_org_t
local_result	gpuwattch/memoryctrl.h	/^    uca_org_t local_result;$/;"	m	class:MCBackend	typeref:typename:uca_org_t
local_result	gpuwattch/memoryctrl.h	/^    uca_org_t local_result;$/;"	m	class:MCPHY	typeref:typename:uca_org_t
local_result	gpuwattch/noc.h	/^	uca_org_t local_result;$/;"	m	class:NoC	typeref:typename:uca_org_t
local_space	abstract_hardware_model.h	/^   local_space,$/;"	e	enum:_memory_space_t
local_to_generic	cuda-sim/cuda-sim.cc	/^addr_t local_to_generic( unsigned smid, unsigned hwtid, addr_t addr )$/;"	f	typeref:typename:addr_t
local_wires	gpuwattch/cacti/basic_circuit.h	/^    local_wires$/;"	e	enum:Wire_placement
location	debug.h	/^   std::string location() const$/;"	f	class:brk_pt	typeref:typename:std::string
log	gpgpu-sim/stat-tool.h	/^   void log(address_type pc, int warp_occ) {$/;"	f	class:insn_warp_occ_logger	typeref:typename:void
log	gpgpu-sim/stat-tool.h	/^   void log(int pos) { m_curr_lin_hist.addsample(pos); }$/;"	f	class:linear_histogram_logger	typeref:typename:void
log_two	intersim2/misc_utils.cpp	/^int log_two( int x )$/;"	f	typeref:typename:int
logic_scaling_co_eff	gpuwattch/cacti/parameter.h	/^    double logic_scaling_co_eff;$/;"	m	class:TechnologyParameter::ScalingFactor	typeref:typename:double
logical_effort	gpuwattch/cacti/component.cc	/^int Component::logical_effort($/;"	f	class:Component	typeref:typename:int
logtwo	gpuwattch/cacti/basic_circuit.cc	/^double logtwo (double x)$/;"	f	typeref:typename:double
long_channel_leakage_reduction	gpuwattch/cacti/parameter.h	/^    double long_channel_leakage_reduction;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
long_channel_leakage_reduction	gpuwattch/cacti/parameter.h	/^    double long_channel_leakage_reduction;$/;"	m	class:TechnologyParameter::ScalingFactor	typeref:typename:double
longer_channel_device	gpuwattch/XML_Parse.h	/^	bool longer_channel_device;$/;"	m	struct:__anon6448b92c1208	typeref:typename:bool
longer_channel_device_reduction	gpuwattch/basic_components.cc	/^double longer_channel_device_reduction($/;"	f	typeref:typename:double
longer_channel_leakage	gpuwattch/cacti/cacti_interface.h	/^    double longer_channel_leakage;$/;"	m	class:powerComponents	typeref:typename:double
longopregs	gpgpu-sim/scoreboard.h	/^    std::vector< std::set<unsigned> > longopregs;$/;"	m	class:Scoreboard	typeref:typename:std::vector<std::set<unsigned>>
lookup	cuda-sim/ptx_ir.cc	/^symbol *symbol_table::lookup( const char *identifier ) $/;"	f	class:symbol_table	typeref:typename:symbol *
low	cuda-sim/ptx_sim.h	/^       unsigned int low;$/;"	m	struct:ptx_reg_t::__anondd5d98a10208	typeref:typename:unsigned int
low_swing	gpuwattch/cacti/wire.cc	/^    Component Wire::low_swing;$/;"	m	class:Wire	typeref:typename:Component
low_swing	gpuwattch/cacti/wire.h	/^    static Component low_swing;$/;"	m	class:Wire	typeref:typename:Component
low_swing_model	gpuwattch/cacti/wire.cc	/^Wire::low_swing_model()$/;"	f	class:Wire	typeref:typename:void
lowest	cuda-sim/ptx_sim.h	/^       unsigned int lowest;$/;"	m	struct:ptx_reg_t::__anondd5d98a10208	typeref:typename:unsigned int
lpEndTag	gpuwattch/xmlParser.cc	/^    XMLCSTR                lpEndTag;$/;"	m	struct:XML	typeref:typename:XMLCSTR	file:
lpNewElement	gpuwattch/xmlParser.cc	/^    XMLCSTR                lpNewElement;$/;"	m	struct:XML	typeref:typename:XMLCSTR	file:
lpXML	gpuwattch/xmlParser.cc	/^    XMLCSTR                lpXML;$/;"	m	struct:XML	typeref:typename:XMLCSTR	file:
lp_dram	gpuwattch/cacti/const.h	/^  lp_dram   = 3,$/;"	e	enum:ram_cell_tech_type_num
lpszClose	gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR lpszOpen; int openTagLen; XMLCSTR lpszClose;} ALLXMLClearTag;$/;"	m	struct:__anon33c5d5fd0108	typeref:typename:XMLCSTR	file:
lpszCloseTag	gpuwattch/xmlParser.h	/^    XMLCSTR lpszValue; XMLCSTR lpszOpenTag; XMLCSTR lpszCloseTag;$/;"	m	struct:XMLClear	typeref:typename:XMLCSTR
lpszName	gpuwattch/xmlParser.h	/^          XMLCSTR                lpszName;        \/\/ Element name (=NULL if root)$/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:typename:XMLCSTR
lpszName	gpuwattch/xmlParser.h	/^    XMLCSTR lpszName; XMLCSTR lpszValue;$/;"	m	struct:XMLAttribute	typeref:typename:XMLCSTR
lpszOpen	gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR lpszOpen; int openTagLen; XMLCSTR lpszClose;} ALLXMLClearTag;$/;"	m	struct:__anon33c5d5fd0108	typeref:typename:XMLCSTR	file:
lpszOpenTag	gpuwattch/xmlParser.h	/^    XMLCSTR lpszValue; XMLCSTR lpszOpenTag; XMLCSTR lpszCloseTag;$/;"	m	struct:XMLClear	typeref:typename:XMLCSTR
lpszText	gpuwattch/xmlParser.cc	/^    XMLCSTR                lpszText;$/;"	m	struct:XML	typeref:typename:XMLCSTR	file:
lpszValue	gpuwattch/xmlParser.h	/^    XMLCSTR lpszName; XMLCSTR lpszValue;$/;"	m	struct:XMLAttribute	typeref:typename:XMLCSTR
lpszValue	gpuwattch/xmlParser.h	/^    XMLCSTR lpszValue; XMLCSTR lpszOpenTag; XMLCSTR lpszCloseTag;$/;"	m	struct:XMLClear	typeref:typename:XMLCSTR
lrr_scheduler	gpgpu-sim/shader.h	/^	lrr_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:lrr_scheduler
lrr_scheduler	gpgpu-sim/shader.h	/^class lrr_scheduler : public scheduler_unit {$/;"	c
ls	cuda-sim/ptx_sim.h	/^      unsigned ls;$/;"	m	struct:ptx_reg_t::__anondd5d98a10108	typeref:typename:unsigned
lsq_height	gpuwattch/core.h	/^	double lsq_height;$/;"	m	class:EXECU	typeref:typename:double
lsq_height	gpuwattch/core.h	/^	double lsq_height;$/;"	m	class:LoadStoreU	typeref:typename:double
lsqassoc	gpuwattch/arch_const.h	/^const int lsqassoc=0;$/;"	v	typeref:typename:const int
lsqblocksize	gpuwattch/arch_const.h	/^const int lsqblocksize=8;$/;"	v	typeref:typename:const int
lsqsize	gpuwattch/arch_const.h	/^const int lsqsize=512;$/;"	v	typeref:typename:const int
lsu	gpuwattch/core.h	/^	LoadStoreU * lsu;$/;"	m	class:Core	typeref:typename:LoadStoreU *
lt	gpuwattch/cacti/cacti_interface.cc	/^bool mem_array::lt(const mem_array * m1, const mem_array * m2)$/;"	f	class:mem_array	typeref:typename:bool
m_L1C	gpgpu-sim/shader.h	/^   read_only_cache *m_L1C; \/\/ constant cache$/;"	m	class:ldst_unit	typeref:typename:read_only_cache *
m_L1C_config	gpgpu-sim/shader.h	/^    mutable cache_config m_L1C_config;$/;"	m	struct:shader_core_config	typeref:typename:cache_config
m_L1D	gpgpu-sim/shader.h	/^   l1_cache *m_L1D; \/\/ data cache$/;"	m	class:ldst_unit	typeref:typename:l1_cache *
m_L1D_config	gpgpu-sim/shader.h	/^    mutable l1d_cache_config m_L1D_config;$/;"	m	struct:shader_core_config	typeref:typename:l1d_cache_config
m_L1I	gpgpu-sim/shader.h	/^    read_only_cache *m_L1I; \/\/ instruction cache$/;"	m	class:shader_core_ctx	typeref:typename:read_only_cache *
m_L1I_config	gpgpu-sim/shader.h	/^    mutable cache_config m_L1I_config;$/;"	m	struct:shader_core_config	typeref:typename:cache_config
m_L1T	gpgpu-sim/shader.h	/^   tex_cache *m_L1T; \/\/ texture cache$/;"	m	class:ldst_unit	typeref:typename:tex_cache *
m_L1T_config	gpgpu-sim/shader.h	/^    mutable cache_config m_L1T_config;$/;"	m	struct:shader_core_config	typeref:typename:cache_config
m_L2_config	gpgpu-sim/gpu-sim.h	/^   mutable l2_cache_config m_L2_config;$/;"	m	struct:memory_config	typeref:typename:l2_cache_config
m_L2_dram_queue	gpgpu-sim/l2cache.h	/^   fifo_pipeline<mem_fetch> *m_L2_dram_queue;$/;"	m	class:memory_sub_partition	typeref:typename:fifo_pipeline<mem_fetch> *
m_L2_icnt_queue	gpgpu-sim/l2cache.h	/^   fifo_pipeline<mem_fetch> *m_L2_icnt_queue; \/\/ L2 cache hit response queue$/;"	m	class:memory_sub_partition	typeref:typename:fifo_pipeline<mem_fetch> *
m_L2_texure_only	gpgpu-sim/gpu-sim.h	/^   bool m_L2_texure_only;$/;"	m	struct:memory_config	typeref:typename:bool
m_L2cache	gpgpu-sim/l2cache.h	/^   class l2_cache *m_L2cache;$/;"	m	class:memory_sub_partition	typeref:class:l2_cache *
m_L2interface	gpgpu-sim/l2cache.h	/^   class L2interface *m_L2interface;$/;"	m	class:memory_sub_partition	typeref:class:L2interface *
m_NPC	cuda-sim/ptx_sim.h	/^   unsigned m_NPC;$/;"	m	class:ptx_thread_info	typeref:typename:unsigned
m_PC	cuda-sim/ptx_ir.h	/^   addr_t            m_PC;$/;"	m	class:ptx_instruction	typeref:typename:addr_t
m_PC	cuda-sim/ptx_sim.h	/^   unsigned       m_PC;$/;"	m	struct:stack_entry	typeref:typename:unsigned
m_PC	cuda-sim/ptx_sim.h	/^   unsigned m_PC;$/;"	m	class:ptx_thread_info	typeref:typename:unsigned
m_RPC	cuda-sim/ptx_sim.h	/^   unsigned       m_RPC;$/;"	m	struct:stack_entry	typeref:typename:unsigned
m_RPC	cuda-sim/ptx_sim.h	/^   unsigned m_RPC;$/;"	m	class:ptx_thread_info	typeref:typename:unsigned
m_RPC_updated	cuda-sim/ptx_sim.h	/^   bool m_RPC_updated;$/;"	m	class:ptx_thread_info	typeref:typename:bool
m_abs	cuda-sim/ptx_ir.h	/^   bool                m_abs;$/;"	m	class:ptx_instruction	typeref:typename:bool
m_access	gpgpu-sim/gpu-cache.h	/^    unsigned m_access;$/;"	m	class:tag_array	typeref:typename:unsigned
m_access	gpgpu-sim/mem_fetch.h	/^   mem_access_t m_access;$/;"	m	class:mem_fetch	typeref:typename:mem_access_t
m_accessq	abstract_hardware_model.h	/^    std::list<mem_access_t> m_accessq;$/;"	m	class:warp_inst_t	typeref:typename:std::list<mem_access_t>
m_active	gpgpu-sim/shader.h	/^   bool m_active; $/;"	m	class:thread_ctx_t	typeref:typename:bool
m_active_fu_lanes	gpgpu-sim/shader.h	/^    unsigned *m_active_fu_lanes;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_active_fu_mem_lanes	gpgpu-sim/shader.h	/^    unsigned *m_active_fu_mem_lanes;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_active_mask	abstract_hardware_model.h	/^        simt_mask_t m_active_mask;$/;"	m	struct:simt_stack::simt_stack_entry	typeref:typename:simt_mask_t
m_active_sfu_lanes	gpgpu-sim/power_stat.h	/^    unsigned *m_active_sfu_lanes[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_active_sfu_lanes	gpgpu-sim/shader.h	/^    unsigned *m_active_sfu_lanes;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_active_sms	gpgpu-sim/power_stat.h	/^   float * m_active_sms;$/;"	m	class:power_stat_t	typeref:typename:float *
m_active_sp_lanes	gpgpu-sim/power_stat.h	/^    unsigned *m_active_sp_lanes[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_active_sp_lanes	gpgpu-sim/shader.h	/^    unsigned *m_active_sp_lanes;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_active_threads	gpgpu-sim/shader.h	/^    std::bitset<MAX_THREAD_PER_SM> m_active_threads;$/;"	m	class:shader_core_ctx	typeref:typename:std::bitset<MAX_THREAD_PER_SM>
m_active_threads	gpgpu-sim/shader.h	/^    std::bitset<MAX_WARP_SIZE> m_active_threads;$/;"	m	class:shd_warp_t	typeref:typename:std::bitset<MAX_WARP_SIZE>
m_addr	abstract_hardware_model.h	/^   new_addr_type m_addr;     \/\/ request address$/;"	m	class:mem_access_t	typeref:typename:new_addr_type
m_addr	debug.h	/^   unsigned     m_addr;$/;"	m	class:brk_pt	typeref:typename:unsigned
m_addr_offset	cuda-sim/ptx_ir.h	/^   int m_addr_offset;$/;"	m	class:operand_info	typeref:typename:int
m_addr_space	cuda-sim/ptx_ir.h	/^   enum _memory_space_t m_addr_space;$/;"	m	class:operand_info	typeref:enum:_memory_space_t
m_address	cuda-sim/ptx_ir.h	/^   unsigned m_address;$/;"	m	class:symbol	typeref:typename:unsigned
m_address_mapping	gpgpu-sim/gpu-cache.h	/^	linear_to_raw_address_translation *m_address_mapping;$/;"	m	class:l2_cache_config	typeref:typename:linear_to_raw_address_translation *
m_address_mapping	gpgpu-sim/gpu-sim.h	/^   linear_to_raw_address_translation m_address_mapping;$/;"	m	struct:memory_config	typeref:typename:linear_to_raw_address_translation
m_address_valid	cuda-sim/ptx_ir.h	/^   bool m_address_valid;$/;"	m	class:symbol	typeref:typename:bool
m_alignment_spec	cuda-sim/ptx_ir.h	/^   int m_alignment_spec;$/;"	m	class:type_info_key	typeref:typename:int
m_alloc_policy	gpgpu-sim/gpu-cache.h	/^    enum allocation_policy_t m_alloc_policy;        \/\/ 'm' = allocate on miss, 'f' = allocate /;"	m	class:cache_config	typeref:enum:allocation_policy_t
m_alloc_time	gpgpu-sim/gpu-cache.h	/^    unsigned         m_alloc_time;$/;"	m	struct:cache_block_t	typeref:typename:unsigned
m_allocated_bank	gpgpu-sim/shader.h	/^      allocation_t *m_allocated_bank; \/\/ bank # -> register that wins$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:allocation_t *
m_allocation	gpgpu-sim/shader.h	/^      enum alloc_t m_allocation;$/;"	m	class:opndcoll_rfu_t::allocation_t	typeref:enum:alloc_t
m_allocator_rr_head	gpgpu-sim/shader.h	/^      unsigned *m_allocator_rr_head; \/\/ cu # -> next bank to check for request (rr-arb)$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:unsigned *
m_arbiter	gpgpu-sim/shader.h	/^   arbiter_t m_arbiter;$/;"	m	class:opndcoll_rfu_t	typeref:typename:arbiter_t
m_arbitration_metadata	gpgpu-sim/l2cache.h	/^   arbitration_metadata m_arbitration_metadata; $/;"	m	class:memory_partition_unit	typeref:typename:arbitration_metadata
m_arch_reg_num	cuda-sim/ptx_ir.h	/^   unsigned m_arch_reg_num; $/;"	m	class:symbol	typeref:typename:unsigned
m_args	cuda-sim/ptx_ir.h	/^   std::vector<const symbol*> m_args;$/;"	m	class:function_info	typeref:typename:std::vector<const symbol * >
m_array_dim	cuda-sim/ptx_ir.h	/^   int m_array_dim;$/;"	m	class:type_info_key	typeref:typename:int
m_assembled	cuda-sim/ptx_ir.h	/^   bool m_assembled;$/;"	m	class:function_info	typeref:typename:bool
m_assoc	gpgpu-sim/gpu-cache.h	/^    unsigned m_assoc;$/;"	m	class:cache_config	typeref:typename:unsigned
m_at_barrier	cuda-sim/ptx_sim.h	/^   bool m_at_barrier;$/;"	m	class:ptx_thread_info	typeref:typename:bool
m_atomic_spec	cuda-sim/ptx_ir.h	/^   int m_atomic_spec;$/;"	m	class:ptx_instruction	typeref:typename:int
m_average_pipeline_duty_cycle	gpgpu-sim/power_stat.h	/^   float * m_average_pipeline_duty_cycle;$/;"	m	class:power_stat_t	typeref:typename:float *
m_back_edges	cuda-sim/ptx_ir.h	/^   std::list<std::pair<unsigned, unsigned> > m_back_edges;$/;"	m	class:function_info	typeref:typename:std::list<std::pair<unsigned,unsigned>>
m_bandwidth_management	gpgpu-sim/gpu-cache.h	/^    bandwidth_management m_bandwidth_management; $/;"	m	class:baseline_cache	typeref:typename:bandwidth_management
m_bank	abstract_hardware_model.h	/^   unsigned m_bank; \/\/ n in ".const[n]"; note .const == .const[0] (see PTX 2.1 manual, sec. 5./;"	m	class:memory_space_t	typeref:typename:unsigned
m_bank	gpgpu-sim/shader.h	/^      unsigned  m_bank;$/;"	m	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
m_bank_warp_shift	gpgpu-sim/shader.h	/^      unsigned m_bank_warp_shift;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
m_bank_warp_shift	gpgpu-sim/shader.h	/^   unsigned m_bank_warp_shift;$/;"	m	class:opndcoll_rfu_t	typeref:typename:unsigned
m_bar_id_to_warps	gpgpu-sim/shader.h	/^   bar_id_to_warp_t m_bar_id_to_warps;$/;"	m	class:barrier_set_t	typeref:typename:bar_id_to_warp_t
m_barrier_num	cuda-sim/ptx_sim.h	/^   int m_barrier_num;$/;"	m	class:ptx_thread_info	typeref:typename:int
m_barrier_op	cuda-sim/ptx_ir.h	/^   unsigned 		   m_barrier_op;$/;"	m	class:ptx_instruction	typeref:typename:unsigned
m_barriers	gpgpu-sim/shader.h	/^    barrier_set_t             m_barriers;$/;"	m	class:shader_core_ctx	typeref:typename:barrier_set_t
m_basic_block	cuda-sim/ptx_ir.h	/^   basic_block_t        *m_basic_block;$/;"	m	class:ptx_instruction	typeref:typename:basic_block_t *
m_basic_blocks	cuda-sim/ptx_ir.h	/^   std::vector<basic_block_t*> m_basic_blocks;$/;"	m	class:function_info	typeref:typename:std::vector<basic_block_t * >
m_bin_cnts	gpgpu-sim/histogram.h	/^   int *m_bin_cnts;    \/\/ counters$/;"	m	class:binned_histogram	typeref:typename:int *
m_bins	gpgpu-sim/dram_sched.h	/^   std::map<unsigned,std::list<std::list<dram_req_t*>::iterator> >    *m_bins;$/;"	m	class:frfcfs_scheduler	typeref:typename:std::map<unsigned,std::list<std::list<dram_req_t * >::iterator>> *
m_bins	gpgpu-sim/histogram.h	/^   int *m_bins;        \/\/ bin boundaries$/;"	m	class:binned_histogram	typeref:typename:int *
m_block_addr	gpgpu-sim/gpu-cache.h	/^        new_addr_type m_block_addr;$/;"	m	struct:baseline_cache::extra_mf_fields	typeref:typename:new_addr_type
m_block_addr	gpgpu-sim/gpu-cache.h	/^        new_addr_type m_block_addr;$/;"	m	struct:tex_cache::data_block	typeref:typename:new_addr_type
m_block_addr	gpgpu-sim/gpu-cache.h	/^        new_addr_type m_block_addr;$/;"	m	struct:tex_cache::rob_entry	typeref:typename:new_addr_type
m_block_addr	gpgpu-sim/gpu-cache.h	/^    new_addr_type    m_block_addr;$/;"	m	struct:cache_block_t	typeref:typename:new_addr_type
m_block_dim	abstract_hardware_model.h	/^   dim3 m_block_dim;$/;"	m	class:kernel_info_t	typeref:typename:dim3
m_blocking	stream_manager.h	/^   bool m_blocking;$/;"	m	class:CUevent_st	typeref:typename:bool
m_branch_div_cycle	abstract_hardware_model.h	/^        unsigned long long m_branch_div_cycle;$/;"	m	struct:simt_stack::simt_stack_entry	typeref:typename:unsigned long long
m_branch_taken	cuda-sim/ptx_sim.h	/^   bool        m_branch_taken;$/;"	m	class:ptx_thread_info	typeref:typename:bool
m_byte_mask	abstract_hardware_model.h	/^   mem_access_byte_mask_t m_byte_mask;$/;"	m	class:mem_access_t	typeref:typename:mem_access_byte_mask_t
m_cache	gpgpu-sim/gpu-cache.h	/^    data_block             *m_cache;$/;"	m	class:tex_cache	typeref:typename:data_block *
m_cache_data_port_busy_cycles	gpgpu-sim/gpu-cache.h	/^    unsigned long long m_cache_data_port_busy_cycles; $/;"	m	class:cache_stats	typeref:typename:unsigned long long
m_cache_fill_port_busy_cycles	gpgpu-sim/gpu-cache.h	/^    unsigned long long m_cache_fill_port_busy_cycles; $/;"	m	class:cache_stats	typeref:typename:unsigned long long
m_cache_hit	abstract_hardware_model.h	/^    bool m_cache_hit;$/;"	m	class:warp_inst_t	typeref:typename:bool
m_cache_index	gpgpu-sim/gpu-cache.h	/^        unsigned   m_cache_index; \/\/ where to look for data$/;"	m	struct:tex_cache::fragment_entry	typeref:typename:unsigned
m_cache_index	gpgpu-sim/gpu-cache.h	/^        unsigned m_cache_index;$/;"	m	struct:baseline_cache::extra_mf_fields	typeref:typename:unsigned
m_cache_option	cuda-sim/ptx_ir.h	/^   unsigned            m_cache_option;$/;"	m	class:ptx_instruction	typeref:typename:unsigned
m_cache_port_available_cycles	gpgpu-sim/gpu-cache.h	/^    unsigned long long m_cache_port_available_cycles; $/;"	m	class:cache_stats	typeref:typename:unsigned long long
m_call_uid	cuda-sim/ptx_sim.h	/^   unsigned       m_call_uid;$/;"	m	struct:stack_entry	typeref:typename:unsigned
m_calldepth	abstract_hardware_model.h	/^        unsigned int m_calldepth;$/;"	m	struct:simt_stack::simt_stack_entry	typeref:typename:unsigned int
m_callstack	cuda-sim/ptx_sim.h	/^   std::list<stack_entry> m_callstack;$/;"	m	class:ptx_thread_info	typeref:typename:std::list<stack_entry>
m_cluster	gpgpu-sim/gpu-sim.h	/^   class simt_core_cluster **m_cluster;$/;"	m	class:gpgpu_sim	typeref:class:simt_core_cluster **
m_cluster	gpgpu-sim/shader.h	/^    class simt_core_cluster *m_cluster;$/;"	m	class:shader_core_ctx	typeref:class:simt_core_cluster *
m_cluster	gpgpu-sim/shader.h	/^    simt_core_cluster *m_cluster;$/;"	m	class:perfect_memory_interface	typeref:typename:simt_core_cluster *
m_cluster	gpgpu-sim/shader.h	/^    simt_core_cluster *m_cluster;$/;"	m	class:shader_memory_interface	typeref:typename:simt_core_cluster *
m_cluster_id	gpgpu-sim/shader.h	/^    unsigned m_cluster_id;$/;"	m	class:shader_core_mem_fetch_allocator	typeref:typename:unsigned
m_cluster_id	gpgpu-sim/shader.h	/^    unsigned m_cluster_id;$/;"	m	class:simt_core_cluster	typeref:typename:unsigned
m_cnt	stream_manager.h	/^    size_t      m_cnt;$/;"	m	class:stream_operation	typeref:typename:size_t
m_collector_units	gpgpu-sim/shader.h	/^      std::vector<collector_unit_t>* m_collector_units;$/;"	m	class:opndcoll_rfu_t::dispatch_unit_t	typeref:typename:std::vector<collector_unit_t> *
m_compare_op	cuda-sim/ptx_ir.h	/^   unsigned            m_compare_op;$/;"	m	class:ptx_instruction	typeref:typename:unsigned
m_config	abstract_hardware_model.h	/^    const core_config *m_config; $/;"	m	class:warp_inst_t	typeref:typename:const core_config *
m_config	gpgpu-sim/dram.h	/^   const struct memory_config *m_config;$/;"	m	class:dram_t	typeref:typename:const struct memory_config *
m_config	gpgpu-sim/dram_sched.h	/^   const memory_config *m_config;$/;"	m	class:frfcfs_scheduler	typeref:typename:const memory_config *
m_config	gpgpu-sim/gpu-cache.h	/^        const cache_config &m_config; $/;"	m	class:baseline_cache::bandwidth_management	typeref:typename:const cache_config &
m_config	gpgpu-sim/gpu-cache.h	/^    cache_config &m_config;$/;"	m	class:baseline_cache	typeref:typename:cache_config &
m_config	gpgpu-sim/gpu-cache.h	/^    cache_config &m_config;$/;"	m	class:tag_array	typeref:typename:cache_config &
m_config	gpgpu-sim/gpu-cache.h	/^    const cache_config &m_config;$/;"	m	class:tex_cache	typeref:typename:const cache_config &
m_config	gpgpu-sim/gpu-sim.h	/^   const gpgpu_sim_config &m_config;$/;"	m	class:gpgpu_sim	typeref:typename:const gpgpu_sim_config &
m_config	gpgpu-sim/l2cache.h	/^   const struct memory_config *m_config;$/;"	m	class:memory_partition_unit	typeref:typename:const struct memory_config *
m_config	gpgpu-sim/l2cache.h	/^   const struct memory_config *m_config;$/;"	m	class:memory_sub_partition	typeref:typename:const struct memory_config *
m_config	gpgpu-sim/power_stat.h	/^   const memory_config *m_config;$/;"	m	class:power_mem_stat_t	typeref:typename:const memory_config *
m_config	gpgpu-sim/power_stat.h	/^   const shader_core_config *m_config;$/;"	m	class:power_core_stat_t	typeref:typename:const shader_core_config *
m_config	gpgpu-sim/power_stat.h	/^   const shader_core_config *m_config;$/;"	m	class:power_stat_t	typeref:typename:const shader_core_config *
m_config	gpgpu-sim/shader.h	/^    const shader_core_config *m_config;$/;"	m	class:shader_core_ctx	typeref:typename:const shader_core_config *
m_config	gpgpu-sim/shader.h	/^    const shader_core_config *m_config;$/;"	m	class:shader_core_stats	typeref:typename:const shader_core_config *
m_config	gpgpu-sim/shader.h	/^    const shader_core_config *m_config;$/;"	m	class:simd_function_unit	typeref:typename:const shader_core_config *
m_config	gpgpu-sim/shader.h	/^    const shader_core_config *m_config;$/;"	m	class:simt_core_cluster	typeref:typename:const shader_core_config *
m_config_string	gpgpu-sim/gpu-cache.h	/^    char *m_config_string;$/;"	m	class:cache_config	typeref:typename:char *
m_config_stringPrefL1	gpgpu-sim/gpu-cache.h	/^    char *m_config_stringPrefL1;$/;"	m	class:cache_config	typeref:typename:char *
m_config_stringPrefShared	gpgpu-sim/gpu-cache.h	/^    char *m_config_stringPrefShared;$/;"	m	class:cache_config	typeref:typename:char *
m_const_mem_offset	cuda-sim/ptx_ir.h	/^   addr_t m_const_mem_offset;$/;"	m	class:operand_info	typeref:typename:addr_t
m_const_next	cuda-sim/ptx_ir.h	/^   unsigned m_const_next;$/;"	m	class:symbol_table	typeref:typename:unsigned
m_consts	cuda-sim/ptx_ir.h	/^   std::list<symbol*> m_consts;$/;"	m	class:symbol_table	typeref:typename:std::list<symbol * >
m_core	cuda-sim/ptx_sim.h	/^   core_t *m_core;$/;"	m	class:ptx_thread_info	typeref:typename:core_t *
m_core	gpgpu-sim/shader.h	/^    class shader_core_ctx *m_core;$/;"	m	class:pipelined_simd_unit	typeref:class:shader_core_ctx *
m_core	gpgpu-sim/shader.h	/^    shader_core_ctx **m_core;$/;"	m	class:simt_core_cluster	typeref:typename:shader_core_ctx **
m_core	gpgpu-sim/shader.h	/^    shader_core_ctx *m_core;$/;"	m	class:perfect_memory_interface	typeref:typename:shader_core_ctx *
m_core	gpgpu-sim/shader.h	/^    shader_core_ctx *m_core;$/;"	m	class:shader_memory_interface	typeref:typename:shader_core_ctx *
m_core	gpgpu-sim/shader.h	/^   class shader_core_ctx *m_core;$/;"	m	class:ldst_unit	typeref:class:shader_core_ctx *
m_core_config	gpgpu-sim/power_stat.h	/^   const shader_core_config *m_core_config;$/;"	m	class:power_mem_stat_t	typeref:typename:const shader_core_config *
m_core_id	gpgpu-sim/gpu-cache.h	/^    int m_core_id; \/\/ which shader core is using this$/;"	m	class:tag_array	typeref:typename:int
m_core_id	gpgpu-sim/shader.h	/^    unsigned m_core_id;$/;"	m	class:shader_core_mem_fetch_allocator	typeref:typename:unsigned
m_core_sim_order	gpgpu-sim/shader.h	/^    std::list<unsigned> m_core_sim_order;$/;"	m	class:simt_core_cluster	typeref:typename:std::list<unsigned>
m_core_stats	gpgpu-sim/power_stat.h	/^   shader_core_stats * m_core_stats;$/;"	m	class:power_core_stat_t	typeref:typename:shader_core_stats *
m_core_stats	gpgpu-sim/power_stat.h	/^   shader_core_stats * m_core_stats;$/;"	m	class:power_mem_stat_t	typeref:typename:shader_core_stats *
m_cta_id	gpgpu-sim/shader.h	/^    unsigned m_cta_id;$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_cta_id	gpgpu-sim/shader.h	/^   unsigned m_cta_id; \/\/ hardware CTA this thread belongs$/;"	m	class:thread_ctx_t	typeref:typename:unsigned
m_cta_info	cuda-sim/ptx_sim.h	/^   ptx_cta_info   *m_cta_info;$/;"	m	class:ptx_thread_info	typeref:typename:ptx_cta_info *
m_cta_issue_next_core	gpgpu-sim/shader.h	/^    unsigned m_cta_issue_next_core;$/;"	m	class:simt_core_cluster	typeref:typename:unsigned
m_cta_status	gpgpu-sim/shader.h	/^    unsigned m_cta_status[MAX_CTA_PER_SHADER]; \/\/ CTAs status $/;"	m	class:shader_core_ctx	typeref:typename:unsigned[]
m_cta_to_warps	gpgpu-sim/shader.h	/^   cta_to_warp_t m_cta_to_warps;$/;"	m	class:barrier_set_t	typeref:typename:cta_to_warp_t
m_ctaid	cuda-sim/ptx_sim.h	/^   dim3   m_ctaid;$/;"	m	class:ptx_thread_info	typeref:typename:dim3
m_ctrl_size	gpgpu-sim/mem_fetch.h	/^   unsigned m_ctrl_size; \/\/ how big would all this meta data be in hardware (does not necessar/;"	m	class:mem_fetch	typeref:typename:unsigned
m_cu	gpgpu-sim/shader.h	/^      collector_unit_t  *m_cu; $/;"	m	class:opndcoll_rfu_t::op_t	typeref:typename:collector_unit_t *
m_cu	gpgpu-sim/shader.h	/^   std::vector<collector_unit_t *> m_cu;$/;"	m	class:opndcoll_rfu_t	typeref:typename:std::vector<collector_unit_t * >
m_cu_sets	gpgpu-sim/shader.h	/^       uint_vector_t m_cu_sets;$/;"	m	class:opndcoll_rfu_t::input_port_t	typeref:typename:uint_vector_t
m_cuda_launch_blocking	stream_manager.h	/^    bool m_cuda_launch_blocking;$/;"	m	class:stream_manager	typeref:typename:bool
m_cuda_properties	gpgpu-sim/gpu-sim.h	/^   const struct cudaDeviceProp     *m_cuda_properties;$/;"	m	class:gpgpu_sim	typeref:typename:const struct cudaDeviceProp *
m_cuid	gpgpu-sim/shader.h	/^      unsigned m_cuid; \/\/ collector unit hw id$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
m_curr_lin_hist	gpgpu-sim/stat-tool.h	/^   linear_histogram_snapshot m_curr_lin_hist;$/;"	m	class:linear_histogram_logger	typeref:typename:linear_histogram_snapshot
m_current_response	gpgpu-sim/gpu-cache.h	/^    std::list<new_addr_type> m_current_response;$/;"	m	class:mshr_table	typeref:typename:std::list<new_addr_type>
m_current_response_ready	gpgpu-sim/gpu-cache.h	/^    bool m_current_response_ready;$/;"	m	class:mshr_table	typeref:typename:bool
m_cus	gpgpu-sim/shader.h	/^   cu_sets_t m_cus;$/;"	m	class:opndcoll_rfu_t	typeref:typename:cu_sets_t
m_cycle	gpgpu-sim/stat-tool.h	/^   unsigned long long  m_cycle;$/;"	m	class:linear_histogram_logger	typeref:typename:unsigned long long
m_cycle	gpgpu-sim/stat-tool.h	/^   unsigned long long  m_cycle;$/;"	m	class:linear_histogram_snapshot	typeref:typename:unsigned long long
m_cycle	gpgpu-sim/stat-tool.h	/^   unsigned long long  m_cycle;$/;"	m	class:thread_CFlocality	typeref:typename:unsigned long long
m_cycle	gpgpu-sim/stat-tool.h	/^   unsigned long long  m_cycle;$/;"	m	class:thread_insn_span	typeref:typename:unsigned long long
m_cycle_done	cuda-sim/ptx_sim.h	/^   unsigned m_cycle_done;$/;"	m	class:ptx_thread_info	typeref:typename:unsigned
m_dangling_pointers	cuda-sim/ptx_sim.h	/^   std::set<ptx_thread_info*>  m_dangling_pointers;$/;"	m	class:ptx_cta_info	typeref:typename:std::set<ptx_thread_info * >
m_data	cuda-sim/memory.h	/^   map_t m_data;$/;"	m	class:memory_space_impl	typeref:typename:map_t
m_data	cuda-sim/memory.h	/^   unsigned char *m_data;$/;"	m	class:mem_storage	typeref:typename:unsigned char *
m_data	gpgpu-sim/delayqueue.h	/^   T *m_data;$/;"	m	struct:fifo_data	typeref:typename:T *
m_data	gpgpu-sim/gpu-cache.h	/^        T         *m_data;$/;"	m	class:tex_cache::fifo	typeref:typename:T *
m_data	gpgpu-sim/gpu-cache.h	/^    table m_data;$/;"	m	class:mshr_table	typeref:typename:table
m_data_port_occupied_cycles	gpgpu-sim/gpu-cache.h	/^        int m_data_port_occupied_cycles; \/\/< Number of cycle that the data port remains used $/;"	m	class:baseline_cache::bandwidth_management	typeref:typename:int
m_data_port_width	gpgpu-sim/gpu-cache.h	/^    unsigned m_data_port_width; \/\/< number of byte the cache can access per cycle $/;"	m	class:cache_config	typeref:typename:unsigned
m_data_size	gpgpu-sim/gpu-cache.h	/^        unsigned   m_data_size;$/;"	m	struct:tex_cache::fragment_entry	typeref:typename:unsigned
m_data_size	gpgpu-sim/gpu-cache.h	/^        unsigned m_data_size;$/;"	m	struct:baseline_cache::extra_mf_fields	typeref:typename:unsigned
m_data_size	gpgpu-sim/mem_fetch.h	/^   unsigned m_data_size; \/\/ how much data is being written$/;"	m	class:mem_fetch	typeref:typename:unsigned
m_debug_trace_regs_modified	cuda-sim/ptx_sim.h	/^   std::list<reg_map_t> m_debug_trace_regs_modified;$/;"	m	class:ptx_thread_info	typeref:typename:std::list<reg_map_t>
m_debug_trace_regs_read	cuda-sim/ptx_sim.h	/^   std::list<reg_map_t> m_debug_trace_regs_read;$/;"	m	class:ptx_thread_info	typeref:typename:std::list<reg_map_t>
m_decl_location	cuda-sim/ptx_ir.h	/^   std::string m_decl_location;$/;"	m	class:symbol	typeref:typename:std::string
m_decoded	abstract_hardware_model.h	/^    bool m_decoded;$/;"	m	class:inst_t	typeref:typename:bool
m_dev_malloc	abstract_hardware_model.h	/^    unsigned long long m_dev_malloc;$/;"	m	class:gpgpu_t	typeref:typename:unsigned long long
m_device_address_dst	stream_manager.h	/^    size_t      m_device_address_dst;$/;"	m	class:stream_operation	typeref:typename:size_t
m_device_address_src	stream_manager.h	/^    size_t      m_device_address_src;$/;"	m	class:stream_operation	typeref:typename:size_t
m_dim	abstract_hardware_model.h	/^    int m_dim; $/;"	m	struct:textureReferenceAttr	typeref:typename:int
m_disabled	gpgpu-sim/gpu-cache.h	/^    bool m_disabled;$/;"	m	class:cache_config	typeref:typename:bool
m_dispatch_port	gpgpu-sim/shader.h	/^    std::vector<pipeline_stage_name_t> m_dispatch_port;$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<pipeline_stage_name_t>
m_dispatch_reg	gpgpu-sim/shader.h	/^    warp_inst_t *m_dispatch_reg;$/;"	m	class:simd_function_unit	typeref:typename:warp_inst_t *
m_dispatch_units	gpgpu-sim/shader.h	/^   std::vector<dispatch_unit_t> m_dispatch_units;$/;"	m	class:opndcoll_rfu_t	typeref:typename:std::vector<dispatch_unit_t>
m_done	stream_manager.h	/^    bool m_done;$/;"	m	class:stream_operation	typeref:typename:bool
m_done	stream_manager.h	/^   bool m_done;$/;"	m	class:CUevent_st	typeref:typename:bool
m_done_exit	gpgpu-sim/shader.h	/^    bool m_done_exit; \/\/ true once thread exit has been registered for threads in this warp$/;"	m	class:shd_warp_t	typeref:typename:bool
m_double	cuda-sim/ptx_ir.h	/^      double          m_double;$/;"	m	union:operand_info::__anon2d7997b3010a	typeref:typename:double
m_double_operand_type	cuda-sim/ptx_ir.h	/^   int m_double_operand_type;$/;"	m	class:operand_info	typeref:typename:int
m_dram	gpgpu-sim/dram_sched.h	/^   dram_t *m_dram;$/;"	m	class:frfcfs_scheduler	typeref:typename:dram_t *
m_dram	gpgpu-sim/l2cache.h	/^   class dram_t *m_dram;$/;"	m	class:memory_partition_unit	typeref:class:dram_t *
m_dram_L2_queue	gpgpu-sim/l2cache.h	/^   fifo_pipeline<mem_fetch> *m_dram_L2_queue;$/;"	m	class:memory_sub_partition	typeref:typename:fifo_pipeline<mem_fetch> *
m_dram_latency_queue	gpgpu-sim/l2cache.h	/^   std::list<dram_delay_t> m_dram_latency_queue;$/;"	m	class:memory_partition_unit	typeref:typename:std::list<dram_delay_t>
m_dst	cuda-sim/ptx_ir.h	/^   const symbol *m_dst;$/;"	m	class:arg_buffer_t	typeref:typename:const symbol *
m_dynamic_warp_id	abstract_hardware_model.h	/^    unsigned m_dynamic_warp_id; $/;"	m	class:warp_inst_t	typeref:typename:unsigned
m_dynamic_warp_id	gpgpu-sim/shader.h	/^    unsigned m_dynamic_warp_id;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned
m_dynamic_warp_id	gpgpu-sim/shader.h	/^    unsigned m_dynamic_warp_id;$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_empty	abstract_hardware_model.h	/^    bool m_empty;$/;"	m	class:warp_inst_t	typeref:typename:bool
m_enable_debug_trace	cuda-sim/ptx_sim.h	/^   bool m_enable_debug_trace;$/;"	m	class:ptx_thread_info	typeref:typename:bool
m_entry_point	cuda-sim/ptx_ir.h	/^   bool m_entry_point;$/;"	m	class:function_info	typeref:typename:bool
m_event	stream_manager.h	/^    class CUevent_st *m_event;$/;"	m	class:stream_operation	typeref:class:CUevent_st *
m_executed_kernel_names	gpgpu-sim/gpu-sim.h	/^   std::vector<std::string> m_executed_kernel_names; \/\/< names of kernel for stat printout $/;"	m	class:gpgpu_sim	typeref:typename:std::vector<std::string>
m_executed_kernel_uids	gpgpu-sim/gpu-sim.h	/^   std::vector<unsigned> m_executed_kernel_uids; \/\/< uids of kernel launches for stat printout$/;"	m	class:gpgpu_sim	typeref:typename:std::vector<unsigned>
m_exit	cuda-sim/ptx_ir.h	/^   bool                m_exit;$/;"	m	class:ptx_instruction	typeref:typename:bool
m_experimental_lib_support	abstract_hardware_model.h	/^    int m_experimental_lib_support;$/;"	m	class:gpgpu_functional_sim_config	typeref:typename:int
m_ext	abstract_hardware_model.h	/^    int m_ext; $/;"	m	struct:textureReferenceAttr	typeref:typename:int
m_extern	cuda-sim/ptx_ir.h	/^   bool m_extern;$/;"	m	class:function_info	typeref:typename:bool
m_extern_spec	cuda-sim/ptx_ir.h	/^   int m_extern_spec;$/;"	m	class:type_info_key	typeref:typename:int
m_extra_mf_fields	gpgpu-sim/gpu-cache.h	/^    extra_mf_fields_lookup m_extra_mf_fields;$/;"	m	class:baseline_cache	typeref:typename:extra_mf_fields_lookup
m_extra_mf_fields	gpgpu-sim/gpu-cache.h	/^    extra_mf_fields_lookup m_extra_mf_fields;$/;"	m	class:tex_cache	typeref:typename:extra_mf_fields_lookup
m_fileline	debug.h	/^   std::string  m_fileline;$/;"	m	class:brk_pt	typeref:typename:std::string
m_fill_port_occupied_cycles	gpgpu-sim/gpu-cache.h	/^        int m_fill_port_occupied_cycles; \/\/< Number of cycle that the fill port remains used $/;"	m	class:baseline_cache::bandwidth_management	typeref:typename:int
m_fill_time	gpgpu-sim/gpu-cache.h	/^    unsigned         m_fill_time;$/;"	m	struct:cache_block_t	typeref:typename:unsigned
m_finished_kernel	gpgpu-sim/gpu-sim.h	/^   std::list<unsigned> m_finished_kernel;$/;"	m	class:gpgpu_sim	typeref:typename:std::list<unsigned>
m_float	cuda-sim/ptx_ir.h	/^      float           m_float;$/;"	m	union:operand_info::__anon2d7997b3010a	typeref:typename:float
m_fragment_fifo	gpgpu-sim/gpu-cache.h	/^    fifo<fragment_entry>    m_fragment_fifo;$/;"	m	class:tex_cache	typeref:typename:fifo<fragment_entry>
m_fragment_fifo_entries	gpgpu-sim/gpu-cache.h	/^        unsigned m_fragment_fifo_entries;$/;"	m	union:cache_config::__anon2f897b10010a	typeref:typename:unsigned
m_free	gpgpu-sim/shader.h	/^      bool m_free;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:bool
m_frfcfs_scheduler	gpgpu-sim/dram.h	/^   class frfcfs_scheduler* m_frfcfs_scheduler;$/;"	m	class:dram_t	typeref:class:frfcfs_scheduler *
m_fu	gpgpu-sim/shader.h	/^    std::vector<simd_function_unit*> m_fu; \/\/ stallable pipelines should be last in this array$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<simd_function_unit * >
m_func_info	cuda-sim/ptx_sim.h	/^   function_info *m_func_info;$/;"	m	class:ptx_thread_info	typeref:typename:function_info *
m_func_info	cuda-sim/ptx_sim.h	/^   function_info *m_func_info;$/;"	m	struct:stack_entry	typeref:typename:function_info *
m_function	cuda-sim/ptx_ir.h	/^   function_info *m_function; \/\/ used for function symbols$/;"	m	class:symbol	typeref:typename:function_info *
m_function_info_lookup	cuda-sim/ptx_ir.h	/^   std::map<std::string,function_info*> m_function_info_lookup;$/;"	m	class:symbol_table	typeref:typename:std::map<std::string,function_info * >
m_function_model_config	abstract_hardware_model.h	/^    const gpgpu_functional_sim_config &m_function_model_config;$/;"	m	class:gpgpu_t	typeref:typename:const gpgpu_functional_sim_config &
m_function_symtab_lookup	cuda-sim/ptx_ir.h	/^   std::map<std::string,symbol_table*> m_function_symtab_lookup;$/;"	m	class:symbol_table	typeref:typename:std::map<std::string,symbol_table * >
m_functionalSimulationMode	cuda-sim/ptx_sim.h	/^   bool m_functionalSimulationMode; $/;"	m	class:ptx_thread_info	typeref:typename:bool
m_geom_spec	cuda-sim/ptx_ir.h	/^   int m_geom_spec;$/;"	m	class:ptx_instruction	typeref:typename:int
m_global_mem	abstract_hardware_model.h	/^    class memory_space *m_global_mem;$/;"	m	class:gpgpu_t	typeref:class:memory_space *
m_global_next	cuda-sim/ptx_ir.h	/^   unsigned m_global_next;$/;"	m	class:symbol_table	typeref:typename:unsigned
m_globals	cuda-sim/ptx_ir.h	/^   std::list<symbol*> m_globals;$/;"	m	class:symbol_table	typeref:typename:std::list<symbol * >
m_gpgpusim_wrapper	gpgpu-sim/gpu-sim.h	/^   class gpgpu_sim_wrapper *m_gpgpusim_wrapper;$/;"	m	class:gpgpu_sim	typeref:class:gpgpu_sim_wrapper *
m_gpu	abstract_hardware_model.h	/^        class gpgpu_sim *m_gpu;$/;"	m	class:core_t	typeref:class:gpgpu_sim *
m_gpu	cuda-sim/ptx_sim.h	/^   gpgpu_t *m_gpu;$/;"	m	class:ptx_thread_info	typeref:typename:gpgpu_t *
m_gpu	gpgpu-sim/shader.h	/^    gpgpu_sim *m_gpu;$/;"	m	class:simt_core_cluster	typeref:typename:gpgpu_sim *
m_gpu	stream_manager.h	/^    gpgpu_sim *m_gpu;$/;"	m	class:stream_manager	typeref:typename:gpgpu_sim *
m_gpu_tot_sim_cycle	stream_manager.h	/^   double m_gpu_tot_sim_cycle;$/;"	m	class:CUevent_st	typeref:typename:double
m_grid_dim	abstract_hardware_model.h	/^   dim3 m_grid_dim;$/;"	m	class:kernel_info_t	typeref:typename:dim3
m_grid_id_to_stream	stream_manager.h	/^    std::map<unsigned,CUstream_st *> m_grid_id_to_stream;$/;"	m	class:stream_manager	typeref:typename:std::map<unsigned,CUstream_st * >
m_gridid	cuda-sim/ptx_sim.h	/^   unsigned m_gridid;$/;"	m	class:ptx_thread_info	typeref:typename:unsigned
m_has_atomic	gpgpu-sim/gpu-cache.h	/^        bool m_has_atomic; $/;"	m	struct:mshr_table::mshr_entry	typeref:typename:bool
m_head	gpgpu-sim/delayqueue.h	/^   fifo_data<T> *m_head;$/;"	m	class:fifo_pipeline	typeref:typename:fifo_data<T> *
m_head	gpgpu-sim/gpu-cache.h	/^        unsigned   m_head; \/\/ next entry goes here$/;"	m	class:tex_cache::fifo	typeref:typename:unsigned
m_hi	cuda-sim/ptx_ir.h	/^   bool                m_hi;$/;"	m	class:ptx_instruction	typeref:typename:bool
m_host_address_dst	stream_manager.h	/^    void       *m_host_address_dst;$/;"	m	class:stream_operation	typeref:typename:void *
m_host_address_src	stream_manager.h	/^    const void *m_host_address_src;$/;"	m	class:stream_operation	typeref:typename:const void *
m_hw_ctaid	cuda-sim/ptx_sim.h	/^   unsigned m_hw_ctaid;$/;"	m	class:ptx_thread_info	typeref:typename:unsigned
m_hw_sid	cuda-sim/ptx_sim.h	/^   unsigned m_hw_sid;$/;"	m	class:ptx_thread_info	typeref:typename:unsigned
m_hw_tid	cuda-sim/ptx_sim.h	/^   unsigned m_hw_tid;$/;"	m	class:ptx_thread_info	typeref:typename:unsigned
m_hw_wid	cuda-sim/ptx_sim.h	/^   unsigned m_hw_wid;$/;"	m	class:ptx_thread_info	typeref:typename:unsigned
m_ibuffer	gpgpu-sim/shader.h	/^    ibuffer_entry m_ibuffer[IBUFFER_SIZE]; $/;"	m	class:shd_warp_t	typeref:typename:ibuffer_entry[]
m_icnt	gpgpu-sim/shader.h	/^    mem_fetch_interface *m_icnt;$/;"	m	class:shader_core_ctx	typeref:typename:mem_fetch_interface *
m_icnt	gpgpu-sim/shader.h	/^   class mem_fetch_interface *m_icnt;$/;"	m	class:ldst_unit	typeref:class:mem_fetch_interface *
m_icnt_L2_queue	gpgpu-sim/l2cache.h	/^   fifo_pipeline<mem_fetch> *m_icnt_L2_queue;$/;"	m	class:memory_sub_partition	typeref:typename:fifo_pipeline<mem_fetch> *
m_icnt_receive_time	gpgpu-sim/mem_fetch.h	/^   unsigned m_icnt_receive_time; \/\/ set to gpu_sim_cycle + interconnect_latency when fixed icn/;"	m	class:mem_fetch	typeref:typename:unsigned
m_icount	cuda-sim/ptx_sim.h	/^   unsigned m_icount;$/;"	m	class:ptx_thread_info	typeref:typename:unsigned
m_id	gpgpu-sim/l2cache.h	/^   unsigned m_id;  \/\/< the global sub partition ID$/;"	m	class:memory_sub_partition	typeref:typename:unsigned
m_id	gpgpu-sim/l2cache.h	/^   unsigned m_id;$/;"	m	class:memory_partition_unit	typeref:typename:unsigned
m_id	gpgpu-sim/shader.h	/^    int m_id;$/;"	m	class:scheduler_unit	typeref:typename:int
m_id	gpgpu-sim/stat-tool.h	/^   int m_id;$/;"	m	class:insn_warp_occ_logger	typeref:typename:int
m_id	gpgpu-sim/stat-tool.h	/^   int m_id;$/;"	m	class:linear_histogram_logger	typeref:typename:int
m_imiss_pending	gpgpu-sim/shader.h	/^    bool m_imiss_pending;$/;"	m	class:shd_warp_t	typeref:typename:bool
m_immediate_address	cuda-sim/ptx_ir.h	/^   bool m_immediate_address;$/;"	m	class:operand_info	typeref:typename:bool
m_in	gpgpu-sim/shader.h	/^       port_vector_t m_in,m_out;$/;"	m	class:opndcoll_rfu_t::input_port_t	typeref:typename:port_vector_t
m_in_ports	gpgpu-sim/shader.h	/^   std::vector<input_port_t> m_in_ports;$/;"	m	class:opndcoll_rfu_t	typeref:typename:std::vector<input_port_t>
m_incoming_traffic_stats	gpgpu-sim/shader.h	/^    traffic_breakdown *m_incoming_traffic_stats; \/\/ memory partition to core $/;"	m	class:shader_core_stats	typeref:typename:traffic_breakdown *
m_index	gpgpu-sim/gpu-cache.h	/^        unsigned m_index; \/\/ where in cache should block be placed?$/;"	m	struct:tex_cache::rob_entry	typeref:typename:unsigned
m_init	cuda-sim/ptx_ir.h	/^   bool m_init;$/;"	m	class:type_info_key	typeref:typename:bool
m_initialized	gpgpu-sim/shader.h	/^   bool m_initialized;$/;"	m	class:opndcoll_rfu_t	typeref:typename:bool
m_initializer	cuda-sim/ptx_ir.h	/^   std::list<operand_info> m_initializer;$/;"	m	class:symbol	typeref:typename:std::list<operand_info>
m_inner_level_prioritization	gpgpu-sim/shader.h	/^    scheduler_prioritization_type m_inner_level_prioritization;$/;"	m	class:two_level_active_scheduler	typeref:typename:scheduler_prioritization_type
m_insn_span_count	gpgpu-sim/stat-tool.h	/^   span_count_map m_insn_span_count;$/;"	m	class:thread_insn_span	typeref:typename:span_count_map
m_insn_warp_occ	gpgpu-sim/stat-tool.h	/^   std::vector<linear_histogram> m_insn_warp_occ;$/;"	m	class:insn_warp_occ_logger	typeref:typename:std::vector<linear_histogram>
m_inst	debug.cc	/^   const ptx_instruction *m_inst;$/;"	m	class:watchpoint_event	typeref:typename:const ptx_instruction *	file:
m_inst	gpgpu-sim/mem_fetch.h	/^   warp_inst_t m_inst;$/;"	m	class:mem_fetch	typeref:typename:warp_inst_t
m_inst	gpgpu-sim/shader.h	/^       const warp_inst_t *m_inst;$/;"	m	struct:shd_warp_t::ibuffer_entry	typeref:typename:const warp_inst_t *
m_inst_at_barrier	gpgpu-sim/shader.h	/^    const warp_inst_t *m_inst_at_barrier;$/;"	m	class:shd_warp_t	typeref:typename:const warp_inst_t *
m_inst_fetch_buffer	gpgpu-sim/shader.h	/^    ifetch_buffer_t           m_inst_fetch_buffer;$/;"	m	class:shader_core_ctx	typeref:typename:ifetch_buffer_t
m_inst_in_pipeline	gpgpu-sim/shader.h	/^    unsigned m_inst_in_pipeline;$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_inst_size	cuda-sim/ptx_ir.h	/^   unsigned m_inst_size; \/\/ bytes$/;"	m	class:ptx_instruction	typeref:typename:unsigned
m_instr_mem	cuda-sim/ptx_ir.h	/^   ptx_instruction **m_instr_mem;$/;"	m	class:function_info	typeref:typename:ptx_instruction **
m_instr_mem_index	cuda-sim/ptx_ir.h	/^   int m_instr_mem_index; \/\/index into m_instr_mem array$/;"	m	class:ptx_instruction	typeref:typename:int
m_instr_mem_size	cuda-sim/ptx_ir.h	/^   unsigned m_instr_mem_size;$/;"	m	class:function_info	typeref:typename:unsigned
m_instructions	cuda-sim/ptx_ir.h	/^   std::list<ptx_instruction*> m_instructions;$/;"	m	class:function_info	typeref:typename:std::list<ptx_instruction * >
m_int	cuda-sim/ptx_ir.h	/^      int             m_int;$/;"	m	union:operand_info::__anon2d7997b3010a	typeref:typename:int
m_isParsed	option_parser.cc	/^   bool m_isParsed; \/\/ true if the target variable has been updated by fromString()$/;"	m	class:OptionRegistryInterface	typeref:typename:bool	file:
m_is_const	cuda-sim/ptx_ir.h	/^   bool m_is_const;$/;"	m	class:symbol	typeref:typename:bool
m_is_func_addr	cuda-sim/ptx_ir.h	/^   bool m_is_func_addr;$/;"	m	class:symbol	typeref:typename:bool
m_is_function	cuda-sim/ptx_ir.h	/^   int m_is_function;$/;"	m	class:type_info_key	typeref:typename:int
m_is_global	cuda-sim/ptx_ir.h	/^   bool m_is_global;$/;"	m	class:symbol	typeref:typename:bool
m_is_label	cuda-sim/ptx_ir.h	/^   bool m_is_label;$/;"	m	class:symbol	typeref:typename:bool
m_is_local	cuda-sim/ptx_ir.h	/^   bool m_is_local;$/;"	m	class:symbol	typeref:typename:bool
m_is_non_arch_reg	cuda-sim/ptx_ir.h	/^   bool m_is_non_arch_reg;$/;"	m	class:operand_info	typeref:typename:bool
m_is_non_arch_reg	cuda-sim/ptx_ir.h	/^   bool m_is_non_arch_reg;$/;"	m	class:type_info_key	typeref:typename:bool
m_is_param	cuda-sim/ptx_ir.h	/^   bool m_is_param;$/;"	m	class:arg_buffer_t	typeref:typename:bool
m_is_param_local	cuda-sim/ptx_ir.h	/^   bool m_is_param_local;$/;"	m	class:symbol	typeref:typename:bool
m_is_printf	abstract_hardware_model.h	/^    bool m_is_printf;$/;"	m	class:warp_inst_t	typeref:typename:bool
m_is_ptr	cuda-sim/ptx_ir.h	/^   bool m_is_ptr; $/;"	m	class:param_info	typeref:typename:bool
m_is_reg	cuda-sim/ptx_ir.h	/^   bool m_is_reg;$/;"	m	class:arg_buffer_t	typeref:typename:bool
m_is_return_var	cuda-sim/ptx_ir.h	/^   bool m_is_return_var;$/;"	m	class:operand_info	typeref:typename:bool
m_is_shared	cuda-sim/ptx_ir.h	/^   bool m_is_shared;$/;"	m	class:symbol	typeref:typename:bool
m_is_tex	cuda-sim/ptx_ir.h	/^   bool m_is_tex;$/;"	m	class:symbol	typeref:typename:bool
m_isatomic	abstract_hardware_model.h	/^    bool m_isatomic;$/;"	m	class:warp_inst_t	typeref:typename:bool
m_issue_port	gpgpu-sim/shader.h	/^    std::vector<pipeline_stage_name_t> m_issue_port;$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<pipeline_stage_name_t>
m_kernel	abstract_hardware_model.h	/^        kernel_info_t *m_kernel;$/;"	m	class:core_t	typeref:typename:kernel_info_t *
m_kernel	cuda-sim/ptx_sim.h	/^   kernel_info_t &m_kernel;$/;"	m	class:ptx_thread_info	typeref:typename:kernel_info_t &
m_kernel	stream_manager.h	/^    kernel_info_t *m_kernel;$/;"	m	class:stream_operation	typeref:typename:kernel_info_t *
m_kernel_entry	abstract_hardware_model.h	/^   class function_info *m_kernel_entry;$/;"	m	class:kernel_info_t	typeref:class:function_info *
m_kernel_info	cuda-sim/ptx_ir.h	/^   struct gpgpu_ptx_sim_kernel_info m_kernel_info;$/;"	m	class:function_info	typeref:struct:gpgpu_ptx_sim_kernel_info
m_kernel_params	cuda-sim/ptx_ir.h	/^   std::map<std::string,param_t> m_kernel_params;$/;"	m	class:function_info	typeref:typename:std::map<std::string,param_t>
m_label	cuda-sim/ptx_ir.h	/^   const symbol           *m_label;$/;"	m	class:ptx_instruction	typeref:typename:const symbol *
m_last_access_time	gpgpu-sim/gpu-cache.h	/^    unsigned         m_last_access_time;$/;"	m	struct:cache_block_t	typeref:typename:unsigned
m_last_borrower	gpgpu-sim/l2cache.h	/^      int m_last_borrower; $/;"	m	class:memory_partition_unit::arbitration_metadata	typeref:typename:int
m_last_cluster_issue	gpgpu-sim/gpu-sim.h	/^   unsigned m_last_cluster_issue;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned
m_last_cu	gpgpu-sim/shader.h	/^      unsigned  m_last_cu; \/\/ first cu to check while arb-ing banks (rr)$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:unsigned
m_last_cu	gpgpu-sim/shader.h	/^      unsigned m_last_cu; \/\/ dispatch ready cu's rr$/;"	m	class:opndcoll_rfu_t::dispatch_unit_t	typeref:typename:unsigned
m_last_dram_callback	cuda-sim/ptx_sim.h	/^   dram_callback_t   m_last_dram_callback; $/;"	m	class:ptx_thread_info	typeref:typename:dram_callback_t
m_last_effective_address	cuda-sim/ptx_sim.h	/^   addr_t         m_last_effective_address;$/;"	m	class:ptx_thread_info	typeref:typename:addr_t
m_last_fetch	gpgpu-sim/shader.h	/^    unsigned long long m_last_fetch;$/;"	m	class:shd_warp_t	typeref:typename:unsigned long long
m_last_inst_gpu_sim_cycle	gpgpu-sim/shader.h	/^    unsigned long long m_last_inst_gpu_sim_cycle;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned long long
m_last_inst_gpu_sim_cycle	gpgpu-sim/shader.h	/^   unsigned long long m_last_inst_gpu_sim_cycle;$/;"	m	class:ldst_unit	typeref:typename:unsigned long long
m_last_inst_gpu_tot_sim_cycle	gpgpu-sim/shader.h	/^    unsigned long long m_last_inst_gpu_tot_sim_cycle;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned long long
m_last_inst_gpu_tot_sim_cycle	gpgpu-sim/shader.h	/^   unsigned long long m_last_inst_gpu_tot_sim_cycle;$/;"	m	class:ldst_unit	typeref:typename:unsigned long long
m_last_issued_kernel	gpgpu-sim/gpu-sim.h	/^   unsigned m_last_issued_kernel;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned
m_last_memory_space	cuda-sim/ptx_sim.h	/^   memory_space_t m_last_memory_space;$/;"	m	class:ptx_thread_info	typeref:typename:memory_space_t
m_last_num_sim_insn	gpgpu-sim/shader.h	/^	unsigned *m_last_num_sim_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_last_num_sim_winsn	gpgpu-sim/shader.h	/^	unsigned *m_last_num_sim_winsn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_last_row	gpgpu-sim/dram_sched.h	/^   std::list<std::list<dram_req_t*>::iterator>                 **m_last_row;$/;"	m	class:frfcfs_scheduler	typeref:typename:std::list<std::list<dram_req_t * >::iterator> **
m_last_set_operand_value	cuda-sim/ptx_sim.h	/^   ptx_reg_t m_last_set_operand_value;$/;"	m	class:ptx_thread_info	typeref:typename:ptx_reg_t
m_last_shader_dynamic_warp_issue_distro	gpgpu-sim/shader.h	/^    std::vector<unsigned> m_last_shader_dynamic_warp_issue_distro;$/;"	m	class:shader_core_stats	typeref:typename:std::vector<unsigned>
m_last_shader_warp_slot_issue_distro	gpgpu-sim/shader.h	/^    std::vector<unsigned> m_last_shader_warp_slot_issue_distro;$/;"	m	class:shader_core_stats	typeref:typename:std::vector<unsigned>
m_last_supervised_issued	gpgpu-sim/shader.h	/^    std::vector< shd_warp_t* >::const_iterator m_last_supervised_issued;$/;"	m	class:scheduler_unit	typeref:typename:std::vector<shd_warp_t * >::const_iterator
m_last_warp_fetched	gpgpu-sim/shader.h	/^    int  m_last_warp_fetched;$/;"	m	class:shader_core_ctx	typeref:typename:int
m_last_was_call	cuda-sim/ptx_sim.h	/^   bool m_last_was_call;$/;"	m	class:ptx_thread_info	typeref:typename:bool
m_ldst_unit	gpgpu-sim/shader.h	/^    ldst_unit *m_ldst_unit;$/;"	m	class:shader_core_ctx	typeref:typename:ldst_unit *
m_length	gpgpu-sim/delayqueue.h	/^   unsigned int m_length;$/;"	m	class:fifo_pipeline	typeref:typename:unsigned int
m_lin_hist_archive	gpgpu-sim/stat-tool.h	/^   std::list<linear_histogram_snapshot> m_lin_hist_archive;$/;"	m	class:linear_histogram_logger	typeref:typename:std::list<linear_histogram_snapshot>
m_line_sz	gpgpu-sim/gpu-cache.h	/^    unsigned m_line_sz;$/;"	m	class:cache_config	typeref:typename:unsigned
m_line_sz_log2	gpgpu-sim/gpu-cache.h	/^    unsigned m_line_sz_log2;$/;"	m	class:cache_config	typeref:typename:unsigned
m_linear_histogram	gpgpu-sim/stat-tool.h	/^   std::vector<int> m_linear_histogram;$/;"	m	class:linear_histogram_snapshot	typeref:typename:std::vector<int>
m_lines	gpgpu-sim/gpu-cache.h	/^    cache_block_t *m_lines; \/* nbanks x nset x assoc lines in total *\/$/;"	m	class:tag_array	typeref:typename:cache_block_t *
m_list	gpgpu-sim/gpu-cache.h	/^        std::list<mem_fetch*> m_list;$/;"	m	struct:mshr_table::mshr_entry	typeref:typename:std::list<mem_fetch * >
m_liveThreadCount	cuda-sim/cuda-sim.h	/^    unsigned * m_liveThreadCount;$/;"	m	class:functionalCoreSim	typeref:typename:unsigned *
m_lo	cuda-sim/ptx_ir.h	/^   bool                m_lo;$/;"	m	class:ptx_instruction	typeref:typename:bool
m_local_mem	cuda-sim/ptx_sim.h	/^   memory_space   *m_local_mem;$/;"	m	class:ptx_thread_info	typeref:typename:memory_space *
m_local_mem_framesize	cuda-sim/ptx_ir.h	/^   unsigned m_local_mem_framesize;$/;"	m	class:function_info	typeref:typename:unsigned
m_local_mem_stack_pointer	cuda-sim/ptx_sim.h	/^   unsigned m_local_mem_stack_pointer;$/;"	m	class:ptx_thread_info	typeref:typename:unsigned
m_local_next	cuda-sim/ptx_ir.h	/^   unsigned m_local_next;$/;"	m	class:symbol_table	typeref:typename:unsigned
m_lock	stream_manager.h	/^    pthread_mutex_t m_lock; \/\/ ensure only one host or gpu manipulates stream operation at one/;"	m	struct:CUstream_st	typeref:typename:pthread_mutex_t
m_lock	stream_manager.h	/^    pthread_mutex_t m_lock;$/;"	m	class:stream_manager	typeref:typename:pthread_mutex_t
m_log2_block_size	cuda-sim/memory.h	/^   unsigned m_log2_block_size;$/;"	m	class:memory_space_impl	typeref:typename:unsigned
m_map_f64_to_f32	cuda-sim/ptx_sim.h	/^      bool     m_map_f64_to_f32; $/;"	m	class:ptx_version	typeref:typename:bool
m_max_active_warps	gpgpu-sim/shader.h	/^	unsigned m_max_active_warps;$/;"	m	class:two_level_active_scheduler	typeref:typename:unsigned
m_max_barriers_per_cta	gpgpu-sim/shader.h	/^   unsigned m_max_barriers_per_cta;$/;"	m	class:barrier_set_t	typeref:typename:unsigned
m_max_cta_per_core	gpgpu-sim/shader.h	/^   unsigned m_max_cta_per_core;$/;"	m	class:barrier_set_t	typeref:typename:unsigned
m_max_len	gpgpu-sim/delayqueue.h	/^   unsigned int m_max_len;$/;"	m	class:fifo_pipeline	typeref:typename:unsigned int
m_max_merged	gpgpu-sim/gpu-cache.h	/^    const unsigned m_max_merged;$/;"	m	class:mshr_table	typeref:typename:const unsigned
m_max_warps_per_core	gpgpu-sim/shader.h	/^   unsigned m_max_warps_per_core;$/;"	m	class:barrier_set_t	typeref:typename:unsigned
m_maximum	gpgpu-sim/histogram.h	/^   int m_maximum;      \/\/ the maximum sample$/;"	m	class:binned_histogram	typeref:typename:int
m_mem_accesses_created	abstract_hardware_model.h	/^    bool m_mem_accesses_created;$/;"	m	class:warp_inst_t	typeref:typename:bool
m_mem_config	gpgpu-sim/mem_fetch.h	/^   const class memory_config *m_mem_config;$/;"	m	class:mem_fetch	typeref:typename:const class memory_config *
m_mem_config	gpgpu-sim/power_stat.h	/^   const struct memory_config *m_mem_config;$/;"	m	class:power_stat_t	typeref:typename:const struct memory_config *
m_mem_fetch_allocator	gpgpu-sim/shader.h	/^    shader_core_mem_fetch_allocator *m_mem_fetch_allocator;$/;"	m	class:shader_core_ctx	typeref:typename:shader_core_mem_fetch_allocator *
m_mem_out	gpgpu-sim/shader.h	/^    register_set* m_mem_out;$/;"	m	class:scheduler_unit	typeref:typename:register_set *
m_mem_rc	gpgpu-sim/shader.h	/^   enum mem_stage_stall_type m_mem_rc;$/;"	m	class:ldst_unit	typeref:enum:mem_stage_stall_type
m_mem_stats	gpgpu-sim/power_stat.h	/^   memory_stats_t *m_mem_stats;$/;"	m	class:power_mem_stat_t	typeref:typename:memory_stats_t *
m_membar	gpgpu-sim/shader.h	/^    bool     m_membar;             \/\/ if true, warp is waiting at memory barrier$/;"	m	class:shd_warp_t	typeref:typename:bool
m_membar_level	cuda-sim/ptx_ir.h	/^   int m_membar_level;$/;"	m	class:ptx_instruction	typeref:typename:int
m_memfetch_creator	gpgpu-sim/gpu-cache.h	/^    mem_fetch_allocator *m_memfetch_creator;$/;"	m	class:data_cache	typeref:typename:mem_fetch_allocator *
m_memory_config	gpgpu-sim/gpu-sim.h	/^    memory_config m_memory_config;$/;"	m	class:gpgpu_sim_config	typeref:typename:memory_config
m_memory_config	gpgpu-sim/gpu-sim.h	/^   const struct memory_config      *m_memory_config;$/;"	m	class:gpgpu_sim	typeref:typename:const struct memory_config *
m_memory_config	gpgpu-sim/l2cache.h	/^    const memory_config *m_memory_config;$/;"	m	class:partition_mf_allocator	typeref:typename:const memory_config *
m_memory_config	gpgpu-sim/mem_latency_stat.h	/^   const struct memory_config *m_memory_config;$/;"	m	class:memory_stats_t	typeref:typename:const struct memory_config *
m_memory_config	gpgpu-sim/shader.h	/^    const memory_config *m_memory_config;$/;"	m	class:shader_core_ctx	typeref:typename:const memory_config *
m_memory_config	gpgpu-sim/shader.h	/^    const memory_config *m_memory_config;$/;"	m	class:shader_core_mem_fetch_allocator	typeref:typename:const memory_config *
m_memory_config	gpgpu-sim/shader.h	/^   const memory_config *m_memory_config;$/;"	m	class:ldst_unit	typeref:typename:const memory_config *
m_memory_partition_unit	gpgpu-sim/dram.h	/^   class memory_partition_unit *m_memory_partition_unit;$/;"	m	class:dram_t	typeref:class:memory_partition_unit *
m_memory_partition_unit	gpgpu-sim/gpu-sim.h	/^   class memory_partition_unit **m_memory_partition_unit;$/;"	m	class:gpgpu_sim	typeref:class:memory_partition_unit **
m_memory_stats	gpgpu-sim/gpu-sim.h	/^   class memory_stats_t     *m_memory_stats;$/;"	m	class:gpgpu_sim	typeref:class:memory_stats_t *
m_memory_stats	gpgpu-sim/shader.h	/^    memory_stats_t *m_memory_stats;$/;"	m	class:simt_core_cluster	typeref:typename:memory_stats_t *
m_memory_sub_partition	gpgpu-sim/gpu-sim.h	/^   class memory_sub_partition **m_memory_sub_partition;$/;"	m	class:gpgpu_sim	typeref:class:memory_sub_partition **
m_memport	gpgpu-sim/gpu-cache.h	/^    mem_fetch_interface    *m_memport;$/;"	m	class:tex_cache	typeref:typename:mem_fetch_interface *
m_memport	gpgpu-sim/gpu-cache.h	/^    mem_fetch_interface *m_memport;$/;"	m	class:baseline_cache	typeref:typename:mem_fetch_interface *
m_mf_allocator	gpgpu-sim/l2cache.h	/^   partition_mf_allocator *m_mf_allocator;$/;"	m	class:memory_sub_partition	typeref:typename:partition_mf_allocator *
m_mf_allocator	gpgpu-sim/shader.h	/^   shader_core_mem_fetch_allocator *m_mf_allocator;$/;"	m	class:ldst_unit	typeref:typename:shader_core_mem_fetch_allocator *
m_min_len	gpgpu-sim/delayqueue.h	/^   unsigned int m_min_len;$/;"	m	class:fifo_pipeline	typeref:typename:unsigned int
m_miss	gpgpu-sim/gpu-cache.h	/^        bool       m_miss;        \/\/ true if sent memory request$/;"	m	struct:tex_cache::fragment_entry	typeref:typename:bool
m_miss	gpgpu-sim/gpu-cache.h	/^    unsigned m_miss;$/;"	m	class:tag_array	typeref:typename:unsigned
m_miss_queue	gpgpu-sim/gpu-cache.h	/^    std::list<mem_fetch*> m_miss_queue;$/;"	m	class:baseline_cache	typeref:typename:std::list<mem_fetch * >
m_miss_queue_size	gpgpu-sim/gpu-cache.h	/^        unsigned m_miss_queue_size;$/;"	m	union:cache_config::__anon2f897b10030a	typeref:typename:unsigned
m_miss_queue_status	gpgpu-sim/gpu-cache.h	/^    enum mem_fetch_status m_miss_queue_status;$/;"	m	class:baseline_cache	typeref:enum:mem_fetch_status
m_mshr_entries	gpgpu-sim/gpu-cache.h	/^        unsigned m_mshr_entries;$/;"	m	union:cache_config::__anon2f897b10010a	typeref:typename:unsigned
m_mshr_max_merge	gpgpu-sim/gpu-cache.h	/^        unsigned m_mshr_max_merge;$/;"	m	union:cache_config::__anon2f897b10020a	typeref:typename:unsigned
m_mshr_type	gpgpu-sim/gpu-cache.h	/^    enum mshr_config_t m_mshr_type;$/;"	m	class:cache_config	typeref:enum:mshr_config_t
m_mshrs	gpgpu-sim/gpu-cache.h	/^    mshr_table m_mshrs;$/;"	m	class:baseline_cache	typeref:typename:mshr_table
m_n_active_cta	gpgpu-sim/shader.h	/^    unsigned m_n_active_cta; \/\/ number of Cooperative Thread Arrays (blocks) currently running/;"	m	class:shader_core_ctx	typeref:typename:unsigned
m_n_atomic	gpgpu-sim/shader.h	/^    unsigned m_n_atomic;           \/\/ number of outstanding atomic operations $/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_n_bins	gpgpu-sim/stat-tool.h	/^   int m_n_bins;$/;"	m	class:linear_histogram_logger	typeref:typename:int
m_n_channel	gpgpu-sim/addrdec.h	/^   int m_n_channel;$/;"	m	class:linear_to_raw_address_translation	typeref:typename:int
m_n_diverge	gpgpu-sim/shader.h	/^    unsigned *m_n_diverge;    \/\/ number of divergence occurring in this shader$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_n_element	gpgpu-sim/delayqueue.h	/^   unsigned int m_n_element;$/;"	m	class:fifo_pipeline	typeref:typename:unsigned int
m_n_mem	gpgpu-sim/gpu-sim.h	/^   unsigned m_n_mem;$/;"	m	struct:memory_config	typeref:typename:unsigned
m_n_mem_sub_partition	gpgpu-sim/gpu-sim.h	/^   unsigned m_n_mem_sub_partition;$/;"	m	struct:memory_config	typeref:typename:unsigned
m_n_shader	gpgpu-sim/mem_latency_stat.h	/^   unsigned m_n_shader;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
m_n_sub_partition_in_channel	gpgpu-sim/addrdec.h	/^   int m_n_sub_partition_in_channel; $/;"	m	class:linear_to_raw_address_translation	typeref:typename:int
m_n_sub_partition_per_memory_channel	gpgpu-sim/gpu-sim.h	/^   unsigned m_n_sub_partition_per_memory_channel;$/;"	m	struct:memory_config	typeref:typename:unsigned
m_name	abstract_hardware_model.h	/^	const char* m_name;$/;"	m	class:register_set	typeref:typename:const char *
m_name	cuda-sim/memory.h	/^   std::string m_name;$/;"	m	class:memory_space_impl	typeref:typename:std::string
m_name	cuda-sim/ptx_ir.h	/^   std::string m_name;$/;"	m	class:function_info	typeref:typename:std::string
m_name	cuda-sim/ptx_ir.h	/^   std::string m_name;$/;"	m	class:param_info	typeref:typename:std::string
m_name	cuda-sim/ptx_ir.h	/^   std::string m_name;$/;"	m	class:symbol	typeref:typename:std::string
m_name	gpgpu-sim/delayqueue.h	/^   const char* m_name;$/;"	m	class:fifo_pipeline	typeref:typename:const char *
m_name	gpgpu-sim/gpu-cache.h	/^    std::string m_name;$/;"	m	class:baseline_cache	typeref:typename:std::string
m_name	gpgpu-sim/gpu-cache.h	/^    std::string m_name;$/;"	m	class:tex_cache	typeref:typename:std::string
m_name	gpgpu-sim/histogram.h	/^   std::string m_name;$/;"	m	class:binned_histogram	typeref:typename:std::string
m_name	gpgpu-sim/shader.h	/^    std::string m_name;$/;"	m	class:simd_function_unit	typeref:typename:std::string
m_name	gpgpu-sim/stat-tool.h	/^   std::string m_name;$/;"	m	class:linear_histogram_logger	typeref:typename:std::string
m_name	gpgpu-sim/stat-tool.h	/^   std::string m_name;$/;"	m	class:thread_CFlocality	typeref:typename:std::string
m_nbins	gpgpu-sim/histogram.h	/^   int m_nbins;$/;"	m	class:binned_histogram	typeref:typename:int
m_nbytes	abstract_hardware_model.h	/^   size_t m_nbytes;$/;"	m	struct:gpgpu_ptx_sim_arg	typeref:typename:size_t
m_nbytes	cuda-sim/memory.h	/^   unsigned m_nbytes;$/;"	m	class:mem_storage	typeref:typename:unsigned
m_nbytes	gpgpu-sim/shader.h	/^    unsigned m_nbytes;$/;"	m	struct:ifetch_buffer_t	typeref:typename:unsigned
m_nctaid	cuda-sim/ptx_sim.h	/^   dim3   m_nctaid;$/;"	m	class:ptx_thread_info	typeref:typename:dim3
m_neg	cuda-sim/ptx_ir.h	/^   bool                m_neg;$/;"	m	class:ptx_instruction	typeref:typename:bool
m_neg_pred	cuda-sim/ptx_ir.h	/^   bool                    m_neg_pred;$/;"	m	class:ptx_instruction	typeref:typename:bool
m_neg_pred	cuda-sim/ptx_ir.h	/^   bool m_neg_pred;$/;"	m	class:operand_info	typeref:typename:bool
m_network_name	gpgpu-sim/traffic_breakdown.h	/^   std::string m_network_name; $/;"	m	class:traffic_breakdown	typeref:typename:std::string
m_next	gpgpu-sim/delayqueue.h	/^   fifo_data *m_next;$/;"	m	struct:fifo_data	typeref:typename:fifo_data *
m_next	gpgpu-sim/shader.h	/^    unsigned m_next;$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_next_cta	abstract_hardware_model.h	/^   dim3 m_next_cta;$/;"	m	class:kernel_info_t	typeref:typename:dim3
m_next_cu	gpgpu-sim/shader.h	/^      unsigned m_next_cu;  \/\/ for initialization$/;"	m	class:opndcoll_rfu_t::dispatch_unit_t	typeref:typename:unsigned
m_next_cycle_prioritized_warps	gpgpu-sim/shader.h	/^    std::vector< shd_warp_t* > m_next_cycle_prioritized_warps;$/;"	m	class:scheduler_unit	typeref:typename:std::vector<shd_warp_t * >
m_next_event_uid	stream_manager.h	/^   static int m_next_event_uid;$/;"	m	class:CUevent_st	typeref:typename:int
m_next_global	gpgpu-sim/shader.h	/^   mem_fetch *m_next_global;$/;"	m	class:ldst_unit	typeref:typename:mem_fetch *
m_next_pc	gpgpu-sim/shader.h	/^    address_type m_next_pc;$/;"	m	class:shd_warp_t	typeref:typename:address_type
m_next_tid	abstract_hardware_model.h	/^   dim3 m_next_tid;$/;"	m	class:kernel_info_t	typeref:typename:dim3
m_next_uid	abstract_hardware_model.cc	/^unsigned kernel_info_t::m_next_uid = 1;$/;"	m	class:kernel_info_t	typeref:typename:unsigned
m_next_uid	abstract_hardware_model.h	/^   static unsigned m_next_uid;$/;"	m	class:kernel_info_t	typeref:typename:unsigned
m_next_wb	gpgpu-sim/shader.h	/^   warp_inst_t m_next_wb;$/;"	m	class:ldst_unit	typeref:typename:warp_inst_t
m_non_rf_operands	gpgpu-sim/power_stat.h	/^    unsigned *m_non_rf_operands[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_non_rf_operands	gpgpu-sim/shader.h	/^    unsigned *m_non_rf_operands;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_not_completed	gpgpu-sim/shader.h	/^    unsigned m_not_completed; \/\/ number of threads to be completed (==0 when all thread on thi/;"	m	class:shader_core_ctx	typeref:typename:unsigned
m_not_ready	gpgpu-sim/shader.h	/^      std::bitset<MAX_REG_OPERANDS*2> m_not_ready;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:std::bitset<MAX_REG_OPERANDS * 2>
m_nset	gpgpu-sim/gpu-cache.h	/^    unsigned m_nset;$/;"	m	class:cache_config	typeref:typename:unsigned
m_nset_log2	gpgpu-sim/gpu-cache.h	/^    unsigned m_nset_log2;$/;"	m	class:cache_config	typeref:typename:unsigned
m_nthreads	gpgpu-sim/stat-tool.h	/^   int m_nthreads;$/;"	m	class:thread_CFlocality	typeref:typename:int
m_ntid	cuda-sim/ptx_sim.h	/^   dim3   m_ntid;$/;"	m	class:ptx_thread_info	typeref:typename:dim3
m_num	gpgpu-sim/gpu-cache.h	/^        unsigned   m_num;  \/\/ how many in fifo?$/;"	m	class:tex_cache::fifo	typeref:typename:unsigned
m_num_FPdecoded_insn	gpgpu-sim/power_stat.h	/^    unsigned *m_num_FPdecoded_insn[NUM_STAT_IDX]; \/\/ number of instructions committed by this /;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_FPdecoded_insn	gpgpu-sim/shader.h	/^    unsigned *m_num_FPdecoded_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_INTdecoded_insn	gpgpu-sim/power_stat.h	/^    unsigned *m_num_INTdecoded_insn[NUM_STAT_IDX]; \/\/ number of instructions committed by this/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_INTdecoded_insn	gpgpu-sim/shader.h	/^    unsigned *m_num_INTdecoded_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_banks	gpgpu-sim/shader.h	/^      unsigned m_num_banks;$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:unsigned
m_num_banks	gpgpu-sim/shader.h	/^      unsigned m_num_banks;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
m_num_banks	gpgpu-sim/shader.h	/^   unsigned m_num_banks;$/;"	m	class:opndcoll_rfu_t	typeref:typename:unsigned
m_num_collector_sets	gpgpu-sim/shader.h	/^   unsigned m_num_collector_sets;$/;"	m	class:opndcoll_rfu_t	typeref:typename:unsigned
m_num_collectors	gpgpu-sim/shader.h	/^      unsigned m_num_collectors;$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:unsigned
m_num_collectors	gpgpu-sim/shader.h	/^      unsigned m_num_collectors;$/;"	m	class:opndcoll_rfu_t::dispatch_unit_t	typeref:typename:unsigned
m_num_cores_running	abstract_hardware_model.h	/^   unsigned m_num_cores_running;$/;"	m	class:kernel_info_t	typeref:typename:unsigned
m_num_decoded_insn	gpgpu-sim/power_stat.h	/^    unsigned *m_num_decoded_insn[NUM_STAT_IDX]; \/\/ number of instructions committed by this sh/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_decoded_insn	gpgpu-sim/shader.h	/^    unsigned *m_num_decoded_insn; \/\/ number of instructions decoded by this shader core$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_entries	gpgpu-sim/gpu-cache.h	/^    const unsigned m_num_entries;$/;"	m	class:mshr_table	typeref:typename:const unsigned
m_num_fp_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_num_fp_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_fp_acesses	gpgpu-sim/shader.h	/^    unsigned *m_num_fp_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_fpdiv_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_num_fpdiv_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_fpdiv_acesses	gpgpu-sim/shader.h	/^    unsigned *m_num_fpdiv_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_fpmul_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_num_fpmul_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_fpmul_acesses	gpgpu-sim/shader.h	/^    unsigned *m_num_fpmul_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_function_units	gpgpu-sim/shader.h	/^    unsigned m_num_function_units;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned
m_num_ialu_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_num_ialu_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_ialu_acesses	gpgpu-sim/shader.h	/^    unsigned *m_num_ialu_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_idiv_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_num_idiv_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_idiv_acesses	gpgpu-sim/shader.h	/^    unsigned *m_num_idiv_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_imul24_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_num_imul24_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_imul24_acesses	gpgpu-sim/shader.h	/^    unsigned *m_num_imul24_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_imul32_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_num_imul32_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_imul32_acesses	gpgpu-sim/shader.h	/^    unsigned *m_num_imul32_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_imul_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_num_imul_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_imul_acesses	gpgpu-sim/shader.h	/^    unsigned *m_num_imul_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_loadqueued_insn	gpgpu-sim/power_stat.h	/^    unsigned *m_num_loadqueued_insn[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_loadqueued_insn	gpgpu-sim/shader.h	/^    unsigned *m_num_loadqueued_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_mem_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_num_mem_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_mem_acesses	gpgpu-sim/shader.h	/^    unsigned *m_num_mem_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_mem_committed	gpgpu-sim/power_stat.h	/^    unsigned *m_num_mem_committed[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_mem_committed	gpgpu-sim/shader.h	/^    unsigned *m_num_mem_committed;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_pending	gpgpu-sim/dram_sched.h	/^   unsigned m_num_pending;$/;"	m	class:frfcfs_scheduler	typeref:typename:unsigned
m_num_sfu_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_num_sfu_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_sfu_acesses	gpgpu-sim/shader.h	/^    unsigned *m_num_sfu_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_sfu_committed	gpgpu-sim/power_stat.h	/^    unsigned *m_num_sfu_committed[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_sfu_committed	gpgpu-sim/shader.h	/^    unsigned *m_num_sfu_committed;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_sim_insn	gpgpu-sim/shader.h	/^    unsigned *m_num_sim_insn; \/\/ number of scalar thread instructions committed by this shader/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_sim_winsn	gpgpu-sim/shader.h	/^    unsigned *m_num_sim_winsn; \/\/ number of warp instructions committed by this shader core$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_sp_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_num_sp_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_sp_acesses	gpgpu-sim/shader.h	/^    unsigned *m_num_sp_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_sp_committed	gpgpu-sim/power_stat.h	/^    unsigned *m_num_sp_committed[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_sp_committed	gpgpu-sim/shader.h	/^    unsigned *m_num_sp_committed;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_storequeued_insn	gpgpu-sim/power_stat.h	/^    unsigned *m_num_storequeued_insn[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_storequeued_insn	gpgpu-sim/shader.h	/^    unsigned *m_num_storequeued_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_tex_inst	gpgpu-sim/power_stat.h	/^    unsigned *m_num_tex_inst[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_tex_inst	gpgpu-sim/shader.h	/^    unsigned *m_num_tex_inst;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_tlb_accesses	gpgpu-sim/shader.h	/^    unsigned *m_num_tlb_accesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_tlb_hits	gpgpu-sim/shader.h	/^    unsigned *m_num_tlb_hits;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_trans_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_num_trans_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_trans_acesses	gpgpu-sim/shader.h	/^    unsigned *m_num_trans_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_warps_to_limit	gpgpu-sim/shader.h	/^    unsigned m_num_warps_to_limit;$/;"	m	class:swl_scheduler	typeref:typename:unsigned
m_num_writeback_clients	gpgpu-sim/shader.h	/^   unsigned m_num_writeback_clients;$/;"	m	class:ldst_unit	typeref:typename:unsigned
m_offset	abstract_hardware_model.h	/^   size_t m_offset;$/;"	m	struct:gpgpu_ptx_sim_arg	typeref:typename:size_t
m_offset	cuda-sim/ptx_ir.h	/^   unsigned m_offset;$/;"	m	class:param_info	typeref:typename:unsigned
m_offset	stream_manager.h	/^    size_t m_offset;$/;"	m	class:stream_operation	typeref:typename:size_t
m_op	gpgpu-sim/shader.h	/^      op_t m_op;$/;"	m	class:opndcoll_rfu_t::allocation_t	typeref:typename:op_t
m_opcode	cuda-sim/ptx_ir.h	/^   int                     m_opcode;$/;"	m	class:ptx_instruction	typeref:typename:int
m_operand	gpgpu-sim/shader.h	/^      unsigned  m_operand; \/\/ operand offset in instruction. e.g., add r1,r2,r3; r2 is oprd 0,/;"	m	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
m_operand_collector	gpgpu-sim/shader.h	/^    opndcoll_rfu_t            m_operand_collector;$/;"	m	class:shader_core_ctx	typeref:typename:opndcoll_rfu_t
m_operand_collector	gpgpu-sim/shader.h	/^   opndcoll_rfu_t *m_operand_collector;$/;"	m	class:ldst_unit	typeref:typename:opndcoll_rfu_t *
m_operand_lohi	cuda-sim/ptx_ir.h	/^   int m_operand_lohi;$/;"	m	class:operand_info	typeref:typename:int
m_operand_neg	cuda-sim/ptx_ir.h	/^   bool m_operand_neg;$/;"	m	class:operand_info	typeref:typename:bool
m_operands	cuda-sim/ptx_ir.h	/^   std::vector<operand_info> m_operands;$/;"	m	class:ptx_instruction	typeref:typename:std::vector<operand_info>
m_operations	stream_manager.h	/^    std::list<stream_operation> m_operations;$/;"	m	struct:CUstream_st	typeref:typename:std::list<stream_operation>
m_optionDesc	option_parser.cc	/^   string m_optionDesc;$/;"	m	class:OptionRegistryInterface	typeref:typename:string	file:
m_optionMap	option_parser.cc	/^   OptionMap m_optionMap;$/;"	m	class:OptionParser	typeref:typename:OptionMap	file:
m_optionName	option_parser.cc	/^   string m_optionName;$/;"	m	class:OptionRegistryInterface	typeref:typename:string	file:
m_optionReg	option_parser.cc	/^   OptionCollection m_optionReg;$/;"	m	class:OptionParser	typeref:typename:OptionCollection	file:
m_options	cuda-sim/ptx_ir.h	/^   std::list<int>          m_options;$/;"	m	class:ptx_instruction	typeref:typename:std::list<int>
m_out	gpgpu-sim/shader.h	/^       port_vector_t m_in,m_out;$/;"	m	class:opndcoll_rfu_t::input_port_t	typeref:typename:port_vector_t
m_outer_level_prioritization	gpgpu-sim/shader.h	/^    scheduler_prioritization_type m_outer_level_prioritization;$/;"	m	class:two_level_active_scheduler	typeref:typename:scheduler_prioritization_type
m_outgoing_traffic_stats	gpgpu-sim/shader.h	/^    traffic_breakdown *m_outgoing_traffic_stats; \/\/ core to memory partitions$/;"	m	class:shader_core_stats	typeref:typename:traffic_breakdown *
m_output_register	gpgpu-sim/shader.h	/^      register_set* m_output_register; \/\/ pipeline register to issue to when ready$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:register_set *
m_param_bytes	cuda-sim/ptx_ir.h	/^   unsigned  m_param_bytes;$/;"	m	class:arg_buffer_t	typeref:typename:unsigned
m_param_mem	abstract_hardware_model.h	/^   class memory_space *m_param_mem;$/;"	m	class:kernel_info_t	typeref:class:memory_space *
m_param_value	cuda-sim/ptx_ir.h	/^   void     *m_param_value;$/;"	m	class:arg_buffer_t	typeref:typename:void *
m_parent	cuda-sim/ptx_ir.h	/^   symbol_table *m_parent;$/;"	m	class:symbol_table	typeref:typename:symbol_table *
m_partition_addr	gpgpu-sim/mem_fetch.h	/^   new_addr_type m_partition_addr; \/\/ linear physical address *within* dram partition (partiti/;"	m	class:mem_fetch	typeref:typename:new_addr_type
m_pc	abstract_hardware_model.h	/^        address_type m_pc;$/;"	m	struct:simt_stack::simt_stack_entry	typeref:typename:address_type
m_pc	gpgpu-sim/shader.h	/^    address_type m_pc;$/;"	m	struct:ifetch_buffer_t	typeref:typename:address_type
m_pending	stream_manager.h	/^    bool m_pending; \/\/ front operation has started but not yet completed$/;"	m	struct:CUstream_st	typeref:typename:bool
m_pending_hit	gpgpu-sim/gpu-cache.h	/^    unsigned m_pending_hit; \/\/ number of cache miss that hit a line that is allocated but not /;"	m	class:tag_array	typeref:typename:unsigned
m_pending_warps	gpgpu-sim/shader.h	/^	std::deque< shd_warp_t* > m_pending_warps;$/;"	m	class:two_level_active_scheduler	typeref:typename:std::deque<shd_warp_t * >
m_pending_writes	gpgpu-sim/shader.h	/^   std::map<unsigned\/*warp_id*\/, std::map<unsigned\/*regnum*\/,unsigned\/*count*\/> > m_pendin/;"	m	class:ldst_unit	typeref:typename:std::map<unsigned,std::map<unsigned,unsigned>>
m_per_scalar_thread	abstract_hardware_model.h	/^    std::vector<per_thread_info> m_per_scalar_thread;$/;"	m	class:warp_inst_t	typeref:typename:std::vector<per_thread_info>
m_per_scalar_thread_valid	abstract_hardware_model.h	/^    bool m_per_scalar_thread_valid;$/;"	m	class:warp_inst_t	typeref:typename:bool
m_pipeline_depth	gpgpu-sim/shader.h	/^    unsigned m_pipeline_depth;$/;"	m	class:pipelined_simd_unit	typeref:typename:unsigned
m_pipeline_duty_cycle	gpgpu-sim/power_stat.h	/^    float *m_pipeline_duty_cycle[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:float * []
m_pipeline_duty_cycle	gpgpu-sim/shader.h	/^    float *m_pipeline_duty_cycle;$/;"	m	struct:shader_core_stats_pod	typeref:typename:float *
m_pipeline_reg	gpgpu-sim/shader.h	/^    std::vector<register_set> m_pipeline_reg;$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<register_set>
m_pipeline_reg	gpgpu-sim/shader.h	/^    warp_inst_t **m_pipeline_reg;$/;"	m	class:pipelined_simd_unit	typeref:typename:warp_inst_t **
m_power_stats	gpgpu-sim/gpu-sim.h	/^   class power_stat_t *m_power_stats;$/;"	m	class:gpgpu_sim	typeref:class:power_stat_t *
m_pred	cuda-sim/ptx_ir.h	/^   const symbol           *m_pred;$/;"	m	class:ptx_instruction	typeref:typename:const symbol *
m_pred_mod	cuda-sim/ptx_ir.h	/^   int                    m_pred_mod;$/;"	m	class:ptx_instruction	typeref:typename:int
m_prev_snapshot_access	gpgpu-sim/gpu-cache.h	/^    unsigned m_prev_snapshot_access;$/;"	m	class:tag_array	typeref:typename:unsigned
m_prev_snapshot_miss	gpgpu-sim/gpu-cache.h	/^    unsigned m_prev_snapshot_miss;$/;"	m	class:tag_array	typeref:typename:unsigned
m_prev_snapshot_pending_hit	gpgpu-sim/gpu-cache.h	/^    unsigned m_prev_snapshot_pending_hit;$/;"	m	class:tag_array	typeref:typename:unsigned
m_prioritization	gpgpu-sim/shader.h	/^    scheduler_prioritization_type m_prioritization;$/;"	m	class:swl_scheduler	typeref:typename:scheduler_prioritization_type
m_private_credit	gpgpu-sim/l2cache.h	/^      std::vector<int> m_private_credit; $/;"	m	class:memory_partition_unit::arbitration_metadata	typeref:typename:std::vector<int>
m_private_credit_limit	gpgpu-sim/l2cache.h	/^      int m_private_credit_limit; $/;"	m	class:memory_partition_unit::arbitration_metadata	typeref:typename:int
m_ptr_space	cuda-sim/ptx_ir.h	/^   memory_space_t m_ptr_space; $/;"	m	class:param_info	typeref:typename:memory_space_t
m_ptx_convert_to_ptxplus	abstract_hardware_model.h	/^    int m_ptx_convert_to_ptxplus;$/;"	m	class:gpgpu_functional_sim_config	typeref:typename:int
m_ptx_extensions	cuda-sim/ptx_sim.h	/^      unsigned m_ptx_extensions;$/;"	m	class:ptx_version	typeref:typename:unsigned
m_ptx_force_max_capability	abstract_hardware_model.h	/^    unsigned m_ptx_force_max_capability;$/;"	m	class:gpgpu_functional_sim_config	typeref:typename:unsigned
m_ptx_kernel_param_info	cuda-sim/ptx_ir.h	/^   std::map<unsigned,param_info> m_ptx_kernel_param_info;$/;"	m	class:function_info	typeref:typename:std::map<unsigned,param_info>
m_ptx_save_converted_ptxplus	cuda-sim/ptx_loader.cc	/^bool m_ptx_save_converted_ptxplus;$/;"	v	typeref:typename:bool
m_ptx_use_cuobjdump	abstract_hardware_model.h	/^    int m_ptx_use_cuobjdump;$/;"	m	class:gpgpu_functional_sim_config	typeref:typename:int
m_ptx_version	cuda-sim/ptx_ir.h	/^   ptx_version m_ptx_version;$/;"	m	class:symbol_table	typeref:typename:ptx_version
m_ptx_version	cuda-sim/ptx_sim.h	/^      float    m_ptx_version;$/;"	m	class:ptx_version	typeref:typename:float
m_queue	gpgpu-sim/dram_sched.h	/^   std::list<dram_req_t*>                                    *m_queue;$/;"	m	class:frfcfs_scheduler	typeref:typename:std::list<dram_req_t * > *
m_queue	gpgpu-sim/shader.h	/^      std::list<op_t> *m_queue;$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:std::list<op_t> *
m_raw_addr	gpgpu-sim/mem_fetch.h	/^   addrdec_t m_raw_addr; \/\/ raw physical address (i.e., decoded DRAM chip-row-bank-column addr/;"	m	class:mem_fetch	typeref:typename:addrdec_t
m_read_regfile_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_read_regfile_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_read_regfile_acesses	gpgpu-sim/shader.h	/^    unsigned *m_read_regfile_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_readmode	abstract_hardware_model.h	/^    enum cudaTextureReadMode m_readmode; $/;"	m	struct:textureReferenceAttr	typeref:enum:cudaTextureReadMode
m_ready	gpgpu-sim/gpu-cache.h	/^        bool m_ready;$/;"	m	struct:tex_cache::rob_entry	typeref:typename:bool
m_recvg_pc	abstract_hardware_model.h	/^        address_type m_recvg_pc;$/;"	m	struct:simt_stack::simt_stack_entry	typeref:typename:address_type
m_reg_allocator	cuda-sim/ptx_ir.h	/^   unsigned m_reg_allocator;$/;"	m	class:symbol_table	typeref:typename:unsigned
m_reg_num	cuda-sim/ptx_ir.h	/^   unsigned m_reg_num; $/;"	m	class:symbol	typeref:typename:unsigned
m_reg_num_valid	cuda-sim/ptx_ir.h	/^   bool m_reg_num_valid; $/;"	m	class:symbol	typeref:typename:bool
m_reg_value	cuda-sim/ptx_ir.h	/^   ptx_reg_t m_reg_value;$/;"	m	class:arg_buffer_t	typeref:typename:ptx_reg_t
m_register	gpgpu-sim/shader.h	/^      unsigned  m_register;$/;"	m	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
m_regs	cuda-sim/ptx_sim.h	/^   std::list<reg_map_t> m_regs;$/;"	m	class:ptx_thread_info	typeref:typename:std::list<reg_map_t>
m_replacement_policy	gpgpu-sim/gpu-cache.h	/^    enum replacement_policy_t m_replacement_policy; \/\/ 'L' = LRU, 'F' = FIFO$/;"	m	class:cache_config	typeref:enum:replacement_policy_t
m_req_size	abstract_hardware_model.h	/^   unsigned      m_req_size; \/\/ bytes$/;"	m	class:mem_access_t	typeref:typename:unsigned
m_request	gpgpu-sim/gpu-cache.h	/^        mem_fetch *m_request;     \/\/ request information$/;"	m	struct:tex_cache::fragment_entry	typeref:typename:mem_fetch *
m_request	gpgpu-sim/gpu-cache.h	/^        mem_fetch *m_request;$/;"	m	struct:tex_cache::rob_entry	typeref:typename:mem_fetch *
m_request_fifo	gpgpu-sim/gpu-cache.h	/^    fifo<mem_fetch*>        m_request_fifo;$/;"	m	class:tex_cache	typeref:typename:fifo<mem_fetch * >
m_request_fifo_entries	gpgpu-sim/gpu-cache.h	/^        unsigned m_request_fifo_entries;$/;"	m	union:cache_config::__anon2f897b10020a	typeref:typename:unsigned
m_request_queue_status	gpgpu-sim/gpu-cache.h	/^    enum mem_fetch_status   m_request_queue_status;$/;"	m	class:tex_cache	typeref:enum:mem_fetch_status
m_request_tracker	gpgpu-sim/l2cache.h	/^   std::set<mem_fetch*> m_request_tracker;$/;"	m	class:memory_sub_partition	typeref:typename:std::set<mem_fetch * >
m_request_uid	gpgpu-sim/mem_fetch.h	/^   unsigned m_request_uid;$/;"	m	class:mem_fetch	typeref:typename:unsigned
m_res_fail	gpgpu-sim/gpu-cache.h	/^    unsigned m_res_fail;$/;"	m	class:tag_array	typeref:typename:unsigned
m_reset_at_snap_shot	gpgpu-sim/stat-tool.h	/^   bool m_reset_at_snap_shot;$/;"	m	class:linear_histogram_logger	typeref:typename:bool
m_response_fifo	gpgpu-sim/shader.h	/^    std::list<mem_fetch*> m_response_fifo;$/;"	m	class:simt_core_cluster	typeref:typename:std::list<mem_fetch * >
m_response_fifo	gpgpu-sim/shader.h	/^   std::list<mem_fetch*> m_response_fifo;$/;"	m	class:ldst_unit	typeref:typename:std::list<mem_fetch * >
m_result_bus	gpgpu-sim/shader.h	/^    std::vector< std::bitset<MAX_ALU_LATENCY>* > m_result_bus;$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<std::bitset<MAX_ALU_LATENCY> * >
m_result_fifo	gpgpu-sim/gpu-cache.h	/^    fifo<mem_fetch*>        m_result_fifo; \/\/ next completed texture fetch$/;"	m	class:tex_cache	typeref:typename:fifo<mem_fetch * >
m_result_fifo_entries	gpgpu-sim/gpu-cache.h	/^    unsigned m_result_fifo_entries;$/;"	m	class:cache_config	typeref:typename:unsigned
m_result_port	gpgpu-sim/shader.h	/^    register_set *m_result_port;$/;"	m	class:pipelined_simd_unit	typeref:typename:register_set *
m_return_var	cuda-sim/ptx_ir.h	/^   operand_info m_return_var;$/;"	m	class:ptx_instruction	typeref:typename:operand_info
m_return_var_dst	cuda-sim/ptx_sim.h	/^   const symbol  *m_return_var_dst;$/;"	m	struct:stack_entry	typeref:typename:const symbol *
m_return_var_src	cuda-sim/ptx_sim.h	/^   const symbol  *m_return_var_src;$/;"	m	struct:stack_entry	typeref:typename:const symbol *
m_return_var_sym	cuda-sim/ptx_ir.h	/^   const symbol *m_return_var_sym;$/;"	m	class:function_info	typeref:typename:const symbol *
m_rfu	gpgpu-sim/shader.h	/^      opndcoll_rfu_t *m_rfu;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:opndcoll_rfu_t *
m_rob	gpgpu-sim/gpu-cache.h	/^    fifo<rob_entry>         m_rob;$/;"	m	class:tex_cache	typeref:typename:fifo<rob_entry>
m_rob_entries	gpgpu-sim/gpu-cache.h	/^        unsigned m_rob_entries;$/;"	m	union:cache_config::__anon2f897b10030a	typeref:typename:unsigned
m_rob_index	gpgpu-sim/gpu-cache.h	/^        unsigned m_rob_index;$/;"	m	struct:tex_cache::extra_mf_fields	typeref:typename:unsigned
m_rob_status	gpgpu-sim/gpu-cache.h	/^    enum mem_fetch_status   m_rob_status;$/;"	m	class:tex_cache	typeref:enum:mem_fetch_status
m_rop	gpgpu-sim/l2cache.h	/^   std::queue<rop_delay_t> m_rop;$/;"	m	class:memory_sub_partition	typeref:typename:std::queue<rop_delay_t>
m_rounding_mode	cuda-sim/ptx_ir.h	/^   unsigned            m_rounding_mode;$/;"	m	class:ptx_instruction	typeref:typename:unsigned
m_running_kernels	gpgpu-sim/gpu-sim.h	/^   std::vector<kernel_info_t*> m_running_kernels;$/;"	m	class:gpgpu_sim	typeref:typename:std::vector<kernel_info_t * >
m_saturation_mode	cuda-sim/ptx_ir.h	/^   unsigned            m_saturation_mode;$/;"	m	class:ptx_instruction	typeref:typename:unsigned
m_scalar_type	cuda-sim/ptx_ir.h	/^   std::list<int>          m_scalar_type;$/;"	m	class:ptx_instruction	typeref:typename:std::list<int>
m_scalar_type_spec	cuda-sim/ptx_ir.h	/^   int m_scalar_type_spec;$/;"	m	class:type_info_key	typeref:typename:int
m_scope	cuda-sim/ptx_ir.h	/^   symbol_table *m_scope;$/;"	m	class:type_info	typeref:typename:symbol_table *
m_scope_name	cuda-sim/ptx_ir.h	/^   std::string m_scope_name;$/;"	m	class:symbol_table	typeref:typename:std::string
m_scoreboard	gpgpu-sim/shader.h	/^    Scoreboard               *m_scoreboard;$/;"	m	class:shader_core_ctx	typeref:typename:Scoreboard *
m_scoreboard	gpgpu-sim/shader.h	/^    Scoreboard* m_scoreboard; $/;"	m	class:scheduler_unit	typeref:typename:Scoreboard *
m_scoreboard	gpgpu-sim/shader.h	/^   Scoreboard *m_scoreboard;$/;"	m	class:ldst_unit	typeref:typename:Scoreboard *
m_service_stream_zero	stream_manager.h	/^    bool m_service_stream_zero;$/;"	m	class:stream_manager	typeref:typename:bool
m_set_index_function	gpgpu-sim/gpu-cache.h	/^    enum set_index_function m_set_index_function; \/\/ Hash, linear, or custom set index functio/;"	m	class:cache_config	typeref:enum:set_index_function
m_sfu_out	gpgpu-sim/shader.h	/^    register_set* m_sfu_out;$/;"	m	class:scheduler_unit	typeref:typename:register_set *
m_shader	gpgpu-sim/shader.h	/^    class shader_core_ctx *m_shader;$/;"	m	class:shd_warp_t	typeref:class:shader_core_ctx *
m_shader	gpgpu-sim/shader.h	/^    shader_core_ctx* m_shader;$/;"	m	class:scheduler_unit	typeref:typename:shader_core_ctx *
m_shader	gpgpu-sim/shader.h	/^   shader_core_ctx                 *m_shader;$/;"	m	class:opndcoll_rfu_t	typeref:typename:shader_core_ctx *
m_shader	gpgpu-sim/shader.h	/^   shader_core_ctx *m_shader;$/;"	m	class:barrier_set_t	typeref:typename:shader_core_ctx *
m_shader_config	gpgpu-sim/gpu-sim.h	/^    shader_core_config m_shader_config;$/;"	m	class:gpgpu_sim_config	typeref:typename:shader_core_config
m_shader_config	gpgpu-sim/gpu-sim.h	/^   const struct shader_core_config *m_shader_config;$/;"	m	class:gpgpu_sim	typeref:typename:const struct shader_core_config *
m_shader_config	gpgpu-sim/mem_latency_stat.h	/^   const struct shader_core_config *m_shader_config;$/;"	m	class:memory_stats_t	typeref:typename:const struct shader_core_config *
m_shader_dynamic_warp_issue_distro	gpgpu-sim/shader.h	/^    std::vector< std::vector<unsigned> > m_shader_dynamic_warp_issue_distro;$/;"	m	class:shader_core_stats	typeref:typename:std::vector<std::vector<unsigned>>
m_shader_stats	gpgpu-sim/gpu-sim.h	/^   class shader_core_stats  *m_shader_stats;$/;"	m	class:gpgpu_sim	typeref:class:shader_core_stats *
m_shader_warp_slot_issue_distro	gpgpu-sim/shader.h	/^    std::vector< std::vector<unsigned> > m_shader_warp_slot_issue_distro;$/;"	m	class:shader_core_stats	typeref:typename:std::vector<std::vector<unsigned>>
m_shared_credit	gpgpu-sim/l2cache.h	/^      int m_shared_credit; $/;"	m	class:memory_partition_unit::arbitration_metadata	typeref:typename:int
m_shared_credit_limit	gpgpu-sim/l2cache.h	/^      int m_shared_credit_limit; $/;"	m	class:memory_partition_unit::arbitration_metadata	typeref:typename:int
m_shared_mem	cuda-sim/ptx_sim.h	/^   memory_space   *m_shared_mem;$/;"	m	class:ptx_thread_info	typeref:typename:memory_space *
m_shared_next	cuda-sim/ptx_ir.h	/^   unsigned m_shared_next;$/;"	m	class:symbol_table	typeref:typename:unsigned
m_sid	gpgpu-sim/mem_fetch.h	/^   unsigned m_sid;$/;"	m	class:mem_fetch	typeref:typename:unsigned
m_sid	gpgpu-sim/scoreboard.h	/^    unsigned m_sid;$/;"	m	class:Scoreboard	typeref:typename:unsigned
m_sid	gpgpu-sim/shader.h	/^    unsigned m_sid; \/\/ shader id$/;"	m	class:shader_core_ctx	typeref:typename:unsigned
m_sid	gpgpu-sim/shader.h	/^   unsigned m_sid;$/;"	m	class:ldst_unit	typeref:typename:unsigned
m_sim_mode	stream_manager.h	/^    bool m_sim_mode;$/;"	m	class:stream_operation	typeref:typename:bool
m_simd_width	gpgpu-sim/stat-tool.h	/^   int m_simd_width;$/;"	m	class:insn_warp_occ_logger	typeref:typename:int
m_simt_stack	abstract_hardware_model.h	/^        simt_stack  **m_simt_stack; \/\/ pdom based reconvergence context for each warp$/;"	m	class:core_t	typeref:typename:simt_stack **
m_simt_stack	gpgpu-sim/shader.h	/^    simt_stack** m_simt_stack;$/;"	m	class:scheduler_unit	typeref:typename:simt_stack **
m_size	cuda-sim/ptx_ir.h	/^   size_t m_size;$/;"	m	class:param_info	typeref:typename:size_t
m_size	cuda-sim/ptx_ir.h	/^   unsigned m_size; \/\/ in bytes$/;"	m	class:symbol	typeref:typename:unsigned
m_size	gpgpu-sim/gpu-cache.h	/^        unsigned   m_size; \/\/ maximum number of entries in fifo$/;"	m	class:tex_cache::fifo	typeref:typename:unsigned
m_sm_idx	cuda-sim/ptx_sim.h	/^   unsigned                m_sm_idx;$/;"	m	class:ptx_cta_info	typeref:typename:unsigned
m_sm_version	cuda-sim/ptx_sim.h	/^      unsigned m_sm_version;$/;"	m	class:ptx_version	typeref:typename:unsigned
m_sm_version_str	cuda-sim/ptx_sim.h	/^      std::string m_sm_version_str;$/;"	m	class:ptx_version	typeref:typename:std::string
m_sm_version_valid	cuda-sim/ptx_sim.h	/^      unsigned m_sm_version_valid;$/;"	m	class:ptx_version	typeref:typename:unsigned
m_snap_shot_interval	gpgpu-sim/stat-tool.h	/^   unsigned long long  m_snap_shot_interval;$/;"	m	class:snap_shot_trigger	typeref:typename:unsigned long long
m_source	cuda-sim/ptx_ir.h	/^   std::string          m_source;$/;"	m	class:ptx_instruction	typeref:typename:std::string
m_source_file	cuda-sim/ptx_ir.h	/^   std::string             m_source_file;$/;"	m	class:ptx_instruction	typeref:typename:std::string
m_source_line	cuda-sim/ptx_ir.h	/^   unsigned                m_source_line;$/;"	m	class:ptx_instruction	typeref:typename:unsigned
m_sp_out	gpgpu-sim/shader.h	/^    register_set* m_sp_out;$/;"	m	class:scheduler_unit	typeref:typename:register_set *
m_space_spec	cuda-sim/ptx_ir.h	/^   memory_space_t m_space_spec; $/;"	m	class:type_info_key	typeref:typename:memory_space_t
m_space_spec	cuda-sim/ptx_ir.h	/^   memory_space_t m_space_spec;$/;"	m	class:ptx_instruction	typeref:typename:memory_space_t
m_special_cache_config	gpgpu-sim/gpu-sim.h	/^   std::map<std::string, FuncCache> m_special_cache_config;$/;"	m	class:gpgpu_sim	typeref:typename:std::map<std::string,FuncCache>
m_src_op	cuda-sim/ptx_ir.h	/^   operand_info m_src_op;$/;"	m	class:arg_buffer_t	typeref:typename:operand_info
m_src_op	gpgpu-sim/shader.h	/^      op_t *m_src_op;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:op_t *
m_stack	abstract_hardware_model.h	/^    std::deque<simt_stack_entry> m_stack;$/;"	m	class:simt_stack	typeref:typename:std::deque<simt_stack_entry>
m_start	abstract_hardware_model.h	/^   const void *m_start;$/;"	m	struct:gpgpu_ptx_sim_arg	typeref:typename:const void *
m_start_PC	cuda-sim/ptx_ir.h	/^   unsigned m_start_PC;$/;"	m	class:function_info	typeref:typename:unsigned
m_stats	gpgpu-sim/dram.h	/^   struct memory_stats_t *m_stats;$/;"	m	class:dram_t	typeref:struct:memory_stats_t *
m_stats	gpgpu-sim/dram_sched.h	/^   memory_stats_t *m_stats;$/;"	m	class:frfcfs_scheduler	typeref:typename:memory_stats_t *
m_stats	gpgpu-sim/gpu-cache.h	/^    cache_stats m_stats;$/;"	m	class:baseline_cache	typeref:typename:cache_stats
m_stats	gpgpu-sim/gpu-cache.h	/^    cache_stats m_stats;$/;"	m	class:tex_cache	typeref:typename:cache_stats
m_stats	gpgpu-sim/gpu-cache.h	/^    std::vector< std::vector<unsigned> > m_stats;$/;"	m	class:cache_stats	typeref:typename:std::vector<std::vector<unsigned>>
m_stats	gpgpu-sim/l2cache.h	/^   class memory_stats_t *m_stats;$/;"	m	class:memory_partition_unit	typeref:class:memory_stats_t *
m_stats	gpgpu-sim/l2cache.h	/^   class memory_stats_t *m_stats;$/;"	m	class:memory_sub_partition	typeref:class:memory_stats_t *
m_stats	gpgpu-sim/shader.h	/^    shader_core_stats *m_stats;$/;"	m	class:scheduler_unit	typeref:typename:shader_core_stats *
m_stats	gpgpu-sim/shader.h	/^    shader_core_stats *m_stats;$/;"	m	class:shader_core_ctx	typeref:typename:shader_core_stats *
m_stats	gpgpu-sim/shader.h	/^    shader_core_stats *m_stats;$/;"	m	class:simt_core_cluster	typeref:typename:shader_core_stats *
m_stats	gpgpu-sim/shader.h	/^   shader_core_stats *m_stats; $/;"	m	class:ldst_unit	typeref:typename:shader_core_stats *
m_stats	gpgpu-sim/traffic_breakdown.h	/^   traffic_stat_t m_stats; $/;"	m	class:traffic_breakdown	typeref:typename:traffic_stat_t
m_status	gpgpu-sim/gpu-cache.h	/^    cache_block_state    m_status;$/;"	m	struct:cache_block_t	typeref:typename:cache_block_state
m_status	gpgpu-sim/mem_fetch.h	/^   enum mem_fetch_status m_status;$/;"	m	class:mem_fetch	typeref:enum:mem_fetch_status
m_status_change	gpgpu-sim/mem_fetch.h	/^   unsigned long long m_status_change;$/;"	m	class:mem_fetch	typeref:typename:unsigned long long
m_stores_outstanding	gpgpu-sim/shader.h	/^    unsigned m_stores_outstanding; \/\/ number of store requests sent but not yet acknowledged$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_stream	stream_manager.h	/^    struct CUstream_st *m_stream;$/;"	m	class:stream_operation	typeref:struct:CUstream_st *
m_stream_zero	stream_manager.h	/^    CUstream_st m_stream_zero;$/;"	m	class:stream_manager	typeref:typename:CUstream_st
m_streams	stream_manager.h	/^    std::list<CUstream_st *> m_streams;$/;"	m	class:stream_manager	typeref:typename:std::list<CUstream_st * >
m_stride	gpgpu-sim/histogram.h	/^   int m_stride;$/;"	m	class:linear_histogram	typeref:typename:int
m_sub_partition	gpgpu-sim/l2cache.h	/^   class memory_sub_partition **m_sub_partition; $/;"	m	class:memory_partition_unit	typeref:class:memory_sub_partition **
m_sum	gpgpu-sim/histogram.h	/^   signed long long int m_sum; \/\/ for calculating the average$/;"	m	class:binned_histogram	typeref:typename:signed long long int
m_supervised_warps	gpgpu-sim/shader.h	/^    std::vector< shd_warp_t* > m_supervised_warps;$/;"	m	class:scheduler_unit	typeref:typename:std::vector<shd_warp_t * >
m_surf_mem	abstract_hardware_model.h	/^    class memory_space *m_surf_mem;$/;"	m	class:gpgpu_t	typeref:class:memory_space *
m_symbol	stream_manager.h	/^    const char *m_symbol;$/;"	m	class:stream_operation	typeref:typename:const char *
m_symbol_table	cuda-sim/ptx_sim.h	/^   symbol_table  *m_symbol_table;$/;"	m	class:ptx_thread_info	typeref:typename:symbol_table *
m_symbol_table	cuda-sim/ptx_sim.h	/^   symbol_table  *m_symbol_table;$/;"	m	struct:stack_entry	typeref:typename:symbol_table *
m_symbolic	cuda-sim/ptx_ir.h	/^      const symbol*  m_symbolic;$/;"	m	union:operand_info::__anon2d7997b3010a	typeref:typename:const symbol *
m_symbols	cuda-sim/ptx_ir.h	/^   std::map<std::string, symbol *> m_symbols; \/\/map from name of register to pointers to the r/;"	m	class:symbol_table	typeref:typename:std::map<std::string,symbol * >
m_symtab	cuda-sim/ptx_ir.h	/^   symbol_table *m_symtab;$/;"	m	class:function_info	typeref:typename:symbol_table *
m_tag	gpgpu-sim/gpu-cache.h	/^    new_addr_type    m_tag;$/;"	m	struct:cache_block_t	typeref:typename:new_addr_type
m_tag_array	gpgpu-sim/gpu-cache.h	/^    tag_array*  m_tag_array;$/;"	m	class:baseline_cache	typeref:typename:tag_array *
m_tags	gpgpu-sim/gpu-cache.h	/^    tag_array               m_tags;$/;"	m	class:tex_cache	typeref:typename:tag_array
m_tail	gpgpu-sim/delayqueue.h	/^   fifo_data<T> *m_tail;$/;"	m	class:fifo_pipeline	typeref:typename:fifo_data<T> *
m_tail	gpgpu-sim/gpu-cache.h	/^        unsigned   m_tail; \/\/ oldest entry found here$/;"	m	class:tex_cache::fifo	typeref:typename:unsigned
m_tex_mem	abstract_hardware_model.h	/^    class memory_space *m_tex_mem;$/;"	m	class:gpgpu_t	typeref:class:memory_space *
m_tex_next	cuda-sim/ptx_ir.h	/^   unsigned m_tex_next;$/;"	m	class:symbol_table	typeref:typename:unsigned
m_texcache_linesize	abstract_hardware_model.h	/^    unsigned m_texcache_linesize;$/;"	m	class:gpgpu_functional_sim_config	typeref:typename:unsigned
m_texmode_unified	cuda-sim/ptx_sim.h	/^      bool     m_texmode_unified;$/;"	m	class:ptx_version	typeref:typename:bool
m_texref	abstract_hardware_model.h	/^    const struct textureReference *m_texref; $/;"	m	struct:textureReferenceAttr	typeref:typename:const struct textureReference *
m_thd_span	gpgpu-sim/stat-tool.h	/^   thread_insn_span m_thd_span;$/;"	m	class:thread_CFlocality	typeref:typename:thread_insn_span
m_thd_span_archive	gpgpu-sim/stat-tool.h	/^   std::list<thread_insn_span> m_thd_span_archive;$/;"	m	class:thread_CFlocality	typeref:typename:std::list<thread_insn_span>
m_thread	abstract_hardware_model.h	/^        class ptx_thread_info ** m_thread;$/;"	m	class:core_t	typeref:class:ptx_thread_info **
m_thread	debug.cc	/^   const ptx_thread_info *m_thread;$/;"	m	class:watchpoint_event	typeref:typename:const ptx_thread_info *	file:
m_threadState	gpgpu-sim/shader.h	/^    thread_ctx_t             *m_threadState;$/;"	m	class:shader_core_ctx	typeref:typename:thread_ctx_t *
m_thread_done	cuda-sim/ptx_sim.h	/^   bool m_thread_done;$/;"	m	class:ptx_thread_info	typeref:typename:bool
m_thread_pc	gpgpu-sim/stat-tool.h	/^   std::vector<address_type> m_thread_pc;$/;"	m	class:thread_CFlocality	typeref:typename:std::vector<address_type>
m_thread_uid	debug.h	/^   unsigned     m_thread_uid;$/;"	m	class:brk_pt	typeref:typename:unsigned
m_threads_in_cta	cuda-sim/ptx_sim.h	/^   std::set<ptx_thread_info*>    m_threads_in_cta;$/;"	m	class:ptx_cta_info	typeref:typename:std::set<ptx_thread_info * >
m_threads_that_have_exited	cuda-sim/ptx_sim.h	/^   std::set<ptx_thread_info*>  m_threads_that_have_exited;$/;"	m	class:ptx_cta_info	typeref:typename:std::set<ptx_thread_info * >
m_tid	cuda-sim/ptx_sim.h	/^   dim3   m_tid;$/;"	m	class:ptx_thread_info	typeref:typename:dim3
m_time	gpgpu-sim/gpu-cache.h	/^        unsigned m_time; \/\/ which cycle did this entry become ready?$/;"	m	struct:tex_cache::rob_entry	typeref:typename:unsigned
m_timestamp	gpgpu-sim/mem_fetch.h	/^   unsigned m_timestamp;  \/\/ set to gpu_sim_cycle+gpu_tot_sim_cycle at struct creation$/;"	m	class:mem_fetch	typeref:typename:unsigned
m_timestamp2	gpgpu-sim/mem_fetch.h	/^   unsigned m_timestamp2; \/\/ set to gpu_sim_cycle+gpu_tot_sim_cycle when pushed onto icnt to s/;"	m	class:mem_fetch	typeref:typename:unsigned
m_to_option	cuda-sim/ptx_ir.h	/^   bool                m_to_option;$/;"	m	class:ptx_instruction	typeref:typename:bool
m_total_cta_launched	gpgpu-sim/gpu-sim.h	/^   unsigned m_total_cta_launched;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned
m_tpc	gpgpu-sim/mem_fetch.h	/^   unsigned m_tpc;$/;"	m	class:mem_fetch	typeref:typename:unsigned
m_tpc	gpgpu-sim/shader.h	/^    unsigned m_tpc; \/\/ texture processor cluster id (aka, node id when using interconnect conc/;"	m	class:shader_core_ctx	typeref:typename:unsigned
m_tpc	gpgpu-sim/shader.h	/^   unsigned m_tpc;$/;"	m	class:ldst_unit	typeref:typename:unsigned
m_type	abstract_hardware_model.h	/^        stack_entry_type m_type;$/;"	m	struct:simt_stack::simt_stack_entry	typeref:typename:stack_entry_type
m_type	abstract_hardware_model.h	/^   enum _memory_space_t m_type;$/;"	m	class:memory_space_t	typeref:enum:_memory_space_t
m_type	abstract_hardware_model.h	/^   mem_access_type m_type;$/;"	m	class:mem_access_t	typeref:typename:mem_access_type
m_type	cuda-sim/ptx_ir.h	/^   const type_info *m_type;$/;"	m	class:symbol	typeref:typename:const type_info *
m_type	cuda-sim/ptx_ir.h	/^   enum operand_type m_type;$/;"	m	class:operand_info	typeref:enum:operand_type
m_type	cuda-sim/ptx_ir.h	/^   int m_type;$/;"	m	class:param_info	typeref:typename:int
m_type	gpgpu-sim/mem_fetch.h	/^   enum mf_type m_type;$/;"	m	class:mem_fetch	typeref:enum:mf_type
m_type	stream_manager.h	/^    stream_operation_type m_type;$/;"	m	class:stream_operation	typeref:typename:stream_operation_type
m_type_id	gpgpu-sim/gpu-cache.h	/^    int m_type_id; \/\/ what kind of cache is this (normal, texture, constant)$/;"	m	class:tag_array	typeref:typename:int
m_type_info	cuda-sim/ptx_ir.h	/^   type_info_key m_type_info;$/;"	m	class:type_info	typeref:typename:type_info_key
m_types	cuda-sim/ptx_ir.h	/^   std::map<type_info_key,type_info*,type_info_key_compare>  m_types;$/;"	m	class:symbol_table	typeref:typename:std::map<type_info_key,type_info *,type_info_key_compare>
m_uid	abstract_hardware_model.h	/^    unsigned m_uid;$/;"	m	class:warp_inst_t	typeref:typename:unsigned
m_uid	abstract_hardware_model.h	/^   unsigned      m_uid;$/;"	m	class:mem_access_t	typeref:typename:unsigned
m_uid	abstract_hardware_model.h	/^   unsigned m_uid;$/;"	m	class:kernel_info_t	typeref:typename:unsigned
m_uid	cuda-sim/ptx_ir.h	/^   unsigned          m_uid;$/;"	m	class:ptx_instruction	typeref:typename:unsigned
m_uid	cuda-sim/ptx_ir.h	/^   unsigned m_uid;$/;"	m	class:function_info	typeref:typename:unsigned
m_uid	cuda-sim/ptx_ir.h	/^   unsigned m_uid;$/;"	m	class:operand_info	typeref:typename:unsigned
m_uid	cuda-sim/ptx_ir.h	/^   unsigned m_uid;$/;"	m	class:symbol	typeref:typename:unsigned
m_uid	cuda-sim/ptx_sim.h	/^   unsigned long long         m_uid;$/;"	m	class:ptx_cta_info	typeref:typename:unsigned long long
m_uid	cuda-sim/ptx_sim.h	/^   unsigned m_uid;$/;"	m	class:ptx_thread_info	typeref:typename:unsigned
m_uid	stream_manager.h	/^    unsigned m_uid;$/;"	m	struct:CUstream_st	typeref:typename:unsigned
m_uid	stream_manager.h	/^   int m_uid;$/;"	m	class:CUevent_st	typeref:typename:int
m_uni	cuda-sim/ptx_ir.h	/^   bool                m_uni; \/\/if branch instruction, this evaluates to true for uniform bran/;"	m	class:ptx_instruction	typeref:typename:bool
m_unit	gpgpu-sim/l2cache.h	/^    memory_sub_partition *m_unit;$/;"	m	class:L2interface	typeref:typename:memory_sub_partition *
m_unsigned	cuda-sim/ptx_ir.h	/^      unsigned int    m_unsigned;$/;"	m	union:operand_info::__anon2d7997b3010a	typeref:typename:unsigned int
m_updates	stream_manager.h	/^   int m_updates;$/;"	m	class:CUevent_st	typeref:typename:int
m_valid	abstract_hardware_model.h	/^    bool m_valid;$/;"	m	struct:core_config	typeref:typename:bool
m_valid	cuda-sim/ptx_ir.h	/^   bool m_valid;$/;"	m	class:operand_info	typeref:typename:bool
m_valid	cuda-sim/ptx_ir.h	/^   bool m_valid;$/;"	m	class:param_info	typeref:typename:bool
m_valid	cuda-sim/ptx_sim.h	/^      bool     m_valid;$/;"	m	class:ptx_version	typeref:typename:bool
m_valid	cuda-sim/ptx_sim.h	/^   bool   m_valid;$/;"	m	class:ptx_thread_info	typeref:typename:bool
m_valid	cuda-sim/ptx_sim.h	/^   bool m_valid;$/;"	m	struct:stack_entry	typeref:typename:bool
m_valid	debug.h	/^   bool         m_valid;$/;"	m	class:brk_pt	typeref:typename:bool
m_valid	gpgpu-sim/gpu-cache.h	/^        bool m_valid;$/;"	m	struct:baseline_cache::extra_mf_fields	typeref:typename:bool
m_valid	gpgpu-sim/gpu-cache.h	/^        bool m_valid;$/;"	m	struct:tex_cache::data_block	typeref:typename:bool
m_valid	gpgpu-sim/gpu-cache.h	/^        bool m_valid;$/;"	m	struct:tex_cache::extra_mf_fields	typeref:typename:bool
m_valid	gpgpu-sim/gpu-cache.h	/^    bool m_valid;$/;"	m	class:cache_config	typeref:typename:bool
m_valid	gpgpu-sim/gpu-sim.h	/^	bool m_valid;$/;"	m	struct:power_config	typeref:typename:bool
m_valid	gpgpu-sim/gpu-sim.h	/^    bool m_valid;$/;"	m	class:gpgpu_sim_config	typeref:typename:bool
m_valid	gpgpu-sim/gpu-sim.h	/^   bool m_valid;$/;"	m	struct:memory_config	typeref:typename:bool
m_valid	gpgpu-sim/shader.h	/^       bool m_valid;$/;"	m	struct:shd_warp_t::ibuffer_entry	typeref:typename:bool
m_valid	gpgpu-sim/shader.h	/^      bool m_valid;$/;"	m	class:opndcoll_rfu_t::op_t	typeref:typename:bool
m_valid	gpgpu-sim/shader.h	/^    bool m_valid;$/;"	m	struct:ifetch_buffer_t	typeref:typename:bool
m_value	cuda-sim/ptx_ir.h	/^   param_t m_value;$/;"	m	class:param_info	typeref:typename:param_t
m_value	cuda-sim/ptx_ir.h	/^   } m_value;$/;"	m	class:operand_info	typeref:union:operand_info::__anon2d7997b3010a
m_value	debug.h	/^   unsigned     m_value;$/;"	m	class:brk_pt	typeref:typename:unsigned
m_value_set	cuda-sim/ptx_ir.h	/^   bool m_value_set;$/;"	m	class:param_info	typeref:typename:bool
m_variable	option_parser.cc	/^   T &m_variable;$/;"	m	class:OptionRegistry	typeref:typename:T &	file:
m_vdouble	cuda-sim/ptx_ir.h	/^      double          m_vdouble[4];$/;"	m	union:operand_info::__anon2d7997b3010a	typeref:typename:double[4]
m_vector	cuda-sim/ptx_ir.h	/^   bool m_vector;$/;"	m	class:operand_info	typeref:typename:bool
m_vector_spec	cuda-sim/ptx_ir.h	/^   int m_vector_spec;$/;"	m	class:ptx_instruction	typeref:typename:int
m_vector_spec	cuda-sim/ptx_ir.h	/^   int m_vector_spec;$/;"	m	class:type_info_key	typeref:typename:int
m_vector_symbolic	cuda-sim/ptx_ir.h	/^      const symbol**  m_vector_symbolic;$/;"	m	union:operand_info::__anon2d7997b3010a	typeref:typename:const symbol **
m_vfloat	cuda-sim/ptx_ir.h	/^      float           m_vfloat[4];$/;"	m	union:operand_info::__anon2d7997b3010a	typeref:typename:float[4]
m_vint	cuda-sim/ptx_ir.h	/^      int             m_vint[4];$/;"	m	union:operand_info::__anon2d7997b3010a	typeref:typename:int[4]
m_vote_mode	cuda-sim/ptx_ir.h	/^   enum vote_mode_t m_vote_mode;$/;"	m	class:ptx_instruction	typeref:enum:vote_mode_t
m_vunsigned	cuda-sim/ptx_ir.h	/^      unsigned int    m_vunsigned[4];$/;"	m	union:operand_info::__anon2d7997b3010a	typeref:typename:unsigned int[4]
m_wallclock	stream_manager.h	/^   time_t m_wallclock;$/;"	m	class:CUevent_st	typeref:typename:time_t
m_warp	gpgpu-sim/shader.h	/^      const warp_inst_t *m_warp;$/;"	m	class:opndcoll_rfu_t::op_t	typeref:typename:const warp_inst_t *
m_warp	gpgpu-sim/shader.h	/^      warp_inst_t  *m_warp;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:warp_inst_t *
m_warp	gpgpu-sim/shader.h	/^    std::vector<shd_warp_t>   m_warp;   \/\/ per warp information array$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<shd_warp_t>
m_warp	gpgpu-sim/shader.h	/^    std::vector<shd_warp_t>* m_warp;$/;"	m	class:scheduler_unit	typeref:typename:std::vector<shd_warp_t> *
m_warpAtBarrier	cuda-sim/cuda-sim.h	/^    bool* m_warpAtBarrier;$/;"	m	class:functionalCoreSim	typeref:typename:bool *
m_warp_active	gpgpu-sim/shader.h	/^   warp_set_t m_warp_active;$/;"	m	class:barrier_set_t	typeref:typename:warp_set_t
m_warp_active_mask	abstract_hardware_model.h	/^    active_mask_t m_warp_active_mask; \/\/ dynamic active mask for timing model (after predicati/;"	m	class:warp_inst_t	typeref:typename:active_mask_t
m_warp_at_barrier	gpgpu-sim/shader.h	/^   warp_set_t m_warp_at_barrier;$/;"	m	class:barrier_set_t	typeref:typename:warp_set_t
m_warp_count	abstract_hardware_model.h	/^        unsigned m_warp_count;$/;"	m	class:core_t	typeref:typename:unsigned
m_warp_id	abstract_hardware_model.h	/^    unsigned m_warp_id;$/;"	m	class:simt_stack	typeref:typename:unsigned
m_warp_id	abstract_hardware_model.h	/^    unsigned m_warp_id;$/;"	m	class:warp_inst_t	typeref:typename:unsigned
m_warp_id	gpgpu-sim/shader.h	/^      unsigned m_warp_id;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
m_warp_id	gpgpu-sim/shader.h	/^    unsigned m_warp_id;$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_warp_id	gpgpu-sim/shader.h	/^    unsigned m_warp_id;$/;"	m	struct:ifetch_buffer_t	typeref:typename:unsigned
m_warp_issued_mask	abstract_hardware_model.h	/^    active_mask_t m_warp_issued_mask; \/\/ active mask at issue (prior to predication test) -- f/;"	m	class:warp_inst_t	typeref:typename:active_mask_t
m_warp_mask	abstract_hardware_model.h	/^   active_mask_t m_warp_mask;$/;"	m	class:mem_access_t	typeref:typename:active_mask_t
m_warp_size	abstract_hardware_model.h	/^        unsigned m_warp_size;$/;"	m	class:core_t	typeref:typename:unsigned
m_warp_size	abstract_hardware_model.h	/^    unsigned m_warp_size;$/;"	m	class:simt_stack	typeref:typename:unsigned
m_warp_size	gpgpu-sim/shader.h	/^    unsigned m_warp_size;$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_warp_size	gpgpu-sim/shader.h	/^   unsigned m_warp_size;$/;"	m	class:barrier_set_t	typeref:typename:unsigned
m_warp_size	gpgpu-sim/shader.h	/^   unsigned m_warp_size;$/;"	m	class:opndcoll_rfu_t	typeref:typename:unsigned
m_watch	debug.h	/^   bool         m_watch;$/;"	m	class:brk_pt	typeref:typename:bool
m_watchpoints	cuda-sim/memory.h	/^   std::map<unsigned,mem_addr_t> m_watchpoints;$/;"	m	class:memory_space_impl	typeref:typename:std::map<unsigned,mem_addr_t>
m_wid	gpgpu-sim/mem_fetch.h	/^   unsigned m_wid;$/;"	m	class:mem_fetch	typeref:typename:unsigned
m_wide	cuda-sim/ptx_ir.h	/^   bool                m_wide;$/;"	m	class:ptx_instruction	typeref:typename:bool
m_wr_alloc_type	gpgpu-sim/gpu-cache.h	/^    mem_access_type m_wr_alloc_type; \/\/ Specifies type of write allocate request (e.g., L1 or /;"	m	class:data_cache	typeref:typename:mem_access_type
m_wrbk_type	gpgpu-sim/gpu-cache.h	/^    mem_access_type m_wrbk_type; \/\/ Specifies type of writeback request (e.g., L1 or L2)$/;"	m	class:data_cache	typeref:typename:mem_access_type
m_wrc	gpgpu-sim/shader.h	/^    Wrc *m_wrc;$/;"	m	class:shader_core_ctx	typeref:typename:Wrc *
m_wrc	gpgpu-sim/shader.h	/^    Wrc* m_wrc;$/;"	m	class:scheduler_unit	typeref:typename:Wrc *
m_write	abstract_hardware_model.h	/^   bool          m_write;$/;"	m	class:mem_access_t	typeref:typename:bool
m_write_alloc_policy	gpgpu-sim/gpu-cache.h	/^    write_allocate_policy_t m_write_alloc_policy;	\/\/ 'W' = Write allocate, 'N' = No write allo/;"	m	class:cache_config	typeref:typename:write_allocate_policy_t
m_write_policy	gpgpu-sim/gpu-cache.h	/^    enum write_policy_t m_write_policy;             \/\/ 'T' = write through, 'B' = write back, /;"	m	class:cache_config	typeref:enum:write_policy_t
m_write_regfile_acesses	gpgpu-sim/power_stat.h	/^    unsigned *m_write_regfile_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_write_regfile_acesses	gpgpu-sim/shader.h	/^    unsigned *m_write_regfile_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_writeback_arb	gpgpu-sim/shader.h	/^   unsigned m_writeback_arb; \/\/ round-robin arbiter for writeback contention between L1T, L1C,/;"	m	class:ldst_unit	typeref:typename:unsigned
m_wst	gpgpu-sim/shader.h	/^    WST *m_wst;$/;"	m	class:shader_core_ctx	typeref:typename:WST *
m_wst	gpgpu-sim/shader.h	/^    WST* m_wst;$/;"	m	class:scheduler_unit	typeref:typename:WST *
machine_bits	gpuwattch/XML_Parse.h	/^	int machine_bits;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
machine_bits	gpuwattch/XML_Parse.h	/^	int machine_bits;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
machine_type	gpuwattch/XML_Parse.h	/^	int machine_type;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
macro_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:BranchPredictor	typeref:typename:double
macro_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:Core	typeref:typename:double
macro_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:EXECU	typeref:typename:double
macro_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:InstFetchU	typeref:typename:double
macro_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:LoadStoreU	typeref:typename:double
macro_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:MemManU	typeref:typename:double
macro_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:RegFU	typeref:typename:double
macro_PR_overhead	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:SchedulerU	typeref:typename:double
macro_PR_overhead	gpuwattch/logic.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:UndiffCore	typeref:typename:double
macro_PR_overhead	gpuwattch/noc.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:NoC	typeref:typename:double
macro_layout_overhead	gpuwattch/cacti/parameter.h	/^  double macro_layout_overhead;$/;"	m	class:TechnologyParameter	typeref:typename:double
mad24_impl	cuda-sim/instructions.cc	/^void mad24_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f	typeref:typename:void
mad_def	cuda-sim/instructions.cc	/^void mad_def( const ptx_instruction *pI, ptx_thread_info *thread, bool use_carry ) $/;"	f	typeref:typename:void
mad_impl	cuda-sim/instructions.cc	/^void mad_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
made_read_mfs	gpgpu-sim/shader.h	/^    unsigned made_read_mfs;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
made_write_mfs	gpgpu-sim/shader.h	/^    unsigned made_write_mfs;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
madp_impl	cuda-sim/instructions.cc	/^void madp_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
main	cuda-sim/memory.cc	/^int main(int argc, char *argv[] )$/;"	f	typeref:typename:int
main	gpuwattch/cacti/main.cc	/^int main(int argc,char *argv[])$/;"	f	typeref:typename:int
main	gpuwattch/main.cc	/^int main(int argc,char *argv[])$/;"	f	typeref:typename:int
main	intersim2/main.cpp	/^int main( int argc, char **argv )$/;"	f	typeref:typename:int
main	intersim2/rng-double.c	/^int main()$/;"	f	typeref:typename:int
main	intersim2/rng.c	/^int main()$/;"	f	typeref:typename:int
main	intersim2/rng_double_wrapper.cpp	/^#define main /;"	d	file:
main	intersim2/rng_wrapper.cpp	/^#define main /;"	d	file:
main	option_parser.cc	/^int main(int argc, const char *argv[]) $/;"	f	typeref:typename:int
main_memory_access	gpuwattch/XML_Parse.h	/^	double main_memory_access;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
main_memory_read	gpuwattch/XML_Parse.h	/^	double main_memory_read;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
main_memory_write	gpuwattch/XML_Parse.h	/^	double main_memory_write;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
make_copy	cuda-sim/ptx_ir.h	/^   void make_copy( const arg_buffer_t &another )$/;"	f	class:arg_buffer_t	typeref:typename:void
make_memory_operand	cuda-sim/ptx_ir.h	/^   void make_memory_operand() { m_type = memory_t;}$/;"	f	class:operand_info	typeref:typename:void
map_t	cuda-sim/memory.h	/^   typedef mem_map<mem_addr_t,mem_storage<BSIZE> > map_t;$/;"	t	class:memory_space_impl	typeref:typename:mem_map<mem_addr_t,mem_storage<BSIZE>>
mark_ready	gpgpu-sim/gpu-cache.cc	/^void mshr_table::mark_ready( new_addr_type block_addr, bool &has_atomic ){$/;"	f	class:mshr_table	typeref:typename:void
mascar_scheduler	gpgpu-sim/shader.h	/^	mascar_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:mascar_scheduler
mascar_scheduler	gpgpu-sim/shader.h	/^class mascar_scheduler : public scheduler_unit {$/;"	c
mask_and	cuda-sim/ptx_sim.h	/^   void mask_and( unsigned ms, unsigned ls )$/;"	f	union:ptx_reg_t	typeref:typename:void
mask_or	cuda-sim/ptx_sim.h	/^   void mask_or( unsigned ms, unsigned ls )$/;"	f	union:ptx_reg_t	typeref:typename:void
mat	gpuwattch/cacti/bank.h	/^    Mat   mat;$/;"	m	class:Bank	typeref:typename:Mat
mat_height	gpuwattch/cacti/cacti_interface.h	/^  double mat_height;$/;"	m	class:mem_array	typeref:typename:double
mat_height	gpuwattch/cacti/cacti_interface.h	/^  double mat_height;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
mat_height	gpuwattch/cacti/htree2.h	/^    double mat_height;$/;"	m	class:Htree2	typeref:typename:double
mat_length	gpuwattch/cacti/cacti_interface.h	/^  double mat_length;$/;"	m	class:mem_array	typeref:typename:double
mat_width	gpuwattch/cacti/cacti_interface.h	/^  double mat_width;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
mat_width	gpuwattch/cacti/htree2.h	/^    double mat_width;$/;"	m	class:Htree2	typeref:typename:double
max	gpuwattch/gpgpu_sim_wrapper.h	/^	T max;$/;"	m	struct:avg_max_min_counters	typeref:typename:T
maxInputPort	intersim2/power/power_module.hpp	/^  double maxInputPort;$/;"	m	class:Power_Module	typeref:typename:double
maxOutputPort	intersim2/power/power_module.hpp	/^  double maxOutputPort;$/;"	m	class:Power_Module	typeref:typename:double
max_barriers_per_cta	gpgpu-sim/shader.h	/^    unsigned max_barriers_per_cta;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
max_conc_access2samerow	gpgpu-sim/mem_latency_stat.h	/^   unsigned int **max_conc_access2samerow; \/\/max_conc_access2samerow[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
max_concurrent_kernel	gpgpu-sim/gpu-sim.h	/^    unsigned max_concurrent_kernel;$/;"	m	class:gpgpu_sim_config	typeref:typename:unsigned
max_cta	gpgpu-sim/shader.cc	/^unsigned int shader_core_config::max_cta( const kernel_info_t &k ) const$/;"	f	class:shader_core_config	typeref:typename:unsigned int
max_cta	gpgpu-sim/shader.cc	/^unsigned simt_core_cluster::max_cta( const kernel_info_t &kernel )$/;"	f	class:simt_core_cluster	typeref:typename:unsigned
max_cta_per_core	gpgpu-sim/shader.h	/^    unsigned max_cta_per_core; \/\/Limit on number of concurrent CTAs in shader core$/;"	m	struct:shader_core_config	typeref:typename:unsigned
max_cyc	gpuwattch/cacti/router.h	/^    double cycle_time, max_cyc;$/;"	m	class:MCPAT_Router	typeref:typename:double
max_dq_latency	gpgpu-sim/mem_latency_stat.h	/^   unsigned max_dq_latency;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
max_icnt2mem_latency	gpgpu-sim/mem_latency_stat.h	/^   unsigned max_icnt2mem_latency;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
max_icnt2sh_latency	gpgpu-sim/mem_latency_stat.h	/^   unsigned max_icnt2sh_latency;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
max_impl	cuda-sim/instructions.cc	/^void max_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
max_mf_latency	gpgpu-sim/mem_latency_stat.h	/^   unsigned max_mf_latency;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
max_mrq_latency	gpgpu-sim/mem_latency_stat.h	/^   unsigned max_mrq_latency;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
max_mrqs	gpgpu-sim/dram.h	/^   unsigned int max_mrqs;$/;"	m	class:dram_t	typeref:typename:unsigned int
max_mrqs_temp	gpgpu-sim/dram.h	/^   unsigned int max_mrqs_temp;$/;"	m	class:dram_t	typeref:typename:unsigned int
max_servicetime2samerow	gpgpu-sim/mem_latency_stat.h	/^   unsigned int **max_servicetime2samerow; \/\/max_servicetime2samerow[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
max_sfu_latency	gpgpu-sim/shader.h	/^    unsigned max_sfu_latency;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
max_size	gpgpu-sim/stack.h	/^   int max_size;$/;"	m	struct:__anon97533a990108	typeref:typename:int
max_sp_latency	gpgpu-sim/shader.h	/^    unsigned max_sp_latency;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
max_unpipelined_link_delay	gpuwattch/cacti/htree2.h	/^    double max_unpipelined_link_delay;$/;"	m	class:Htree2	typeref:typename:double
max_unpipelined_link_delay	gpuwattch/interconnect.h	/^    double max_unpipelined_link_delay;$/;"	m	class:interconnect	typeref:typename:double
max_w_nmos_	gpuwattch/cacti/parameter.h	/^  double max_w_nmos_;$/;"	m	class:TechnologyParameter	typeref:typename:double
max_w_nmos_dec	gpuwattch/cacti/parameter.h	/^  double max_w_nmos_dec;$/;"	m	class:TechnologyParameter	typeref:typename:double
max_warps	gpgpu-sim/mem_latency_stat.h	/^   unsigned max_warps;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
max_warps_per_shader	gpgpu-sim/shader.h	/^    unsigned max_warps_per_shader; $/;"	m	struct:shader_core_config	typeref:typename:unsigned
maybeAddTxT	gpuwattch/xmlParser.cc	/^char XMLNode::maybeAddTxT(void *pa, XMLCSTR tokenPStr)$/;"	f	class:XMLNode	typeref:typename:char
mc	gpuwattch/XML_Parse.h	/^	system_mc mc;$/;"	m	struct:__anon6448b92c1208	typeref:typename:system_mc
mc	gpuwattch/processor.h	/^    MemoryController * mc;$/;"	m	class:Processor	typeref:typename:MemoryController *
mc_clock	gpuwattch/XML_Parse.h	/^	int mc_clock;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:int
mc_type	gpuwattch/memoryctrl.h	/^	enum MemoryCtrl_type mc_type;$/;"	m	class:MCBackend	typeref:enum:MemoryCtrl_type
mc_type	gpuwattch/memoryctrl.h	/^	enum MemoryCtrl_type mc_type;$/;"	m	class:MCFrontEnd	typeref:enum:MemoryCtrl_type
mc_type	gpuwattch/memoryctrl.h	/^	enum MemoryCtrl_type mc_type;$/;"	m	class:MCPHY	typeref:enum:MemoryCtrl_type
mc_type	gpuwattch/memoryctrl.h	/^	enum MemoryCtrl_type mc_type;$/;"	m	class:MemoryController	typeref:enum:MemoryCtrl_type
mcp	gpuwattch/memoryctrl.h	/^	MCParam  mcp;$/;"	m	class:MCFrontEnd	typeref:typename:MCParam
mcp	gpuwattch/memoryctrl.h	/^    MCParam  mcp;$/;"	m	class:MCBackend	typeref:typename:MCParam
mcp	gpuwattch/memoryctrl.h	/^    MCParam  mcp;$/;"	m	class:MCPHY	typeref:typename:MCParam
mcp	gpuwattch/memoryctrl.h	/^    MCParam  mcp;$/;"	m	class:MemoryController	typeref:typename:MCParam
mcpat_cycle	gpgpu-sim/power_interface.cc	/^void mcpat_cycle(const gpgpu_sim_config &config, const struct shader_core_config *shdr_config, c/;"	f	typeref:typename:void
mcpat_reset_perf_count	gpgpu-sim/power_interface.cc	/^void mcpat_reset_perf_count(class gpgpu_sim_wrapper *wrapper){$/;"	f	typeref:typename:void
mcs	gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor	typeref:typename:Component
mem	gpuwattch/XML_Parse.h	/^    system_mem mem;$/;"	m	struct:__anon6448b92c1208	typeref:typename:system_mem
mem2device	gpgpu-sim/shader.h	/^    unsigned mem2device(unsigned memid) const { return memid + n_simt_clusters; }$/;"	f	struct:shader_core_config	typeref:typename:unsigned
memAccesses	gpuwattch/basic_components.h	/^    int    memAccesses;$/;"	m	class:MCParam	typeref:typename:int
memBit	gpgpu-sim/warp_status.h	/^			unsigned char memBit:1,stallBit:1;$/;"	m	struct:WST::table_entry::__anona6602e20010a::__anona6602e200208	typeref:typename:unsigned char:1
memRank	gpuwattch/basic_components.h	/^    int    memRank;$/;"	m	class:MCParam	typeref:typename:int
mem_access_byte_mask_t	abstract_hardware_model.h	/^typedef std::bitset<MAX_MEMORY_ACCESS_SIZE> mem_access_byte_mask_t;$/;"	t	typeref:typename:std::bitset<MAX_MEMORY_ACCESS_SIZE>
mem_access_t	abstract_hardware_model.h	/^   mem_access_t( mem_access_type type, $/;"	f	class:mem_access_t
mem_access_t	abstract_hardware_model.h	/^   mem_access_t() { init(); }$/;"	f	class:mem_access_t
mem_access_t	abstract_hardware_model.h	/^class mem_access_t {$/;"	c
mem_access_type_stats	gpgpu-sim/mem_latency_stat.h	/^   unsigned ***mem_access_type_stats; \/\/ dram access type classification$/;"	m	class:memory_stats_t	typeref:typename:unsigned ***
mem_access_type_str	abstract_hardware_model.cc	/^const char * mem_access_type_str(enum mem_access_type access_type)$/;"	f	typeref:typename:const char *
mem_addr_t	cuda-sim/memory.h	/^typedef address_type mem_addr_t;$/;"	t	typeref:typename:address_type
mem_array	gpuwattch/cacti/cacti_interface.h	/^class mem_array$/;"	c
mem_fetch	gpgpu-sim/mem_fetch.cc	/^mem_fetch::mem_fetch( const mem_access_t &access, $/;"	f	class:mem_fetch
mem_fetch	gpgpu-sim/mem_fetch.h	/^class mem_fetch {$/;"	c
mem_fetch_allocator	abstract_hardware_model.h	/^class mem_fetch_allocator {$/;"	c
mem_fetch_interface	abstract_hardware_model.h	/^class mem_fetch_interface {$/;"	c
mem_instruction_stats	gpgpu-sim/gpu-sim.cc	/^void shader_core_ctx::mem_instruction_stats(const warp_inst_t &inst)$/;"	f	class:shader_core_ctx	typeref:typename:void
mem_map	cuda-sim/memory.h	/^#define mem_map /;"	d
mem_op	abstract_hardware_model.h	/^    mem_operation mem_op;        \/\/ code (uarch visible) identify memory type$/;"	m	class:inst_t	typeref:typename:mem_operation
mem_operation	abstract_hardware_model.h	/^typedef enum mem_operation_t mem_operation;$/;"	t	typeref:enum:mem_operation_t
mem_operation_t	abstract_hardware_model.h	/^enum mem_operation_t {$/;"	g
mem_power_stats_pod	gpgpu-sim/power_stat.h	/^struct mem_power_stats_pod{$/;"	s
mem_sat_flag	gpgpu-sim/gpu-cache.h	/^    bool mem_sat_flag;$/;"	m	class:read_only_cache	typeref:typename:bool
mem_stage_access_type	gpgpu-sim/stats.h	/^enum mem_stage_access_type {$/;"	g
mem_stage_stall_type	gpgpu-sim/stats.h	/^enum mem_stage_stall_type {$/;"	g
mem_storage	cuda-sim/memory.h	/^   mem_storage( const mem_storage &another )$/;"	f	class:mem_storage
mem_storage	cuda-sim/memory.h	/^   mem_storage()$/;"	f	class:mem_storage
mem_storage	cuda-sim/memory.h	/^template<unsigned BSIZE> class mem_storage {$/;"	c
mem_tech_node	gpuwattch/XML_Parse.h	/^	int mem_tech_node;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:int
mem_warp_parts	abstract_hardware_model.h	/^    unsigned mem_warp_parts;  $/;"	m	struct:core_config	typeref:typename:unsigned
membar_impl	cuda-sim/instructions.cc	/^void membar_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
membar_level	cuda-sim/ptx_ir.h	/^   int membar_level() const { return m_membar_level; }$/;"	f	class:ptx_instruction	typeref:typename:int
memcpy_from_gpu	cuda-sim/cuda-sim.cc	/^void gpgpu_t::memcpy_from_gpu( void *dst, size_t src_start_addr, size_t count )$/;"	f	class:gpgpu_t	typeref:typename:void
memcpy_gpu_to_gpu	cuda-sim/cuda-sim.cc	/^void gpgpu_t::memcpy_gpu_to_gpu( size_t dst, size_t src, size_t count )$/;"	f	class:gpgpu_t	typeref:typename:void
memcpy_to_gpu	cuda-sim/cuda-sim.cc	/^void gpgpu_t::memcpy_to_gpu( size_t dst_start_addr, const void *src, size_t count )$/;"	f	class:gpgpu_t	typeref:typename:void
memlatstat_done	gpgpu-sim/mem_latency_stat.cc	/^unsigned memory_stats_t::memlatstat_done(mem_fetch *mf )$/;"	f	class:memory_stats_t	typeref:typename:unsigned
memlatstat_dram_access	gpgpu-sim/mem_latency_stat.cc	/^void memory_stats_t::memlatstat_dram_access(mem_fetch *mf)$/;"	f	class:memory_stats_t	typeref:typename:void
memlatstat_icnt2mem_pop	gpgpu-sim/mem_latency_stat.cc	/^void memory_stats_t::memlatstat_icnt2mem_pop(mem_fetch *mf)$/;"	f	class:memory_stats_t	typeref:typename:void
memlatstat_lat_pw	gpgpu-sim/mem_latency_stat.cc	/^void memory_stats_t::memlatstat_lat_pw()$/;"	f	class:memory_stats_t	typeref:typename:void
memlatstat_print	gpgpu-sim/mem_latency_stat.cc	/^void memory_stats_t::memlatstat_print( unsigned n_mem, unsigned gpu_mem_n_bk )$/;"	f	class:memory_stats_t	typeref:typename:void
memlatstat_read_done	gpgpu-sim/mem_latency_stat.cc	/^void memory_stats_t::memlatstat_read_done(mem_fetch *mf)$/;"	f	class:memory_stats_t	typeref:typename:void
memory_accesses	gpuwattch/XML_Parse.h	/^	double memory_accesses;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:double
memory_accesses	gpuwattch/XML_Parse.h	/^	double memory_accesses;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
memory_channels_per_mc	gpuwattch/XML_Parse.h	/^	int memory_channels_per_mc;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:int
memory_coalescing_arch_13	abstract_hardware_model.cc	/^void warp_inst_t::memory_coalescing_arch_13( bool is_write, mem_access_type access_type )$/;"	f	class:warp_inst_t	typeref:typename:void
memory_coalescing_arch_13_atomic	abstract_hardware_model.cc	/^void warp_inst_t::memory_coalescing_arch_13_atomic( bool is_write, mem_access_type access_type )$/;"	f	class:warp_inst_t	typeref:typename:void
memory_coalescing_arch_13_reduce_and_send	abstract_hardware_model.cc	/^void warp_inst_t::memory_coalescing_arch_13_reduce_and_send( bool is_write, mem_access_type acce/;"	f	class:warp_inst_t	typeref:typename:void
memory_config	gpgpu-sim/gpu-sim.h	/^   memory_config()$/;"	f	struct:memory_config
memory_config	gpgpu-sim/gpu-sim.h	/^struct memory_config {$/;"	s
memory_cycle	gpgpu-sim/shader.cc	/^bool ldst_unit::memory_cycle( warp_inst_t &inst, mem_stage_stall_type &stall_reason, mem_stage_a/;"	f	class:ldst_unit	typeref:typename:bool
memory_h_INCLUDED	cuda-sim/memory.h	/^#define memory_h_INCLUDED$/;"	d
memory_load	abstract_hardware_model.h	/^	memory_load,$/;"	e	enum:_memory_op_t
memory_op	abstract_hardware_model.h	/^    _memory_op_t memory_op; \/\/ memory_op used by ptxplus $/;"	m	class:inst_t	typeref:typename:_memory_op_t
memory_operand	cuda-sim/ptx.y	/^memory_operand : LEFT_SQUARE_BRACKET address_expression RIGHT_SQUARE_BRACKET { add_memory_operan/;"	l
memory_partition_unit	gpgpu-sim/l2cache.cc	/^memory_partition_unit::memory_partition_unit( unsigned partition_id, $/;"	f	class:memory_partition_unit
memory_partition_unit	gpgpu-sim/l2cache.h	/^class memory_partition_unit$/;"	c
memory_ports	gpuwattch/XML_Parse.h	/^	int memory_ports;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
memory_reads	gpuwattch/XML_Parse.h	/^	double memory_reads;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:double
memory_reads	gpuwattch/XML_Parse.h	/^	double memory_reads;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
memory_ready_warps	gpgpu-sim/shader.h	/^    std::vector< shd_warp_t* > memory_ready_warps;$/;"	m	class:scheduler_unit	typeref:typename:std::vector<shd_warp_t * >
memory_saturation_flag	gpgpu-sim/gpu-cache.h	/^      bool memory_saturation_flag;$/;"	m	class:l1_cache	typeref:typename:bool
memory_saturation_flag	gpgpu-sim/shader.h	/^   bool memory_saturation_flag;$/;"	m	class:ldst_unit	typeref:typename:bool
memory_saturation_flag	gpgpu-sim/wrc.h	/^		bool memory_saturation_flag;$/;"	m	class:Wrc	typeref:typename:bool
memory_space	cuda-sim/memory.h	/^class memory_space$/;"	c
memory_space_impl	cuda-sim/memory.cc	/^template class memory_space_impl<16*1024>;$/;"	v	typeref:typename:class
memory_space_impl	cuda-sim/memory.cc	/^template class memory_space_impl<32>;$/;"	v	typeref:typename:class
memory_space_impl	cuda-sim/memory.cc	/^template class memory_space_impl<64>;$/;"	v	typeref:typename:class
memory_space_impl	cuda-sim/memory.cc	/^template class memory_space_impl<8192>;$/;"	v	typeref:typename:class
memory_space_impl	cuda-sim/memory.cc	/^template<unsigned BSIZE> memory_space_impl<BSIZE>::memory_space_impl( std::string name, unsigned/;"	f	class:memory_space_impl
memory_space_impl	cuda-sim/memory.h	/^template<unsigned BSIZE> class memory_space_impl : public memory_space {$/;"	c
memory_space_t	abstract_hardware_model.h	/^   memory_space_t( const enum _memory_space_t &from ) { m_type = from; m_bank = 0; }$/;"	f	class:memory_space_t
memory_space_t	abstract_hardware_model.h	/^   memory_space_t() { m_type = undefined_space; m_bank=0; }$/;"	f	class:memory_space_t
memory_space_t	abstract_hardware_model.h	/^class memory_space_t {$/;"	c
memory_stats_t	gpgpu-sim/mem_latency_stat.cc	/^memory_stats_t::memory_stats_t( unsigned n_shader, const struct shader_core_config *shader_confi/;"	f	class:memory_stats_t
memory_stats_t	gpgpu-sim/mem_latency_stat.h	/^class memory_stats_t {$/;"	c
memory_store	abstract_hardware_model.h	/^	memory_store$/;"	e	enum:_memory_op_t
memory_sub_partition	gpgpu-sim/l2cache.cc	/^memory_sub_partition::memory_sub_partition( unsigned sub_partition_id, $/;"	f	class:memory_sub_partition
memory_sub_partition	gpgpu-sim/l2cache.h	/^class memory_sub_partition$/;"	c
memory_t	cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
memory_writes	gpuwattch/XML_Parse.h	/^	double memory_writes;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:double
memory_writes	gpuwattch/XML_Parse.h	/^	double memory_writes;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
memreqaddr	abstract_hardware_model.h	/^        new_addr_type memreqaddr[MAX_ACCESSES_PER_INSN_PER_THREAD]; \/\/ effective address, upto/;"	m	struct:warp_inst_t::per_thread_info	typeref:typename:new_addr_type[]
merged_dir	gpuwattch/XML_Parse.h	/^	bool   merged_dir;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:bool
merged_dir	gpuwattch/XML_Parse.h	/^	bool   merged_dir;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:bool
metric_trace_file	gpuwattch/gpgpu_sim_wrapper.h	/^    gzFile metric_trace_file;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:gzFile
mf_lat_pw_table	gpgpu-sim/mem_latency_stat.h	/^   unsigned mf_lat_pw_table[32]; \/\/table storing values of mf latency Per Window$/;"	m	class:memory_stats_t	typeref:typename:unsigned[32]
mf_lat_table	gpgpu-sim/mem_latency_stat.h	/^   unsigned mf_lat_table[32];$/;"	m	class:memory_stats_t	typeref:typename:unsigned[32]
mf_max_lat_table	gpgpu-sim/mem_latency_stat.h	/^   unsigned ** mf_max_lat_table; \/\/mf latency sums[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned **
mf_num_lat_pw	gpgpu-sim/mem_latency_stat.h	/^   unsigned mf_num_lat_pw;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
mf_packet_size	gpgpu-sim/traffic_breakdown.h	/^   typedef unsigned int mf_packet_size; $/;"	t	class:traffic_breakdown	typeref:typename:unsigned int
mf_packet_type	gpgpu-sim/traffic_breakdown.h	/^   typedef std::string mf_packet_type;  \/\/ use string so that it remains extensible $/;"	t	class:traffic_breakdown	typeref:typename:std::string
mf_tot_lat_pw	gpgpu-sim/mem_latency_stat.h	/^   unsigned mf_tot_lat_pw; \/\/total latency summed up per window. divide by mf_num_lat_pw to ob/;"	m	class:memory_stats_t	typeref:typename:unsigned
mf_total_lat	gpgpu-sim/mem_latency_stat.h	/^   unsigned long long int mf_total_lat;$/;"	m	class:memory_stats_t	typeref:typename:unsigned long long int
mf_total_lat_table	gpgpu-sim/mem_latency_stat.h	/^   unsigned long long int ** mf_total_lat_table; \/\/mf latency sums[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned long long int **
mf_type	gpgpu-sim/mem_fetch.h	/^enum mf_type {$/;"	g
micro_opcode_length	gpuwattch/basic_components.h	/^    int  perThreadState, globalCheckpoint, instruction_length, pc_width, opcode_length, micro_op/;"	m	class:CoreDynParam	typeref:typename:int
micro_opcode_width	gpuwattch/XML_Parse.h	/^	int micro_opcode_width;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
miller_value	gpuwattch/cacti/parameter.h	/^    double miller_value;$/;"	m	class:TechnologyParameter::InterconnectType	typeref:typename:double
min	gpuwattch/gpgpu_sim_wrapper.h	/^	T min;$/;"	m	struct:avg_max_min_counters	typeref:typename:T
min3	gpgpu-sim/gpu-misc.h	/^#define min3(/;"	d
min_adapt_mesh	intersim2/routefunc.cpp	/^void min_adapt_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool in/;"	f	typeref:typename:void
min_adapt_torus	intersim2/routefunc.cpp	/^void min_adapt_torus( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool i/;"	f	typeref:typename:void
min_anynet	intersim2/networks/anynet.cpp	/^void min_anynet( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
min_area	gpuwattch/cacti/Ucache.h	/^    double min_area;$/;"	m	class:min_values_t	typeref:typename:double
min_cyc	gpuwattch/cacti/Ucache.h	/^    double min_cyc;$/;"	m	class:min_values_t	typeref:typename:double
min_delay	gpuwattch/cacti/Ucache.h	/^    double min_delay;$/;"	m	class:min_values_t	typeref:typename:double
min_dragonflynew	intersim2/networks/dragonfly.cpp	/^void min_dragonflynew( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
min_dyn	gpuwattch/cacti/Ucache.h	/^    double min_dyn;$/;"	m	class:min_values_t	typeref:typename:double
min_flatfly	intersim2/networks/flatfly_onchip.cpp	/^void min_flatfly( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
min_impl	cuda-sim/instructions.cc	/^void min_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
min_leakage	gpuwattch/cacti/Ucache.h	/^    double min_leakage;$/;"	m	class:min_values_t	typeref:typename:double
min_number_gates	gpuwattch/cacti/decoder.h	/^  int    min_number_gates;$/;"	m	class:Driver	typeref:typename:int
min_number_gates	gpuwattch/cacti/decoder.h	/^  int min_number_gates;$/;"	m	class:PredecBlkDrv	typeref:typename:int
min_number_gates_L1	gpuwattch/cacti/decoder.h	/^  int min_number_gates_L1;$/;"	m	class:PredecBlk	typeref:typename:int
min_number_gates_L2	gpuwattch/cacti/decoder.h	/^  int min_number_gates_L2;$/;"	m	class:PredecBlk	typeref:typename:int
min_ports	gpuwattch/basic_components.h	/^    int    input_ports, output_ports, min_ports, global_linked_ports;$/;"	m	class:NoCParam	typeref:typename:int
min_snap_shot_interval	gpgpu-sim/stat-tool.cc	/^static unsigned long long  min_snap_shot_interval = 0;$/;"	v	typeref:typename:unsigned long long	file:
min_values_t	gpuwattch/cacti/Ucache.h	/^    min_values_t() : min_delay(BIGNUM), min_dyn(BIGNUM), min_leakage(BIGNUM), min_area(BIGNUM), /;"	f	class:min_values_t
min_values_t	gpuwattch/cacti/Ucache.h	/^class min_values_t$/;"	c
min_w_nmos	gpuwattch/cacti/htree2.h	/^    double min_w_nmos;$/;"	m	class:Htree2	typeref:typename:double
min_w_nmos	gpuwattch/interconnect.h	/^    double min_w_nmos;$/;"	m	class:interconnect	typeref:typename:double
min_w_nmos_	gpuwattch/cacti/parameter.h	/^  double min_w_nmos_;$/;"	m	class:TechnologyParameter	typeref:typename:double
min_w_pmos	gpuwattch/cacti/arbiter.h	/^    double min_w_pmos, Vdd;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
min_w_pmos	gpuwattch/cacti/crossbar.h	/^    double min_w_pmos, Vdd;$/;"	m	class:Crossbar	typeref:typename:double
min_w_pmos	gpuwattch/cacti/highradix.h	/^    double min_w_pmos;$/;"	m	class:HighRadix	typeref:typename:double
min_w_pmos	gpuwattch/cacti/htree2.h	/^    double min_w_pmos;$/;"	m	class:Htree2	typeref:typename:double
min_w_pmos	gpuwattch/cacti/router.h	/^    double min_w_pmos;$/;"	m	class:MCPAT_Router	typeref:typename:double
min_w_pmos	gpuwattch/cacti/wire.h	/^    double min_w_pmos;$/;"	m	class:Wire	typeref:typename:double
min_w_pmos	gpuwattch/interconnect.h	/^    double min_w_pmos;$/;"	m	class:interconnect	typeref:typename:double
miss	gpuwattch/basic_components.h	/^    double miss;$/;"	m	class:statsComponents	typeref:typename:double
miss_buffer_access	gpuwattch/XML_Parse.h	/^	double miss_buffer_access;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
miss_buffer_access	gpuwattch/XML_Parse.h	/^	double miss_buffer_access;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
miss_buffer_accesses	gpuwattch/XML_Parse.h	/^	double miss_buffer_accesses;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
miss_buffer_accesses	gpuwattch/XML_Parse.h	/^	double miss_buffer_accesses;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
miss_queue_full	gpgpu-sim/gpu-cache.h	/^    bool miss_queue_full(unsigned num_miss){$/;"	f	class:baseline_cache	typeref:typename:bool
miss_queue_size	gpgpu-sim/gpu-cache.h	/^    bool miss_queue_size() const{$/;"	f	class:baseline_cache	typeref:typename:bool
miss_queue_size_reset	gpgpu-sim/gpu-cache.h	/^    bool miss_queue_size_reset() const{$/;"	f	class:baseline_cache	typeref:typename:bool
missb	gpuwattch/array.h	/^  ArrayST* missb;$/;"	m	class:InstCache	typeref:typename:ArrayST *
missb_size	gpuwattch/basic_components.h	/^    int missb_size, fu_size, prefetchb_size, wbb_size;$/;"	m	class:CacheDynParam	typeref:typename:int
misses	gpgpu-sim/gpu-cache.h	/^    unsigned misses;$/;"	m	struct:cache_sub_stats	typeref:typename:unsigned
ml_precharge_drv	gpuwattch/cacti/mat.h	/^    Driver * ml_precharge_drv;\/\/matchline prechange driver$/;"	m	class:Mat	typeref:typename:Driver *
ml_to_ram_wl_drv	gpuwattch/cacti/mat.h	/^    Driver * ml_to_ram_wl_drv;\/\/search line data driver$/;"	m	class:Mat	typeref:typename:Driver *
mmin	gpuwattch/xmlParser.cc	/^inline int mmin( const int t1, const int t2 ) { return t1 < t2 ? t1 : t2; }$/;"	f	typeref:typename:int
mmu	gpuwattch/core.h	/^	MemManU    * mmu;$/;"	m	class:Core	typeref:typename:MemManU *
mod_diff	intersim2/rng.c	/^#define mod_diff(/;"	d	file:
mod_sum	intersim2/rng-double.c	/^#define mod_sum(/;"	d	file:
model	gpgpu-sim/shader.h	/^    enum divergence_support_t model;$/;"	m	struct:shader_core_config	typeref:enum:divergence_support_t
model	gpuwattch/logic.h	/^	int    model;$/;"	m	class:DFFCell	typeref:typename:int
modifyBits	gpgpu-sim/warp_status.cc	/^	void WST::modifyBits (bool bitValue, unsigned warpId) {$/;"	f	class:WST	typeref:typename:void
more_threads_in_cta	abstract_hardware_model.h	/^   bool more_threads_in_cta() const $/;"	f	class:kernel_info_t	typeref:typename:bool
mov_impl	cuda-sim/instructions.cc	/^void mov_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
move_in	abstract_hardware_model.h	/^	void move_in( warp_inst_t *&src ){$/;"	f	class:register_set	typeref:typename:void
move_out_to	abstract_hardware_model.h	/^	void move_out_to( warp_inst_t *&dest ){$/;"	f	class:register_set	typeref:typename:void
move_warp	abstract_hardware_model.cc	/^void move_warp( warp_inst_t *&dst, warp_inst_t *&src )$/;"	f	typeref:typename:void
mrq	gpgpu-sim/dram.h	/^   dram_req_t *mrq;$/;"	m	struct:bank_t	typeref:typename:dram_req_t *
mrq_lat_table	gpgpu-sim/mem_latency_stat.h	/^   unsigned mrq_lat_table[32];$/;"	m	class:memory_stats_t	typeref:typename:unsigned[32]
mrqq	gpgpu-sim/dram.h	/^   fifo_pipeline<dram_req_t> *mrqq;$/;"	m	class:dram_t	typeref:typename:fifo_pipeline<dram_req_t> *
mrqq_Dist	gpgpu-sim/dram.h	/^   class Stats* mrqq_Dist; \/\/memory request queue inside DRAM  $/;"	m	class:dram_t	typeref:class:Stats *
ms	cuda-sim/ptx_sim.h	/^      unsigned ms;$/;"	m	struct:ptx_reg_t::__anondd5d98a10108	typeref:typename:unsigned
mshr_config_t	gpgpu-sim/gpu-cache.h	/^enum mshr_config_t {$/;"	g
mshr_entry	gpgpu-sim/gpu-cache.h	/^        mshr_entry() : m_has_atomic(false) { }$/;"	f	struct:mshr_table::mshr_entry
mshr_entry	gpgpu-sim/gpu-cache.h	/^    struct mshr_entry {$/;"	s	class:mshr_table
mshr_queue_size	gpgpu-sim/gpu-cache.h	/^    bool mshr_queue_size() const{$/;"	f	class:baseline_cache	typeref:typename:bool
mshr_queue_size_reset	gpgpu-sim/gpu-cache.h	/^    bool mshr_queue_size_reset() const{$/;"	f	class:baseline_cache	typeref:typename:bool
mshr_table	gpgpu-sim/gpu-cache.h	/^    mshr_table( unsigned num_entries, unsigned max_merged )$/;"	f	class:mshr_table
mshr_table	gpgpu-sim/gpu-cache.h	/^class mshr_table {$/;"	c
mul	gpuwattch/core.h	/^    FunctionalUnit * mul;$/;"	m	class:EXECU	typeref:typename:FunctionalUnit *
mul24_impl	cuda-sim/instructions.cc	/^void mul24_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
mul_accesses	gpuwattch/XML_Parse.h	/^	double mul_accesses;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
mul_impl	cuda-sim/instructions.cc	/^void mul_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
multisubbank_interleave_cycle_time	gpuwattch/cacti/cacti_interface.h	/^  double multisubbank_interleave_cycle_time;$/;"	m	class:mem_array	typeref:typename:double
multisubbank_interleave_cycle_time	gpuwattch/cacti/cacti_interface.h	/^  double multisubbank_interleave_cycle_time;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
multisubbank_interleave_cycle_time	gpuwattch/cacti/uca.h	/^    double multisubbank_interleave_cycle_time;$/;"	m	class:UCA	typeref:typename:double
multithreaded	gpuwattch/basic_components.h	/^    bool regWindowing,multithreaded;$/;"	m	class:CoreDynParam	typeref:typename:bool
myFree	gpuwattch/xmlParser.cc	/^static inline void myFree(void *p) { if (p) free(p); }$/;"	f	typeref:typename:void	file:
myIsTextWideChar	gpuwattch/xmlParser.cc	/^    char myIsTextWideChar(const void *b, int len) \/\/ inspired by the Wine API: RtlIsTextUnicod/;"	f	typeref:typename:char
myIsTextWideChar	gpuwattch/xmlParser.cc	/^    char myIsTextWideChar(const void *b,int l) { return (char)IsTextUnicode((CONST LPVOID)b,l,NU/;"	f	typeref:typename:char
myIsTextWideChar	gpuwattch/xmlParser.cc	/^char myIsTextWideChar(const void *b, int len) { return FALSE; }$/;"	f	typeref:typename:char
myMultiByteToWideChar	gpuwattch/xmlParser.cc	/^        wchar_t *myMultiByteToWideChar(const char *s, XMLNode::XMLCharEncoding ce)$/;"	f	typeref:typename:wchar_t *
myRealloc	gpuwattch/xmlParser.cc	/^static inline void *myRealloc(void *p, int newsize, int memInc, int sizeofElem)$/;"	f	typeref:typename:void *	file:
myTagCompare	gpuwattch/xmlParser.cc	/^char myTagCompare(XMLCSTR cclose, XMLCSTR copen)$/;"	f	typeref:typename:char
myWideCharToMultiByte	gpuwattch/xmlParser.cc	/^        char *myWideCharToMultiByte(const wchar_t *s) { return NULL; }$/;"	f	typeref:typename:char *
myWideCharToMultiByte	gpuwattch/xmlParser.cc	/^        char *myWideCharToMultiByte(const wchar_t *s)$/;"	f	typeref:typename:char *
my_abs	cuda-sim/instructions.cc	/^#define my_abs(/;"	d	file:
my_cuda_printf	cuda-sim/cuda_device_printf.cc	/^void my_cuda_printf(const char *fmtstr,const char *arg_list)$/;"	f	typeref:typename:void
my_time_vector	gpgpu-sim/visualizer.cc	/^   my_time_vector(int ld_size,int st_size){$/;"	f	class:my_time_vector	file:
my_time_vector	gpgpu-sim/visualizer.cc	/^class my_time_vector {$/;"	c	file:
mymax	cuda-sim/ptx_parser.cc	/^#define mymax(/;"	d	file:
nAttribute	gpuwattch/xmlParser.cc	/^int XMLNode::nAttribute()  const { if (!d) return 0;    return d->nAttribute; }$/;"	f	class:XMLNode	typeref:typename:int
nAttribute	gpuwattch/xmlParser.h	/^                                 nAttribute;      \/\/ Number of attributes$/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:typename:int
nChild	gpuwattch/xmlParser.h	/^          int                    nChild,          \/\/ Number of child nodes$/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:typename:int
nChildNode	gpuwattch/xmlParser.cc	/^int XMLNode::nChildNode()  const { if (!d) return 0;    return d->nChild;     }$/;"	f	class:XMLNode	typeref:typename:int
nChildNode	gpuwattch/xmlParser.cc	/^int XMLNode::nChildNode(XMLCSTR name) const$/;"	f	class:XMLNode	typeref:typename:int
nClear	gpuwattch/xmlParser.cc	/^int XMLNode::nClear()      const { if (!d) return 0;    return d->nClear;     }$/;"	f	class:XMLNode	typeref:typename:int
nClear	gpuwattch/xmlParser.h	/^                                 nClear,          \/\/ Number of Clear fields (comments)$/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:typename:int
nColumn	gpuwattch/xmlParser.h	/^    int  nLine,nColumn;$/;"	m	struct:XMLResults	typeref:typename:int
nElement	gpuwattch/xmlParser.cc	/^int XMLNode::nElement()    const { if (!d) return 0;    return d->nAttribute+d->nChild+d->nText+/;"	f	class:XMLNode	typeref:typename:int
nFirst	gpuwattch/xmlParser.cc	/^    int                    nFirst;$/;"	m	struct:XML	typeref:typename:int	file:
nIndex	gpuwattch/xmlParser.cc	/^    int                    nIndex,nIndexMissigEndTag;$/;"	m	struct:XML	typeref:typename:int	file:
nIndexMissigEndTag	gpuwattch/xmlParser.cc	/^    int                    nIndex,nIndexMissigEndTag;$/;"	m	struct:XML	typeref:typename:int	file:
nLine	gpuwattch/xmlParser.h	/^    int  nLine,nColumn;$/;"	m	struct:XMLResults	typeref:typename:int
nText	gpuwattch/xmlParser.cc	/^int XMLNode::nText()       const { if (!d) return 0;    return d->nText;      }$/;"	f	class:XMLNode	typeref:typename:int
nText	gpuwattch/xmlParser.h	/^                                 nText,           \/\/ Number of text fields$/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:typename:int
n_access	gpgpu-sim/dram.h	/^   unsigned int n_access;$/;"	m	struct:bank_t	typeref:typename:unsigned int
n_act	gpgpu-sim/dram.h	/^   unsigned int n_act;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_act	gpgpu-sim/power_stat.h	/^    unsigned *n_act[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_act_partial	gpgpu-sim/dram.h	/^   unsigned int n_act_partial; $/;"	m	class:dram_t	typeref:typename:unsigned int
n_activity	gpgpu-sim/dram.h	/^   unsigned int n_activity;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_activity	gpgpu-sim/power_stat.h	/^    unsigned *n_activity[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_activity_partial	gpgpu-sim/dram.h	/^   unsigned int n_activity_partial;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_clock	gpuwattch/logic.h	/^	int    n_clock;$/;"	m	class:DFFCell	typeref:typename:int
n_cmd	gpgpu-sim/dram.h	/^   unsigned int n_cmd;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_cmd	gpgpu-sim/power_stat.h	/^    unsigned *n_cmd[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_cmd_partial	gpgpu-sim/dram.h	/^   unsigned int n_cmd_partial;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_completed	gpgpu-sim/shader.h	/^    unsigned n_completed;          \/\/ number of threads in warp completed$/;"	m	class:shd_warp_t	typeref:typename:unsigned
n_idle	gpgpu-sim/dram.h	/^   unsigned int n_idle;$/;"	m	struct:bank_t	typeref:typename:unsigned int
n_inp	gpuwattch/cacti/crossbar.h	/^    double n_inp, n_out;$/;"	m	class:Crossbar	typeref:typename:double
n_insn	gpgpu-sim/shader.h	/^   unsigned n_insn;$/;"	m	class:thread_ctx_t	typeref:typename:unsigned
n_insn_ac	gpgpu-sim/shader.h	/^   unsigned n_insn_ac;$/;"	m	class:thread_ctx_t	typeref:typename:unsigned
n_keep_0	gpuwattch/logic.h	/^	int    n_keep_0;$/;"	m	class:DFFCell	typeref:typename:int
n_keep_1	gpuwattch/logic.h	/^	int    n_keep_1;$/;"	m	class:DFFCell	typeref:typename:int
n_l1_access_ac	gpgpu-sim/shader.h	/^   unsigned n_l1_access_ac; $/;"	m	class:thread_ctx_t	typeref:typename:unsigned
n_l1_mis_ac	gpgpu-sim/shader.h	/^   unsigned n_l1_mis_ac;$/;"	m	class:thread_ctx_t	typeref:typename:unsigned
n_l1_mrghit_ac	gpgpu-sim/shader.h	/^   unsigned n_l1_mrghit_ac;$/;"	m	class:thread_ctx_t	typeref:typename:unsigned
n_mem_to_simt	gpgpu-sim/power_stat.h	/^    long *n_mem_to_simt[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:long * []
n_mem_to_simt	gpgpu-sim/shader.h	/^    long *n_mem_to_simt;$/;"	m	struct:shader_core_stats_pod	typeref:typename:long *
n_nop	gpgpu-sim/dram.h	/^   unsigned int n_nop;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_nop	gpgpu-sim/power_stat.h	/^    unsigned *n_nop[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_nop_partial	gpgpu-sim/dram.h	/^   unsigned int n_nop_partial; $/;"	m	class:dram_t	typeref:typename:unsigned int
n_out	gpuwattch/cacti/crossbar.h	/^    double n_inp, n_out;$/;"	m	class:Crossbar	typeref:typename:double
n_pre	gpgpu-sim/dram.h	/^   unsigned int n_pre;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_pre	gpgpu-sim/power_stat.h	/^    unsigned *n_pre[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_pre_partial	gpgpu-sim/dram.h	/^   unsigned int n_pre_partial; $/;"	m	class:dram_t	typeref:typename:unsigned int
n_rd	gpgpu-sim/dram.h	/^   unsigned int n_rd;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_rd	gpgpu-sim/power_stat.h	/^    unsigned *n_rd[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_regfile_gating_group	gpgpu-sim/shader.h	/^    unsigned n_regfile_gating_group;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
n_req	gpgpu-sim/dram.h	/^   unsigned int n_req;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_req	gpgpu-sim/power_stat.h	/^    unsigned *n_req[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_req_partial	gpgpu-sim/dram.h	/^   unsigned int n_req_partial;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_simt_clusters	gpgpu-sim/shader.h	/^    unsigned n_simt_clusters;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
n_simt_cores_per_cluster	gpgpu-sim/shader.h	/^    unsigned n_simt_cores_per_cluster;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
n_simt_ejection_buffer_size	gpgpu-sim/shader.h	/^    unsigned n_simt_ejection_buffer_size;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
n_simt_to_mem	gpgpu-sim/power_stat.h	/^    long *n_simt_to_mem[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:long * []
n_simt_to_mem	gpgpu-sim/shader.h	/^    long *n_simt_to_mem; \/\/ Interconnect power stats$/;"	m	struct:shader_core_stats_pod	typeref:typename:long *
n_switch	gpuwattch/logic.h	/^	int    n_switch;$/;"	m	class:DFFCell	typeref:typename:int
n_thread_CFloggers	gpgpu-sim/stat-tool.cc	/^static int n_thread_CFloggers = 0;$/;"	v	typeref:typename:int	file:
n_thread_per_shader	gpgpu-sim/shader.h	/^    unsigned n_thread_per_shader;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
n_to_p_eff_curr_drv_ratio	gpuwattch/cacti/parameter.h	/^    double n_to_p_eff_curr_drv_ratio;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
n_wr	gpgpu-sim/dram.h	/^   unsigned int n_wr;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_wr	gpgpu-sim/power_stat.h	/^    unsigned *n_wr[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_writes	gpgpu-sim/dram.h	/^   unsigned int n_writes;$/;"	m	struct:bank_t	typeref:typename:unsigned int
name	abstract_hardware_model.cc	/^std::string kernel_info_t::name() const$/;"	f	class:kernel_info_t	typeref:typename:std::string
name	cuda-sim/ptx_ir.h	/^   const std::string &name() const { return m_name;}$/;"	f	class:symbol	typeref:typename:const std::string &
name	cuda-sim/ptx_ir.h	/^   const std::string &name() const$/;"	f	class:operand_info	typeref:typename:const std::string &
name	gpuwattch/array.h	/^  string         name;$/;"	m	class:ArrayST	typeref:typename:string
name	gpuwattch/basic_components.h	/^    string name;$/;"	m	class:CacheDynParam	typeref:typename:string
name	gpuwattch/basic_components.h	/^    string name;$/;"	m	class:DRAMParam	typeref:typename:string
name	gpuwattch/basic_components.h	/^    string name;$/;"	m	class:MCParam	typeref:typename:string
name	gpuwattch/basic_components.h	/^    string name;$/;"	m	class:NIUParam	typeref:typename:string
name	gpuwattch/basic_components.h	/^    string name;$/;"	m	class:NoCParam	typeref:typename:string
name	gpuwattch/basic_components.h	/^    string name;$/;"	m	class:PCIeParam	typeref:typename:string
name	gpuwattch/basic_components.h	/^    string name;$/;"	m	class:ProcParam	typeref:typename:string
name	gpuwattch/interconnect.h	/^	string   name;$/;"	m	class:interconnect	typeref:typename:string
name	gpuwattch/noc.h	/^	string name, link_name;$/;"	m	class:NoC	typeref:typename:string
name	intersim2/y.tab.c	/^  char   *name;$/;"	m	union:YYSTYPE	typeref:typename:char *	file:
name	intersim2/y.tab.h	/^  char   *name;$/;"	m	union:YYSTYPE	typeref:typename:char *
nand	gpuwattch/cacti/basic_circuit.h	/^    nand,$/;"	e	enum:Gate_type
nandn_impl	cuda-sim/instructions.cc	/^void nandn_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
nbanks	gpuwattch/basic_components.h	/^    double    capacity, blockW, assoc, nbanks;$/;"	m	class:CacheDynParam	typeref:typename:double
nbanks	gpuwattch/cacti/cacti_interface.h	/^    unsigned int nbanks;$/;"	m	class:InputParameter	typeref:typename:unsigned int
nbanks	gpuwattch/cacti/uca.h	/^    uint32_t nbanks;$/;"	m	class:UCA	typeref:typename:uint32_t
nbk	gpgpu-sim/gpu-sim.h	/^   unsigned nbk;$/;"	m	struct:memory_config	typeref:typename:unsigned
nbkgrp	gpgpu-sim/gpu-sim.h	/^   unsigned nbkgrp; \/\/ number of bank groups (has to be power of 2)$/;"	m	struct:memory_config	typeref:typename:unsigned
nbytes	gpgpu-sim/dram.h	/^   unsigned int nbytes;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
ndbl	gpuwattch/cacti/cacti_interface.h	/^    int ndbl, ndwl, nspd, ndsam1, ndsam2, ndcm;$/;"	m	class:InputParameter	typeref:typename:int
ndbl	gpuwattch/cacti/htree2.h	/^    int ndbl, ndwl;$/;"	m	class:Htree2	typeref:typename:int
ndcm	gpuwattch/cacti/cacti_interface.h	/^    int ndbl, ndwl, nspd, ndsam1, ndsam2, ndcm;$/;"	m	class:InputParameter	typeref:typename:int
ndsam1	gpuwattch/cacti/cacti_interface.h	/^    int ndbl, ndwl, nspd, ndsam1, ndsam2, ndcm;$/;"	m	class:InputParameter	typeref:typename:int
ndsam2	gpuwattch/cacti/cacti_interface.h	/^    int ndbl, ndwl, nspd, ndsam1, ndsam2, ndcm;$/;"	m	class:InputParameter	typeref:typename:int
ndwl	gpuwattch/cacti/cacti_interface.h	/^    int ndbl, ndwl, nspd, ndsam1, ndsam2, ndcm;$/;"	m	class:InputParameter	typeref:typename:int
ndwl	gpuwattch/cacti/htree2.h	/^    int ndbl, ndwl;$/;"	m	class:Htree2	typeref:typename:int
neg_impl	cuda-sim/instructions.cc	/^void neg_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
net	intersim2/power/power_module.hpp	/^  Network * net;$/;"	m	class:Power_Module	typeref:typename:Network *
network_age_based	intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_base/;"	e	enum:TrafficManager::ePriority
network_mode	gpgpu-sim/icnt_wrapper.h	/^enum network_mode {$/;"	g
new_addr_type	abstract_hardware_model.h	/^typedef unsigned long long new_addr_type;$/;"	t	typeref:typename:unsigned long long
new_grid	gpgpu-sim/shader.h	/^    void new_grid()$/;"	f	class:shader_core_stats	typeref:typename:void
new_stack	gpgpu-sim/stack.cc	/^Stack* new_stack(int size) {$/;"	f	typeref:typename:Stack *
new_window	gpgpu-sim/gpu-cache.cc	/^void tag_array::new_window()$/;"	f	class:tag_array	typeref:typename:void
next	stream_manager.cc	/^stream_operation CUstream_st::next()$/;"	f	class:CUstream_st	typeref:typename:stream_operation
next_access	gpgpu-sim/gpu-cache.cc	/^mem_fetch *mshr_table::next_access(){$/;"	f	class:mshr_table	typeref:typename:mem_fetch *
next_access	gpgpu-sim/gpu-cache.h	/^    mem_fetch *next_access(){return m_mshrs.next_access();}$/;"	f	class:baseline_cache	typeref:typename:mem_fetch *
next_access	gpgpu-sim/gpu-cache.h	/^    mem_fetch *next_access(){return m_result_fifo.pop();}$/;"	f	class:tex_cache	typeref:typename:mem_fetch *
next_clock_domain	gpgpu-sim/gpu-sim.cc	/^int gpgpu_sim::next_clock_domain(void) $/;"	f	class:gpgpu_sim	typeref:typename:int
next_instr	cuda-sim/ptx_sim.h	/^   unsigned next_instr()$/;"	f	class:ptx_thread_info	typeref:typename:unsigned
next_pc	gpgpu-sim/shader.cc	/^address_type shader_core_ctx::next_pc( int tid ) const$/;"	f	class:shader_core_ctx	typeref:typename:address_type
next_pop_index	gpgpu-sim/gpu-cache.h	/^        unsigned next_pop_index() const $/;"	f	class:tex_cache::fifo	typeref:typename:unsigned
next_reg_num	cuda-sim/ptx_ir.h	/^   unsigned next_reg_num() { return ++m_reg_allocator;}$/;"	f	class:symbol_table	typeref:typename:unsigned
next_snap_shot_cycle	gpgpu-sim/stat-tool.cc	/^static unsigned long long  next_snap_shot_cycle = 0;$/;"	v	typeref:typename:unsigned long long	file:
next_spill_cycle	gpgpu-sim/stat-tool.cc	/^static unsigned long long  next_spill_cycle = 0;$/;"	v	typeref:typename:unsigned long long	file:
niu	gpuwattch/XML_Parse.h	/^	system_niu niu;$/;"	m	struct:__anon6448b92c1208	typeref:typename:system_niu
niu	gpuwattch/processor.h	/^    NIUController    * niu;$/;"	m	class:Processor	typeref:typename:NIUController *
niup	gpuwattch/iocontrollers.h	/^    NIUParam  niup;$/;"	m	class:NIUController	typeref:typename:NIUParam
nius	gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor	typeref:typename:Component
nmos	gpuwattch/cacti/basic_circuit.h	/^    nmos,$/;"	e	enum:Gate_type
no_device_under_wire_area	gpuwattch/interconnect.h	/^    Area no_device_under_wire_area;$/;"	m	class:interconnect	typeref:typename:Area
no_memory_op	abstract_hardware_model.h	/^	no_memory_op = 0,$/;"	e	enum:_memory_op_t
no_more_ctas_to_run	abstract_hardware_model.h	/^   bool no_more_ctas_to_run() const $/;"	f	class:kernel_info_t	typeref:typename:bool
noc	gpuwattch/core.h	/^	Component noc;$/;"	m	class:LoadStoreU	typeref:typename:Component
noc	gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor	typeref:typename:Component
nocdynp	gpuwattch/noc.h	/^	NoCParam  nocdynp;$/;"	m	class:NoC	typeref:typename:NoCParam
nocs	gpuwattch/core.h	/^	vector<NoC *>  nocs;$/;"	m	class:LoadStoreU	typeref:typename:vector<NoC * >
nocs	gpuwattch/processor.h	/^    vector<NoC *>  nocs;$/;"	m	class:Processor	typeref:typename:vector<NoC * >
node_list	intersim2/networks/anynet.hpp	/^  map<int, int > node_list;$/;"	m	class:AnyNet	typeref:typename:map<int,int>
non_rf_operands	gpuwattch/XML_Parse.h	/^	double non_rf_operands;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
none	intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_base/;"	e	enum:TrafficManager::ePriority
none	intersim2/vc.hpp	/^  enum ePrioType { local_age_based, queue_length_based, hop_count_based, none, other };$/;"	e	enum:VC::ePrioType
nop_coeff	gpuwattch/basic_components.h	/^    double nop_coeff;$/;"	m	class:DRAMParam	typeref:typename:double
nop_impl	cuda-sim/instructions.cc	/^void nop_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
nor	gpuwattch/cacti/basic_circuit.h	/^    nor,$/;"	e	enum:Gate_type
normalized	abstract_hardware_model.h	/^   int                           normalized;$/;"	m	struct:textureReference	typeref:typename:int
norn_impl	cuda-sim/instructions.cc	/^void norn_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
not_impl	cuda-sim/instructions.cc	/^void not_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
nsense	gpuwattch/cacti/wire.h	/^    int nsense; \/\/ no. of sense amps connected to a low-swing wire if it$/;"	m	class:Wire	typeref:typename:int
nsets	gpuwattch/cacti/cacti_interface.h	/^    unsigned int nsets;  \/\/ == number_of_sets$/;"	m	class:InputParameter	typeref:typename:unsigned int
nspd	gpuwattch/cacti/cacti_interface.h	/^    int ndbl, ndwl, nspd, ndsam1, ndsam2, ndcm;$/;"	m	class:InputParameter	typeref:typename:int
nthreads	gpuwattch/cacti/Ucache.cc	/^const uint32_t nthreads = NTHREADS;$/;"	v	typeref:typename:const uint32_t
nuca	gpuwattch/cacti/cacti_interface.h	/^    int nuca;$/;"	m	class:InputParameter	typeref:typename:int
nuca_bank_count	gpuwattch/cacti/cacti_interface.h	/^    int nuca_bank_count;$/;"	m	class:InputParameter	typeref:typename:int
nuca_cache_sz	gpuwattch/cacti/cacti_interface.h	/^    unsigned int nuca_cache_sz; \/\/ TODO$/;"	m	class:InputParameter	typeref:typename:unsigned int
nuca_org_t	gpuwattch/cacti/nuca.h	/^class nuca_org_t {$/;"	c
nuca_pda	gpuwattch/cacti/nuca.h	/^    Component nuca_pda;$/;"	m	class:nuca_org_t	typeref:typename:Component
num	intersim2/y.tab.c	/^  int    num;$/;"	m	union:YYSTYPE	typeref:typename:int	file:
num	intersim2/y.tab.h	/^  int    num;$/;"	m	union:YYSTYPE	typeref:typename:int
numCore	gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam	typeref:typename:int
numCore	gpuwattch/processor.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir;$/;"	m	class:Processor	typeref:typename:int
numIBEntries	gpuwattch/arch_const.h	/^const int numIBEntries			=	64;$/;"	v	typeref:typename:const int
numL1Dir	gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam	typeref:typename:int
numL1Dir	gpuwattch/processor.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir;$/;"	m	class:Processor	typeref:typename:int
numL2	gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam	typeref:typename:int
numL2	gpuwattch/processor.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir;$/;"	m	class:Processor	typeref:typename:int
numL2Dir	gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam	typeref:typename:int
numL2Dir	gpuwattch/processor.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir;$/;"	m	class:Processor	typeref:typename:int
numL3	gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam	typeref:typename:int
numL3	gpuwattch/processor.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir;$/;"	m	class:Processor	typeref:typename:int
numMC	gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam	typeref:typename:int
numMCChannel	gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam	typeref:typename:int
numNOC	gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam	typeref:typename:int
numNOC	gpuwattch/processor.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir;$/;"	m	class:Processor	typeref:typename:int
numPhysFloatRegs	gpuwattch/arch_const.h	/^const int numPhysFloatRegs=256;$/;"	v	typeref:typename:const int
numPhysIntRegs	gpuwattch/arch_const.h	/^const int numPhysIntRegs=32;$/;"	v	typeref:typename:const int
numROBEntries	gpuwattch/arch_const.h	/^const int numROBEntries=192;$/;"	v	typeref:typename:const int
numVC	intersim2/power/power_module.hpp	/^  double numVC;$/;"	m	class:Power_Module	typeref:typename:double
num_FRF_entry	gpuwattch/basic_components.h	/^    int  num_IRF_entry, num_FRF_entry, num_ifreelist_entries, num_ffreelist_entries;$/;"	m	class:CoreDynParam	typeref:typename:int
num_IRF_entry	gpuwattch/basic_components.h	/^    int  num_IRF_entry, num_FRF_entry, num_ifreelist_entries, num_ffreelist_entries;$/;"	m	class:CoreDynParam	typeref:typename:int
num_L1_active_nand2_path	gpuwattch/cacti/decoder.h	/^  int num_L1_active_nand2_path;$/;"	m	class:PredecBlk	typeref:typename:int
num_L1_active_nand3_path	gpuwattch/cacti/decoder.h	/^  int num_L1_active_nand3_path;$/;"	m	class:PredecBlk	typeref:typename:int
num_MCBs_accessed	gpgpu-sim/mem_latency_stat.h	/^   unsigned int *num_MCBs_accessed; \/\/tracks how many memory controllers are accessed whenever/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
num_act_mats_hor_dir	gpuwattch/cacti/mat.h	/^    int      num_act_mats_hor_dir;$/;"	m	class:Mat	typeref:typename:int
num_act_mats_hor_dir	gpuwattch/cacti/parameter.h	/^    int num_act_mats_hor_dir;$/;"	m	class:DynamicParameter	typeref:typename:int
num_act_mats_hor_dir_sl	gpuwattch/cacti/parameter.h	/^    int num_act_mats_hor_dir_sl;$/;"	m	class:DynamicParameter	typeref:typename:int
num_activates	gpgpu-sim/mem_latency_stat.h	/^   unsigned int **num_activates; \/\/num_activates[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
num_addr_b_bank	gpuwattch/cacti/uca.h	/^    int   num_addr_b_bank;$/;"	m	class:UCA	typeref:typename:int
num_addr_b_mat	gpuwattch/cacti/bank.h	/^    int  num_addr_b_mat;$/;"	m	class:Bank	typeref:typename:int
num_addr_b_routed_to_mat_for_act	gpuwattch/cacti/bank.h	/^    int  num_addr_b_routed_to_mat_for_act;$/;"	m	class:Bank	typeref:typename:int
num_addr_b_routed_to_mat_for_rd_or_wr	gpuwattch/cacti/bank.h	/^    int  num_addr_b_routed_to_mat_for_rd_or_wr;$/;"	m	class:Bank	typeref:typename:int
num_addr_b_row_dec	gpuwattch/cacti/bank.h	/^    int  num_addr_b_row_dec;$/;"	m	class:Bank	typeref:typename:int
num_addr_bits_nand2_path	gpuwattch/cacti/decoder.h	/^  inline int num_addr_bits_nand2_path()$/;"	f	class:PredecBlkDrv	typeref:typename:int
num_addr_bits_nand3_path	gpuwattch/cacti/decoder.h	/^  inline int num_addr_bits_nand3_path()$/;"	f	class:PredecBlkDrv	typeref:typename:int
num_alus	gpuwattch/basic_components.h	/^    int  num_alus, num_muls;$/;"	m	class:CoreDynParam	typeref:typename:int
num_args	cuda-sim/ptx_ir.h	/^   unsigned num_args() const$/;"	f	class:function_info	typeref:typename:unsigned
num_banks_of_DRAM_chip	gpuwattch/XML_Parse.h	/^	int num_banks_of_DRAM_chip;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:int
num_bits_per_ecc_b_	gpuwattch/cacti/const.h	/^const static double num_bits_per_ecc_b_          = 8.0;$/;"	v	typeref:typename:const double
num_blocks	abstract_hardware_model.h	/^   size_t num_blocks() const$/;"	f	class:kernel_info_t	typeref:typename:size_t
num_buffers_driving_1_nand2_load	gpuwattch/cacti/decoder.h	/^  int num_buffers_driving_1_nand2_load;$/;"	m	class:PredecBlkDrv	typeref:typename:int
num_buffers_driving_2_nand2_load	gpuwattch/cacti/decoder.h	/^  int num_buffers_driving_2_nand2_load;$/;"	m	class:PredecBlkDrv	typeref:typename:int
num_buffers_driving_2_nand3_load	gpuwattch/cacti/decoder.h	/^  int num_buffers_driving_2_nand3_load;$/;"	m	class:PredecBlkDrv	typeref:typename:int
num_buffers_driving_4_nand2_load	gpuwattch/cacti/decoder.h	/^  int num_buffers_driving_4_nand2_load;$/;"	m	class:PredecBlkDrv	typeref:typename:int
num_buffers_driving_8_nand3_load	gpuwattch/cacti/decoder.h	/^  int num_buffers_driving_8_nand3_load;$/;"	m	class:PredecBlkDrv	typeref:typename:int
num_buffers_nand3_path	gpuwattch/cacti/decoder.h	/^  int num_buffers_nand3_path;$/;"	m	class:PredecBlkDrv	typeref:typename:int
num_c_subarray	gpuwattch/cacti/parameter.h	/^    unsigned int num_c_subarray;$/;"	m	class:DynamicParameter	typeref:typename:unsigned int
num_channels	gpuwattch/XML_Parse.h	/^	int num_channels;$/;"	m	struct:__anon6448b92c1108	typeref:typename:int
num_channels	gpuwattch/basic_components.h	/^    double  clockRate,num_mcs, peakDataTransferRate, num_channels;$/;"	m	class:MCParam	typeref:typename:double
num_channels	gpuwattch/basic_components.h	/^    int    num_channels, num_units;$/;"	m	class:PCIeParam	typeref:typename:int
num_cluster	gpgpu-sim/gpu-sim.h	/^    unsigned num_cluster() const { return m_shader_config.n_simt_clusters; }$/;"	f	class:gpgpu_sim_config	typeref:typename:unsigned
num_cols	gpuwattch/cacti/subarray.h	/^    unsigned int num_cols;$/;"	m	class:Subarray	typeref:typename:unsigned int
num_cols_fa_cam	gpuwattch/cacti/subarray.h	/^    int32_t num_cols_fa_cam;$/;"	m	class:Subarray	typeref:typename:int32_t
num_cols_fa_ram	gpuwattch/cacti/subarray.h	/^    int32_t num_cols_fa_ram;$/;"	m	class:Subarray	typeref:typename:int32_t
num_decoded_signals	gpuwattch/logic.h	/^	int  num_decoded_signals;$/;"	m	class:inst_decoder	typeref:typename:int
num_decoder_segments	gpuwattch/logic.h	/^	int  num_decoder_segments;$/;"	m	class:inst_decoder	typeref:typename:int
num_decoders	gpuwattch/logic.h	/^	int  num_decoders;$/;"	m	class:inst_decoder	typeref:typename:int
num_di_b_bank	gpuwattch/cacti/uca.h	/^    int   num_di_b_bank;$/;"	m	class:UCA	typeref:typename:int
num_di_b_bank_per_port	gpuwattch/cacti/parameter.h	/^    int num_di_b_bank_per_port;$/;"	m	class:DynamicParameter	typeref:typename:int
num_di_b_mat	gpuwattch/cacti/parameter.h	/^    int num_di_b_mat;$/;"	m	class:DynamicParameter	typeref:typename:int
num_di_b_subbank	gpuwattch/cacti/parameter.h	/^    int num_di_b_subbank;$/;"	m	class:DynamicParameter	typeref:typename:int
num_do_b_bank	gpuwattch/cacti/uca.h	/^    int   num_do_b_bank;$/;"	m	class:UCA	typeref:typename:int
num_do_b_bank_per_port	gpuwattch/cacti/parameter.h	/^    int num_do_b_bank_per_port;$/;"	m	class:DynamicParameter	typeref:typename:int
num_do_b_mat	gpuwattch/cacti/mat.h	/^    int      num_do_b_mat;$/;"	m	class:Mat	typeref:typename:int
num_do_b_mat	gpuwattch/cacti/parameter.h	/^    int num_do_b_mat;$/;"	m	class:DynamicParameter	typeref:typename:int
num_do_b_subbank	gpuwattch/cacti/parameter.h	/^    int num_do_b_subbank;$/;"	m	class:DynamicParameter	typeref:typename:int
num_ffreelist_entries	gpuwattch/basic_components.h	/^    int  num_IRF_entry, num_FRF_entry, num_ifreelist_entries, num_ffreelist_entries;$/;"	m	class:CoreDynParam	typeref:typename:int
num_fp_pipelines	gpuwattch/basic_components.h	/^    int  num_hthreads, pipeline_stages, fp_pipeline_stages, num_pipelines, num_fp_pipelines;$/;"	m	class:CoreDynParam	typeref:typename:int
num_fpus	gpuwattch/basic_components.h	/^    double num_fpus;$/;"	m	class:CoreDynParam	typeref:typename:double
num_fu	gpuwattch/logic.h	/^	double num_fu;$/;"	m	class:FunctionalUnit	typeref:typename:double
num_gates	gpuwattch/cacti/decoder.h	/^    int    num_gates;$/;"	m	class:Decoder	typeref:typename:int
num_gates_min	gpuwattch/cacti/decoder.h	/^    int    num_gates_min;$/;"	m	class:Decoder	typeref:typename:int
num_hthreads	gpuwattch/basic_components.h	/^    int  num_hthreads, pipeline_stages, fp_pipeline_stages, num_pipelines, num_fp_pipelines;$/;"	m	class:CoreDynParam	typeref:typename:int
num_hthreads	gpuwattch/logic.h	/^	double pipeline_stage,num_hthreads,issue_width;$/;"	m	class:UndiffCore	typeref:typename:double
num_idle_cores	gpuwattch/XML_Parse.h	/^	double num_idle_cores;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
num_idle_cores	gpuwattch/XML_Parse.h	/^	double num_idle_cores;$/;"	m	struct:__anon6448b92c1208	typeref:typename:double
num_ifreelist_entries	gpuwattch/basic_components.h	/^    int  num_IRF_entry, num_FRF_entry, num_ifreelist_entries, num_ffreelist_entries;$/;"	m	class:CoreDynParam	typeref:typename:int
num_in_signals	gpuwattch/cacti/decoder.h	/^    int    num_in_signals;$/;"	m	class:Decoder	typeref:typename:int
num_inst_in_buffer	gpgpu-sim/shader.h	/^    unsigned num_inst_in_buffer() const$/;"	f	class:shd_warp_t	typeref:typename:unsigned
num_inst_in_pipeline	gpgpu-sim/shader.h	/^    unsigned num_inst_in_pipeline() const { return m_inst_in_pipeline;}$/;"	f	class:shd_warp_t	typeref:typename:unsigned
num_issued_inst_in_pipeline	gpgpu-sim/shader.h	/^    unsigned num_issued_inst_in_pipeline() const {return (num_inst_in_pipeline()-num_inst_in_buf/;"	f	class:shd_warp_t	typeref:typename:unsigned
num_mats	gpuwattch/cacti/mat.h	/^    int      num_mats;$/;"	m	class:Mat	typeref:typename:int
num_mats	gpuwattch/cacti/parameter.h	/^    int num_mats;       \/\/ only for leakage computation  -- the number of mats per bank$/;"	m	class:DynamicParameter	typeref:typename:int
num_mats_h_dir	gpuwattch/cacti/parameter.h	/^    int num_mats_h_dir;$/;"	m	class:DynamicParameter	typeref:typename:int
num_mats_hor_dir	gpuwattch/cacti/bank.h	/^    int  num_mats_hor_dir;$/;"	m	class:Bank	typeref:typename:int
num_mats_v_dir	gpuwattch/cacti/parameter.h	/^    int num_mats_v_dir;$/;"	m	class:DynamicParameter	typeref:typename:int
num_mats_ver_dir	gpuwattch/cacti/bank.h	/^    int  num_mats_ver_dir;$/;"	m	class:Bank	typeref:typename:int
num_mcs	gpuwattch/basic_components.h	/^    double  clockRate,num_mcs, peakDataTransferRate, num_channels;$/;"	m	class:MCParam	typeref:typename:double
num_mfs	gpgpu-sim/mem_latency_stat.h	/^   unsigned num_mfs;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
num_muls	gpuwattch/basic_components.h	/^    int  num_alus, num_muls;$/;"	m	class:CoreDynParam	typeref:typename:int
num_operands	abstract_hardware_model.h	/^    unsigned num_operands;$/;"	m	class:inst_t	typeref:typename:unsigned
num_pending	gpgpu-sim/dram_sched.h	/^   unsigned num_pending() const { return m_num_pending;}$/;"	f	class:frfcfs_scheduler	typeref:typename:unsigned
num_perf_counters	gpuwattch/gpgpu_sim_wrapper.h	/^    unsigned num_perf_counters; \/\/ # of performance counters$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:unsigned
num_pipe_stages	gpuwattch/interconnect.h	/^    int  num_pipe_stages;$/;"	m	class:interconnect	typeref:typename:int
num_pipelines	gpuwattch/basic_components.h	/^    int  num_hthreads, pipeline_stages, fp_pipeline_stages, num_pipelines, num_fp_pipelines;$/;"	m	class:CoreDynParam	typeref:typename:int
num_piperegs	gpuwattch/logic.h	/^	double num_piperegs;$/;"	m	class:Pipeline	typeref:typename:double
num_pwr_cmps	gpuwattch/gpgpu_sim_wrapper.h	/^    unsigned num_pwr_cmps; \/\/ # of components modelled$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:unsigned
num_r_subarray	gpuwattch/cacti/parameter.h	/^    unsigned int num_r_subarray;$/;"	m	class:DynamicParameter	typeref:typename:unsigned int
num_rd_ports	gpuwattch/cacti/cacti_interface.h	/^    unsigned int num_rd_ports;$/;"	m	class:InputParameter	typeref:typename:unsigned int
num_rd_ports	gpuwattch/cacti/parameter.h	/^    unsigned int num_rd_ports;$/;"	m	class:DynamicParameter	typeref:typename:unsigned int
num_reconvergence_pairs	cuda-sim/ptx_ir.h	/^   unsigned num_reconvergence_pairs;$/;"	m	class:function_info	typeref:typename:unsigned
num_registers_per_core	gpgpu-sim/gpu-sim.cc	/^int gpgpu_sim::num_registers_per_core() const$/;"	f	class:gpgpu_sim	typeref:typename:int
num_regs	abstract_hardware_model.h	/^    unsigned num_regs; \/\/ count vector operand as one register operand$/;"	m	class:inst_t	typeref:typename:unsigned
num_result_bus	gpgpu-sim/shader.h	/^    unsigned num_result_bus;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned
num_rows	gpuwattch/cacti/subarray.h	/^    unsigned int num_rows;$/;"	m	class:Subarray	typeref:typename:unsigned int
num_rw_ports	gpuwattch/cacti/cacti_interface.h	/^    unsigned int num_rw_ports;$/;"	m	class:InputParameter	typeref:typename:unsigned int
num_rw_ports	gpuwattch/cacti/parameter.h	/^    unsigned int num_rw_ports;$/;"	m	class:DynamicParameter	typeref:typename:unsigned int
num_sa_subarray	gpuwattch/cacti/mat.h	/^    int      num_sa_subarray;$/;"	m	class:Mat	typeref:typename:int
num_sa_subarray_search	gpuwattch/cacti/mat.h	/^    int      num_sa_subarray_search;$/;"	m	class:Mat	typeref:typename:int
num_se_rd_ports	gpuwattch/cacti/cacti_interface.h	/^    unsigned int num_se_rd_ports;  \/\/ number of single ended read ports$/;"	m	class:InputParameter	typeref:typename:unsigned int
num_se_rd_ports	gpuwattch/cacti/parameter.h	/^    unsigned int num_se_rd_ports;  \/\/ number of single ended read ports$/;"	m	class:DynamicParameter	typeref:typename:unsigned int
num_search_ports	gpuwattch/cacti/cacti_interface.h	/^    unsigned int num_search_ports;  \/\/ Sheng: number of search ports for CAM$/;"	m	class:InputParameter	typeref:typename:unsigned int
num_search_ports	gpuwattch/cacti/parameter.h	/^    unsigned int num_search_ports;$/;"	m	class:DynamicParameter	typeref:typename:unsigned int
num_shader	gpgpu-sim/gpu-sim.h	/^    unsigned num_shader() const { return m_shader_config.num_shader(); }$/;"	f	class:gpgpu_sim_config	typeref:typename:unsigned
num_shader	gpgpu-sim/shader.h	/^    unsigned num_shader() const { return n_simt_clusters*n_simt_cores_per_cluster; }$/;"	f	struct:shader_core_config	typeref:typename:unsigned
num_shmem_bank	abstract_hardware_model.h	/^    unsigned num_shmem_bank;$/;"	m	struct:core_config	typeref:typename:unsigned
num_si_b_bank	gpuwattch/cacti/uca.h	/^    int   num_si_b_bank;$/;"	m	class:UCA	typeref:typename:int
num_si_b_bank_per_port	gpuwattch/cacti/parameter.h	/^	int num_si_b_bank_per_port;$/;"	m	class:DynamicParameter	typeref:typename:int
num_si_b_mat	gpuwattch/cacti/parameter.h	/^    int num_si_b_mat;$/;"	m	class:DynamicParameter	typeref:typename:int
num_si_b_subbank	gpuwattch/cacti/parameter.h	/^    int num_si_b_subbank;$/;"	m	class:DynamicParameter	typeref:typename:int
num_so_b_bank	gpuwattch/cacti/uca.h	/^    int   num_so_b_bank;$/;"	m	class:UCA	typeref:typename:int
num_so_b_bank_per_port	gpuwattch/cacti/parameter.h	/^	int num_so_b_bank_per_port;$/;"	m	class:DynamicParameter	typeref:typename:int
num_so_b_mat	gpuwattch/cacti/mat.h	/^    int      num_so_b_mat;$/;"	m	class:Mat	typeref:typename:int
num_so_b_mat	gpuwattch/cacti/parameter.h	/^    int num_so_b_mat;$/;"	m	class:DynamicParameter	typeref:typename:int
num_so_b_subbank	gpuwattch/cacti/parameter.h	/^    int num_so_b_subbank;$/;"	m	class:DynamicParameter	typeref:typename:int
num_sub	gpuwattch/cacti/highradix.h	/^    double num_sub;$/;"	m	class:HighRadix	typeref:typename:double
num_subarrays	gpuwattch/cacti/parameter.h	/^    int num_subarrays;  \/\/ only for leakage computation  -- the number of subarrays per bank$/;"	m	class:DynamicParameter	typeref:typename:int
num_subarrays_per_mat	gpuwattch/cacti/mat.h	/^    uint32_t num_subarrays_per_mat;  \/\/ the number of subarrays in a mat$/;"	m	class:Mat	typeref:typename:uint32_t
num_subarrays_per_row	gpuwattch/cacti/mat.h	/^    uint32_t num_subarrays_per_row;  \/\/ the number of subarrays in a row of a mat$/;"	m	class:Mat	typeref:typename:uint32_t
num_threads	cuda-sim/ptx_sim.cc	/^unsigned ptx_cta_info::num_threads() const$/;"	f	class:ptx_cta_info	typeref:typename:unsigned
num_threads	gpuwattch/logic.h	/^	int num_threads;$/;"	m	class:selection_logic	typeref:typename:int
num_units	gpuwattch/basic_components.h	/^    int    num_channels, num_units;$/;"	m	class:PCIeParam	typeref:typename:int
num_units	gpuwattch/basic_components.h	/^    int    num_units;$/;"	m	class:NIUParam	typeref:typename:int
num_updates	stream_manager.h	/^   unsigned num_updates() const { return m_updates; }$/;"	f	class:CUevent_st	typeref:typename:unsigned
num_warps_issuable	gpgpu-sim/shader.h	/^    unsigned *num_warps_issuable;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
num_wr_ports	gpuwattch/cacti/cacti_interface.h	/^    unsigned int num_wr_ports;$/;"	m	class:InputParameter	typeref:typename:unsigned int
num_wr_ports	gpuwattch/cacti/parameter.h	/^    unsigned int num_wr_ports;$/;"	m	class:DynamicParameter	typeref:typename:unsigned int
number_activated_mats_horizontal_direction	gpuwattch/cacti/cacti_interface.h	/^  int number_activated_mats_horizontal_direction;$/;"	m	struct:__anon592e3c280108	typeref:typename:int
number_addr_bits_mat	gpuwattch/cacti/parameter.h	/^    int number_addr_bits_mat;             \/\/ per port$/;"	m	class:DynamicParameter	typeref:typename:int
number_cache_levels	gpuwattch/XML_Parse.h	/^	int number_cache_levels;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
number_cache_levels	gpuwattch/arch_const.h	/^const int			number_cache_levels	=	3;$/;"	v	typeref:typename:const int
number_entries	gpuwattch/XML_Parse.h	/^	int number_entries;$/;"	m	struct:__anon6448b92c0208	typeref:typename:int
number_entries	gpuwattch/XML_Parse.h	/^	int number_entries;$/;"	m	struct:__anon6448b92c0408	typeref:typename:int
number_gates	gpuwattch/cacti/decoder.h	/^  int    number_gates;$/;"	m	class:Driver	typeref:typename:int
number_gates_L1_nand2_path	gpuwattch/cacti/decoder.h	/^  int number_gates_L1_nand2_path;$/;"	m	class:PredecBlk	typeref:typename:int
number_gates_L1_nand3_path	gpuwattch/cacti/decoder.h	/^  int number_gates_L1_nand3_path;$/;"	m	class:PredecBlk	typeref:typename:int
number_gates_L2	gpuwattch/cacti/decoder.h	/^  int number_gates_L2;$/;"	m	class:PredecBlk	typeref:typename:int
number_gates_nand2_path	gpuwattch/cacti/decoder.h	/^  int number_gates_nand2_path;$/;"	m	class:PredecBlkDrv	typeref:typename:int
number_gates_nand3_path	gpuwattch/cacti/decoder.h	/^  int number_gates_nand3_path;$/;"	m	class:PredecBlkDrv	typeref:typename:int
number_hardware_threads	gpuwattch/XML_Parse.h	/^	int number_hardware_threads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
number_input_addr_bits	gpuwattch/cacti/decoder.h	/^  int number_input_addr_bits;$/;"	m	class:PredecBlk	typeref:typename:int
number_input_addr_bits	gpuwattch/cacti/decoder.h	/^  int number_input_addr_bits;$/;"	m	class:PredecBlkDrv	typeref:typename:int
number_inputs_L1_gate	gpuwattch/cacti/decoder.h	/^  int number_inputs_L1_gate;$/;"	m	class:PredecBlk	typeref:typename:int
number_instruction_fetch_ports	gpuwattch/XML_Parse.h	/^	int number_instruction_fetch_ports;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
number_mcs	gpuwattch/XML_Parse.h	/^	int number_mcs;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:int
number_of_BPT	gpuwattch/XML_Parse.h	/^	int number_of_BPT;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
number_of_BTB	gpuwattch/XML_Parse.h	/^	int number_of_BTB;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
number_of_L1Directories	gpuwattch/XML_Parse.h	/^	int number_of_L1Directories;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
number_of_L2Directories	gpuwattch/XML_Parse.h	/^	int number_of_L2Directories;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
number_of_L2s	gpuwattch/XML_Parse.h	/^	int number_of_L2s;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
number_of_L2s	gpuwattch/arch_const.h	/^const int  			number_of_L2s 	=	1;$/;"	v	typeref:typename:const int
number_of_L3s	gpuwattch/XML_Parse.h	/^	int number_of_L3s;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
number_of_L3s	gpuwattch/arch_const.h	/^const int 			number_of_L3s	=	1;$/;"	v	typeref:typename:const int
number_of_NoCs	gpuwattch/XML_Parse.h	/^	int number_of_NoCs;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
number_of_NoCs	gpuwattch/arch_const.h	/^const int 			number_of_NoCs	=	1;$/;"	v	typeref:typename:const int
number_of_cores	gpuwattch/XML_Parse.h	/^	int number_of_cores;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
number_of_cores	gpuwattch/arch_const.h	/^const int  			number_of_cores =	8;$/;"	v	typeref:typename:const int
number_of_crossbars	gpuwattch/XML_Parse.h	/^	int number_of_crossbars;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int
number_of_dir_levels	gpuwattch/XML_Parse.h	/^	int number_of_dir_levels;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
number_of_inputs_of_crossbars	gpuwattch/XML_Parse.h	/^	int number_of_inputs_of_crossbars;$/;"	m	struct:__anon6448b92c0c08	typeref:typename:int
number_of_outputs_of_crossbars	gpuwattch/XML_Parse.h	/^	int number_of_outputs_of_crossbars;$/;"	m	struct:__anon6448b92c0c08	typeref:typename:int
number_ranks	gpuwattch/XML_Parse.h	/^	int number_ranks;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:int
number_ranks	gpuwattch/XML_Parse.h	/^	int number_ranks;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:int
number_subbanks	gpuwattch/cacti/cacti_interface.h	/^  int number_subbanks;$/;"	m	struct:__anon592e3c280108	typeref:typename:int
number_subbanks_decode	gpuwattch/cacti/parameter.h	/^    int number_subbanks_decode;           \/\/ per_port$/;"	m	class:DynamicParameter	typeref:typename:int
number_units	gpuwattch/XML_Parse.h	/^	int number_units;$/;"	m	struct:__anon6448b92c1008	typeref:typename:int
number_units	gpuwattch/XML_Parse.h	/^	int number_units;$/;"	m	struct:__anon6448b92c1108	typeref:typename:int
number_way_select_signals_mat	gpuwattch/cacti/parameter.h	/^    int number_way_select_signals_mat;$/;"	m	class:DynamicParameter	typeref:typename:int
o_len	gpuwattch/cacti/arbiter.h	/^    double o_len;$/;"	m	class:MCPAT_Arbiter	typeref:typename:double
obj_$(TAG)/$(TARGET)	gpuwattch/mcpatXeonCore.mk	/^obj_$(TAG)\/$(TARGET) : $(OBJS)$/;"	t
obj_$(TAG)/%.o	gpuwattch/mcpatXeonCore.mk	/^obj_$(TAG)\/%.o : %.cc$/;"	t
obj_dbg	gpuwattch/cacti/makefile	/^obj_dbg:$/;"	t
obj_dbg	gpuwattch/makefile	/^obj_dbg:$/;"	t
obj_func_cycle_t	gpuwattch/cacti/cacti_interface.h	/^    unsigned int obj_func_cycle_t;$/;"	m	class:InputParameter	typeref:typename:unsigned int
obj_func_dyn_energy	gpuwattch/cacti/cacti_interface.h	/^    unsigned int obj_func_dyn_energy;$/;"	m	class:InputParameter	typeref:typename:unsigned int
obj_func_dyn_power	gpuwattch/cacti/cacti_interface.h	/^    unsigned int obj_func_dyn_power;$/;"	m	class:InputParameter	typeref:typename:unsigned int
obj_func_leak_power	gpuwattch/cacti/cacti_interface.h	/^    unsigned int obj_func_leak_power;$/;"	m	class:InputParameter	typeref:typename:unsigned int
obj_opt	gpuwattch/cacti/makefile	/^obj_opt:$/;"	t
obj_opt	gpuwattch/makefile	/^obj_opt:$/;"	t
occupied	gpgpu-sim/shader.h	/^    std::bitset<MAX_ALU_LATENCY> occupied;$/;"	m	class:simd_function_unit	typeref:typename:std::bitset<MAX_ALU_LATENCY>
offset	cuda-sim/ptx_sim.h	/^   size_t offset;$/;"	m	struct:param_t	typeref:typename:size_t
op	abstract_hardware_model.h	/^    op_type op;             \/\/ opcode (uarch visible)$/;"	m	class:inst_t	typeref:typename:op_type
op_iter_begin	cuda-sim/ptx_ir.h	/^   const_iterator op_iter_begin() const $/;"	f	class:ptx_instruction	typeref:typename:const_iterator
op_iter_end	cuda-sim/ptx_ir.h	/^   const_iterator op_iter_end() const $/;"	f	class:ptx_instruction	typeref:typename:const_iterator
op_pipe	abstract_hardware_model.h	/^    operation_pipeline op_pipe;  \/\/ code (uarch visible) identify the pipeline of the operatio/;"	m	class:inst_t	typeref:typename:operation_pipeline
op_t	gpgpu-sim/shader.h	/^      op_t( collector_unit_t *cu, unsigned op, unsigned reg, unsigned num_banks, unsigned bank_w/;"	f	class:opndcoll_rfu_t::op_t
op_t	gpgpu-sim/shader.h	/^      op_t( const warp_inst_t *warp, unsigned reg, unsigned num_banks, unsigned bank_warp_shift /;"	f	class:opndcoll_rfu_t::op_t
op_t	gpgpu-sim/shader.h	/^      op_t() { m_valid = false; }$/;"	f	class:opndcoll_rfu_t::op_t
op_t	gpgpu-sim/shader.h	/^   class op_t {$/;"	c	class:opndcoll_rfu_t
op_type	abstract_hardware_model.h	/^typedef enum uarch_op_t op_type;$/;"	t	typeref:enum:uarch_op_t
opcodeW	gpuwattch/basic_components.h	/^    int    opcodeW;$/;"	m	class:MCParam	typeref:typename:int
opcode_initiation_dp	cuda-sim/cuda-sim.cc	/^char *opcode_initiation_int, *opcode_initiation_fp, *opcode_initiation_dp;$/;"	v	typeref:typename:char ***
opcode_initiation_fp	cuda-sim/cuda-sim.cc	/^char *opcode_initiation_int, *opcode_initiation_fp, *opcode_initiation_dp;$/;"	v	typeref:typename:char **
opcode_initiation_int	cuda-sim/cuda-sim.cc	/^char *opcode_initiation_int, *opcode_initiation_fp, *opcode_initiation_dp;$/;"	v	typeref:typename:char *
opcode_latency_dp	cuda-sim/cuda-sim.cc	/^char *opcode_latency_int, *opcode_latency_fp, *opcode_latency_dp;$/;"	v	typeref:typename:char ***
opcode_latency_fp	cuda-sim/cuda-sim.cc	/^char *opcode_latency_int, *opcode_latency_fp, *opcode_latency_dp;$/;"	v	typeref:typename:char **
opcode_latency_int	cuda-sim/cuda-sim.cc	/^char *opcode_latency_int, *opcode_latency_fp, *opcode_latency_dp;$/;"	v	typeref:typename:char *
opcode_length	gpuwattch/arch_const.h	/^const int opcode_length			= 	8;\/\/16;\/\/Niagara$/;"	v	typeref:typename:const int
opcode_length	gpuwattch/arch_const.h	/^const int opcode_length			= 	8;\/\/Niagara$/;"	v	typeref:typename:const int
opcode_length	gpuwattch/basic_components.h	/^    int  perThreadState, globalCheckpoint, instruction_length, pc_width, opcode_length, micro_op/;"	m	class:CoreDynParam	typeref:typename:int
opcode_length	gpuwattch/logic.h	/^	int  opcode_length;$/;"	m	class:inst_decoder	typeref:typename:int
opcode_spec	cuda-sim/ptx.y	/^opcode_spec: OPCODE { add_opcode($1); } option_list$/;"	l
opcode_t	cuda-sim/opcodes.h	/^enum opcode_t {$/;"	g
opcode_width	gpuwattch/XML_Parse.h	/^	int opcode_width;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
opcodes_h_included	cuda-sim/opcodes.h	/^#define opcodes_h_included$/;"	d
openFileHelper	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::openFileHelper(XMLCSTR filename, XMLCSTR tag)$/;"	f	class:XMLNode	typeref:typename:XMLNode
openTagLen	gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR lpszOpen; int openTagLen; XMLCSTR lpszClose;} ALLXMLClearTag;$/;"	m	struct:__anon33c5d5fd0108	typeref:typename:int	file:
open_files	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::open_files()$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
operand	cuda-sim/ptx.y	/^operand: IDENTIFIER  { add_scalar_operand( $1 ); }$/;"	l
operand_info	cuda-sim/ptx_ir.h	/^   operand_info( const symbol *addr )$/;"	f	class:operand_info
operand_info	cuda-sim/ptx_ir.h	/^   operand_info( const symbol *addr, int offset )$/;"	f	class:operand_info
operand_info	cuda-sim/ptx_ir.h	/^   operand_info( const symbol *addr1, const symbol *addr2 )$/;"	f	class:operand_info
operand_info	cuda-sim/ptx_ir.h	/^   operand_info( const symbol *s1, const symbol *s2, const symbol *s3, const symbol *s4 )$/;"	f	class:operand_info
operand_info	cuda-sim/ptx_ir.h	/^   operand_info( double x )$/;"	f	class:operand_info
operand_info	cuda-sim/ptx_ir.h	/^   operand_info( float x )$/;"	f	class:operand_info
operand_info	cuda-sim/ptx_ir.h	/^   operand_info( int builtin_id, int dim_mod )$/;"	f	class:operand_info
operand_info	cuda-sim/ptx_ir.h	/^   operand_info( int x )$/;"	f	class:operand_info
operand_info	cuda-sim/ptx_ir.h	/^   operand_info( unsigned x )$/;"	f	class:operand_info
operand_info	cuda-sim/ptx_ir.h	/^   operand_info()$/;"	f	class:operand_info
operand_info	cuda-sim/ptx_ir.h	/^class operand_info {$/;"	c
operand_info	cuda-sim/ptx_sim.h	/^   std::stack<class operand_info, std::vector<operand_info> > m_breakaddrs;$/;"	m	class:ptx_thread_info	typeref:typename:class
operand_list	cuda-sim/ptx.y	/^operand_list: operand$/;"	l
operand_lookup	cuda-sim/ptx_ir.h	/^   const operand_info &operand_lookup( unsigned n ) const$/;"	f	class:ptx_instruction	typeref:typename:const operand_info &
operand_type	cuda-sim/ptx_ir.h	/^enum operand_type {$/;"	g
operation	stream_manager.cc	/^bool stream_manager::operation( bool * sim)$/;"	f	class:stream_manager	typeref:typename:bool
operation_pipeline	abstract_hardware_model.h	/^typedef enum operation_pipeline_t operation_pipeline;$/;"	t	typeref:enum:operation_pipeline_t
operation_pipeline_t	abstract_hardware_model.h	/^enum operation_pipeline_t {$/;"	g
operator !=	abstract_hardware_model.h	/^   bool operator!=( const memory_space_t &x ) const { return !(*this == x); }$/;"	f	class:memory_space_t	typeref:typename:bool
operator ()	cuda-sim/ptx-stats.cc	/^    std::size_t operator()(const ptx_file_line & pfline) const {$/;"	f	struct:hash_ptx_file_line	typeref:typename:std::size_t	file:
operator ()	cuda-sim/ptx_ir.h	/^   bool operator()( const type_info_key &a, const type_info_key &b ) const$/;"	f	struct:type_info_key_compare	typeref:typename:bool
operator ()	gpgpu-sim/addrdec.cc	/^   size_t operator()(const addrdec_t &x) const {$/;"	f	class:hash_addrdec_t	typeref:typename:size_t	file:
operator ()	gpgpu-sim/gpu-cache.cc	/^unsigned &cache_stats::operator()(int access_type, int access_outcome){$/;"	f	class:cache_stats	typeref:typename:unsigned &
operator ()	gpgpu-sim/gpu-cache.cc	/^unsigned cache_stats::operator()(int access_type, int access_outcome) const{$/;"	f	class:cache_stats	typeref:typename:unsigned
operator *	gpuwattch/basic_components.cc	/^statsComponents operator*(const statsComponents & x, double const * const y)$/;"	f	typeref:typename:statsComponents
operator *	gpuwattch/basic_components.cc	/^statsDef operator*(const statsDef & x, double const * const y)$/;"	f	typeref:typename:statsDef
operator *	gpuwattch/cacti/io.cc	/^powerComponents operator*(const powerComponents & x, double const * const y)$/;"	f	typeref:typename:powerComponents
operator *	gpuwattch/cacti/io.cc	/^powerDef operator*(const powerDef & x, double const * const y)$/;"	f	typeref:typename:powerDef
operator +	gpgpu-sim/gpu-cache.cc	/^cache_stats cache_stats::operator+(const cache_stats &cs){$/;"	f	class:cache_stats	typeref:typename:cache_stats
operator +	gpgpu-sim/gpu-cache.h	/^    cache_sub_stats operator+(const cache_sub_stats &cs){$/;"	f	struct:cache_sub_stats	typeref:typename:cache_sub_stats
operator +	gpuwattch/basic_components.cc	/^statsComponents operator+(const statsComponents & x, const statsComponents & y)$/;"	f	typeref:typename:statsComponents
operator +	gpuwattch/basic_components.cc	/^statsDef operator+(const statsDef & x, const statsDef & y)$/;"	f	typeref:typename:statsDef
operator +	gpuwattch/cacti/io.cc	/^powerComponents operator+(const powerComponents & x, const powerComponents & y)$/;"	f	typeref:typename:powerComponents
operator +	gpuwattch/cacti/io.cc	/^powerDef operator+(const powerDef & x, const powerDef & y)$/;"	f	typeref:typename:powerDef
operator +=	gpgpu-sim/gpu-cache.cc	/^cache_stats &cache_stats::operator+=(const cache_stats &cs){$/;"	f	class:cache_stats	typeref:typename:cache_stats &
operator +=	gpgpu-sim/gpu-cache.h	/^    cache_sub_stats &operator+=(const cache_sub_stats &css){$/;"	f	struct:cache_sub_stats	typeref:typename:cache_sub_stats &
operator +=	gpgpu-sim/stat-tool.cc	/^thread_insn_span& thread_insn_span::operator+=(const thread_insn_span& other)$/;"	f	class:thread_insn_span	typeref:typename:thread_insn_span &
operator <	abstract_hardware_model.h	/^   bool operator<( const memory_space_t &x ) const $/;"	f	class:memory_space_t	typeref:typename:bool
operator <	cuda-sim/ptx-stats.cc	/^    bool operator<(const ptx_file_line &other) const {$/;"	f	class:ptx_file_line	typeref:typename:bool	file:
operator <	gpgpu-sim/addrdec.cc	/^bool operator<(const addrdec_t &x, const addrdec_t &y) $/;"	f	typeref:typename:bool
operator <	intersim2/outputset.hpp	/^inline bool operator<(const OutputSet::sSetElement & se1, $/;"	f	typeref:typename:bool
operator <<	intersim2/flit.cpp	/^ostream& operator<<( ostream& os, const Flit& f )$/;"	f	typeref:typename:ostream &
operator <<	intersim2/power/buffer_monitor.cpp	/^ostream & operator<<( ostream & os, BufferMonitor const & obj ) {$/;"	f	typeref:typename:ostream &
operator <<	intersim2/power/switch_monitor.cpp	/^ostream & operator<<( ostream & os, SwitchMonitor const & obj ) {$/;"	f	typeref:typename:ostream &
operator <<	intersim2/stats.cpp	/^ostream & operator<<(ostream & os, const Stats & s) {$/;"	f	typeref:typename:ostream &
operator <<	intersim2/trafficmanager.hpp	/^ostream & operator<<(ostream & os, const vector<T> & v) {$/;"	f	typeref:typename:ostream &
operator =	cuda-sim/ptx_ir.h	/^   void operator=( const arg_buffer_t &another )$/;"	f	class:arg_buffer_t	typeref:typename:void
operator =	gpgpu-sim/stat-tool.cc	/^thread_insn_span& thread_insn_span::operator=(const thread_insn_span& other)$/;"	f	class:thread_insn_span	typeref:typename:thread_insn_span &
operator =	gpgpu-sim/stat-tool.h	/^   insn_warp_occ_logger& operator=(const insn_warp_occ_logger& p) {$/;"	f	class:insn_warp_occ_logger	typeref:typename:insn_warp_occ_logger &
operator =	gpuwattch/basic_components.h	/^    statsComponents & operator=(const statsComponents & rhs)$/;"	f	class:statsComponents	typeref:typename:statsComponents &
operator =	gpuwattch/cacti/cacti_interface.h	/^    powerComponents & operator=(const powerComponents & rhs)$/;"	f	class:powerComponents	typeref:typename:powerComponents &
operator =	gpuwattch/xmlParser.cc	/^XMLNode& XMLNode::operator=( const XMLNode& A )$/;"	f	class:XMLNode	typeref:typename:XMLNode &
operator ==	abstract_hardware_model.h	/^   bool operator==( const memory_space_t &x ) const { return (m_bank == x.m_bank) && (m_type == /;"	f	class:memory_space_t	typeref:typename:bool
operator ==	cuda-sim/ptx-stats.cc	/^    bool operator==(const ptx_file_line &other) const {$/;"	f	class:ptx_file_line	typeref:typename:bool	file:
operator ==	gpgpu-sim/addrdec.cc	/^bool operator==(const addrdec_t &x, const addrdec_t &y) $/;"	f	typeref:typename:bool
opndcoll_rfu_t	gpgpu-sim/shader.h	/^   opndcoll_rfu_t()$/;"	f	class:opndcoll_rfu_t
opndcoll_rfu_t	gpgpu-sim/shader.h	/^class opndcoll_rfu_t { \/\/ operand collector based register file unit$/;"	c
oprnd_type	abstract_hardware_model.h	/^    types_of_operands oprnd_type;     \/\/ code (uarch visible) identify if the operation is an /;"	m	class:inst_t	typeref:typename:types_of_operands
opt	gpuwattch/cacti/makefile	/^opt: $(TAR).mk obj_opt$/;"	t
opt	gpuwattch/makefile	/^opt: $(TAR).mk obj_opt$/;"	t
opt_area	gpuwattch/XML_Parse.h	/^	bool opt_area;$/;"	m	struct:__anon6448b92c1208	typeref:typename:bool
opt_area	gpuwattch/arch_const.h	/^const int		 	opt_area			=	0;$/;"	v	typeref:typename:const int
opt_clockrate	gpuwattch/XML_Parse.h	/^	bool opt_clockrate;$/;"	m	struct:__anon6448b92c1208	typeref:typename:bool
opt_dynamic_power	gpuwattch/XML_Parse.h	/^	bool opt_dynamic_power;$/;"	m	struct:__anon6448b92c1208	typeref:typename:bool
opt_dynamic_power	gpuwattch/arch_const.h	/^const int 			opt_dynamic_power	=	1;$/;"	v	typeref:typename:const int
opt_for_clk	gpuwattch/globalvar.h	/^EXTERN bool opt_for_clk;$/;"	v	typeref:typename:EXTERN bool
opt_lakage_power	gpuwattch/XML_Parse.h	/^	bool opt_lakage_power;$/;"	m	struct:__anon6448b92c1208	typeref:typename:bool
opt_lakage_power	gpuwattch/arch_const.h	/^const int 			opt_lakage_power	=	0;$/;"	v	typeref:typename:const int
opt_local	gpuwattch/XML_Parse.h	/^	bool opt_local;$/;"	m	struct:__anon6448b92c0708	typeref:typename:bool
opt_local	gpuwattch/array.h	/^  bool opt_local;$/;"	m	class:ArrayST	typeref:typename:bool
opt_local	gpuwattch/basic_components.h	/^	bool opt_local;$/;"	m	class:CoreDynParam	typeref:typename:bool
opt_local	gpuwattch/interconnect.h	/^    bool opt_local;$/;"	m	class:interconnect	typeref:typename:bool
opt_performance	gpuwattch/logic.h	/^	bool   opt_performance, embedded;$/;"	m	class:UndiffCore	typeref:typename:bool
optimize_array	gpuwattch/array.cc	/^void ArrayST::optimize_array()$/;"	f	class:ArrayST	typeref:typename:void
option	cuda-sim/ptx.y	/^option: type_spec$/;"	l
option_dtype	option_parser.h	/^enum option_dtype {$/;"	g
option_list	cuda-sim/ptx.y	/^option_list: option$/;"	l
option_parser.$(OEXT)	Makefile	/^option_parser.$(OEXT): option_parser.h$/;"	t
option_parser_cfgfile	option_parser.cc	/^void option_parser_cfgfile(option_parser_t opp,$/;"	f	typeref:typename:void
option_parser_cmdline	option_parser.cc	/^void option_parser_cmdline(option_parser_t opp,$/;"	f	typeref:typename:void
option_parser_create	option_parser.cc	/^option_parser_t option_parser_create() $/;"	f	typeref:typename:option_parser_t
option_parser_delimited_string	option_parser.cc	/^void option_parser_delimited_string(option_parser_t opp,$/;"	f	typeref:typename:void
option_parser_destroy	option_parser.cc	/^void option_parser_destroy(option_parser_t opp)$/;"	f	typeref:typename:void
option_parser_print	option_parser.cc	/^void option_parser_print(option_parser_t opp, $/;"	f	typeref:typename:void
option_parser_register	option_parser.cc	/^void option_parser_register(option_parser_t opp, $/;"	f	typeref:typename:void
option_parser_t	option_parser.h	/^typedef class OptionParser *option_parser_t;$/;"	t	typeref:class:OptionParser *
or_impl	cuda-sim/instructions.cc	/^void or_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
or_reduction	abstract_hardware_model.h	/^        void or_reduction(unsigned ctaid, unsigned barid, bool value) { reduction_storage[ctaid]/;"	f	class:core_t	typeref:typename:void
or_reduction	cuda-sim/ptx_sim.h	/^   void or_reduction(unsigned ctaid, unsigned barid, bool value) {m_core->or_reduction(ctaid,bar/;"	f	class:ptx_thread_info	typeref:typename:void
order_by_priority	gpgpu-sim/shader.cc	/^void scheduler_unit::order_by_priority( std::vector< T >& result_list,$/;"	f	class:scheduler_unit	typeref:typename:void
order_by_type	gpgpu-sim/shader.cc	/^void scheduler_unit::order_by_type( std::vector< T >& result_list_memory,$/;"	f	class:scheduler_unit	typeref:typename:void
order_lrr	gpgpu-sim/shader.cc	/^void scheduler_unit::order_lrr( std::vector< T >& result_list,$/;"	f	class:scheduler_unit	typeref:typename:void
order_warps	gpgpu-sim/shader.cc	/^void gto_scheduler::order_warps()$/;"	f	class:gto_scheduler	typeref:typename:void
order_warps	gpgpu-sim/shader.cc	/^void lrr_scheduler::order_warps()$/;"	f	class:lrr_scheduler	typeref:typename:void
order_warps	gpgpu-sim/shader.cc	/^void mascar_scheduler::order_warps()$/;"	f	class:mascar_scheduler	typeref:typename:void
order_warps	gpgpu-sim/shader.cc	/^void swl_scheduler::order_warps()$/;"	f	class:swl_scheduler	typeref:typename:void
order_warps	gpgpu-sim/shader.cc	/^void two_level_active_scheduler::order_warps()$/;"	f	class:two_level_active_scheduler	typeref:typename:void
orn_impl	cuda-sim/instructions.cc	/^void orn_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
other	intersim2/vc.hpp	/^  enum ePrioType { local_age_based, queue_length_based, hop_count_based, none, other };$/;"	e	enum:VC::ePrioType
out	abstract_hardware_model.h	/^    unsigned out[4];$/;"	m	class:inst_t	typeref:typename:unsigned[4]
out_cb	gpuwattch/cacti/highradix.h	/^    Crossbar *cb, *out_cb;$/;"	m	class:HighRadix	typeref:typename:Crossbar **
out_htree	gpuwattch/cacti/htree2.cc	/^void Htree2::out_htree()$/;"	f	class:Htree2	typeref:typename:void
out_pri	intersim2/allocators/allocator.hpp	/^    int out_pri;$/;"	m	struct:Allocator::sRequest	typeref:typename:int
out_rise_time	gpuwattch/cacti/htree2.h	/^    double in_rise_time, out_rise_time;$/;"	m	class:Htree2	typeref:typename:double
out_rise_time	gpuwattch/cacti/wire.h	/^    double in_rise_time, out_rise_time;$/;"	m	class:Wire	typeref:typename:double
out_rise_time	gpuwattch/interconnect.h	/^    double in_rise_time, out_rise_time;$/;"	m	class:interconnect	typeref:typename:double
out_w	gpuwattch/cacti/cacti_interface.h	/^    unsigned int out_w;\/\/ == nr_bits_out$/;"	m	class:InputParameter	typeref:typename:unsigned int
out_w	gpuwattch/cacti/parameter.h	/^    unsigned int out_w;\/\/ == nr_bits_out$/;"	m	class:DynamicParameter	typeref:typename:unsigned int
output	intersim2/routers/event_router.hpp	/^    int  output;$/;"	m	struct:EventRouter::tArrivalEvent	typeref:typename:int
outputArea	intersim2/power/power_module.hpp	/^  double outputArea;$/;"	m	class:Power_Module	typeref:typename:double
outputCtrlPower	intersim2/power/power_module.hpp	/^  double outputCtrlPower;$/;"	m	class:Power_Module	typeref:typename:double
outputPower	intersim2/power/power_module.hpp	/^  double outputPower;$/;"	m	class:Power_Module	typeref:typename:double
outputPowerClk	intersim2/power/power_module.hpp	/^  double outputPowerClk;$/;"	m	class:Power_Module	typeref:typename:double
output_UCA	gpuwattch/cacti/io.cc	/^void output_UCA(uca_org_t *fr)$/;"	f	typeref:typename:void
output_buffer	gpuwattch/cacti/crossbar.cc	/^double Crossbar::output_buffer()$/;"	f	class:Crossbar	typeref:typename:double
output_buffer	gpuwattch/cacti/htree2.cc	/^void Htree2::output_buffer(double s1, double s2, double l_eff)$/;"	f	class:Htree2	typeref:typename:void
output_data_csv	gpuwattch/cacti/io.cc	/^void output_data_csv(const uca_org_t & fin_res)$/;"	f	typeref:typename:void
output_file_name	intersim2/power/power_module.hpp	/^  string output_file_name;$/;"	m	class:Power_Module	typeref:typename:string
output_port	intersim2/outputset.hpp	/^    int output_port;$/;"	m	struct:OutputSet::sSetElement	typeref:typename:int
output_ports	gpuwattch/XML_Parse.h	/^	int output_ports;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int
output_ports	gpuwattch/basic_components.h	/^    int    input_ports, output_ports, min_ports, global_linked_ports;$/;"	m	class:NoCParam	typeref:typename:int
output_width_of_DRAM_chip	gpuwattch/XML_Parse.h	/^	int output_width_of_DRAM_chip;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:int
outside_mat	gpuwattch/cacti/basic_circuit.h	/^    outside_mat,$/;"	e	enum:Wire_placement
overal_ld_count	gpgpu-sim/visualizer.cc	/^   int overal_ld_count;$/;"	m	class:my_time_vector	typeref:typename:int	file:
overal_ld_time_dist	gpgpu-sim/visualizer.cc	/^   std::vector<double>  overal_ld_time_dist;$/;"	m	class:my_time_vector	typeref:typename:std::vector<double>	file:
overal_st_count	gpgpu-sim/visualizer.cc	/^   int overal_st_count;$/;"	m	class:my_time_vector	typeref:typename:int	file:
overal_st_time_dist	gpgpu-sim/visualizer.cc	/^   std::vector<double>  overal_st_time_dist;$/;"	m	class:my_time_vector	typeref:typename:std::vector<double>	file:
ownerWarpID	gpgpu-sim/wrc.h	/^		unsigned ownerWarpID;$/;"	m	class:Wrc	typeref:typename:unsigned
owner_id	gpgpu-sim/gpu-cache.h	/^      unsigned owner_id;$/;"	m	class:l1_cache	typeref:typename:unsigned
owner_warp	gpgpu-sim/shader.h	/^    shd_warp_t* owner_warp; $/;"	m	class:scheduler_unit	typeref:typename:shd_warp_t *
p	gpuwattch/gpgpu_sim_wrapper.h	/^	ParseXML * p;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:ParseXML *
pAttribute	gpuwattch/xmlParser.h	/^          XMLAttribute           *pAttribute;     \/\/ Array of attributes$/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:typename:XMLAttribute *
pChild	gpuwattch/xmlParser.h	/^          XMLNode                *pChild;         \/\/ Array of child nodes$/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:typename:XMLNode *
pClear	gpuwattch/xmlParser.h	/^          XMLClear               *pClear;         \/\/ Array of clear fields$/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:typename:XMLClear *
pClr	gpuwattch/xmlParser.cc	/^    ALLXMLClearTag *pClr;$/;"	m	struct:__anon33c5d5fd0308	typeref:typename:ALLXMLClearTag *	file:
pOrder	gpuwattch/xmlParser.h	/^          int                    *pOrder;         \/\/ order of the child_nodes,text_fields,clea/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:typename:int *
pParent	gpuwattch/xmlParser.h	/^          struct XMLNodeDataTag  *pParent;        \/\/ Pointer to parent element (=NULL if root)$/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:struct:XMLNodeDataTag *
pStr	gpuwattch/xmlParser.cc	/^    XMLCSTR     pStr;$/;"	m	struct:__anon33c5d5fd0308	typeref:typename:XMLCSTR	file:
pText	gpuwattch/xmlParser.h	/^          XMLCSTR                *pText;          \/\/ Array of text fields$/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:typename:XMLCSTR *
p_address_width	gpuwattch/basic_components.h	/^    int  int_data_width, fp_data_width,v_address_width, p_address_width;$/;"	m	class:CoreDynParam	typeref:typename:int
pad_address	cuda-sim/ptx_parser.cc	/^int pad_address (new_addr_type address, unsigned size, unsigned maxalign) {$/;"	f	typeref:typename:int
page_size_in_bits	gpuwattch/cacti/cacti_interface.h	/^  int page_size_in_bits;$/;"	m	struct:__anon592e3c280108	typeref:typename:int
page_size_of_DRAM_chip	gpuwattch/XML_Parse.h	/^	int page_size_of_DRAM_chip;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:int
page_sz_bits	gpuwattch/cacti/cacti_interface.h	/^    unsigned int page_sz_bits;$/;"	m	class:InputParameter	typeref:typename:unsigned int
parallel	gpuwattch/cacti/basic_circuit.h	/^    parallel,$/;"	e	enum:Half_net_topology
param_entry	cuda-sim/ptx.y	/^param_entry: PARAM_DIRECTIVE { add_space_spec(param_space_unclassified,0); } variable_spec ptr_s/;"	l
param_info	cuda-sim/ptx_ir.h	/^   param_info( std::string name, int type, size_t size, bool is_ptr, memory_space_t ptr_space ) $/;"	f	class:param_info
param_info	cuda-sim/ptx_ir.h	/^   param_info() { m_valid = false; m_value_set=false; m_size = 0; m_is_ptr = false; }$/;"	f	class:param_info
param_info	cuda-sim/ptx_ir.h	/^class param_info {$/;"	c
param_list	cuda-sim/ptx.y	/^param_list: \/*empty*\/$/;"	l
param_space_kernel	abstract_hardware_model.h	/^   param_space_kernel,  \/* global to all threads in a kernel : read-only *\/$/;"	e	enum:_memory_space_t
param_space_local	abstract_hardware_model.h	/^   param_space_local,   \/* local to a thread : read-writable *\/$/;"	e	enum:_memory_space_t
param_space_unclassified	abstract_hardware_model.h	/^   param_space_unclassified,$/;"	e	enum:_memory_space_t
param_t	cuda-sim/ptx_sim.h	/^struct param_t {$/;"	s
param_to_shared	cuda-sim/cuda-sim.cc	/^void function_info::param_to_shared( memory_space *shared_mem, symbol_table *symtab ) $/;"	f	class:function_info	typeref:typename:void
parse	gpuwattch/XML_Parse.cc	/^void ParseXML::parse(char* filepath)$/;"	f	class:ParseXML	typeref:typename:void
parseClearTag	gpuwattch/xmlParser.cc	/^char XMLNode::parseClearTag(void *px, void *_pClear)$/;"	f	class:XMLNode	typeref:typename:char
parseFile	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::parseFile(XMLCSTR filename, XMLCSTR tag, XMLResults *pResults)$/;"	f	class:XMLNode	typeref:typename:XMLNode
parseString	gpuwattch/xmlParser.cc	/^XMLNode XMLNode::parseString(XMLCSTR lpszXML, XMLCSTR tag, XMLResults *pResults)$/;"	f	class:XMLNode	typeref:typename:XMLNode
parse_assert	cuda-sim/ptx_parser.cc	/^#define parse_assert(/;"	d	file:
parse_assert_impl	cuda-sim/ptx_parser.cc	/^void parse_assert_impl( int test_value, const char *file, unsigned line, const char *msg, ... )$/;"	f	typeref:typename:void
parse_cfg	gpuwattch/cacti/io.cc	/^InputParameter::parse_cfg(const string & in_file)$/;"	f	class:InputParameter	typeref:typename:void
parse_error	cuda-sim/ptx_parser.cc	/^#define parse_error(/;"	d	file:
parse_error_impl	cuda-sim/ptx_parser.cc	/^void parse_error_impl( const char *file, unsigned line, const char *msg, ... )$/;"	f	typeref:typename:void
partition_address	gpgpu-sim/addrdec.cc	/^new_addr_type linear_to_raw_address_translation::partition_address( new_addr_type addr ) const $/;"	f	class:linear_to_raw_address_translation	typeref:typename:new_addr_type
partition_mf_allocator	gpgpu-sim/l2cache.h	/^    partition_mf_allocator( const memory_config *config )$/;"	f	class:partition_mf_allocator
partition_mf_allocator	gpgpu-sim/l2cache.h	/^class partition_mf_allocator : public mem_fetch_allocator {$/;"	c
pc	abstract_hardware_model.h	/^    address_type pc;        \/\/ program counter address of instruction$/;"	m	class:inst_t	typeref:typename:address_type
pc	gpgpu-sim/shader.h	/^   unsigned pc;$/;"	m	struct:insn_latency_info	typeref:typename:unsigned
pc_to_instruction	cuda-sim/ptx_ir.h	/^   static const ptx_instruction* pc_to_instruction(unsigned pc) $/;"	f	class:function_info	typeref:typename:const ptx_instruction *
pc_width	gpuwattch/basic_components.h	/^    int  perThreadState, globalCheckpoint, instruction_length, pc_width, opcode_length, micro_op/;"	m	class:CoreDynParam	typeref:typename:int
pcie	gpuwattch/XML_Parse.h	/^	system_pcie pcie;$/;"	m	struct:__anon6448b92c1208	typeref:typename:system_pcie
pcie	gpuwattch/processor.h	/^    PCIeController   * pcie;$/;"	m	class:Processor	typeref:typename:PCIeController *
pciep	gpuwattch/iocontrollers.h	/^    PCIeParam  pciep;$/;"	m	class:PCIeController	typeref:typename:PCIeParam
pcies	gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor	typeref:typename:Component
pcx_arbassoc	gpuwattch/arch_const.h	/^const int pcx_arbassoc=1;$/;"	v	typeref:typename:const int
pcx_arbblocksize	gpuwattch/arch_const.h	/^const int pcx_arbblocksize=2;$/;"	v	typeref:typename:const int
pcx_arbsize	gpuwattch/arch_const.h	/^const int pcx_arbsize=128;$/;"	v	typeref:typename:const int
pcx_bufferassoc	gpuwattch/arch_const.h	/^const int pcx_bufferassoc=1;$/;"	v	typeref:typename:const int
pcx_bufferblocksize	gpuwattch/arch_const.h	/^const int pcx_bufferblocksize=32;$/;"	v	typeref:typename:const int
pcx_buffersize	gpuwattch/arch_const.h	/^const int pcx_buffersize=1024;$/;"	v	typeref:typename:const int
pcx_numarb	gpuwattch/arch_const.h	/^const int pcx_numarb=5;$/;"	v	typeref:typename:const int
pcx_numbuffer	gpuwattch/arch_const.h	/^const int pcx_numbuffer=5;$/;"	v	typeref:typename:const int
pdata	cuda-sim/ptx_sim.h	/^   const void *pdata;$/;"	m	struct:param_t	typeref:typename:const void *
pdom	cuda-sim/ptx_ir.h	/^   bool pdom(const basic_block_t *B) {$/;"	f	struct:basic_block_t	typeref:typename:bool
peakDataTransferRate	gpuwattch/basic_components.h	/^    double  clockRate,num_mcs, peakDataTransferRate, num_channels;$/;"	m	class:MCParam	typeref:typename:double
peak_commitW	gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_de/;"	m	class:CoreDynParam	typeref:typename:int
peak_issueW	gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_de/;"	m	class:CoreDynParam	typeref:typename:int
peak_issue_width	gpuwattch/XML_Parse.h	/^	int peak_issue_width;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
peak_transfer_rate	gpuwattch/XML_Parse.h	/^	double peak_transfer_rate;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
peak_transfer_rate	gpuwattch/XML_Parse.h	/^	int peak_transfer_rate;$/;"	m	struct:__anon6448b92c0e08	typeref:typename:int
peek	gpgpu-sim/gpu-cache.h	/^        T &peek( unsigned index ) $/;"	f	class:tex_cache::fifo	typeref:typename:T &
peek	gpgpu-sim/gpu-cache.h	/^        T &peek() const$/;"	f	class:tex_cache::fifo	typeref:typename:T &
peek	gpgpu-sim/gpu-cache.h	/^        const T &peek( unsigned index ) const $/;"	f	class:tex_cache::fifo	typeref:typename:const T &
pendingWrites	gpgpu-sim/scoreboard.cc	/^bool Scoreboard::pendingWrites(unsigned wid) const$/;"	f	class:Scoreboard	typeref:typename:bool
pending_hits	gpgpu-sim/gpu-cache.h	/^    unsigned pending_hits;$/;"	m	struct:cache_sub_stats	typeref:typename:unsigned
pending_writes	gpgpu-sim/dram.h	/^   unsigned int pending_writes;$/;"	m	class:dram_t	typeref:typename:unsigned int
perThreadState	gpuwattch/basic_components.h	/^    int  perThreadState, globalCheckpoint, instruction_length, pc_width, opcode_length, micro_op/;"	m	class:CoreDynParam	typeref:typename:int
per_access_energy	gpuwattch/logic.h	/^	double energy, base_energy,per_access_energy, leakage, gate_leakage;$/;"	m	class:FunctionalUnit	typeref:typename:double
per_bitline_read_energy	gpuwattch/cacti/mat.h	/^    double   per_bitline_read_energy;$/;"	m	class:Mat	typeref:typename:double
per_dq_read_power	gpuwattch/basic_components.h	/^	int per_dq_read_power; \/\/ in mW$/;"	m	class:DRAMParam	typeref:typename:int
per_dq_write_power	gpuwattch/basic_components.h	/^	int per_dq_write_power; \/\/ in mW$/;"	m	class:DRAMParam	typeref:typename:int
per_stage_vector	gpuwattch/cacti/cacti_interface.h	/^  int per_stage_vector;$/;"	m	class:InputParameter	typeref:typename:int
per_thread_info	abstract_hardware_model.h	/^        per_thread_info() {$/;"	f	struct:warp_inst_t::per_thread_info
per_thread_info	abstract_hardware_model.h	/^    struct per_thread_info {$/;"	s	class:warp_inst_t
perc_load	gpuwattch/basic_components.h	/^    double duty_cycle, perc_load;$/;"	m	class:NIUParam	typeref:typename:double
perc_load	gpuwattch/basic_components.h	/^    double duty_cycle, perc_load;$/;"	m	class:PCIeParam	typeref:typename:double
perc_load	gpuwattch/basic_components.h	/^    double frontend_duty_cycle, duty_cycle, perc_load;$/;"	m	class:MCParam	typeref:typename:double
perf_count_label	gpuwattch/XML_Parse.cc	/^const char * perf_count_label[] = {"TOT_INST,", "FP_INT,", "IC_H,", "IC_M,", "DC_RH,", "DC_RM,",/;"	v	typeref:typename:const char * []
perf_count_t	gpuwattch/XML_Parse.h	/^enum perf_count_t {$/;"	g
perfect_memory_interface	gpgpu-sim/shader.h	/^    perfect_memory_interface( shader_core_ctx *core, simt_core_cluster *cluster ) { m_core=core;/;"	f	class:perfect_memory_interface
perfect_memory_interface	gpgpu-sim/shader.h	/^class perfect_memory_interface : public mem_fetch_interface {$/;"	c
peri_global	gpuwattch/cacti/parameter.h	/^  DeviceType peri_global; \/\/ peripheral global$/;"	m	class:TechnologyParameter	typeref:typename:DeviceType
peri_global_tech_type	gpuwattch/cacti/cacti_interface.h	/^    unsigned int peri_global_tech_type;$/;"	m	class:InputParameter	typeref:typename:unsigned int
ph	intersim2/flit.hpp	/^  mutable int ph;$/;"	m	class:Flit	typeref:typename:int
phy_Regs_FRF_size	gpuwattch/XML_Parse.h	/^	int phy_Regs_FRF_size;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
phy_Regs_IRF_size	gpuwattch/XML_Parse.h	/^	int phy_Regs_IRF_size;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
phy_float_regfile_reads	gpuwattch/XML_Parse.h	/^	double phy_float_regfile_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
phy_float_regfile_writes	gpuwattch/XML_Parse.h	/^	double phy_float_regfile_writes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
phy_freg_width	gpuwattch/basic_components.h	/^    int  arch_ireg_width, arch_freg_width, phy_ireg_width, phy_freg_width;$/;"	m	class:CoreDynParam	typeref:typename:int
phy_int_regfile_reads	gpuwattch/XML_Parse.h	/^	double phy_int_regfile_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
phy_int_regfile_writes	gpuwattch/XML_Parse.h	/^	double phy_int_regfile_writes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
phy_ireg_width	gpuwattch/basic_components.h	/^    int  arch_ireg_width, arch_freg_width, phy_ireg_width, phy_freg_width;$/;"	m	class:CoreDynParam	typeref:typename:int
physical_address_width	gpuwattch/XML_Parse.h	/^	int physical_address_width;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
physical_address_width	gpuwattch/XML_Parse.h	/^	int physical_address_width;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
pid	intersim2/flit.hpp	/^  int  pid;$/;"	m	class:Flit	typeref:typename:int
pipeLogic	gpuwattch/memoryctrl.h	/^    Pipeline * pipeLogic;$/;"	m	class:MemoryController	typeref:typename:Pipeline *
pipe_widths	gpgpu-sim/shader.h	/^    int pipe_widths[N_PIPELINE_STAGES];$/;"	m	struct:shader_core_config	typeref:typename:int[]
pipelinable	gpuwattch/cacti/cacti_interface.h	/^  bool pipelinable;$/;"	m	class:InputParameter	typeref:typename:bool
pipelinable	gpuwattch/interconnect.h	/^    bool pipelinable;$/;"	m	class:interconnect	typeref:typename:bool
pipeline_depth	gpuwattch/XML_Parse.h	/^	int pipeline_depth[20];$/;"	m	struct:__anon6448b92c0708	typeref:typename:int[20]
pipeline_duty_cycle	gpuwattch/XML_Parse.h	/^	double pipeline_duty_cycle;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
pipeline_duty_cycle	gpuwattch/basic_components.h	/^    double pipeline_duty_cycle, total_cycles, busy_cycles, idle_cycles;$/;"	m	class:CoreDynParam	typeref:typename:double
pipeline_stage	gpuwattch/logic.h	/^	double pipeline_stage,num_hthreads,issue_width;$/;"	m	class:UndiffCore	typeref:typename:double
pipeline_stage_name_decode	gpgpu-sim/shader.h	/^const char* const pipeline_stage_name_decode[] = {$/;"	v	typeref:typename:const char * const[]
pipeline_stage_name_t	gpgpu-sim/shader.h	/^enum pipeline_stage_name_t {$/;"	g
pipeline_stages	gpuwattch/basic_components.h	/^    int  num_hthreads, pipeline_stages, fp_pipeline_stages, num_pipelines, num_fp_pipelines;$/;"	m	class:CoreDynParam	typeref:typename:int
pipeline_stages	gpuwattch/cacti/cacti_interface.h	/^  int pipeline_stages;$/;"	m	class:InputParameter	typeref:typename:int
pipeline_widths_string	gpgpu-sim/shader.h	/^    char* pipeline_widths_string;$/;"	m	struct:shader_core_config	typeref:typename:char *
pipelined_simd_unit	gpgpu-sim/shader.cc	/^pipelined_simd_unit::pipelined_simd_unit( register_set* result_port, const shader_core_config *c/;"	f	class:pipelined_simd_unit
pipelined_simd_unit	gpgpu-sim/shader.h	/^class pipelined_simd_unit : public simd_function_unit {$/;"	c
pipelines_per_core	gpuwattch/XML_Parse.h	/^	int pipelines_per_core[20];$/;"	m	struct:__anon6448b92c0708	typeref:typename:int[20]
pitch	gpuwattch/cacti/parameter.h	/^    double pitch;$/;"	m	class:TechnologyParameter::InterconnectType	typeref:typename:double
planar_adapt_mesh	intersim2/routefunc.cpp	/^void planar_adapt_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool/;"	f	typeref:typename:void
pmevent_impl	cuda-sim/instructions.cc	/^void pmevent_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(p/;"	f	typeref:typename:void
pmos	gpuwattch/cacti/basic_circuit.h	/^    pmos,$/;"	e	enum:Gate_type
pmos_to_nmos_sz_ratio	gpuwattch/cacti/basic_circuit.cc	/^double pmos_to_nmos_sz_ratio($/;"	f	typeref:typename:double
pop	gpgpu-sim/delayqueue.h	/^   T* pop() $/;"	f	class:fifo_pipeline	typeref:typename:T *
pop	gpgpu-sim/gpu-cache.h	/^        T pop() $/;"	f	class:tex_cache::fifo	typeref:typename:T
pop	gpgpu-sim/l2cache.cc	/^mem_fetch* memory_sub_partition::pop() $/;"	f	class:memory_sub_partition	typeref:typename:mem_fetch *
pop_breakaddr	cuda-sim/ptx_sim.cc	/^const operand_info& ptx_thread_info::pop_breakaddr() $/;"	f	class:ptx_thread_info	typeref:typename:const operand_info &
pop_stack	gpgpu-sim/stack.cc	/^address_type pop_stack(Stack *S) {$/;"	f	typeref:typename:address_type
popc_impl	cuda-sim/instructions.cc	/^void popc_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
popc_reduction	abstract_hardware_model.h	/^        void popc_reduction(unsigned ctaid, unsigned barid, bool value) { reduction_storage[ctai/;"	f	class:core_t	typeref:typename:void
popc_reduction	cuda-sim/ptx_sim.h	/^   void popc_reduction(unsigned ctaid, unsigned barid, bool value) {m_core->popc_reduction(ctaid/;"	f	class:ptx_thread_info	typeref:typename:void
port	intersim2/allocators/allocator.hpp	/^    int port;$/;"	m	struct:Allocator::sRequest	typeref:typename:int
port_available_cycles	gpgpu-sim/gpu-cache.h	/^    unsigned long long port_available_cycles; $/;"	m	struct:cache_sub_stats	typeref:typename:unsigned long long
port_vector_t	gpgpu-sim/shader.h	/^   typedef std::vector<register_set*> port_vector_t;$/;"	t	class:opndcoll_rfu_t	typeref:typename:std::vector<register_set * >
ports	gpuwattch/XML_Parse.h	/^	int ports[20];$/;"	m	struct:__anon6448b92c0808	typeref:typename:int[20]
ports	gpuwattch/XML_Parse.h	/^	int ports[20];$/;"	m	struct:__anon6448b92c0908	typeref:typename:int[20]
ports	gpuwattch/XML_Parse.h	/^	int ports[20];$/;"	m	struct:__anon6448b92c0a08	typeref:typename:int[20]
ports	gpuwattch/XML_Parse.h	/^	int ports[20];$/;"	m	struct:__anon6448b92c0b08	typeref:typename:int[20]
ports_of_input_buffer	gpuwattch/XML_Parse.h	/^	int ports_of_input_buffer[20];$/;"	m	struct:__anon6448b92c0c08	typeref:typename:int[20]
ports_of_input_buffer	gpuwattch/XML_Parse.h	/^	int ports_of_input_buffer[20];$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int[20]
positionOfChildNode	gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfChildNode(XMLCSTR name, int count) const$/;"	f	class:XMLNode	typeref:typename:XMLElementPosition
positionOfChildNode	gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfChildNode(XMLNode x)  const$/;"	f	class:XMLNode	typeref:typename:XMLElementPosition
positionOfChildNode	gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfChildNode(int i) const { if (i>=d->nChild) i=d->nChild-1; /;"	f	class:XMLNode	typeref:typename:XMLElementPosition
positionOfClear	gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfClear    (int i) const { if (i>=d->nClear) i=d->nClear-1; /;"	f	class:XMLNode	typeref:typename:XMLElementPosition
positionOfClear	gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfClear(XMLCSTR lpszValue) const { return positionOfClear(in/;"	f	class:XMLNode	typeref:typename:XMLElementPosition
positionOfClear	gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfClear(XMLClear *a) const { if (a) return positionOfClear(a/;"	f	class:XMLNode	typeref:typename:XMLElementPosition
positionOfText	gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfText     (int i) const { if (i>=d->nText ) i=d->nText-1;  /;"	f	class:XMLNode	typeref:typename:XMLElementPosition
positionOfText	gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfText (XMLCSTR lpszValue) const { return positionOfText (in/;"	f	class:XMLNode	typeref:typename:XMLElementPosition
position_of_mrq_chosen	gpgpu-sim/mem_latency_stat.h	/^   unsigned int *position_of_mrq_chosen; \/\/position of mrq in m_queue chosen $/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
postdominator_ids	cuda-sim/ptx_ir.h	/^   std::set<int> postdominator_ids;$/;"	m	struct:basic_block_t	typeref:typename:std::set<int>
pow2_histogram	gpgpu-sim/histogram.cc	/^pow2_histogram::pow2_histogram (std::string name, int nbins, int* bins) $/;"	f	class:pow2_histogram
pow2_histogram	gpgpu-sim/histogram.h	/^class pow2_histogram : public binned_histogram {$/;"	c
power	gpuwattch/cacti/cacti_interface.h	/^    powerDef power;$/;"	m	class:uca_org_t	typeref:typename:powerDef
power	gpuwattch/cacti/cacti_interface.h	/^  powerDef power;$/;"	m	class:mem_array	typeref:typename:powerDef
power	gpuwattch/cacti/component.h	/^    powerDef power,rt_power;$/;"	m	class:Component	typeref:typename:powerDef
power	gpuwattch/cacti/decoder.h	/^  powerDef power;$/;"	m	class:Driver	typeref:typename:powerDef
powerComponents	gpuwattch/cacti/cacti_interface.h	/^    powerComponents() : dynamic(0), leakage(0), gate_leakage(0), short_circuit(0), longer_channe/;"	f	class:powerComponents
powerComponents	gpuwattch/cacti/cacti_interface.h	/^    powerComponents(const powerComponents & obj) { *this = obj; }$/;"	f	class:powerComponents
powerComponents	gpuwattch/cacti/cacti_interface.h	/^class powerComponents$/;"	c
powerCrossbar	intersim2/power/power_module.cpp	/^double Power_Module::powerCrossbar(double width, double inputs, double outputs, double from, dou/;"	f	class:Power_Module	typeref:typename:double
powerCrossbarCtrl	intersim2/power/power_module.cpp	/^double Power_Module::powerCrossbarCtrl(double width, double inputs, double outputs){$/;"	f	class:Power_Module	typeref:typename:double
powerCrossbarLeak	intersim2/power/power_module.cpp	/^double Power_Module::powerCrossbarLeak (double width, double inputs, double outputs){$/;"	f	class:Power_Module	typeref:typename:double
powerDef	gpuwattch/cacti/cacti_interface.h	/^    powerDef() : readOp(), writeOp(), searchOp() { }$/;"	f	class:powerDef
powerDef	gpuwattch/cacti/cacti_interface.h	/^class powerDef$/;"	c
powerMemoryBitLeak	intersim2/power/power_module.cpp	/^double Power_Module::powerMemoryBitLeak(double memoryDepth ){$/;"	f	class:Power_Module	typeref:typename:double
powerMemoryBitRead	intersim2/power/power_module.cpp	/^double Power_Module::powerMemoryBitRead(double memoryDepth){$/;"	f	class:Power_Module	typeref:typename:double
powerMemoryBitWrite	intersim2/power/power_module.cpp	/^double Power_Module:: powerMemoryBitWrite(double memoryDepth){$/;"	f	class:Power_Module	typeref:typename:double
powerOutputCtrl	intersim2/power/power_module.cpp	/^double Power_Module:: powerOutputCtrl(double width) {$/;"	f	class:Power_Module	typeref:typename:double
powerRepeatedWire	intersim2/power/power_module.cpp	/^double Power_Module::powerRepeatedWire(double L, double K, double M, double N){$/;"	f	class:Power_Module	typeref:typename:double
powerRepeatedWireLeak	intersim2/power/power_module.cpp	/^double Power_Module::powerRepeatedWireLeak (double K, double M, double N){$/;"	f	class:Power_Module	typeref:typename:double
powerWireClk	intersim2/power/power_module.cpp	/^double Power_Module:: powerWireClk (double M, double W){$/;"	f	class:Power_Module	typeref:typename:double
powerWireDFF	intersim2/power/power_module.cpp	/^double Power_Module::powerWireDFF(double M, double W, double alpha){$/;"	f	class:Power_Module	typeref:typename:double
powerWordLine	intersim2/power/power_module.cpp	/^double Power_Module::powerWordLine(double memoryWidth, double memoryDepth){$/;"	f	class:Power_Module	typeref:typename:double
power_L2	gpuwattch/cacti/decoder.h	/^  powerDef power_L2;$/;"	m	class:PredecBlk	typeref:typename:powerDef
power_addr_horizontal_htree	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_addr_horizontal_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_addr_input_htree	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_addr_input_htree;$/;"	m	class:mem_array	typeref:typename:powerDef
power_addr_input_htree	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_addr_input_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_addr_vertical_htree	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_addr_vertical_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_bit	gpuwattch/cacti/htree2.h	/^    powerDef power_bit;$/;"	m	class:Htree2	typeref:typename:powerDef
power_bit	gpuwattch/interconnect.h	/^    powerDef power_bit;$/;"	m	class:interconnect	typeref:typename:powerDef
power_bit_mux_decoders	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bit_mux_decoders;$/;"	m	class:mem_array	typeref:typename:powerDef
power_bit_mux_decoders	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bit_mux_decoders;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_bit_mux_decoders	gpuwattch/cacti/mat.h	/^    powerDef power_bit_mux_decoders;$/;"	m	class:Mat	typeref:typename:powerDef
power_bit_mux_predecoder_blocks	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bit_mux_predecoder_blocks;$/;"	m	class:mem_array	typeref:typename:powerDef
power_bit_mux_predecoder_blocks	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bit_mux_predecoder_blocks;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_bit_mux_predecoder_drivers	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bit_mux_predecoder_drivers;$/;"	m	class:mem_array	typeref:typename:powerDef
power_bit_mux_predecoder_drivers	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bit_mux_predecoder_drivers;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_bitline	gpuwattch/cacti/mat.h	/^    powerDef power_bitline, power_searchline, power_matchline;$/;"	m	class:Mat	typeref:typename:powerDef
power_bitlines	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bitlines;$/;"	m	class:mem_array	typeref:typename:powerDef
power_bitlines	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bitlines;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_bl_precharge_eq_drv	gpuwattch/cacti/mat.h	/^    powerDef power_bl_precharge_eq_drv;$/;"	m	class:Mat	typeref:typename:powerDef
power_cam_all_active	gpuwattch/cacti/mat.h	/^    powerDef power_cam_all_active;$/;"	m	class:Mat	typeref:typename:powerDef
power_cam_bitline_precharge_eq_drv	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_cam_bitline_precharge_eq_drv;$/;"	m	class:mem_array	typeref:typename:powerDef
power_comparator	gpuwattch/cacti/mat.h	/^    powerDef power_comparator;$/;"	m	class:Mat	typeref:typename:powerDef
power_comparators	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_comparators;$/;"	m	class:mem_array	typeref:typename:powerDef
power_comparators	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_comparators;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_config	gpgpu-sim/gpu-sim.h	/^	power_config()$/;"	f	struct:power_config
power_config	gpgpu-sim/gpu-sim.h	/^struct power_config {$/;"	s
power_core_stat_t	gpgpu-sim/power_stat.cc	/^power_core_stat_t::power_core_stat_t( const struct shader_core_config *shader_config, shader_cor/;"	f	class:power_core_stat_t
power_core_stat_t	gpgpu-sim/power_stat.h	/^class power_core_stat_t : public shader_core_power_stats_pod {$/;"	c
power_crossbar	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_crossbar;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_data_input_htree	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_data_input_htree;$/;"	m	class:mem_array	typeref:typename:powerDef
power_data_input_htree	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_data_input_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_data_output_htree	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_data_output_htree;$/;"	m	class:mem_array	typeref:typename:powerDef
power_data_output_htree	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_data_output_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_datain_horizontal_htree	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_datain_horizontal_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_datain_vertical_htree	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_datain_vertical_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_dataout_horizontal_htree	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_dataout_horizontal_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_dataout_vertical_htree	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_dataout_vertical_htree;$/;"	m	class:mem_array	typeref:typename:powerDef
power_dataout_vertical_htree	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_dataout_vertical_htree;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_fa_cam	gpuwattch/cacti/mat.h	/^    powerDef power_fa_cam;  \/\/ TODO: leakage power is not computed yet$/;"	m	class:Mat	typeref:typename:powerDef
power_htree_in_search	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_htree_in_search;$/;"	m	class:mem_array	typeref:typename:powerDef
power_htree_out_search	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_htree_out_search;$/;"	m	class:mem_array	typeref:typename:powerDef
power_matchline	gpuwattch/cacti/mat.h	/^    powerDef power_bitline, power_searchline, power_matchline;$/;"	m	class:Mat	typeref:typename:powerDef
power_matchline_precharge	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_matchline_precharge;$/;"	m	class:mem_array	typeref:typename:powerDef
power_matchline_precharge	gpuwattch/cacti/mat.h	/^    powerDef power_matchline_precharge;$/;"	m	class:Mat	typeref:typename:powerDef
power_matchline_to_wordline_drv	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_matchline_to_wordline_drv;$/;"	m	class:mem_array	typeref:typename:powerDef
power_matchlines	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_matchlines;$/;"	m	class:mem_array	typeref:typename:powerDef
power_mem_stat_t	gpgpu-sim/power_stat.cc	/^power_mem_stat_t::power_mem_stat_t(const struct memory_config *mem_config, const struct shader_c/;"	f	class:power_mem_stat_t
power_mem_stat_t	gpgpu-sim/power_stat.h	/^class power_mem_stat_t : public mem_power_stats_pod{$/;"	c
power_metrics_calculations	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::power_metrics_calculations()$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
power_ml_to_ram_wl_drv	gpuwattch/cacti/mat.h	/^    powerDef power_ml_to_ram_wl_drv;$/;"	m	class:Mat	typeref:typename:powerDef
power_nand2_path	gpuwattch/cacti/decoder.h	/^  powerDef power_nand2_path;$/;"	m	class:PredecBlk	typeref:typename:powerDef
power_nand2_path	gpuwattch/cacti/decoder.h	/^  powerDef power_nand2_path;$/;"	m	class:PredecBlkDrv	typeref:typename:powerDef
power_nand3_path	gpuwattch/cacti/decoder.h	/^  powerDef power_nand3_path;$/;"	m	class:PredecBlk	typeref:typename:powerDef
power_nand3_path	gpuwattch/cacti/decoder.h	/^  powerDef power_nand3_path;$/;"	m	class:PredecBlkDrv	typeref:typename:powerDef
power_output_drivers_at_subarray	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_output_drivers_at_subarray;$/;"	m	class:mem_array	typeref:typename:powerDef
power_output_drivers_at_subarray	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_output_drivers_at_subarray;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_prechg_eq_drivers	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_prechg_eq_drivers;$/;"	m	class:mem_array	typeref:typename:powerDef
power_prechg_eq_drivers	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_prechg_eq_drivers;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_routing_to_bank	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_routing_to_bank;$/;"	m	class:mem_array	typeref:typename:powerDef
power_routing_to_bank	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_routing_to_bank;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_routing_to_bank	gpuwattch/cacti/uca.h	/^    powerDef power_routing_to_bank;$/;"	m	class:UCA	typeref:typename:powerDef
power_row_decoders	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_row_decoders;$/;"	m	class:mem_array	typeref:typename:powerDef
power_row_decoders	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_row_decoders;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_row_decoders	gpuwattch/cacti/mat.h	/^    powerDef power_row_decoders;$/;"	m	class:Mat	typeref:typename:powerDef
power_row_predecoder_blocks	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_row_predecoder_blocks;$/;"	m	class:mem_array	typeref:typename:powerDef
power_row_predecoder_blocks	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_row_predecoder_blocks;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_row_predecoder_drivers	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_row_predecoder_drivers;$/;"	m	class:mem_array	typeref:typename:powerDef
power_row_predecoder_drivers	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_row_predecoder_drivers;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_sa	gpuwattch/cacti/mat.h	/^    powerDef power_sa;$/;"	m	class:Mat	typeref:typename:powerDef
power_sa_mux_lev_1_decoders	gpuwattch/cacti/mat.h	/^    powerDef power_sa_mux_lev_1_decoders;$/;"	m	class:Mat	typeref:typename:powerDef
power_sa_mux_lev_2_decoders	gpuwattch/cacti/mat.h	/^    powerDef power_sa_mux_lev_2_decoders;$/;"	m	class:Mat	typeref:typename:powerDef
power_searchline	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_searchline;$/;"	m	class:mem_array	typeref:typename:powerDef
power_searchline	gpuwattch/cacti/mat.h	/^    powerDef power_bitline, power_searchline, power_matchline;$/;"	m	class:Mat	typeref:typename:powerDef
power_searchline_precharge	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_searchline_precharge;$/;"	m	class:mem_array	typeref:typename:powerDef
power_searchline_precharge	gpuwattch/cacti/mat.h	/^    powerDef power_searchline_precharge;$/;"	m	class:Mat	typeref:typename:powerDef
power_sense_amps	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_sense_amps;$/;"	m	class:mem_array	typeref:typename:powerDef
power_sense_amps	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_sense_amps;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_senseamp_mux_lev_1_decoders	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_1_decoders;$/;"	m	class:mem_array	typeref:typename:powerDef
power_senseamp_mux_lev_1_decoders	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_1_decoders;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_senseamp_mux_lev_1_predecoder_blocks	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_1_predecoder_blocks;$/;"	m	class:mem_array	typeref:typename:powerDef
power_senseamp_mux_lev_1_predecoder_blocks	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_1_predecoder_blocks;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_senseamp_mux_lev_1_predecoder_drivers	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_1_predecoder_drivers;$/;"	m	class:mem_array	typeref:typename:powerDef
power_senseamp_mux_lev_1_predecoder_drivers	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_1_predecoder_drivers;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_senseamp_mux_lev_2_decoders	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_2_decoders;$/;"	m	class:mem_array	typeref:typename:powerDef
power_senseamp_mux_lev_2_decoders	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_2_decoders;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_senseamp_mux_lev_2_predecoder_blocks	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_2_predecoder_blocks;$/;"	m	class:mem_array	typeref:typename:powerDef
power_senseamp_mux_lev_2_predecoder_blocks	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_2_predecoder_blocks;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_senseamp_mux_lev_2_predecoder_drivers	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_2_predecoder_drivers;$/;"	m	class:mem_array	typeref:typename:powerDef
power_senseamp_mux_lev_2_predecoder_drivers	gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_2_predecoder_drivers;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
power_stat_t	gpgpu-sim/power_stat.cc	/^power_stat_t::power_stat_t( const struct shader_core_config *shader_config,float * average_pipel/;"	f	class:power_stat_t
power_stat_t	gpgpu-sim/power_stat.h	/^class power_stat_t {$/;"	c
power_subarray_out_drv	gpuwattch/cacti/mat.h	/^    powerDef power_subarray_out_drv;$/;"	m	class:Mat	typeref:typename:powerDef
power_t	gpuwattch/array.h	/^  powerDef       power_t;$/;"	m	class:ArrayST	typeref:typename:powerDef
power_t	gpuwattch/array.h	/^  powerDef power_t;\/\/temp value holder for both (max) power and runtime power$/;"	m	class:InstCache	typeref:typename:powerDef
power_t	gpuwattch/iocontrollers.h	/^    powerDef power_t;$/;"	m	class:FlashController	typeref:typename:powerDef
power_t	gpuwattch/iocontrollers.h	/^    powerDef power_t;$/;"	m	class:NIUController	typeref:typename:powerDef
power_t	gpuwattch/iocontrollers.h	/^    powerDef power_t;$/;"	m	class:PCIeController	typeref:typename:powerDef
power_t	gpuwattch/logic.h	/^	powerDef       power_t;$/;"	m	class:FunctionalUnit	typeref:typename:powerDef
power_t	gpuwattch/logic.h	/^	powerDef       power_t;$/;"	m	class:dep_resource_conflict_check	typeref:typename:powerDef
power_t	gpuwattch/logic.h	/^	powerDef       power_t;$/;"	m	class:inst_decoder	typeref:typename:powerDef
power_t	gpuwattch/memoryctrl.h	/^    powerDef       power_t;$/;"	m	class:DRAM	typeref:typename:powerDef
power_t	gpuwattch/memoryctrl.h	/^    powerDef       power_t;$/;"	m	class:MCPHY	typeref:typename:powerDef
power_t	gpuwattch/memoryctrl.h	/^    powerDef power_t;$/;"	m	class:MCBackend	typeref:typename:powerDef
power_t	gpuwattch/noc.h	/^	powerDef       power_t;$/;"	m	class:NoC	typeref:typename:powerDef
power_trace_file	gpuwattch/gpgpu_sim_wrapper.h	/^    gzFile power_trace_file;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:gzFile
powerfile	gpuwattch/gpgpu_sim_wrapper.h	/^    std::ofstream powerfile;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:std::ofstream
powers	gpuwattch/cacti/basic_circuit.cc	/^int powers (int base, int n)$/;"	f	typeref:typename:int
powi	intersim2/misc_utils.cpp	/^int powi( int x, int y ) \/\/ compute x to the y$/;"	f	typeref:typename:int
powli	gpgpu-sim/addrdec.cc	/^static long int powli( long int x, long int y ) \/\/ compute x to the y$/;"	f	typeref:typename:long int	file:
pppm	gpuwattch/cacti/const.h	/^const double pppm[4]      = {1,1,1,1};$/;"	v	typeref:typename:const double[4]
pppm_Ig	gpuwattch/cacti/const.h	/^const double pppm_Ig[4]   = {0,0,1,0};$/;"	v	typeref:typename:const double[4]
pppm_Isub	gpuwattch/cacti/const.h	/^const double pppm_Isub[4] = {0,1,0,0};$/;"	v	typeref:typename:const double[4]
pppm_dyn	gpuwattch/cacti/const.h	/^const double pppm_dyn[4]  = {1,0,0,0};$/;"	v	typeref:typename:const double[4]
pppm_lkg	gpuwattch/cacti/const.h	/^const double pppm_lkg[4]  = {0,1,1,0};$/;"	v	typeref:typename:const double[4]
pppm_lkg_multhread	gpuwattch/basic_components.h	/^    double pppm_lkg_multhread[4];$/;"	m	class:CoreDynParam	typeref:typename:double[4]
pppm_sc	gpuwattch/cacti/const.h	/^const double pppm_sc[4]   = {0,0,0,1};$/;"	v	typeref:typename:const double[4]
pre_coeff	gpuwattch/basic_components.h	/^    double pre_coeff;$/;"	m	class:DRAMParam	typeref:typename:double
pre_dec	gpuwattch/logic.h	/^	Predec *  pre_dec;$/;"	m	class:inst_decoder	typeref:typename:Predec *
pre_decode	abstract_hardware_model.h	/^    virtual void pre_decode() {}$/;"	f	class:inst_t	typeref:typename:void
pre_decode	cuda-sim/cuda-sim.cc	/^void ptx_instruction::pre_decode()$/;"	f	class:ptx_instruction	typeref:typename:void
precharge_delay	gpuwattch/cacti/cacti_interface.h	/^  double precharge_delay;$/;"	m	class:mem_array	typeref:typename:double
precharge_delay	gpuwattch/cacti/cacti_interface.h	/^  double precharge_delay;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
precharge_delay	gpuwattch/cacti/uca.h	/^    double precharge_delay;$/;"	m	class:UCA	typeref:typename:double
precharge_energy	gpuwattch/cacti/cacti_interface.h	/^  double activate_energy, read_energy, write_energy, precharge_energy,$/;"	m	class:mem_array	typeref:typename:double
precharge_energy	gpuwattch/cacti/cacti_interface.h	/^  double precharge_energy;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
precharge_energy	gpuwattch/cacti/uca.h	/^    double precharge_energy;$/;"	m	class:UCA	typeref:typename:double
pred	abstract_hardware_model.h	/^    int pred; \/\/ predicate register number$/;"	m	class:inst_t	typeref:typename:int
pred	cuda-sim/ptx_sim.h	/^   unsigned       pred : 4;$/;"	m	union:ptx_reg_t	typeref:typename:unsigned:4
pred_lookup	cuda-sim/decuda_pred_table/decuda_pred_table.cc	/^bool pred_lookup(int condition, int flags)$/;"	f	typeref:typename:bool
pred_spec	cuda-sim/ptx.y	/^pred_spec: PRED IDENTIFIER  { add_pred($2,0, -1); }$/;"	l
predecessor_ids	cuda-sim/ptx_ir.h	/^   std::set<int> predecessor_ids; \/\/indices of other basic blocks in m_basic_blocks array$/;"	m	struct:basic_block_t	typeref:typename:std::set<int>
predictionW	gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_de/;"	m	class:CoreDynParam	typeref:typename:int
prediction_scheme	gpuwattch/XML_Parse.h	/^	char prediction_scheme[20];$/;"	m	struct:__anon6448b92c0108	typeref:typename:char[20]
prediction_width	gpuwattch/XML_Parse.h	/^	int prediction_width;$/;"	m	struct:__anon6448b92c0108	typeref:typename:int
prediction_width	gpuwattch/XML_Parse.h	/^	int prediction_width;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
predictor	gpuwattch/XML_Parse.h	/^	predictor_systemcore predictor;$/;"	m	struct:__anon6448b92c0708	typeref:typename:predictor_systemcore
predictor_accesses	gpuwattch/XML_Parse.h	/^	double predictor_accesses;$/;"	m	struct:__anon6448b92c0108	typeref:typename:double
predictor_entries	gpuwattch/XML_Parse.h	/^	int predictor_entries;$/;"	m	struct:__anon6448b92c0108	typeref:typename:int
predictor_size	gpuwattch/XML_Parse.h	/^	int predictor_size;$/;"	m	struct:__anon6448b92c0108	typeref:typename:int
predictor_systemcore	gpuwattch/XML_Parse.h	/^} predictor_systemcore;$/;"	t	typeref:struct:__anon6448b92c0108
prefetch_buffer_accesses	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_accesses;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
prefetch_buffer_accesses	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_accesses;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
prefetch_buffer_accesses	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_accesses;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
prefetch_buffer_accesses	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_accesses;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
prefetch_buffer_hits	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_hits;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
prefetch_buffer_hits	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_hits;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
prefetch_buffer_hits	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_hits;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
prefetch_buffer_hits	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_hits;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
prefetch_buffer_reads	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_reads;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
prefetch_buffer_reads	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_reads;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
prefetch_buffer_reads	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_reads;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
prefetch_buffer_reads	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_reads;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
prefetch_buffer_writes	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_writes;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
prefetch_buffer_writes	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_writes;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
prefetch_buffer_writes	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_writes;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
prefetch_buffer_writes	gpuwattch/XML_Parse.h	/^	double prefetch_buffer_writes;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
prefetch_impl	cuda-sim/instructions.cc	/^void prefetch_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(/;"	f	typeref:typename:void
prefetchb	gpuwattch/array.h	/^  ArrayST* prefetchb;$/;"	m	class:InstCache	typeref:typename:ArrayST *
prefetchb_size	gpuwattch/basic_components.h	/^    int missb_size, fu_size, prefetchb_size, wbb_size;$/;"	m	class:CacheDynParam	typeref:typename:int
prefetchu_impl	cuda-sim/instructions.cc	/^void prefetchu_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented/;"	f	typeref:typename:void
pres	intersim2/routers/event_router.hpp	/^    int  pres;$/;"	m	struct:EventNextVCState::tWaiting	typeref:typename:int
pri	intersim2/arbiters/arbiter.hpp	/^    int pri ;$/;"	m	struct:Arbiter::__anond10b4dfb0108	typeref:typename:int
pri	intersim2/arbiters/prio_arb.hpp	/^    int pri;$/;"	m	struct:PriorityArbiter::sRequest	typeref:typename:int
pri	intersim2/flit.hpp	/^  int  pri;$/;"	m	class:Flit	typeref:typename:int
pri	intersim2/outputset.hpp	/^    int pri;$/;"	m	struct:OutputSet::sSetElement	typeref:typename:int
print	abstract_hardware_model.cc	/^void simt_stack::print (FILE *fout) const$/;"	f	class:simt_stack	typeref:typename:void
print	abstract_hardware_model.h	/^	void print(FILE* fp) const{$/;"	f	class:register_set	typeref:typename:void
print	abstract_hardware_model.h	/^   void print(FILE *fp) const$/;"	f	class:mem_access_t	typeref:typename:void
print	cuda-sim/memory.cc	/^template<unsigned BSIZE> void memory_space_impl<BSIZE>::print( const char *format, FILE *fout ) /;"	f	class:memory_space_impl	typeref:typename:void
print	cuda-sim/memory.h	/^   void print( const char *format, FILE *fout ) const$/;"	f	class:mem_storage	typeref:typename:void
print	gpgpu-sim/addrdec.cc	/^void addrdec_t::print( FILE *fp ) const$/;"	f	class:addrdec_t	typeref:typename:void
print	gpgpu-sim/delayqueue.h	/^   void print() const$/;"	f	class:fifo_pipeline	typeref:typename:void
print	gpgpu-sim/dram.cc	/^void dram_t::print( FILE* simFile) const$/;"	f	class:dram_t	typeref:typename:void
print	gpgpu-sim/dram_sched.cc	/^void frfcfs_scheduler::print( FILE *fp )$/;"	f	class:frfcfs_scheduler	typeref:typename:void
print	gpgpu-sim/gpu-cache.cc	/^void baseline_cache::print(FILE *fp, unsigned &accesses, unsigned &misses) const{$/;"	f	class:baseline_cache	typeref:typename:void
print	gpgpu-sim/gpu-cache.cc	/^void tag_array::print( FILE *stream, unsigned &total_access, unsigned &total_misses ) const$/;"	f	class:tag_array	typeref:typename:void
print	gpgpu-sim/gpu-cache.h	/^    void print( FILE *fp ) const$/;"	f	class:cache_config	typeref:typename:void
print	gpgpu-sim/l2cache.cc	/^void memory_partition_unit::arbitration_metadata::print( FILE *fp ) const $/;"	f	class:memory_partition_unit::arbitration_metadata	typeref:typename:void
print	gpgpu-sim/l2cache.cc	/^void memory_partition_unit::print( FILE *fp ) const$/;"	f	class:memory_partition_unit	typeref:typename:void
print	gpgpu-sim/l2cache.cc	/^void memory_sub_partition::print( FILE *fp ) const$/;"	f	class:memory_sub_partition	typeref:typename:void
print	gpgpu-sim/mem_fetch.cc	/^void mem_fetch::print( FILE *fp, bool print_inst ) const$/;"	f	class:mem_fetch	typeref:typename:void
print	gpgpu-sim/power_stat.cc	/^void power_core_stat_t::print (FILE *fout)$/;"	f	class:power_core_stat_t	typeref:typename:void
print	gpgpu-sim/power_stat.cc	/^void power_mem_stat_t::print (FILE *fout) const {$/;"	f	class:power_mem_stat_t	typeref:typename:void
print	gpgpu-sim/power_stat.cc	/^void power_stat_t::print (FILE *fout) const$/;"	f	class:power_stat_t	typeref:typename:void
print	gpgpu-sim/shader.cc	/^void ldst_unit::print(FILE *fout) const$/;"	f	class:ldst_unit	typeref:typename:void
print	gpgpu-sim/shader.cc	/^void shader_core_stats::print( FILE* fout ) const$/;"	f	class:shader_core_stats	typeref:typename:void
print	gpgpu-sim/shader.cc	/^void shd_warp_t::print( FILE *fout ) const$/;"	f	class:shd_warp_t	typeref:typename:void
print	gpgpu-sim/shader.cc	/^void warp_inst_t::print( FILE *fout ) const$/;"	f	class:warp_inst_t	typeref:typename:void
print	gpgpu-sim/shader.h	/^    virtual void print( FILE *fp ) const$/;"	f	class:simd_function_unit	typeref:typename:void
print	gpgpu-sim/shader.h	/^    virtual void print(FILE *fp) const$/;"	f	class:pipelined_simd_unit	typeref:typename:void
print	gpgpu-sim/stat-tool.cc	/^void linear_histogram_logger::print(FILE *fout) const$/;"	f	class:linear_histogram_logger	typeref:typename:void
print	gpgpu-sim/stat-tool.h	/^   void print(FILE *fout) const $/;"	f	class:insn_warp_occ_logger	typeref:typename:void
print	gpgpu-sim/stat-tool.h	/^   void print(FILE *fout) const {$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
print	gpgpu-sim/traffic_breakdown.cc	/^void traffic_breakdown::print(FILE* fout)$/;"	f	class:traffic_breakdown	typeref:typename:void
print	stream_manager.cc	/^void CUstream_st::print(FILE *fp)$/;"	f	class:CUstream_st	typeref:typename:void
print	stream_manager.cc	/^void stream_manager::print( FILE *fp)$/;"	f	class:stream_manager	typeref:typename:void
print	stream_manager.cc	/^void stream_operation::print( FILE *fp ) const$/;"	f	class:stream_operation	typeref:typename:void
printContents	gpgpu-sim/scoreboard.cc	/^void Scoreboard::printContents() const$/;"	f	class:Scoreboard	typeref:typename:void
print_all_ld	gpgpu-sim/visualizer.cc	/^   void print_all_ld(void) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
print_all_st	gpgpu-sim/visualizer.cc	/^   void print_all_st(void) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
print_arbiter	gpuwattch/cacti/arbiter.cc	/^void MCPAT_Arbiter::print_arbiter()$/;"	f	class:MCPAT_Arbiter	typeref:typename:void
print_basic_block_dot	cuda-sim/ptx_ir.cc	/^void function_info::print_basic_block_dot()$/;"	f	class:function_info	typeref:typename:void
print_basic_block_links	cuda-sim/ptx_ir.cc	/^void function_info::print_basic_block_links()$/;"	f	class:function_info	typeref:typename:void
print_basic_blocks	cuda-sim/ptx_ir.cc	/^void function_info::print_basic_blocks()$/;"	f	class:function_info	typeref:typename:void
print_buffer	gpuwattch/cacti/highradix.cc	/^void HighRadix::print_buffer(Component *c)$/;"	f	class:HighRadix	typeref:typename:void
print_cache_stat	gpgpu-sim/l2cache.cc	/^void memory_sub_partition::print_cache_stat(unsigned &accesses, unsigned &misses) const$/;"	f	class:memory_sub_partition	typeref:typename:void
print_cache_stats	gpgpu-sim/shader.cc	/^void ldst_unit::print_cache_stats( FILE *fp, unsigned& dl1_accesses, unsigned& dl1_misses ) {$/;"	f	class:ldst_unit	typeref:typename:void
print_cache_stats	gpgpu-sim/shader.cc	/^void shader_core_ctx::print_cache_stats( FILE *fp, unsigned& dl1_accesses, unsigned& dl1_misses /;"	f	class:shader_core_ctx	typeref:typename:void
print_cache_stats	gpgpu-sim/shader.cc	/^void simt_core_cluster::print_cache_stats( FILE *fp, unsigned& dl1_accesses, unsigned& dl1_misse/;"	f	class:simt_core_cluster	typeref:typename:void
print_cont_stats	gpuwattch/cacti/nuca.cc	/^Nuca::print_cont_stats()$/;"	f	class:Nuca	typeref:typename:void
print_crossbar	gpuwattch/cacti/crossbar.cc	/^void Crossbar::print_crossbar()$/;"	f	class:Crossbar	typeref:typename:void
print_detail	gpuwattch/cacti/cacti_interface.h	/^    int print_detail;$/;"	m	class:InputParameter	typeref:typename:int
print_dist	gpgpu-sim/visualizer.cc	/^   void print_dist(void) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
print_dominators	cuda-sim/ptx_ir.cc	/^void function_info::print_dominators()$/;"	f	class:function_info	typeref:typename:void
print_dram_stats	gpgpu-sim/l2cache.cc	/^void gpgpu_sim::print_dram_stats(FILE *fout) const$/;"	f	class:gpgpu_sim	typeref:typename:void
print_histo	gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::print_histo(FILE *fout) const$/;"	f	class:thread_CFlocality	typeref:typename:void
print_histo	gpgpu-sim/stat-tool.cc	/^void thread_insn_span::print_histo(FILE *fout) const$/;"	f	class:thread_insn_span	typeref:typename:void
print_ibuffer	gpgpu-sim/shader.cc	/^void shd_warp_t::print_ibuffer( FILE *fout ) const$/;"	f	class:shd_warp_t	typeref:typename:void
print_idominators	cuda-sim/ptx_ir.cc	/^void function_info::print_idominators()$/;"	f	class:function_info	typeref:typename:void
print_impl	stream_manager.cc	/^void stream_manager::print_impl( FILE *fp)$/;"	f	class:stream_manager	typeref:typename:void
print_info	cuda-sim/ptx_ir.cc	/^void symbol::print_info(FILE *fp) const$/;"	f	class:symbol	typeref:typename:void
print_input_args	gpuwattch/cacti/cacti_interface.h	/^    bool print_input_args;$/;"	m	class:InputParameter	typeref:typename:bool
print_insn	abstract_hardware_model.h	/^    virtual void print_insn( FILE *fp ) const $/;"	f	class:inst_t	typeref:typename:void
print_insn	abstract_hardware_model.h	/^    virtual void print_insn(FILE *fp) const $/;"	f	class:warp_inst_t	typeref:typename:void
print_insn	cuda-sim/ptx_ir.cc	/^unsigned function_info::print_insn( unsigned pc, FILE * fp ) const$/;"	f	class:function_info	typeref:typename:unsigned
print_insn	cuda-sim/ptx_ir.cc	/^void ptx_instruction::print_insn( FILE *fp ) const$/;"	f	class:ptx_instruction	typeref:typename:void
print_insn	cuda-sim/ptx_ir.cc	/^void ptx_instruction::print_insn() const$/;"	f	class:ptx_instruction	typeref:typename:void
print_insn	cuda-sim/ptx_sim.cc	/^void ptx_thread_info::print_insn( unsigned pc, FILE * fp ) const$/;"	f	class:ptx_thread_info	typeref:typename:void
print_ipostdominators	cuda-sim/ptx_ir.cc	/^void function_info::print_ipostdominators()$/;"	f	class:function_info	typeref:typename:void
print_not_completed	gpgpu-sim/shader.cc	/^void simt_core_cluster::print_not_completed( FILE *fp ) const$/;"	f	class:simt_core_cluster	typeref:typename:void
print_nuca	gpuwattch/cacti/nuca.cc	/^Nuca::print_nuca (nuca_org_t *fr)$/;"	f	class:Nuca	typeref:typename:void
print_port_stats	gpgpu-sim/gpu-cache.cc	/^void cache_sub_stats::print_port_stats(FILE *fout, const char *cache_name) const$/;"	f	class:cache_sub_stats	typeref:typename:void
print_postdominators	cuda-sim/ptx_ir.cc	/^void function_info::print_postdominators()$/;"	f	class:function_info	typeref:typename:void
print_power_kernel_stats	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::print_power_kernel_stats(double gpu_sim_cycle, double gpu_tot_sim_cycle,/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
print_ptx_file	cuda-sim/ptx_loader.cc	/^void print_ptx_file( const char *p, unsigned source_num, const char *filename )$/;"	f	typeref:typename:void
print_ptxinfo	cuda-sim/cuda-sim.cc	/^void print_ptxinfo()$/;"	f	typeref:typename:void
print_reg	cuda-sim/ptx_sim.cc	/^static void print_reg( FILE *fp, std::string name, ptx_reg_t value, symbol_table *symtab )$/;"	f	typeref:typename:void	file:
print_reg	cuda-sim/ptx_sim.cc	/^static void print_reg( std::string name, ptx_reg_t value, symbol_table *symtab )$/;"	f	typeref:typename:void	file:
print_router	gpuwattch/cacti/highradix.cc	/^void HighRadix::print_router()$/;"	f	class:HighRadix	typeref:typename:void
print_router	gpuwattch/cacti/router.cc	/^MCPAT_Router::print_router()$/;"	f	class:MCPAT_Router	typeref:typename:void
print_set	cuda-sim/ptx_ir.cc	/^void print_set(const std::set<int> &A)$/;"	f	typeref:typename:void
print_simulation_time	gpgpusim_entrypoint.cc	/^void print_simulation_time()$/;"	f	typeref:typename:void
print_span	gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::print_span(FILE *fout) const$/;"	f	class:thread_CFlocality	typeref:typename:void
print_span	gpgpu-sim/stat-tool.cc	/^void thread_insn_span::print_span(FILE *fout) const$/;"	f	class:thread_insn_span	typeref:typename:void
print_sparse_histo	gpgpu-sim/stat-tool.cc	/^void thread_insn_span::print_sparse_histo(FILE *fout) const$/;"	f	class:thread_insn_span	typeref:typename:void
print_sparse_histo	gpgpu-sim/stat-tool.cc	/^void thread_insn_span::print_sparse_histo(gzFile fout) const$/;"	f	class:thread_insn_span	typeref:typename:void
print_splash	cuda-sim/cuda-sim.cc	/^void print_splash()$/;"	f	typeref:typename:void
print_stage	gpgpu-sim/shader.cc	/^void shader_core_ctx::print_stage(unsigned int stage, FILE *fout ) const$/;"	f	class:shader_core_ctx	typeref:typename:void
print_stat	gpgpu-sim/dram.cc	/^void dram_t::print_stat( FILE* simFile ) $/;"	f	class:dram_t	typeref:typename:void
print_stat	gpgpu-sim/l2cache.h	/^   void print_stat( FILE *fp ) { m_dram->print_stat(fp); }$/;"	f	class:memory_partition_unit	typeref:typename:void
print_stats	gpgpu-sim/gpu-cache.cc	/^void cache_stats::print_stats(FILE *fout, const char *cache_name) const{$/;"	f	class:cache_stats	typeref:typename:void
print_stats	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::print_stats()$/;"	f	class:gpgpu_sim	typeref:typename:void
print_steady_state	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::print_steady_state(int position, double init_val){$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
print_to_file	gpgpu-sim/visualizer.cc	/^   void print_to_file(FILE *outfile) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
print_to_gzfile	gpgpu-sim/visualizer.cc	/^   void print_to_gzfile(gzFile outfile) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
print_trace_files	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::print_trace_files()$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
print_usage	gpuwattch/main.cc	/^void print_usage(char * argv0)$/;"	f	typeref:typename:void
print_visualizer	gpgpu-sim/stat-tool.cc	/^void linear_histogram_logger::print_visualizer(FILE *fout)$/;"	f	class:linear_histogram_logger	typeref:typename:void
print_visualizer	gpgpu-sim/stat-tool.cc	/^void linear_histogram_logger::print_visualizer(gzFile fout)$/;"	f	class:linear_histogram_logger	typeref:typename:void
print_visualizer	gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::print_visualizer(FILE *fout)  $/;"	f	class:thread_CFlocality	typeref:typename:void
print_visualizer	gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::print_visualizer(gzFile fout)$/;"	f	class:thread_CFlocality	typeref:typename:void
print_visualizer	gpgpu-sim/stat-tool.h	/^   void print_visualizer(FILE *fout) const {$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
print_visualizer	gpgpu-sim/stat-tool.h	/^   void print_visualizer(gzFile fout) const {$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
print_wire	gpuwattch/cacti/wire.cc	/^Wire::print_wire()$/;"	f	class:Wire	typeref:typename:void
prio	gpgpu-sim/dram.h	/^   unsigned int prio;$/;"	m	class:dram_t	typeref:typename:unsigned int
prmt_impl	cuda-sim/instructions.cc	/^void prmt_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
probe	gpgpu-sim/gpu-cache.cc	/^bool mshr_table::probe( new_addr_type block_addr ) const{$/;"	f	class:mshr_table	typeref:typename:bool
probe	gpgpu-sim/gpu-cache.cc	/^enum cache_request_status tag_array::probe( new_addr_type addr, unsigned &idx ) const {$/;"	f	class:tag_array	typeref:enum:cache_request_status
proc	gpuwattch/gpgpu_sim_wrapper.h	/^	Processor* proc;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:Processor *
proc_power	gpuwattch/gpgpu_sim_wrapper.h	/^    double proc_power;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:double
procdynp	gpuwattch/processor.h	/^    ProcParam procdynp;$/;"	m	class:Processor	typeref:typename:ProcParam
process_banks	gpgpu-sim/shader.h	/^   void process_banks()$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
process_cache_access	gpgpu-sim/shader.cc	/^ldst_unit::process_cache_access( cache_t* cache,$/;"	f	class:ldst_unit	typeref:typename:mem_stage_stall_type
process_ind	gpuwattch/logic.h	/^	bool process_ind;$/;"	m	class:Pipeline	typeref:typename:bool
process_memory_access_queue	gpgpu-sim/shader.cc	/^mem_stage_stall_type ldst_unit::process_memory_access_queue( cache_t *cache, warp_inst_t &inst )$/;"	f	class:ldst_unit	typeref:typename:mem_stage_stall_type
process_tag_probe	gpgpu-sim/gpu-cache.cc	/^data_cache::process_tag_probe( bool wr,$/;"	f	class:data_cache	typeref:enum:cache_request_status
ptr_align_spec	cuda-sim/ptx.y	/^ptr_align_spec: ALIGN_DIRECTIVE INT_OPERAND$/;"	l
ptr_space_spec	cuda-sim/ptx.y	/^ptr_space_spec: GLOBAL_DIRECTIVE { add_ptr_spec(global_space); }$/;"	l
ptr_spec	cuda-sim/ptx.y	/^ptr_spec: \/*empty*\/$/;"	l
ptx_assemble	cuda-sim/cuda-sim.cc	/^void function_info::ptx_assemble()$/;"	f	class:function_info	typeref:typename:void
ptx_begin	cuda-sim/ptx_ir.h	/^   ptx_instruction* ptx_begin;$/;"	m	struct:basic_block_t	typeref:typename:ptx_instruction *
ptx_cta_info	cuda-sim/ptx_sim.cc	/^ptx_cta_info::ptx_cta_info( unsigned sm_idx )$/;"	f	class:ptx_cta_info
ptx_cta_info	cuda-sim/ptx_sim.h	/^class ptx_cta_info {$/;"	c
ptx_debug_exec_dump_cond	cuda-sim/cuda-sim.cc	/^bool ptx_debug_exec_dump_cond(int thd_uid, addr_t pc)$/;"	f	typeref:typename:bool
ptx_end	cuda-sim/ptx_ir.h	/^   ptx_instruction* ptx_end;$/;"	m	struct:basic_block_t	typeref:typename:ptx_instruction *
ptx_exec_inst	cuda-sim/cuda-sim.cc	/^void ptx_thread_info::ptx_exec_inst( warp_inst_t &inst, unsigned lane_id)$/;"	f	class:ptx_thread_info	typeref:typename:void
ptx_fetch_inst	cuda-sim/cuda-sim.cc	/^const warp_inst_t *ptx_fetch_inst( address_type pc )$/;"	f	typeref:typename:const warp_inst_t *
ptx_fetch_inst	cuda-sim/cuda-sim.cc	/^void ptx_thread_info::ptx_fetch_inst( inst_t &inst ) const$/;"	f	class:ptx_thread_info	typeref:typename:void
ptx_file_line	cuda-sim/ptx-stats.cc	/^    ptx_file_line(const char* s, int l) {$/;"	f	class:ptx_file_line	file:
ptx_file_line	cuda-sim/ptx-stats.cc	/^class ptx_file_line $/;"	c	file:
ptx_file_line_stats	cuda-sim/ptx-stats.cc	/^    ptx_file_line_stats() $/;"	f	class:ptx_file_line_stats	file:
ptx_file_line_stats	cuda-sim/ptx-stats.cc	/^class ptx_file_line_stats$/;"	c	file:
ptx_file_line_stats_add_dram_traffic	cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_dram_traffic(unsigned pc, unsigned dram_traffic)$/;"	f	typeref:typename:void
ptx_file_line_stats_add_exec_count	cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_exec_count(const ptx_instruction *pInsn)$/;"	f	typeref:typename:void
ptx_file_line_stats_add_inflight_memory_insn	cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_inflight_memory_insn(int sc_id, unsigned pc)$/;"	f	typeref:typename:void
ptx_file_line_stats_add_latency	cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_latency(unsigned pc, unsigned latency)$/;"	f	typeref:typename:void
ptx_file_line_stats_add_smem_bank_conflict	cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_smem_bank_conflict(unsigned pc, unsigned n_way_bkconflict)$/;"	f	typeref:typename:void
ptx_file_line_stats_add_uncoalesced_gmem	cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_uncoalesced_gmem(unsigned pc, unsigned n_access)$/;"	f	typeref:typename:void
ptx_file_line_stats_add_warp_divergence	cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_warp_divergence(unsigned pc, unsigned n_way_divergence)$/;"	f	typeref:typename:void
ptx_file_line_stats_commit_exposed_latency	cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_commit_exposed_latency(int sc_id, int exposed_latency)$/;"	f	typeref:typename:void
ptx_file_line_stats_create_exposed_latency_tracker	cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_create_exposed_latency_tracker(int n_shader_cores)$/;"	f	typeref:typename:void
ptx_file_line_stats_map_t	cuda-sim/ptx-stats.cc	/^typedef tr1_hash_map<ptx_file_line, ptx_file_line_stats, hash_ptx_file_line> ptx_file_line_stats/;"	t	typeref:typename:tr1_hash_map<ptx_file_line,ptx_file_line_stats,hash_ptx_file_line>	file:
ptx_file_line_stats_map_t	cuda-sim/ptx-stats.cc	/^typedef tr1_hash_map<ptx_file_line, ptx_file_line_stats> ptx_file_line_stats_map_t;$/;"	t	typeref:typename:tr1_hash_map<ptx_file_line,ptx_file_line_stats>	file:
ptx_file_line_stats_options	cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_options(option_parser_t opp)$/;"	f	typeref:typename:void
ptx_file_line_stats_sub_inflight_memory_insn	cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_sub_inflight_memory_insn(int sc_id, unsigned pc)$/;"	f	typeref:typename:void
ptx_file_line_stats_tracker	cuda-sim/ptx-stats.cc	/^static ptx_file_line_stats_map_t ptx_file_line_stats_tracker;$/;"	v	typeref:typename:ptx_file_line_stats_map_t	file:
ptx_file_line_stats_write_file	cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_write_file()$/;"	f	typeref:typename:void
ptx_get_insn_str	cuda-sim/cuda-sim.cc	/^std::string ptx_get_insn_str( address_type pc )$/;"	f	typeref:typename:std::string
ptx_inflight_memory_insn_tracker	cuda-sim/ptx-stats.cc	/^class ptx_inflight_memory_insn_tracker$/;"	c	file:
ptx_inflight_memory_insns	cuda-sim/ptx-stats.cc	/^    insn_count_map ptx_inflight_memory_insns;$/;"	m	class:ptx_inflight_memory_insn_tracker	typeref:typename:insn_count_map	file:
ptx_inst_debug_file	abstract_hardware_model.h	/^    FILE* ptx_inst_debug_file;$/;"	m	class:gpgpu_t	typeref:typename:FILE *
ptx_instruction	cuda-sim/ptx_ir.cc	/^ptx_instruction::ptx_instruction( int opcode, $/;"	f	class:ptx_instruction
ptx_instruction	cuda-sim/ptx_ir.h	/^class ptx_instruction : public warp_inst_t {$/;"	c
ptx_instruction_lookup	cuda-sim/ptx_parser.cc	/^const ptx_instruction *ptx_instruction_lookup( const char *filename, unsigned linenumber )$/;"	f	typeref:typename:const ptx_instruction *
ptx_ir_INCLUDED	cuda-sim/ptx_ir.h	/^#define ptx_ir_INCLUDED$/;"	d
ptx_kernel_nregs	cuda-sim/ptx_ir.cc	/^unsigned ptx_kernel_nregs( void *kernel_impl )$/;"	f	typeref:typename:unsigned
ptx_kernel_shmem_size	cuda-sim/ptx_ir.cc	/^unsigned ptx_kernel_shmem_size( void *kernel_impl )$/;"	f	typeref:typename:unsigned
ptx_line_stats_filename	cuda-sim/ptx-stats.cc	/^char * ptx_line_stats_filename = NULL;$/;"	v	typeref:typename:char *
ptx_opcocde_latency_options	cuda-sim/cuda-sim.cc	/^void ptx_opcocde_latency_options (option_parser_t opp) {$/;"	f	typeref:typename:void
ptx_parser_INCLUDED	cuda-sim/ptx_parser.h	/^#define ptx_parser_INCLUDED$/;"	d
ptx_print_insn	cuda-sim/cuda-sim.cc	/^void ptx_print_insn( address_type pc, FILE *fp )$/;"	f	typeref:typename:void
ptx_reg_options	cuda-sim/ptx_loader.cc	/^void ptx_reg_options(option_parser_t opp)$/;"	f	typeref:typename:void
ptx_reg_t	cuda-sim/ptx_sim.h	/^   ptx_reg_t() {$/;"	f	union:ptx_reg_t
ptx_reg_t	cuda-sim/ptx_sim.h	/^   ptx_reg_t(unsigned x) $/;"	f	union:ptx_reg_t
ptx_reg_t	cuda-sim/ptx_sim.h	/^union ptx_reg_t {$/;"	u
ptx_round	cuda-sim/instructions.cc	/^void ptx_round(ptx_reg_t& data, int rounding_mode, int type)$/;"	f	typeref:typename:void
ptx_saturate	cuda-sim/instructions.cc	/^void ptx_saturate(ptx_reg_t& data, int saturation_mode, int type)$/;"	f	typeref:typename:void
ptx_set_tex_cache_linesize	abstract_hardware_model.cc	/^void gpgpu_functional_sim_config::ptx_set_tex_cache_linesize(unsigned linesize)$/;"	f	class:gpgpu_functional_sim_config	typeref:typename:void
ptx_sim_h_INCLUDED	cuda-sim/ptx_sim.h	/^#define ptx_sim_h_INCLUDED$/;"	d
ptx_sim_init_thread	cuda-sim/cuda-sim.cc	/^unsigned ptx_sim_init_thread( kernel_info_t &kernel,$/;"	f	typeref:typename:unsigned
ptx_sim_kernel_info	cuda-sim/cuda-sim.cc	/^const struct gpgpu_ptx_sim_kernel_info* ptx_sim_kernel_info(const function_info *kernel) $/;"	f	typeref:typename:const struct gpgpu_ptx_sim_kernel_info *
ptx_tex_regs	cuda-sim/instructions.cc	/^ptx_reg_t* ptx_tex_regs = NULL;$/;"	v	typeref:typename:ptx_reg_t *
ptx_thread_done	abstract_hardware_model.cc	/^bool  core_t::ptx_thread_done( unsigned hw_thread_id ) const  $/;"	f	class:core_t	typeref:typename:bool
ptx_thread_info	cuda-sim/ptx_sim.cc	/^ptx_thread_info::ptx_thread_info( kernel_info_t &kernel )$/;"	f	class:ptx_thread_info
ptx_thread_info	cuda-sim/ptx_sim.h	/^class ptx_thread_info {$/;"	c
ptx_version	abstract_hardware_model.h	/^   unsigned ptx_version;$/;"	m	struct:gpgpu_ptx_sim_kernel_info	typeref:typename:unsigned
ptx_version	cuda-sim/ptx_sim.h	/^      ptx_version()$/;"	f	class:ptx_version
ptx_version	cuda-sim/ptx_sim.h	/^      ptx_version(float ver, unsigned extensions)$/;"	f	class:ptx_version
ptx_version	cuda-sim/ptx_sim.h	/^class ptx_version {$/;"	c
ptxinfo_cmem	cuda-sim/cuda-sim.cc	/^void ptxinfo_cmem( unsigned nbytes, unsigned bank )$/;"	f	typeref:typename:void
ptxinfo_function	cuda-sim/cuda-sim.cc	/^void ptxinfo_function(const char *fname )$/;"	f	typeref:typename:void
ptxinfo_lmem	cuda-sim/cuda-sim.cc	/^void ptxinfo_lmem( unsigned declared, unsigned system )$/;"	f	typeref:typename:void
ptxinfo_opencl_addinfo	cuda-sim/cuda-sim.cc	/^void ptxinfo_opencl_addinfo( std::map<std::string,function_info*> &kernels )$/;"	f	typeref:typename:void
ptxinfo_regs	cuda-sim/cuda-sim.cc	/^void ptxinfo_regs( unsigned nregs )$/;"	f	typeref:typename:void
ptxinfo_smem	cuda-sim/cuda-sim.cc	/^void ptxinfo_smem( unsigned declared, unsigned system )$/;"	f	typeref:typename:void
pure_cam	gpuwattch/cacti/Ucache.h	/^  bool     pure_cam;$/;"	m	struct:calc_time_mt_wrapper_struct	typeref:typename:bool
pure_cam	gpuwattch/cacti/cacti_interface.h	/^    bool     pure_cam;$/;"	m	class:InputParameter	typeref:typename:bool
pure_cam	gpuwattch/cacti/mat.h	/^    bool     is_dram,is_fa, pure_cam, camFlag;$/;"	m	class:Mat	typeref:typename:bool
pure_cam	gpuwattch/cacti/parameter.h	/^    bool pure_cam;$/;"	m	class:DynamicParameter	typeref:typename:bool
pure_ram	gpuwattch/cacti/Ucache.h	/^  bool     pure_ram;$/;"	m	struct:calc_time_mt_wrapper_struct	typeref:typename:bool
pure_ram	gpuwattch/cacti/cacti_interface.h	/^    bool     pure_ram;$/;"	m	class:InputParameter	typeref:typename:bool
pure_ram	gpuwattch/cacti/parameter.h	/^    bool pure_ram;$/;"	m	class:DynamicParameter	typeref:typename:bool
push	gpgpu-sim/delayqueue.h	/^   void push(T* data ) $/;"	f	class:fifo_pipeline	typeref:typename:void
push	gpgpu-sim/dram.cc	/^void dram_t::push( class mem_fetch *data ) $/;"	f	class:dram_t	typeref:typename:void
push	gpgpu-sim/gpu-cache.h	/^        unsigned push( const T &e ) $/;"	f	class:tex_cache::fifo	typeref:typename:unsigned
push	gpgpu-sim/l2cache.cc	/^void memory_sub_partition::push( mem_fetch* req, unsigned long long cycle ) $/;"	f	class:memory_sub_partition	typeref:typename:void
push	gpgpu-sim/l2cache.h	/^    virtual void push(mem_fetch *mf) $/;"	f	class:L2interface	typeref:typename:void
push	gpgpu-sim/shader.h	/^    virtual void push(mem_fetch *mf) $/;"	f	class:shader_memory_interface	typeref:typename:void
push	gpgpu-sim/shader.h	/^    virtual void push(mem_fetch *mf)$/;"	f	class:perfect_memory_interface	typeref:typename:void
push	stream_manager.cc	/^void CUstream_st::push( const stream_operation &op )$/;"	f	class:CUstream_st	typeref:typename:void
push	stream_manager.cc	/^void stream_manager::push( stream_operation op )$/;"	f	class:stream_manager	typeref:typename:void
push_breakaddr	cuda-sim/ptx_sim.cc	/^void ptx_thread_info::push_breakaddr(const operand_info &breakaddr) $/;"	f	class:ptx_thread_info	typeref:typename:void
push_response_fifo	gpgpu-sim/shader.h	/^    void push_response_fifo(class mem_fetch *mf) {$/;"	f	class:simt_core_cluster	typeref:typename:void
push_stack	gpgpu-sim/stack.cc	/^void push_stack(Stack *S, address_type val) {$/;"	f	typeref:typename:void
pwr_cmp_label	gpuwattch/gpgpu_sim_wrapper.cc	/^static const char * pwr_cmp_label[] = {"IBP,", "ICP,", "DCP,", "TCP,", "CCP,", "SHRDP,", "RFP,",/;"	v	typeref:typename:const char * []	file:
pwr_cmp_t	gpuwattch/gpgpu_sim_wrapper.cc	/^enum pwr_cmp_t {$/;"	g	file:
pwr_core_stat	gpgpu-sim/power_stat.h	/^   power_core_stat_t * pwr_core_stat;$/;"	m	class:power_stat_t	typeref:typename:power_core_stat_t *
pwr_counter	gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> pwr_counter;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:std::vector<double>
pwr_mem_stat	gpgpu-sim/power_stat.h	/^   power_mem_stat_t * pwr_mem_stat;$/;"	m	class:power_stat_t	typeref:typename:power_mem_stat_t *
qtree_nca	intersim2/routefunc.cpp	/^void qtree_nca( const Router *r, const Flit *f,$/;"	f	typeref:typename:void
que_length	gpgpu-sim/dram.cc	/^unsigned dram_t::que_length() const$/;"	f	class:dram_t	typeref:typename:unsigned
queue_length_based	intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_base/;"	e	enum:TrafficManager::ePriority
queue_length_based	intersim2/vc.hpp	/^  enum ePrioType { local_age_based, queue_length_based, hop_count_based, none, other };$/;"	e	enum:VC::ePrioType
queue_limit	gpgpu-sim/dram.cc	/^unsigned int dram_t::queue_limit() const $/;"	f	class:dram_t	typeref:typename:unsigned int
r_buff	gpuwattch/cacti/highradix.h	/^    Mat *inp_buff, *r_buff, *c_buff;$/;"	m	class:HighRadix	typeref:typename:Mat **
r_load_nand2_path_out	gpuwattch/cacti/decoder.h	/^  double r_load_nand2_path_out;$/;"	m	class:PredecBlkDrv	typeref:typename:double
r_load_nand3_path_out	gpuwattch/cacti/decoder.h	/^  double r_load_nand3_path_out;$/;"	m	class:PredecBlkDrv	typeref:typename:double
r_predec	gpuwattch/cacti/mat.h	/^    Predec * r_predec;$/;"	m	class:Mat	typeref:typename:Predec *
r_wire_load	gpuwattch/cacti/decoder.h	/^  double r_wire_load;$/;"	m	class:Driver	typeref:typename:double
ram_cell_tech_type	gpuwattch/cacti/cacti_interface.h	/^    unsigned int ram_cell_tech_type;$/;"	m	class:InputParameter	typeref:typename:unsigned int
ram_cell_tech_type	gpuwattch/cacti/parameter.h	/^    uint32_t ram_cell_tech_type;$/;"	m	class:DynamicParameter	typeref:typename:uint32_t
ram_cell_tech_type_num	gpuwattch/cacti/const.h	/^enum ram_cell_tech_type_num$/;"	g
ram_wl_stitching_overhead_	gpuwattch/cacti/parameter.h	/^  double ram_wl_stitching_overhead_;$/;"	m	class:TechnologyParameter	typeref:typename:double
ran_arr_buf	intersim2/rng.c	/^long ran_arr_buf[QUALITY];$/;"	v	typeref:typename:long[]
ran_arr_cycle	intersim2/rng.c	/^long ran_arr_cycle()$/;"	f	typeref:typename:long
ran_arr_dummy	intersim2/rng.c	/^long ran_arr_dummy=-1, ran_arr_started=-1;$/;"	v	typeref:typename:long
ran_arr_next	intersim2/rng.c	/^#define ran_arr_next(/;"	d	file:
ran_arr_ptr	intersim2/rng.c	/^long *ran_arr_ptr=&ran_arr_dummy; \/* the next random number, or -1 *\/$/;"	v	typeref:typename:long *
ran_arr_started	intersim2/rng.c	/^long ran_arr_dummy=-1, ran_arr_started=-1;$/;"	v	typeref:typename:long
ran_array	intersim2/rng.c	/^void ran_array(long aa[],int n)$/;"	f	typeref:typename:void
ran_next	intersim2/rng_wrapper.cpp	/^long ran_next( )$/;"	f	typeref:typename:long
ran_start	intersim2/rng.c	/^void ran_start(long seed)$/;"	f	typeref:typename:void
ran_u	intersim2/rng-double.c	/^double ran_u[KK];           \/* the generator state *\/$/;"	v	typeref:typename:double[]
ran_x	intersim2/rng.c	/^long ran_x[KK];                    \/* the generator state *\/$/;"	v	typeref:typename:long[]
rand_min_intr_mesh	intersim2/routefunc.cpp	/^int rand_min_intr_mesh( int src, int dest )$/;"	f	typeref:typename:int
randomize	intersim2/traffic.cpp	/^void RandomPermutationTrafficPattern::randomize(int seed)$/;"	f	class:RandomPermutationTrafficPattern	typeref:typename:void
ranf_arr_buf	intersim2/rng-double.c	/^double ranf_arr_buf[QUALITY];$/;"	v	typeref:typename:double[]
ranf_arr_cycle	intersim2/rng-double.c	/^double ranf_arr_cycle()$/;"	f	typeref:typename:double
ranf_arr_dummy	intersim2/rng-double.c	/^double ranf_arr_dummy=-1.0, ranf_arr_started=-1.0;$/;"	v	typeref:typename:double
ranf_arr_next	intersim2/rng-double.c	/^#define ranf_arr_next(/;"	d	file:
ranf_arr_ptr	intersim2/rng-double.c	/^double *ranf_arr_ptr=&ranf_arr_dummy; \/* the next random fraction, or -1 *\/$/;"	v	typeref:typename:double *
ranf_arr_started	intersim2/rng-double.c	/^double ranf_arr_dummy=-1.0, ranf_arr_started=-1.0;$/;"	v	typeref:typename:double
ranf_array	intersim2/rng-double.c	/^void ranf_array(double aa[], int n)$/;"	f	typeref:typename:void
ranf_next	intersim2/rng_double_wrapper.cpp	/^double ranf_next( )$/;"	f	typeref:typename:double
ranf_start	intersim2/rng-double.c	/^void ranf_start(long seed)$/;"	f	typeref:typename:void
rcp_impl	cuda-sim/instructions.cc	/^void rcp_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
rd_coeff	gpuwattch/basic_components.h	/^    double rd_coeff;$/;"	m	class:DRAMParam	typeref:typename:double
rd_hit_base	gpgpu-sim/gpu-cache.cc	/^data_cache::rd_hit_base( new_addr_type addr,$/;"	f	class:data_cache	typeref:enum:cache_request_status
rd_miss_base	gpgpu-sim/gpu-cache.cc	/^data_cache::rd_miss_base( new_addr_type addr,$/;"	f	class:data_cache	typeref:enum:cache_request_status
read	cuda-sim/memory.cc	/^template<unsigned BSIZE> void memory_space_impl<BSIZE>::read( mem_addr_t addr, size_t length, vo/;"	f	class:memory_space_impl	typeref:typename:void
read	cuda-sim/memory.h	/^   void read( unsigned offset, size_t length, unsigned char *data ) const$/;"	f	class:mem_storage	typeref:typename:void
read	intersim2/power/buffer_monitor.cpp	/^void BufferMonitor::read( int input, Flit const * f ) {$/;"	f	class:BufferMonitor	typeref:typename:void
readAc	gpuwattch/basic_components.h	/^    statsComponents readAc;$/;"	m	class:statsDef	typeref:typename:statsComponents
readBuffer	gpuwattch/memoryctrl.h	/^	ArrayST  * readBuffer;$/;"	m	class:MCFrontEnd	typeref:typename:ArrayST *
readFile	intersim2/networks/anynet.cpp	/^void AnyNet::readFile(){$/;"	f	class:AnyNet	typeref:typename:void
readOp	gpuwattch/cacti/cacti_interface.h	/^    powerComponents readOp;$/;"	m	class:powerDef	typeref:typename:powerComponents
read_accesses	gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
read_accesses	gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon6448b92c0408	typeref:typename:double
read_accesses	gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
read_accesses	gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon6448b92c0608	typeref:typename:double
read_accesses	gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon6448b92c0808	typeref:typename:double
read_accesses	gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon6448b92c0908	typeref:typename:double
read_accesses	gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
read_accesses	gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
read_energy	gpuwattch/cacti/cacti_interface.h	/^  double activate_energy, read_energy, write_energy, precharge_energy,$/;"	m	class:mem_array	typeref:typename:double
read_energy	gpuwattch/cacti/cacti_interface.h	/^  double read_energy;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
read_energy	gpuwattch/cacti/uca.h	/^    double read_energy;$/;"	m	class:UCA	typeref:typename:double
read_hits	gpuwattch/XML_Parse.h	/^	double read_hits;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
read_hits	gpuwattch/XML_Parse.h	/^	double read_hits;$/;"	m	struct:__anon6448b92c0408	typeref:typename:double
read_hits	gpuwattch/XML_Parse.h	/^	double read_hits;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
read_hits	gpuwattch/XML_Parse.h	/^	double read_hits;$/;"	m	struct:__anon6448b92c0608	typeref:typename:double
read_hits	gpuwattch/XML_Parse.h	/^	double read_hits;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
read_hits	gpuwattch/XML_Parse.h	/^	double read_hits;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
read_misses	gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
read_misses	gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon6448b92c0408	typeref:typename:double
read_misses	gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
read_misses	gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon6448b92c0608	typeref:typename:double
read_misses	gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon6448b92c0808	typeref:typename:double
read_misses	gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon6448b92c0908	typeref:typename:double
read_misses	gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
read_misses	gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
read_only_cache	gpgpu-sim/gpu-cache.h	/^    read_only_cache( const char *name, cache_config &config, int core_id, int type_id, mem_fetch/;"	f	class:read_only_cache
read_only_cache	gpgpu-sim/gpu-cache.h	/^class read_only_cache : public baseline_cache {$/;"	c
read_operands	gpgpu-sim/shader.cc	/^void shader_core_ctx::read_operands()$/;"	f	class:shader_core_ctx	typeref:typename:void
read_parser_environment_variables	cuda-sim/ptx_parser.cc	/^void read_parser_environment_variables() $/;"	f	typeref:typename:void
read_sim_environment_variables	cuda-sim/cuda-sim.cc	/^void read_sim_environment_variables() $/;"	f	typeref:typename:void
read_single_block	cuda-sim/memory.cc	/^template<unsigned BSIZE> void memory_space_impl<BSIZE>::read_single_block( mem_addr_t blk_idx, m/;"	f	class:memory_space_impl	typeref:typename:void
reads	gpuwattch/basic_components.h	/^    double executionTime, reads, writes;$/;"	m	class:MCParam	typeref:typename:double
ready	gpgpu-sim/shader.cc	/^bool opndcoll_rfu_t::collector_unit_t::ready() const $/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:bool
ready_cycle	gpgpu-sim/l2cache.h	/^    	unsigned long long ready_cycle;$/;"	m	struct:memory_sub_partition::rop_delay_t	typeref:typename:unsigned long long
ready_cycle	gpgpu-sim/l2cache.h	/^      unsigned long long ready_cycle;$/;"	m	struct:memory_partition_unit::dram_delay_t	typeref:typename:unsigned long long
rec_pts	cuda-sim/cuda-sim.cc	/^struct rec_pts {$/;"	s	file:
reconfigure	gpuwattch/cacti/io.cc	/^void reconfigure(InputParameter *local_interface, uca_org_t *fin_res)$/;"	f	typeref:typename:void
reconvergence_pc	abstract_hardware_model.h	/^    address_type reconvergence_pc; \/\/ -1 => not a branch, -2 => use function return address$/;"	m	class:inst_t	typeref:typename:address_type
record	intersim2/flit.hpp	/^  bool record;$/;"	m	class:Flit	typeref:typename:bool
record	intersim2/packet_reply_info.hpp	/^  bool record;$/;"	m	class:PacketReplyInfo	typeref:typename:bool
record_next_done	stream_manager.cc	/^void CUstream_st::record_next_done()$/;"	f	class:CUstream_st	typeref:typename:void
record_traffic	gpgpu-sim/traffic_breakdown.cc	/^void traffic_breakdown::record_traffic(class mem_fetch * mf, unsigned int size) $/;"	f	class:traffic_breakdown	typeref:typename:void
red_impl	cuda-sim/instructions.cc	/^void red_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); /;"	f	typeref:typename:void
red_type	abstract_hardware_model.h	/^    reduction_type red_type;$/;"	m	class:inst_t	typeref:typename:reduction_type
reduce_precision	cuda-sim/instructions.cc	/^float reduce_precision( float x, unsigned bits )$/;"	f	typeref:typename:float
reduction_storage	abstract_hardware_model.h	/^        unsigned reduction_storage[MAX_CTA_PER_SHADER][MAX_BARRIERS_PER_CTA];$/;"	m	class:core_t	typeref:typename:unsigned[][]
reduction_type	abstract_hardware_model.h	/^typedef enum uarch_red_t reduction_type;$/;"	t	typeref:enum:uarch_red_t
ref_count	gpuwattch/xmlParser.h	/^          int                    ref_count;       \/\/ for garbage collection (smart pointers)$/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:typename:int
refresh_power	gpuwattch/cacti/cacti_interface.h	/^  double refresh_power;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
refresh_power	gpuwattch/cacti/cacti_interface.h	/^  refresh_power, leak_power_subbank_closed_page, leak_power_subbank_open_page,$/;"	m	class:mem_array	typeref:typename:double
refresh_power	gpuwattch/cacti/uca.h	/^    double refresh_power;  \/\/ only for DRAM$/;"	m	class:UCA	typeref:typename:double
reg1_num	cuda-sim/ptx_ir.h	/^   int reg1_num() const { return m_value.m_vector_symbolic[0]->reg_num();}$/;"	f	class:operand_info	typeref:typename:int
reg2_num	cuda-sim/ptx_ir.h	/^   int reg2_num() const { return m_value.m_vector_symbolic[1]->reg_num();}$/;"	f	class:operand_info	typeref:typename:int
reg3_num	cuda-sim/ptx_ir.h	/^   int reg3_num() const { return m_value.m_vector_symbolic[2]?m_value.m_vector_symbolic[2]->reg_/;"	f	class:operand_info	typeref:typename:int
reg4_num	cuda-sim/ptx_ir.h	/^   int reg4_num() const { return m_value.m_vector_symbolic[3]?m_value.m_vector_symbolic[3]->reg_/;"	f	class:operand_info	typeref:typename:int
regWindowing	gpuwattch/basic_components.h	/^    bool regWindowing,multithreaded;$/;"	m	class:CoreDynParam	typeref:typename:bool
reg_length	gpuwattch/arch_const.h	/^const int reg_length			=	5;\/\/Niagara$/;"	v	typeref:typename:const int
reg_length	gpuwattch/arch_const.h	/^const int reg_length			=	7;\/\/Niagara$/;"	v	typeref:typename:const int
reg_map_t	cuda-sim/ptx_sim.h	/^   typedef tr1_hash_map<const symbol*,ptx_reg_t> reg_map_t;$/;"	t	class:ptx_thread_info	typeref:typename:tr1_hash_map<const symbol *,ptx_reg_t>
reg_num	cuda-sim/ptx_ir.h	/^   int reg_num() const { return m_value.m_symbolic->reg_num();}$/;"	f	class:operand_info	typeref:typename:int
reg_num	cuda-sim/ptx_ir.h	/^   unsigned reg_num() const$/;"	f	class:symbol	typeref:typename:unsigned
reg_options	abstract_hardware_model.cc	/^void gpgpu_functional_sim_config::reg_options(class OptionParser * opp)$/;"	f	class:gpgpu_functional_sim_config	typeref:typename:void
reg_options	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim_config::reg_options(option_parser_t opp)$/;"	f	class:gpgpu_sim_config	typeref:typename:void
reg_options	gpgpu-sim/gpu-sim.cc	/^void memory_config::reg_options(class OptionParser * opp)$/;"	f	class:memory_config	typeref:typename:void
reg_options	gpgpu-sim/gpu-sim.cc	/^void power_config::reg_options(class OptionParser * opp)$/;"	f	class:power_config	typeref:typename:void
reg_options	gpgpu-sim/gpu-sim.cc	/^void shader_core_config::reg_options(class OptionParser * opp)$/;"	f	class:shader_core_config	typeref:typename:void
reg_space	abstract_hardware_model.h	/^   reg_space,$/;"	e	enum:_memory_space_t
reg_t	cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
reg_table	gpgpu-sim/scoreboard.h	/^    std::vector< std::set<unsigned> > reg_table;$/;"	m	class:Scoreboard	typeref:typename:std::vector<std::set<unsigned>>
regfileassoc	gpuwattch/arch_const.h	/^const int regfileassoc=1;$/;"	v	typeref:typename:const int
regfileblocksize	gpuwattch/arch_const.h	/^const int regfileblocksize=18;$/;"	v	typeref:typename:const int
regfilesize	gpuwattch/arch_const.h	/^const int regfilesize=5760;$/;"	v	typeref:typename:const int
registerExit	cuda-sim/ptx_sim.h	/^   void registerExit(){m_cta_info->register_thread_exit(this);}$/;"	f	class:ptx_thread_info	typeref:typename:void
register_bank	gpgpu-sim/shader.cc	/^int register_bank(int regnum, int wid, unsigned num_banks, unsigned bank_warp_shift)$/;"	f	typeref:typename:int
register_cta_thread_exit	gpgpu-sim/shader.cc	/^void shader_core_ctx::register_cta_thread_exit( unsigned cta_num )$/;"	f	class:shader_core_ctx	typeref:typename:void
register_deleted_thread	cuda-sim/ptx_sim.cc	/^void ptx_cta_info::register_deleted_thread( ptx_thread_info *thd )$/;"	f	class:ptx_cta_info	typeref:typename:void
register_finished_kernel	stream_manager.cc	/^bool stream_manager::register_finished_kernel(unsigned grid_uid)$/;"	f	class:stream_manager	typeref:typename:bool
register_set	abstract_hardware_model.h	/^	register_set(unsigned num, const char* name){$/;"	f	class:register_set
register_set	abstract_hardware_model.h	/^class register_set {$/;"	c
register_thread_exit	cuda-sim/ptx_sim.cc	/^void ptx_cta_info::register_thread_exit( ptx_thread_info *thd )$/;"	f	class:ptx_cta_info	typeref:typename:void
register_windows_size	gpuwattch/XML_Parse.h	/^	int register_windows_size;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
regs	abstract_hardware_model.h	/^	std::vector<warp_inst_t*> regs;$/;"	m	class:register_set	typeref:typename:std::vector<warp_inst_t * >
regs	abstract_hardware_model.h	/^   int regs;$/;"	m	struct:gpgpu_ptx_sim_kernel_info	typeref:typename:int
regwinassoc	gpuwattch/arch_const.h	/^const int regwinassoc=1;$/;"	v	typeref:typename:const int
regwinblocksize	gpuwattch/arch_const.h	/^const int regwinblocksize=8;$/;"	v	typeref:typename:const int
regwinsize	gpuwattch/arch_const.h	/^const int regwinsize=256;$/;"	v	typeref:typename:const int
reinit	gpgpu-sim/shader.cc	/^void shader_core_ctx::reinit(unsigned start_thread, unsigned end_thread, bool reset_not_complete/;"	f	class:shader_core_ctx	typeref:typename:void
reinit	gpgpu-sim/shader.cc	/^void simt_core_cluster::reinit()$/;"	f	class:simt_core_cluster	typeref:typename:void
reinit_clock_domains	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::reinit_clock_domains(void)$/;"	f	class:gpgpu_sim	typeref:typename:void
releaseRegister	gpgpu-sim/scoreboard.cc	/^void Scoreboard::releaseRegister(unsigned wid, unsigned regnum) $/;"	f	class:Scoreboard	typeref:typename:void
releaseRegisters	gpgpu-sim/scoreboard.cc	/^void Scoreboard::releaseRegisters(const class warp_inst_t *inst) $/;"	f	class:Scoreboard	typeref:typename:void
rem_impl	cuda-sim/instructions.cc	/^void rem_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
removeCommentsInMiddleOfText	gpuwattch/xmlParser.cc	/^static char guessWideCharChars=1, dropWhiteSpace=1, removeCommentsInMiddleOfText=1;$/;"	v	typeref:typename:char	file:
removeOrderElement	gpuwattch/xmlParser.cc	/^int XMLNode::removeOrderElement(XMLNodeData *d, XMLElementType t, int index)$/;"	f	class:XMLNode	typeref:typename:int
remove_args	cuda-sim/ptx_ir.h	/^   void remove_args()$/;"	f	class:function_info	typeref:typename:void
remove_snap_shot_trigger	gpgpu-sim/stat-tool.cc	/^void remove_snap_shot_trigger (snap_shot_trigger* ss_trigger)$/;"	f	typeref:typename:void
remove_spill_log	gpgpu-sim/stat-tool.cc	/^void remove_spill_log (spill_log_interface* spill_log)$/;"	f	typeref:typename:void
renameWidth	gpuwattch/arch_const.h	/^const int renameWidth=8;$/;"	v	typeref:typename:const int
rename_accesses	gpuwattch/XML_Parse.h	/^	double rename_accesses;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
rename_reads	gpuwattch/XML_Parse.h	/^	double rename_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
rename_scheme	gpuwattch/XML_Parse.h	/^	int rename_scheme;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
rename_writes	gpuwattch/XML_Parse.h	/^	double rename_writes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
repeated_wire	gpuwattch/cacti/wire.h	/^    list <Component> repeated_wire;$/;"	m	class:Wire	typeref:typename:list<Component>
repeater_size	gpuwattch/cacti/wire.h	/^    double repeater_size;$/;"	m	class:Wire	typeref:typename:double
repeater_spacing	gpuwattch/cacti/wire.h	/^    double repeater_spacing;$/;"	m	class:Wire	typeref:typename:double
replacement_policy_t	gpgpu-sim/gpu-cache.h	/^enum replacement_policy_t {$/;"	g
replacements	gpuwattch/XML_Parse.h	/^	double replacements;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
replacements	gpuwattch/XML_Parse.h	/^	double replacements;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
replacements	gpuwattch/XML_Parse.h	/^	double replacements;$/;"	m	struct:__anon6448b92c0608	typeref:typename:double
replacements	gpuwattch/XML_Parse.h	/^	double replacements;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
replacements	gpuwattch/XML_Parse.h	/^	double replacements;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
replenish_port_bandwidth	gpgpu-sim/gpu-cache.cc	/^void baseline_cache::bandwidth_management::replenish_port_bandwidth()$/;"	f	class:baseline_cache::bandwidth_management	typeref:typename:void
req	gpgpu-sim/l2cache.h	/^    	class mem_fetch* req;$/;"	m	struct:memory_sub_partition::rop_delay_t	typeref:class:mem_fetch *
req	gpgpu-sim/l2cache.h	/^      class mem_fetch* req;$/;"	m	struct:memory_partition_unit::dram_delay_t	typeref:class:mem_fetch *
req_coeff	gpuwattch/basic_components.h	/^    double req_coeff;$/;"	m	class:DRAMParam	typeref:typename:double
req_window_size_per_channel	gpuwattch/XML_Parse.h	/^	int req_window_size_per_channel;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:int
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_constant_c_accesses
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_inst_c_accesses
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_l1d_read_accesses
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_l1d_write_accesses
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_l2_read_accesses
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_l2_write_accesses
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_texture_c_accesses
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_constant_c_misses
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_inst_c_misses
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_l1d_read_misses
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_l1d_write_misses
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_l2_read_misses
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_l2_write_misses
request_status	gpgpu-sim/power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_texture_c_misses
res_fails	gpgpu-sim/gpu-cache.h	/^    unsigned res_fails;$/;"	m	struct:cache_sub_stats	typeref:typename:unsigned
reserveRegister	gpgpu-sim/scoreboard.cc	/^void Scoreboard::reserveRegister(unsigned wid, unsigned regnum) $/;"	f	class:Scoreboard	typeref:typename:void
reserveRegisters	gpgpu-sim/scoreboard.cc	/^void Scoreboard::reserveRegisters(const class warp_inst_t* inst) $/;"	f	class:Scoreboard	typeref:typename:void
reset	abstract_hardware_model.cc	/^void simt_stack::reset()$/;"	f	class:simt_stack	typeref:typename:void
reset	gpgpu-sim/shader.h	/^      void reset() { m_allocation = NO_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:void
reset	gpgpu-sim/shader.h	/^      void reset() { m_valid = false; }$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:void
reset	gpgpu-sim/shader.h	/^    void reset()$/;"	f	class:shd_warp_t	typeref:typename:void
reset	gpgpu-sim/stat-tool.cc	/^void thread_insn_span::reset(unsigned long long  cycle) $/;"	f	class:thread_insn_span	typeref:typename:void
reset	gpgpu-sim/stat-tool.h	/^   void reset(unsigned long long  cycle) {$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
reset	gpuwattch/basic_components.h	/^    void reset() { access = 0; hit = 0; miss = 0;}$/;"	f	class:statsComponents	typeref:typename:void
reset	gpuwattch/basic_components.h	/^    void reset() { readAc.reset(); writeAc.reset();searchAc.reset();}$/;"	f	class:statsDef	typeref:typename:void
reset	gpuwattch/cacti/cacti_interface.h	/^    void reset() { dynamic = 0; leakage = 0; gate_leakage = 0; short_circuit = 0;longer_channel_/;"	f	class:powerComponents	typeref:typename:void
reset	gpuwattch/cacti/cacti_interface.h	/^    void reset() { readOp.reset(); writeOp.reset(); searchOp.reset();}$/;"	f	class:powerDef	typeref:typename:void
reset	gpuwattch/cacti/parameter.h	/^    void reset()$/;"	f	class:TechnologyParameter::DeviceType	typeref:typename:void
reset	gpuwattch/cacti/parameter.h	/^    void reset()$/;"	f	class:TechnologyParameter::InterconnectType	typeref:typename:void
reset	gpuwattch/cacti/parameter.h	/^    void reset()$/;"	f	class:TechnologyParameter::MemoryType	typeref:typename:void
reset	gpuwattch/cacti/parameter.h	/^    void reset()$/;"	f	class:TechnologyParameter::ScalingFactor	typeref:typename:void
reset	gpuwattch/cacti/parameter.h	/^  void reset()$/;"	f	class:TechnologyParameter	typeref:typename:void
reset	intersim2/injection.cpp	/^void InjectionProcess::reset()$/;"	f	class:InjectionProcess	typeref:typename:void
reset	intersim2/injection.cpp	/^void OnOffInjectionProcess::reset()$/;"	f	class:OnOffInjectionProcess	typeref:typename:void
reset	intersim2/traffic.cpp	/^void TrafficPattern::reset()$/;"	f	class:TrafficPattern	typeref:typename:void
reset_alloction	gpgpu-sim/shader.h	/^      void reset_alloction()$/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:void
reset_bins	gpgpu-sim/histogram.cc	/^void binned_histogram::reset_bins () {$/;"	f	class:binned_histogram	typeref:typename:void
reset_counters	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::reset_counters(){$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
reset_stack	gpgpu-sim/stack.cc	/^void reset_stack(Stack *S) {$/;"	f	typeref:typename:void
reset_symtab	cuda-sim/ptx_parser.cc	/^void *reset_symtab()$/;"	f	typeref:typename:void *
resistivity	gpuwattch/cacti/wire.h	/^    double resistivity;$/;"	m	class:Wire	typeref:typename:double
response_buffer_full	gpgpu-sim/shader.cc	/^bool ldst_unit::response_buffer_full() const$/;"	f	class:ldst_unit	typeref:typename:bool
response_queue_full	gpgpu-sim/shader.h	/^    bool response_queue_full() {$/;"	f	class:simt_core_cluster	typeref:typename:bool
restore_info_of_last_inst_at_barrier	gpgpu-sim/shader.h	/^    const warp_inst_t * restore_info_of_last_inst_at_barrier(){ return m_inst_at_barrier;}$/;"	f	class:shd_warp_t	typeref:typename:const warp_inst_t *
results_mem_array	gpuwattch/cacti/cacti_interface.h	/^} results_mem_array;$/;"	t	typeref:struct:__anon592e3c280108
retIssuedWarp	gpgpu-sim/wrc.cc	/^unsigned Wrc::retIssuedWarp(){$/;"	f	class:Wrc	typeref:typename:unsigned
retOwnerWarp	gpgpu-sim/gpu-cache.h	/^	bool retOwnerWarp(){$/;"	f	class:l1_cache	typeref:typename:bool
retOwnerWarp	gpgpu-sim/shader.h	/^	 unsigned retOwnerWarp(){$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
retSatFlag	gpgpu-sim/gpu-cache.h	/^  	bool retSatFlag(){$/;"	f	class:l1_cache	typeref:typename:bool
retSatFlag	gpgpu-sim/gpu-cache.h	/^    bool retSatFlag(){ return mem_sat_flag; }$/;"	f	class:read_only_cache	typeref:typename:bool
retSatFlag	gpgpu-sim/shader.h	/^     bool retSatFlag(){$/;"	f	class:ldst_unit	typeref:typename:bool
retSatFlag	gpgpu-sim/wrc.cc	/^bool Wrc::retSatFlag(){$/;"	f	class:Wrc	typeref:typename:bool
retWarpID	gpgpu-sim/wrc.cc	/^unsigned Wrc::retWarpID(){$/;"	f	class:Wrc	typeref:typename:unsigned
ret_impl	cuda-sim/instructions.cc	/^void ret_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
retp_impl	cuda-sim/instructions.cc	/^void retp_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f	typeref:typename:void
return_credit	gpgpu-sim/l2cache.cc	/^void memory_partition_unit::arbitration_metadata::return_credit(int inner_sub_partition_id) $/;"	f	class:memory_partition_unit::arbitration_metadata	typeref:typename:void
return_queue_pop	gpgpu-sim/dram.cc	/^class mem_fetch* dram_t::return_queue_pop() $/;"	c	class:dram_t	file:
return_queue_top	gpgpu-sim/dram.cc	/^class mem_fetch* dram_t::return_queue_top() $/;"	f	class:dram_t	typeref:class:dram_t::return_queue_pop class mem_fetch *
returnq	gpgpu-sim/dram.h	/^   fifo_pipeline<mem_fetch> *returnq;$/;"	m	class:dram_t	typeref:typename:fifo_pipeline<mem_fetch> *
returnq_full	gpgpu-sim/dram.cc	/^bool dram_t::returnq_full() const$/;"	f	class:dram_t	typeref:typename:bool
rf_banks	gpuwattch/XML_Parse.h	/^	int rf_banks;\/\/ (4)$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
rf_fu_clockRate	gpuwattch/core.h	/^	double rf_fu_clockRate;$/;"	m	class:EXECU	typeref:typename:double
rfu	gpuwattch/core.h	/^	RegFU          * rfu;$/;"	m	class:EXECU	typeref:typename:RegFU *
rm_ty	gpuwattch/basic_components.h	/^	enum Renaming_type rm_ty;$/;"	m	class:CoreDynParam	typeref:enum:Renaming_type
rnu	gpuwattch/core.h	/^	RENAMINGU  * rnu;$/;"	m	class:Core	typeref:typename:RENAMINGU *
rob_entry	gpgpu-sim/gpu-cache.h	/^        rob_entry( unsigned i, mem_fetch *mf, new_addr_type a ) $/;"	f	struct:tex_cache::rob_entry
rob_entry	gpgpu-sim/gpu-cache.h	/^        rob_entry() { m_ready = false; m_time=0; m_request=NULL;}$/;"	f	struct:tex_cache::rob_entry
rob_entry	gpgpu-sim/gpu-cache.h	/^    struct rob_entry {$/;"	s	class:tex_cache
romm_mesh	intersim2/routefunc.cpp	/^void romm_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject /;"	f	typeref:typename:void
romm_ni_mesh	intersim2/routefunc.cpp	/^void romm_ni_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inje/;"	f	typeref:typename:void
root_system	gpuwattch/XML_Parse.h	/^} root_system;$/;"	t	typeref:struct:__anon6448b92c1208
rop_delay_t	gpgpu-sim/l2cache.h	/^   struct rop_delay_t$/;"	s	class:memory_sub_partition
rop_latency	gpgpu-sim/gpu-sim.h	/^   unsigned rop_latency;$/;"	m	struct:memory_config	typeref:typename:unsigned
rounding_mode	cuda-sim/ptx.y	/^rounding_mode: floating_point_rounding_mode$/;"	l
rounding_mode	cuda-sim/ptx_ir.h	/^   unsigned rounding_mode() const { return m_rounding_mode;}$/;"	f	class:ptx_instruction	typeref:typename:unsigned
route	intersim2/networks/anynet.cpp	/^void AnyNet::route(int r_start){$/;"	f	class:AnyNet	typeref:typename:void
route_over_perc	gpuwattch/XML_Parse.h	/^	double route_over_perc;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:double
route_over_perc	gpuwattch/basic_components.h	/^		   duty_cycle, chip_coverage, route_over_perc;$/;"	m	class:NoCParam	typeref:typename:double
route_over_perc	gpuwattch/interconnect.h	/^    double route_over_perc;$/;"	m	class:interconnect	typeref:typename:double
router	gpuwattch/cacti/nuca.h	/^    MCPAT_Router *router;$/;"	m	class:nuca_org_t	typeref:typename:MCPAT_Router *
router	gpuwattch/noc.h	/^	MCPAT_Router * router;$/;"	m	class:NoC	typeref:typename:MCPAT_Router *
router_exist	gpuwattch/noc.h	/^	bool router_exist;$/;"	m	class:NoC	typeref:typename:bool
router_list	intersim2/networks/anynet.hpp	/^  vector<map<int,  map<int, pair<int,int> > > > router_list;$/;"	m	class:AnyNet	typeref:typename:vector<map<int,map<int,pair<int,int>>>>
routing	intersim2/vc.hpp	/^  enum eVCState { state_min = 0, idle = state_min, routing, vc_alloc, active, $/;"	e	enum:VC::eVCState
routing_area_height_within_bank	gpuwattch/cacti/cacti_interface.h	/^  double routing_area_height_within_bank;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
routing_area_width_within_bank	gpuwattch/cacti/cacti_interface.h	/^  double routing_area_width_within_bank;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
routing_table	intersim2/networks/anynet.hpp	/^  vector<map<int, int> > routing_table;$/;"	m	class:AnyNet	typeref:typename:vector<map<int,int>>
row	gpgpu-sim/addrdec.h	/^   unsigned row;$/;"	m	struct:addrdec_t	typeref:typename:unsigned
row	gpgpu-sim/dram.h	/^   unsigned int row;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
row_access	gpgpu-sim/mem_latency_stat.h	/^   unsigned int **row_access; \/\/row_access[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
row_dec	gpuwattch/cacti/mat.h	/^    Decoder * row_dec;$/;"	m	class:Mat	typeref:typename:Decoder *
row_service_timestamp	gpgpu-sim/dram_sched.h	/^   unsigned *row_service_timestamp; \/\/tracks when scheduler began servicing current row$/;"	m	class:frfcfs_scheduler	typeref:typename:unsigned *
rows	gpuwattch/cacti/nuca.h	/^    int rows;$/;"	m	class:nuca_org_t	typeref:typename:int
rpc_updated	cuda-sim/ptx_sim.h	/^   bool rpc_updated() const { return m_RPC_updated; }$/;"	f	class:ptx_thread_info	typeref:typename:bool
rpters_in_htree	gpuwattch/cacti/cacti_interface.h	/^    bool     rpters_in_htree;  \/\/ if there are repeaters in htree segment$/;"	m	class:InputParameter	typeref:typename:bool
rsqrt_impl	cuda-sim/instructions.cc	/^void rsqrt_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
rt_power	gpuwattch/cacti/component.h	/^    powerDef power,rt_power;$/;"	m	class:Component	typeref:typename:powerDef
rtp_stats	gpuwattch/array.h	/^  statsDef       rtp_stats;$/;"	m	class:ArrayST	typeref:typename:statsDef
rtp_stats	gpuwattch/logic.h	/^	statsDef       rtp_stats;$/;"	m	class:FunctionalUnit	typeref:typename:statsDef
rtp_stats	gpuwattch/logic.h	/^	statsDef       rtp_stats;$/;"	m	class:dep_resource_conflict_check	typeref:typename:statsDef
rtp_stats	gpuwattch/logic.h	/^	statsDef       rtp_stats;$/;"	m	class:inst_decoder	typeref:typename:statsDef
rtp_stats	gpuwattch/memoryctrl.h	/^    statsDef       rtp_stats;$/;"	m	class:MCPHY	typeref:typename:statsDef
rtp_stats	gpuwattch/memoryctrl.h	/^    statsDef rtp_stats;$/;"	m	class:MCBackend	typeref:typename:statsDef
rtp_stats	gpuwattch/noc.h	/^	statsDef       rtp_stats;$/;"	m	class:NoC	typeref:typename:statsDef
run	intersim2/power/power_module.cpp	/^void Power_Module::run(){$/;"	f	class:Power_Module	typeref:typename:void
run_test	gpgpu-sim/addrdec.h	/^   bool run_test; $/;"	m	class:linear_to_raw_address_translation	typeref:typename:bool
running	abstract_hardware_model.h	/^   bool running() const { return m_num_cores_running>0; }$/;"	f	class:kernel_info_t	typeref:typename:bool
running	intersim2/trafficmanager.hpp	/^  enum eSimState { warming_up, running, draining, done };$/;"	e	enum:TrafficManager::eSimState
rw	gpgpu-sim/dram.h	/^   unsigned char rw;    \/\/is the bank reading or writing?$/;"	m	struct:bank_t	typeref:typename:unsigned char
rw	gpgpu-sim/dram.h	/^   unsigned char rw;    \/\/is the request a read or a write?$/;"	m	class:dram_req_t	typeref:typename:unsigned char
rw	gpgpu-sim/dram.h	/^   unsigned char rw; \/\/was last request a read or write? (important for RTW, WTR)$/;"	m	class:dram_t	typeref:typename:unsigned char
rwq	gpgpu-sim/dram.h	/^   fifo_pipeline<dram_req_t> *rwq;$/;"	m	class:dram_t	typeref:typename:fifo_pipeline<dram_req_t> *
s	gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR s; int l; XMLCHAR c;} XMLCharacterEntity;$/;"	m	struct:__anon33c5d5fd0208	typeref:typename:XMLCSTR	file:
s16	cuda-sim/ptx_sim.h	/^   signed short      s16;$/;"	m	union:ptx_reg_t	typeref:typename:signed short
s2f	cuda-sim/instructions.cc	/^ptx_reg_t s2f( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mo/;"	f	typeref:typename:ptx_reg_t
s32	cuda-sim/ptx_sim.h	/^   signed int        s32;$/;"	m	union:ptx_reg_t	typeref:typename:signed int
s64	cuda-sim/ptx_sim.h	/^   signed long long  s64;$/;"	m	union:ptx_reg_t	typeref:typename:signed long long
s8	cuda-sim/ptx_sim.h	/^   signed char       s8;$/;"	m	union:ptx_reg_t	typeref:typename:signed char
sRequest	intersim2/allocators/allocator.hpp	/^  struct sRequest {$/;"	s	class:Allocator
sRequest	intersim2/arbiters/prio_arb.hpp	/^  struct sRequest {$/;"	s	class:PriorityArbiter
sSetElement	intersim2/outputset.hpp	/^  struct sSetElement {$/;"	s	class:OutputSet
s_CTA_count_logger	gpgpu-sim/stat-tool.cc	/^static linear_histogram_logger *s_CTA_count_logger = NULL;$/;"	v	typeref:typename:linear_histogram_logger *	file:
s_cache_access_logger	gpgpu-sim/stat-tool.cc	/^static std::vector<linear_histogram_logger> s_cache_access_logger;$/;"	v	typeref:typename:std::vector<linear_histogram_logger>	file:
s_cache_access_logger_n_types	gpgpu-sim/stat-tool.cc	/^static int s_cache_access_logger_n_types = 0;$/;"	v	typeref:typename:int	file:
s_g_pc_to_insn	cuda-sim/cuda-sim.cc	/^std::vector<ptx_instruction*> function_info::s_g_pc_to_insn;$/;"	m	class:function_info	typeref:typename:std::vector<ptx_instruction * >
s_g_pc_to_insn	cuda-sim/ptx_ir.h	/^   static std::vector<ptx_instruction*> s_g_pc_to_insn; \/\/ a direct mapping from PC to instruc/;"	m	class:function_info	typeref:typename:std::vector<ptx_instruction * >
s_ids	gpgpu-sim/stat-tool.cc	/^int insn_warp_occ_logger::s_ids = 0;$/;"	m	class:insn_warp_occ_logger	typeref:typename:int
s_ids	gpgpu-sim/stat-tool.cc	/^int linear_histogram_logger::s_ids = 0;$/;"	m	class:linear_histogram_logger	typeref:typename:int
s_ids	gpgpu-sim/stat-tool.h	/^   static int s_ids;$/;"	m	class:insn_warp_occ_logger	typeref:typename:int
s_ids	gpgpu-sim/stat-tool.h	/^   static int s_ids;$/;"	m	class:linear_histogram_logger	typeref:typename:int
s_kernel_recon_points	cuda-sim/cuda-sim.cc	/^   gpgpu_recon_t *s_kernel_recon_points;$/;"	m	struct:rec_pts	typeref:typename:gpgpu_recon_t *	file:
s_mem_acc_logger	gpgpu-sim/stat-tool.cc	/^static std::vector<linear_histogram_logger> s_mem_acc_logger;$/;"	v	typeref:typename:std::vector<linear_histogram_logger>	file:
s_mem_acc_logger_n_bank	gpgpu-sim/stat-tool.cc	/^static int s_mem_acc_logger_n_bank = 0;$/;"	v	typeref:typename:int	file:
s_mem_acc_logger_n_dram	gpgpu-sim/stat-tool.cc	/^static int s_mem_acc_logger_n_dram = 0;$/;"	v	typeref:typename:int	file:
s_mem_lat_logger	gpgpu-sim/stat-tool.cc	/^static std::vector<linear_histogram_logger> s_mem_lat_logger;$/;"	v	typeref:typename:std::vector<linear_histogram_logger>	file:
s_mem_lat_logger_nbins	gpgpu-sim/stat-tool.cc	/^static int s_mem_lat_logger_nbins = 48;     \/\/ up to 2^24 = 16M$/;"	v	typeref:typename:int	file:
s_mem_lat_logger_used	gpgpu-sim/stat-tool.cc	/^static bool s_mem_lat_logger_used = false;$/;"	v	typeref:typename:bool	file:
s_num_recon	cuda-sim/cuda-sim.cc	/^   int s_num_recon;$/;"	m	struct:rec_pts	typeref:typename:int	file:
s_scale	gpuwattch/cacti/wire.h	/^    double w_scale, s_scale;$/;"	m	class:Wire	typeref:typename:double
s_warp_occ_logger	gpgpu-sim/stat-tool.cc	/^static std::vector<linear_histogram_logger> s_warp_occ_logger;$/;"	v	typeref:typename:std::vector<linear_histogram_logger>	file:
sa_mux_lev_1_dec	gpuwattch/cacti/mat.h	/^    Decoder * sa_mux_lev_1_dec;$/;"	m	class:Mat	typeref:typename:Decoder *
sa_mux_lev_1_predec	gpuwattch/cacti/mat.h	/^    Predec * sa_mux_lev_1_predec;$/;"	m	class:Mat	typeref:typename:Predec *
sa_mux_lev_2_dec	gpuwattch/cacti/mat.h	/^    Decoder * sa_mux_lev_2_dec;$/;"	m	class:Mat	typeref:typename:Decoder *
sa_mux_lev_2_predec	gpuwattch/cacti/mat.h	/^    Predec * sa_mux_lev_2_predec;$/;"	m	class:Mat	typeref:typename:Predec *
sad_impl	cuda-sim/instructions.cc	/^void sad_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
sample_cache_port_utility	gpgpu-sim/gpu-cache.cc	/^void cache_stats::sample_cache_port_utility(bool data_port_busy, bool fill_port_busy) $/;"	f	class:cache_stats	typeref:typename:void
sample_cmp_pwr	gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> sample_cmp_pwr; \/\/ Current sample component powers$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:std::vector<double>
sample_perf_counters	gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> sample_perf_counters; \/\/ Current sample component perf. counts$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:std::vector<double>
sample_start	gpuwattch/gpgpu_sim_wrapper.h	/^    unsigned sample_start;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:unsigned
sample_val	gpuwattch/gpgpu_sim_wrapper.h	/^    double sample_val;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:double
samples	gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> samples;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:std::vector<double>
samples_counter	gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> samples_counter;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:std::vector<double>
sampling_core	trace.cc	/^    int sampling_core = 0;$/;"	v	namespace:Trace	typeref:typename:int
sampling_memory_partition	trace.cc	/^    int sampling_memory_partition = -1;$/;"	v	namespace:Trace	typeref:typename:int
sanity_check	gpuwattch/gpgpu_sim_wrapper.cc	/^bool gpgpu_sim_wrapper::sanity_check(double a, double b)$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:bool
saturated2i	cuda-sim/instructions.cc	/^double saturated2i (double a, double max, double min) {$/;"	f	typeref:typename:double
saturatei	cuda-sim/instructions.cc	/^int saturatei(int a, int max, int min) $/;"	f	typeref:typename:int
saturatei	cuda-sim/instructions.cc	/^unsigned int saturatei(unsigned int a, unsigned int max) $/;"	f	typeref:typename:unsigned int
saturation_mode	cuda-sim/ptx_ir.h	/^   unsigned saturation_mode() const { return m_saturation_mode;}$/;"	f	class:ptx_instruction	typeref:typename:unsigned
save_stats	gpgpu-sim/power_stat.cc	/^void power_core_stat_t::save_stats(){$/;"	f	class:power_core_stat_t	typeref:typename:void
save_stats	gpgpu-sim/power_stat.cc	/^void power_mem_stat_t::save_stats(){$/;"	f	class:power_mem_stat_t	typeref:typename:void
save_stats	gpgpu-sim/power_stat.h	/^   void save_stats(){$/;"	f	class:power_stat_t	typeref:typename:void
scalar_type	cuda-sim/ptx.y	/^scalar_type: S8_TYPE { add_scalar_type_spec( S8_TYPE ); }$/;"	l
scalar_type	cuda-sim/ptx_ir.h	/^   int  scalar_type() const { return m_scalar_type_spec;}$/;"	f	class:type_info_key	typeref:typename:int
scaling_coefficients	gpuwattch/XML_Parse.h	/^    double scaling_coefficients[64];$/;"	m	struct:__anon6448b92c1208	typeref:typename:double[64]
scaling_factor	gpuwattch/cacti/parameter.h	/^  ScalingFactor scaling_factor;$/;"	m	class:TechnologyParameter	typeref:typename:ScalingFactor
schedule	gpgpu-sim/dram_sched.cc	/^dram_req_t *frfcfs_scheduler::schedule( unsigned bank, unsigned curr_row )$/;"	f	class:frfcfs_scheduler	typeref:typename:dram_req_t *
scheduler_fifo	gpgpu-sim/dram.cc	/^void dram_t::scheduler_fifo()$/;"	f	class:dram_t	typeref:typename:void
scheduler_frfcfs	gpgpu-sim/dram_sched.cc	/^void dram_t::scheduler_frfcfs()$/;"	f	class:dram_t	typeref:typename:void
scheduler_prioritization_type	gpgpu-sim/shader.h	/^enum scheduler_prioritization_type$/;"	g
scheduler_type	gpgpu-sim/gpu-sim.h	/^   enum dram_ctrl_t scheduler_type;$/;"	m	struct:memory_config	typeref:enum:dram_ctrl_t
scheduler_unit	gpgpu-sim/shader.h	/^	scheduler_unit(shader_core_stats* stats, shader_core_ctx* shader, $/;"	f	class:scheduler_unit
scheduler_unit	gpgpu-sim/shader.h	/^    scheduler_unit(shader_core_stats* stats, shader_core_ctx* shader, $/;"	f	class:scheduler_unit
scheduler_unit	gpgpu-sim/shader.h	/^class scheduler_unit { \/\/this can be copied freely, so can be used in std containers.$/;"	c
schedulers	gpgpu-sim/shader.h	/^    std::vector<scheduler_unit*>  schedulers;$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<scheduler_unit * >
scheu	gpuwattch/core.h	/^	SchedulerU     * scheu;$/;"	m	class:EXECU	typeref:typename:SchedulerU *
scheu_ty	gpuwattch/basic_components.h	/^    enum Scheduler_type scheu_ty;$/;"	m	class:CoreDynParam	typeref:enum:Scheduler_type
scktRatio	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:BranchPredictor	typeref:typename:double
scktRatio	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:Core	typeref:typename:double
scktRatio	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:EXECU	typeref:typename:double
scktRatio	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:InstFetchU	typeref:typename:double
scktRatio	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:LoadStoreU	typeref:typename:double
scktRatio	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:MemManU	typeref:typename:double
scktRatio	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:RegFU	typeref:typename:double
scktRatio	gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:SchedulerU	typeref:typename:double
scktRatio	gpuwattch/logic.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:UndiffCore	typeref:typename:double
scktRatio	gpuwattch/noc.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:NoC	typeref:typename:double
scktRatio	gpuwattch/sharedcache.h	/^    double scktRatio, clockRate, executionTime;$/;"	m	class:CCdir	typeref:typename:double
scktRatio	gpuwattch/sharedcache.h	/^    double scktRatio, executionTime;$/;"	m	class:SharedCache	typeref:typename:double
sckt_co_eff	gpuwattch/cacti/parameter.h	/^  double sckt_co_eff;$/;"	m	class:TechnologyParameter	typeref:typename:double
sdata	option_parser.cc	/^   string sdata;$/;"	m	class:testtype	typeref:typename:string	file:
searchAc	gpuwattch/basic_components.h	/^    statsComponents searchAc;$/;"	m	class:statsDef	typeref:typename:statsComponents
searchOp	gpuwattch/cacti/cacti_interface.h	/^    powerComponents searchOp;\/\/Sheng: for CAM and FA$/;"	m	class:powerDef	typeref:typename:powerComponents
search_data_in_bits	gpuwattch/cacti/htree2.h	/^    int add_bits, data_in_bits,search_data_in_bits,data_out_bits,  search_data_out_bits;$/;"	m	class:Htree2	typeref:typename:int
search_data_out_bits	gpuwattch/cacti/htree2.h	/^    int add_bits, data_in_bits,search_data_in_bits,data_out_bits,  search_data_out_bits;$/;"	m	class:Htree2	typeref:typename:int
search_tree	gpuwattch/cacti/htree2.h	/^    bool search_tree;$/;"	m	class:Htree2	typeref:typename:bool
select_kernel	gpgpu-sim/gpu-sim.cc	/^kernel_info_t *gpgpu_sim::select_kernel()$/;"	f	class:gpgpu_sim	typeref:typename:kernel_info_t *
select_stats_status	gpgpu-sim/gpu-cache.cc	/^enum cache_request_status cache_stats::select_stats_status(enum cache_request_status probe, enum/;"	f	class:cache_stats	typeref:enum:cache_request_status
selection_logic	gpuwattch/logic.cc	/^selection_logic::selection_logic($/;"	f	class:selection_logic
selection_logic	gpuwattch/logic.h	/^class selection_logic : public Component{$/;"	c
selection_power	gpuwattch/logic.cc	/^void selection_logic::selection_power()$/;"	f	class:selection_logic	typeref:typename:void
selp_impl	cuda-sim/instructions.cc	/^void selp_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
send_read_request	gpgpu-sim/gpu-cache.cc	/^void baseline_cache::send_read_request(new_addr_type addr, new_addr_type block_addr, unsigned ca/;"	f	class:baseline_cache	typeref:typename:void
send_write_request	gpgpu-sim/gpu-cache.cc	/^void data_cache::send_write_request(mem_fetch *mf, cache_event request, unsigned time, std::list/;"	f	class:data_cache	typeref:typename:void
sense_amp	gpuwattch/cacti/wire.h	/^    Component sense_amp;$/;"	m	class:Wire	typeref:typename:Component
sense_amp_input_cap	gpuwattch/cacti/wire.cc	/^Wire::sense_amp_input_cap()$/;"	f	class:Wire	typeref:typename:double
sense_delay	gpuwattch/cacti/parameter.h	/^  double sense_delay;$/;"	m	class:TechnologyParameter	typeref:typename:double
sense_dy_power	gpuwattch/cacti/parameter.h	/^  double sense_dy_power;$/;"	m	class:TechnologyParameter	typeref:typename:double
sequence_based	intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_base/;"	e	enum:TrafficManager::ePriority
series	gpuwattch/cacti/basic_circuit.h	/^    series$/;"	e	enum:Half_net_topology
setGlobalOptions	gpuwattch/xmlParser.cc	/^char XMLNode::setGlobalOptions(XMLCharEncoding _characterEncoding, char _guessWideCharChars,$/;"	f	class:XMLNode	typeref:typename:char
setIssuedWarp	gpgpu-sim/wrc.cc	/^void Wrc::setIssuedWarp(unsigned warp){$/;"	f	class:Wrc	typeref:typename:void
setMemoryBit	gpgpu-sim/warp_status.cc	/^	void WST::setMemoryBit (bool bitValue, unsigned warpId) {$/;"	f	class:WST	typeref:typename:void
setOwnerWarp	gpgpu-sim/gpu-cache.h	/^	void setOwnerWarp(unsigned warp_id){$/;"	f	class:l1_cache	typeref:typename:void
setSatFlag	gpgpu-sim/shader.h	/^     void setSatFlag(bool memFlag){$/;"	f	class:ldst_unit	typeref:typename:void
setSatFlag	gpgpu-sim/wrc.cc	/^void Wrc::setSatFlag(bool satFlag){$/;"	f	class:Wrc	typeref:typename:void
setStallBit	gpgpu-sim/warp_status.cc	/^	void WST::setStallBit (bool stallBit, unsigned warpId) {$/;"	f	class:WST	typeref:typename:void
setWarpID	gpgpu-sim/wrc.cc	/^void Wrc::setWarpID(unsigned ID){$/;"	f	class:Wrc	typeref:typename:void
set_NoC_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_NoC_power(double noc_tot_reads, double noc_tot_writes )$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_PC	cuda-sim/ptx_ir.h	/^   void set_PC( addr_t PC )$/;"	f	class:ptx_instruction	typeref:typename:void
set_active	abstract_hardware_model.cc	/^void warp_inst_t::set_active( const active_mask_t &active ) {$/;"	f	class:warp_inst_t	typeref:typename:void
set_active_lanes_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_active_lanes_power(double sp_avg_active_lane, double sfu_avg_active_/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_addr	abstract_hardware_model.h	/^    void set_addr( unsigned n, new_addr_type addr ) $/;"	f	class:warp_inst_t	typeref:typename:void
set_addr	abstract_hardware_model.h	/^    void set_addr( unsigned n, new_addr_type* addr, unsigned num_addrs )$/;"	f	class:warp_inst_t	typeref:typename:void
set_addr	abstract_hardware_model.h	/^   void set_addr(new_addr_type addr) {m_addr=addr;}$/;"	f	class:mem_access_t	typeref:typename:void
set_addr	gpgpu-sim/mem_fetch.h	/^   void set_addr(new_addr_type addr) { m_access.set_addr(addr); }$/;"	f	class:mem_fetch	typeref:typename:void
set_addr_space	cuda-sim/ptx_ir.h	/^   void set_addr_space(enum _memory_space_t set_value) { m_addr_space = set_value; }$/;"	f	class:operand_info	typeref:typename:void
set_address	cuda-sim/ptx_ir.h	/^   void set_address( addr_t addr )$/;"	f	class:symbol	typeref:typename:void
set_area	gpuwattch/cacti/area.h	/^  void set_area(double a_) { area = a_; }$/;"	f	class:Area	typeref:typename:void
set_array_dim	cuda-sim/ptx_ir.h	/^   void set_array_dim( int array_dim ) { m_array_dim = array_dim; }$/;"	f	class:type_info_key	typeref:typename:void
set_bank	abstract_hardware_model.h	/^   void set_bank( unsigned b ) { m_bank = b; }$/;"	f	class:memory_space_t	typeref:typename:void
set_bar_count	abstract_hardware_model.h	/^    void set_bar_count(unsigned count) {bar_count=count;}$/;"	f	class:inst_t	typeref:typename:void
set_bar_id	abstract_hardware_model.h	/^    void set_bar_id(unsigned id) {bar_id=id;}$/;"	f	class:inst_t	typeref:typename:void
set_bar_type	cuda-sim/cuda-sim.cc	/^void ptx_instruction::set_bar_type()$/;"	f	class:ptx_instruction	typeref:typename:void
set_cache_config	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::set_cache_config(std::string kernel_name)$/;"	f	class:gpgpu_sim	typeref:typename:void
set_cache_config	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::set_cache_config(std::string kernel_name,  FuncCache cacheConfig )$/;"	f	class:gpgpu_sim	typeref:typename:void
set_cache_param	gpuwattch/sharedcache.cc	/^void SharedCache::set_cache_param()$/;"	f	class:SharedCache	typeref:typename:void
set_ccache_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_ccache_power(double hits, double misses)$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_completed	gpgpu-sim/shader.h	/^    void set_completed( unsigned lane ) $/;"	f	class:shd_warp_t	typeref:typename:void
set_const_mem_offset	cuda-sim/ptx_ir.h	/^   void set_const_mem_offset(addr_t set_value) { m_const_mem_offset = set_value; }$/;"	f	class:operand_info	typeref:typename:void
set_core_param	gpuwattch/core.cc	/^void Core::set_core_param()$/;"	f	class:Core	typeref:typename:void
set_ctaid	cuda-sim/ptx_sim.h	/^   void set_ctaid( dim3 ctaid ) { m_ctaid = ctaid; }$/;"	f	class:ptx_thread_info	typeref:typename:void
set_cycle	gpgpu-sim/stat-tool.h	/^   void set_cycle(unsigned long long  cycle) { m_cycle = cycle; }$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
set_data_size	gpgpu-sim/mem_fetch.h	/^   void     set_data_size( unsigned size ) { m_data_size=size; }$/;"	f	class:mem_fetch	typeref:typename:void
set_done	cuda-sim/ptx_sim.cc	/^void ptx_thread_info::set_done() $/;"	f	class:ptx_thread_info	typeref:typename:void
set_done	gpgpu-sim/l2cache.cc	/^void memory_partition_unit::set_done( mem_fetch *mf )$/;"	f	class:memory_partition_unit	typeref:typename:void
set_done	gpgpu-sim/l2cache.cc	/^void memory_sub_partition::set_done( mem_fetch *mf )$/;"	f	class:memory_sub_partition	typeref:typename:void
set_done_exit	gpgpu-sim/shader.h	/^    void set_done_exit() { m_done_exit=true; }$/;"	f	class:shd_warp_t	typeref:typename:void
set_double_operand_type	cuda-sim/ptx_ir.h	/^   void set_double_operand_type(int set_value) {  m_double_operand_type = set_value; }$/;"	f	class:operand_info	typeref:typename:void
set_dram_param	gpuwattch/memoryctrl.cc	/^void DRAM::set_dram_param()$/;"	f	class:DRAM	typeref:typename:void
set_dram_power_stats	gpgpu-sim/dram.cc	/^void dram_t::set_dram_power_stats(	unsigned &cmd,$/;"	f	class:dram_t	typeref:typename:void
set_dram_power_stats	gpgpu-sim/l2cache.cc	/^void memory_partition_unit::set_dram_power_stats(unsigned &n_cmd,$/;"	f	class:memory_partition_unit	typeref:typename:void
set_duty_cycle_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_duty_cycle_power(double duty_cycle)$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_exec_unit_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_exec_unit_power(double fpu_accesses, double ialu_accesses, double sf/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_fc_param	gpuwattch/iocontrollers.cc	/^void FlashController::set_fc_param()$/;"	f	class:FlashController	typeref:typename:void
set_fp_or_int_archop	cuda-sim/cuda-sim.cc	/^void ptx_instruction::set_fp_or_int_archop(){$/;"	f	class:ptx_instruction	typeref:typename:void
set_framesize	cuda-sim/ptx_ir.h	/^   void set_framesize( unsigned sz )$/;"	f	class:function_info	typeref:typename:void
set_function	cuda-sim/ptx_ir.h	/^   void set_function( function_info *func )$/;"	f	class:symbol	typeref:typename:void
set_h	gpuwattch/cacti/area.h	/^  void set_h(double h_) { h = h_; }$/;"	f	class:Area	typeref:typename:void
set_icache_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_icache_power(double hits, double misses)$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_icnt_receive_time	gpgpu-sim/mem_fetch.h	/^   void set_icnt_receive_time( unsigned t ) { m_icnt_receive_time=t; }$/;"	f	class:mem_fetch	typeref:typename:void
set_id	gpgpu-sim/stat-tool.h	/^   void set_id(int id) { m_id = id; }$/;"	f	class:insn_warp_occ_logger	typeref:typename:void
set_id	gpgpu-sim/stat-tool.h	/^   void set_id(int id) { m_id = id; }$/;"	f	class:linear_histogram_logger	typeref:typename:void
set_idle_core_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_idle_core_power(double num_idle_core)$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_imiss_pending	gpgpu-sim/shader.h	/^    void set_imiss_pending() { m_imiss_pending=true; }$/;"	f	class:shd_warp_t	typeref:typename:void
set_immediate_addr	cuda-sim/ptx_ir.h	/^   void set_immediate_addr() {m_immediate_address=true;}$/;"	f	class:operand_info	typeref:typename:void
set_immediate_operand_type	cuda-sim/ptx_parser.cc	/^void set_immediate_operand_type ()$/;"	f	typeref:typename:void
set_impl	cuda-sim/instructions.cc	/^void set_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
set_in_rise_time	gpuwattch/cacti/htree2.h	/^    void set_in_rise_time(double rt)$/;"	f	class:Htree2	typeref:typename:void
set_in_rise_time	gpuwattch/cacti/wire.h	/^    void set_in_rise_time(double rt)$/;"	f	class:Wire	typeref:typename:void
set_in_rise_time	gpuwattch/interconnect.h	/^    void set_in_rise_time(double rt)$/;"	f	class:interconnect	typeref:typename:void
set_index	gpgpu-sim/gpu-cache.cc	/^unsigned l1d_cache_config::set_index(new_addr_type addr) const{$/;"	f	class:l1d_cache_config	typeref:typename:unsigned
set_index	gpgpu-sim/gpu-cache.cc	/^unsigned l2_cache_config::set_index(new_addr_type addr) const{$/;"	f	class:l2_cache_config	typeref:typename:unsigned
set_index	gpgpu-sim/gpu-cache.h	/^    virtual unsigned set_index( new_addr_type addr ) const$/;"	f	class:cache_config	typeref:typename:unsigned
set_index_function	gpgpu-sim/gpu-cache.h	/^enum set_index_function{$/;"	g
set_info	cuda-sim/ptx_sim.cc	/^void ptx_thread_info::set_info( function_info *func ) $/;"	f	class:ptx_thread_info	typeref:typename:void
set_inst_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_inst_power(bool clk_gated_lanes, double tot_cycles, double busy_cycl/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_is_func	cuda-sim/ptx_ir.h	/^   void set_is_func()$/;"	f	class:type_info_key	typeref:typename:void
set_is_non_arch_reg	cuda-sim/ptx_ir.h	/^   void set_is_non_arch_reg() { m_is_non_arch_reg = true;  }$/;"	f	class:type_info_key	typeref:typename:void
set_kernel	gpgpu-sim/shader.h	/^    void set_kernel( kernel_info_t *k ) $/;"	f	class:shader_core_ctx	typeref:typename:void
set_kernel_done	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::set_kernel_done( kernel_info_t *kernel ) $/;"	f	class:gpgpu_sim	typeref:typename:void
set_kernel_info	cuda-sim/ptx_ir.h	/^   const void set_kernel_info (const struct gpgpu_ptx_sim_kernel_info &info) {$/;"	f	class:function_info	typeref:typename:const void
set_l1cache_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_l1cache_power(double read_hits, double read_misses, double write_hit/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_l2cache_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_l2cache_power(double read_hits, double read_misses, double write_hit/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_label_address	cuda-sim/ptx_ir.cc	/^void symbol_table::set_label_address( const symbol *label, unsigned addr )$/;"	f	class:symbol_table	typeref:typename:void
set_label_address	cuda-sim/ptx_ir.h	/^   void set_label_address( addr_t addr)$/;"	f	class:symbol	typeref:typename:void
set_last_fetch	gpgpu-sim/shader.h	/^    void set_last_fetch( unsigned long long sim_cycle ) { m_last_fetch=sim_cycle; }$/;"	f	class:shd_warp_t	typeref:typename:void
set_m_instr_mem_index	cuda-sim/ptx_ir.h	/^   void set_m_instr_mem_index(unsigned index) {$/;"	f	class:ptx_instruction	typeref:typename:void
set_max_cta	gpgpu-sim/shader.cc	/^void shader_core_ctx::set_max_cta( const kernel_info_t &kernel ) $/;"	f	class:shader_core_ctx	typeref:typename:void
set_mc_param	gpuwattch/memoryctrl.cc	/^void MemoryController::set_mc_param()$/;"	f	class:MemoryController	typeref:typename:void
set_mem_ctrl_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_mem_ctrl_power(double reads, double writes, double dram_precharge)$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_membar	gpgpu-sim/shader.h	/^    void set_membar() { m_membar=true; }$/;"	f	class:shd_warp_t	typeref:typename:void
set_min_length	gpgpu-sim/delayqueue.h	/^   void set_min_length(unsigned int new_min_len) $/;"	f	class:fifo_pipeline	typeref:typename:void
set_mul_div_or_other_archop	cuda-sim/cuda-sim.cc	/^void ptx_instruction::set_mul_div_or_other_archop(){$/;"	f	class:ptx_instruction	typeref:typename:void
set_name	cuda-sim/ptx_ir.cc	/^void symbol_table::set_name( const char *name )$/;"	f	class:symbol_table	typeref:typename:void
set_name	cuda-sim/ptx_ir.h	/^   void set_name(const char *name)$/;"	f	class:function_info	typeref:typename:void
set_nctaid	cuda-sim/ptx_sim.h	/^   void set_nctaid( dim3 cta_size ) { m_nctaid = cta_size; }$/;"	f	class:ptx_thread_info	typeref:typename:void
set_neg_pred	cuda-sim/ptx_ir.h	/^   void set_neg_pred()$/;"	f	class:operand_info	typeref:typename:void
set_next_pc	gpgpu-sim/shader.h	/^    void set_next_pc( address_type pc ) { m_next_pc = pc; }$/;"	f	class:shd_warp_t	typeref:typename:void
set_niu_param	gpuwattch/iocontrollers.cc	/^void NIUController::set_niu_param()$/;"	f	class:NIUController	typeref:typename:void
set_noc_param	gpuwattch/noc.cc	/^void NoC::set_noc_param()$/;"	f	class:NoC	typeref:typename:void
set_not_active	abstract_hardware_model.cc	/^void warp_inst_t::set_not_active( unsigned lane_id ) {$/;"	f	class:warp_inst_t	typeref:typename:void
set_npc	cuda-sim/ptx_sim.cc	/^void ptx_thread_info::set_npc( const function_info *f )$/;"	f	class:ptx_thread_info	typeref:typename:void
set_npc	cuda-sim/ptx_sim.h	/^   void set_npc( unsigned npc )$/;"	f	class:ptx_thread_info	typeref:typename:void
set_ntid	cuda-sim/ptx_sim.h	/^   void set_ntid( dim3 tid ) { m_ntid = tid; }$/;"	f	class:ptx_thread_info	typeref:typename:void
set_num_operands	abstract_hardware_model.h	/^    void set_num_operands(unsigned num) {num_operands=num;}$/;"	f	class:inst_t	typeref:typename:void
set_num_regs	abstract_hardware_model.h	/^    void set_num_regs(unsigned num) {num_regs=num;}$/;"	f	class:inst_t	typeref:typename:void
set_opcode_and_latency	cuda-sim/cuda-sim.cc	/^void ptx_instruction::set_opcode_and_latency()$/;"	f	class:ptx_instruction	typeref:typename:void
set_operand_lohi	cuda-sim/ptx_ir.h	/^   void set_operand_lohi(int set_value) { m_operand_lohi = set_value; }$/;"	f	class:operand_info	typeref:typename:void
set_operand_neg	cuda-sim/ptx_ir.h	/^   void set_operand_neg() { m_operand_neg = true; }$/;"	f	class:operand_info	typeref:typename:void
set_operand_value	cuda-sim/instructions.cc	/^void ptx_thread_info::set_operand_value( const operand_info &dst, const ptx_reg_t &data, unsigne/;"	f	class:ptx_thread_info	typeref:typename:void
set_param_gpgpu_num_shaders	cuda-sim/cuda-sim.cc	/^void set_param_gpgpu_num_shaders(int num_shaders)$/;"	f	typeref:typename:void
set_pcie_param	gpuwattch/iocontrollers.cc	/^void PCIeController::set_pcie_param()$/;"	f	class:PCIeController	typeref:typename:void
set_pppm	gpuwattch/cacti/basic_circuit.h	/^inline void set_pppm($/;"	f	typeref:typename:void
set_proc_param	gpuwattch/processor.cc	/^void Processor::set_proc_param()$/;"	f	class:Processor	typeref:typename:void
set_prop	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::set_prop( cudaDeviceProp *prop )$/;"	f	class:gpgpu_sim	typeref:typename:void
set_ptx_version	cuda-sim/ptx_ir.cc	/^void symbol_table::set_ptx_version( float ver, unsigned ext ) $/;"	f	class:symbol_table	typeref:typename:void
set_ptx_warp_size	cuda-sim/ptx_parser.cc	/^void set_ptx_warp_size(const struct core_config * warp_size)$/;"	f	typeref:typename:void
set_reg	cuda-sim/instructions.cc	/^void ptx_thread_info::set_reg( const symbol *reg, const ptx_reg_t &value ) $/;"	f	class:ptx_thread_info	typeref:typename:void
set_regfile_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_regfile_power(double reads, double writes,double ops)$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_regno	cuda-sim/ptx_ir.h	/^   void set_regno( unsigned regno, unsigned arch_regno )$/;"	f	class:symbol	typeref:typename:void
set_reply	gpgpu-sim/mem_fetch.h	/^   void set_reply() $/;"	f	class:mem_fetch	typeref:typename:void
set_return	cuda-sim/ptx_ir.h	/^   void set_return() { m_is_return_var = true; }$/;"	f	class:operand_info	typeref:typename:void
set_return	cuda-sim/ptx_parser.cc	/^void set_return()$/;"	f	typeref:typename:void
set_return_timestamp	gpgpu-sim/mem_fetch.h	/^   void set_return_timestamp( unsigned t ) { m_timestamp2=t; }$/;"	f	class:mem_fetch	typeref:typename:void
set_shrd_mem_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_shrd_mem_power(double accesses)$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_single_thread_single_block	cuda-sim/ptx_sim.h	/^   void set_single_thread_single_block()$/;"	f	class:ptx_thread_info	typeref:typename:void
set_sm_target	cuda-sim/ptx_ir.cc	/^void symbol_table::set_sm_target( const char *target, const char *ext, const char *ext2 )$/;"	f	class:symbol_table	typeref:typename:void
set_span	gpgpu-sim/stat-tool.cc	/^void thread_insn_span::set_span( address_type pc ) $/;"	f	class:thread_insn_span	typeref:typename:void
set_spill_interval	gpgpu-sim/stat-tool.cc	/^void set_spill_interval (unsigned long long  interval)$/;"	f	typeref:typename:void
set_sppm	gpuwattch/cacti/basic_circuit.h	/^inline void set_sppm($/;"	f	typeref:typename:void
set_status	gpgpu-sim/mem_fetch.cc	/^void mem_fetch::set_status( enum mem_fetch_status status, unsigned long long cycle ) $/;"	f	class:mem_fetch	typeref:typename:void
set_stream	stream_manager.h	/^    void set_stream( CUstream_st *stream ) { m_stream = stream; }$/;"	f	class:stream_operation	typeref:typename:void
set_symtab	cuda-sim/ptx_ir.h	/^   void set_symtab(symbol_table *symtab )$/;"	f	class:function_info	typeref:typename:void
set_symtab	cuda-sim/ptx_parser.cc	/^void set_symtab(void*symtab)$/;"	f	typeref:typename:void
set_target	cuda-sim/ptx_sim.h	/^      void set_target( const char *sm_ver, const char *ext, const char *ext2 ) $/;"	f	class:ptx_version	typeref:typename:void
set_tcache_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_tcache_power(double hits, double misses)$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
set_tid	cuda-sim/ptx_sim.h	/^   void set_tid( dim3 tid ) { m_tid = tid; }$/;"	f	class:ptx_thread_info	typeref:typename:void
set_type	cuda-sim/ptx_ir.h	/^   void set_type( enum operand_type type ) $/;"	f	class:operand_info	typeref:typename:void
set_valid	cuda-sim/ptx_sim.h	/^   void set_valid() { m_valid = true;}$/;"	f	class:ptx_thread_info	typeref:typename:void
set_value	debug.h	/^   unsigned set_value( unsigned val ) { return m_value=val; }$/;"	f	class:brk_pt	typeref:typename:unsigned
set_variable_type	cuda-sim/ptx_parser.cc	/^void set_variable_type()$/;"	f	typeref:typename:void
set_vector_operand_values	cuda-sim/instructions.cc	/^void ptx_thread_info::set_vector_operand_values( const operand_info &dst, $/;"	f	class:ptx_thread_info	typeref:typename:void
set_w	gpuwattch/cacti/area.h	/^  void set_w(double w_) { w = w_; }$/;"	f	class:Area	typeref:typename:void
set_watch	cuda-sim/memory.cc	/^template<unsigned BSIZE> void memory_space_impl<BSIZE>::set_watch( addr_t addr, unsigned watchpo/;"	f	class:memory_space_impl	typeref:typename:void
setp_impl	cuda-sim/instructions.cc	/^void setp_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
sexd	cuda-sim/instructions.cc	/^ptx_reg_t sexd( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_m/;"	f	typeref:typename:ptx_reg_t
sext	cuda-sim/instructions.cc	/^ptx_reg_t sext( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_m/;"	f	typeref:typename:ptx_reg_t
sfu	gpgpu-sim/shader.cc	/^sfu:: sfu(  register_set* result_port, const shader_core_config *config,shader_core_ctx *core  )$/;"	f	class:sfu
sfu	gpgpu-sim/shader.h	/^class sfu : public pipelined_simd_unit$/;"	c
sfu_average_active_lanes	gpuwattch/XML_Parse.h	/^	double sfu_average_active_lanes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
sg_argc	gpgpusim_entrypoint.cc	/^static int sg_argc = 3;$/;"	v	typeref:typename:int	file:
sg_argv	gpgpusim_entrypoint.cc	/^static const char *sg_argv[] = {"", "-config","gpgpusim.config"};$/;"	v	typeref:typename:const char * []	file:
shader_CTA_count_create	gpgpu-sim/stat-tool.cc	/^void shader_CTA_count_create( int n_shaders, unsigned long long  logging_interval)$/;"	f	typeref:typename:void
shader_CTA_count_log	gpgpu-sim/stat-tool.cc	/^void shader_CTA_count_log( int shader_id, int nCTAadded )$/;"	f	typeref:typename:void
shader_CTA_count_print	gpgpu-sim/stat-tool.cc	/^void shader_CTA_count_print( FILE *fout )$/;"	f	typeref:typename:void
shader_CTA_count_unlog	gpgpu-sim/stat-tool.cc	/^void shader_CTA_count_unlog( int shader_id, int nCTAdone )$/;"	f	typeref:typename:void
shader_CTA_count_visualizer_gzprint	gpgpu-sim/stat-tool.cc	/^void shader_CTA_count_visualizer_gzprint( gzFile fout )$/;"	f	typeref:typename:void
shader_CTA_count_visualizer_print	gpgpu-sim/stat-tool.cc	/^void shader_CTA_count_visualizer_print( FILE *fout )$/;"	f	typeref:typename:void
shader_cache_access_create	gpgpu-sim/stat-tool.cc	/^void shader_cache_access_create( int n_loggers, int n_types, unsigned long long  logging_interva/;"	f	typeref:typename:void
shader_cache_access_log	gpgpu-sim/stat-tool.cc	/^void shader_cache_access_log( int logger_id, int type, int miss)$/;"	f	typeref:typename:void
shader_cache_access_print	gpgpu-sim/stat-tool.cc	/^void shader_cache_access_print( FILE *fout )$/;"	f	typeref:typename:void
shader_cache_access_unlog	gpgpu-sim/stat-tool.cc	/^void shader_cache_access_unlog( int logger_id, int type, int miss)$/;"	f	typeref:typename:void
shader_clock	gpgpu-sim/gpu-sim.cc	/^int gpgpu_sim::shader_clock() const$/;"	f	class:gpgpu_sim	typeref:typename:int
shader_core	gpgpu-sim/shader.h	/^   shader_core_ctx *shader_core() { return m_shader; }$/;"	f	class:opndcoll_rfu_t	typeref:typename:shader_core_ctx *
shader_core_config	gpgpu-sim/shader.h	/^    shader_core_config(){$/;"	f	struct:shader_core_config
shader_core_config	gpgpu-sim/shader.h	/^struct shader_core_config : public core_config$/;"	s
shader_core_ctx	gpgpu-sim/shader.cc	/^shader_core_ctx::shader_core_ctx( class gpgpu_sim *gpu, $/;"	f	class:shader_core_ctx
shader_core_ctx	gpgpu-sim/shader.h	/^class shader_core_ctx : public core_t {$/;"	c
shader_core_mem_fetch_allocator	gpgpu-sim/shader.h	/^    shader_core_mem_fetch_allocator( unsigned core_id, unsigned cluster_id, const memory_config /;"	f	class:shader_core_mem_fetch_allocator
shader_core_mem_fetch_allocator	gpgpu-sim/shader.h	/^class shader_core_mem_fetch_allocator : public mem_fetch_allocator {$/;"	c
shader_core_power_stats_pod	gpgpu-sim/power_stat.h	/^struct shader_core_power_stats_pod {$/;"	s
shader_core_stats	gpgpu-sim/shader.h	/^    shader_core_stats( const shader_core_config *config )$/;"	f	class:shader_core_stats
shader_core_stats	gpgpu-sim/shader.h	/^class shader_core_stats : public shader_core_stats_pod {$/;"	c
shader_core_stats_pod	gpgpu-sim/shader.h	/^struct shader_core_stats_pod {$/;"	s
shader_core_stats_pod_start	gpgpu-sim/shader.h	/^	void* shader_core_stats_pod_start[0]; \/\/ DO NOT MOVE FROM THE TOP - spaceless pointer to the /;"	m	struct:shader_core_stats_pod	typeref:typename:void * [0]
shader_cycle_distro	gpgpu-sim/shader.h	/^    unsigned *shader_cycle_distro;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
shader_cycles	gpgpu-sim/shader.h	/^	unsigned long long *shader_cycles;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned long long *
shader_mem_acc_create	gpgpu-sim/stat-tool.cc	/^void shader_mem_acc_create( int n_loggers, int n_dram, int n_bank, unsigned long long  logging_i/;"	f	typeref:typename:void
shader_mem_acc_log	gpgpu-sim/stat-tool.cc	/^void shader_mem_acc_log( int logger_id, int dram_id, int bank, char rw)$/;"	f	typeref:typename:void
shader_mem_acc_print	gpgpu-sim/stat-tool.cc	/^void shader_mem_acc_print( FILE *fout )$/;"	f	typeref:typename:void
shader_mem_acc_snapshot	gpgpu-sim/stat-tool.cc	/^void shader_mem_acc_snapshot( int logger_id, unsigned long long  current_cycle)$/;"	f	typeref:typename:void
shader_mem_lat_create	gpgpu-sim/stat-tool.cc	/^void shader_mem_lat_create( int n_loggers, unsigned long long  logging_interval)$/;"	f	typeref:typename:void
shader_mem_lat_log	gpgpu-sim/stat-tool.cc	/^void shader_mem_lat_log( int logger_id, int latency)$/;"	f	typeref:typename:void
shader_mem_lat_print	gpgpu-sim/stat-tool.cc	/^void shader_mem_lat_print( FILE *fout )$/;"	f	typeref:typename:void
shader_mem_lat_snapshot	gpgpu-sim/stat-tool.cc	/^void shader_mem_lat_snapshot( int logger_id, unsigned long long  current_cycle)$/;"	f	typeref:typename:void
shader_memory_interface	gpgpu-sim/shader.h	/^    shader_memory_interface( shader_core_ctx *core, simt_core_cluster *cluster ) { m_core=core; /;"	f	class:shader_memory_interface
shader_memory_interface	gpgpu-sim/shader.h	/^class shader_memory_interface : public mem_fetch_interface {$/;"	c
shader_print_cache_stats	gpgpu-sim/shader.cc	/^void gpgpu_sim::shader_print_cache_stats( FILE *fout ) const{$/;"	f	class:gpgpu_sim	typeref:typename:void
shader_print_l1_miss_stat	gpgpu-sim/shader.cc	/^void gpgpu_sim::shader_print_l1_miss_stat( FILE *fout ) const$/;"	f	class:gpgpu_sim	typeref:typename:void
shader_print_runtime_stat	gpgpu-sim/shader.cc	/^void gpgpu_sim::shader_print_runtime_stat( FILE *fout ) $/;"	f	class:gpgpu_sim	typeref:typename:void
shader_print_scheduler_stat	gpgpu-sim/shader.cc	/^void gpgpu_sim::shader_print_scheduler_stat( FILE* fout, bool print_dynamic_info ) const$/;"	f	class:gpgpu_sim	typeref:typename:void
shader_warp_occ_create	gpgpu-sim/stat-tool.cc	/^void shader_warp_occ_create( int n_loggers, int simd_width, unsigned long long  logging_interval/;"	f	typeref:typename:void
shader_warp_occ_log	gpgpu-sim/stat-tool.cc	/^void shader_warp_occ_log( int logger_id, int warp_occ)$/;"	f	typeref:typename:void
shader_warp_occ_print	gpgpu-sim/stat-tool.cc	/^void shader_warp_occ_print( FILE *fout )$/;"	f	typeref:typename:void
shader_warp_occ_snapshot	gpgpu-sim/stat-tool.cc	/^void shader_warp_occ_snapshot( int logger_id, unsigned long long  current_cycle)$/;"	f	typeref:typename:void
shadow_dir	gpuwattch/sharedcache.h	/^    ArrayST * shadow_dir;$/;"	m	class:CCdir	typeref:typename:ArrayST *
shared	intersim2/routers/chaos_router.hpp	/^    shared         \/\/ >**HT**>$/;"	e	enum:ChaosRouter::eQState
shared_cycle	gpgpu-sim/shader.cc	/^bool ldst_unit::shared_cycle( warp_inst_t &inst, mem_stage_stall_type &rc_fail, mem_stage_access/;"	f	class:ldst_unit	typeref:typename:bool
shared_mem_size	gpgpu-sim/gpu-sim.cc	/^int gpgpu_sim::shared_mem_size() const$/;"	f	class:gpgpu_sim	typeref:typename:int
shared_space	abstract_hardware_model.h	/^   shared_space,$/;"	e	enum:_memory_space_t
shared_to_generic	cuda-sim/cuda-sim.cc	/^addr_t shared_to_generic( unsigned smid, addr_t addr )$/;"	f	typeref:typename:addr_t
sharedmemory	gpuwattch/XML_Parse.h	/^	dcache_systemcore sharedmemory; \/\/ added by Jingwen$/;"	m	struct:__anon6448b92c0708	typeref:typename:dcache_systemcore
sharedmemory	gpuwattch/core.h	/^	DataCache sharedmemory;$/;"	m	class:LoadStoreU	typeref:typename:DataCache
shd_warp_t	gpgpu-sim/shader.h	/^    shd_warp_t( class shader_core_ctx *shader, unsigned warp_size) $/;"	f	class:shd_warp_t
shd_warp_t	gpgpu-sim/shader.h	/^class shd_warp_t {$/;"	c
shl_impl	cuda-sim/instructions.cc	/^void shl_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
shmem_bank_func	abstract_hardware_model.h	/^    unsigned shmem_bank_func(address_type addr) const$/;"	f	struct:core_config	typeref:typename:unsigned
shmem_limited_broadcast	abstract_hardware_model.h	/^    bool shmem_limited_broadcast;$/;"	m	struct:core_config	typeref:typename:bool
shmem_read_access	gpgpu-sim/power_stat.h	/^    unsigned *shmem_read_access[NUM_STAT_IDX];   \/\/ Shared memory access$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
short_circuit	gpuwattch/cacti/cacti_interface.h	/^    double short_circuit;$/;"	m	class:powerComponents	typeref:typename:double
shortcircuit	gpuwattch/cacti/basic_circuit.cc	/^double shortcircuit($/;"	f	typeref:typename:double
shortcircuit_simple	gpuwattch/cacti/basic_circuit.cc	/^double shortcircuit_simple($/;"	f	typeref:typename:double
shr_impl	cuda-sim/instructions.cc	/^void shr_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f	typeref:typename:void
sid_to_cid	gpgpu-sim/shader.h	/^    unsigned sid_to_cid( unsigned sid )     const { return sid % n_simt_cores_per_cluster; }$/;"	f	struct:shader_core_config	typeref:typename:unsigned
sid_to_cluster	gpgpu-sim/shader.h	/^    unsigned sid_to_cluster( unsigned sid ) const { return sid \/ n_simt_cores_per_cluster; }$/;"	f	struct:shader_core_config	typeref:typename:unsigned
sign_extend	cuda-sim/instructions.cc	/^void sign_extend( ptx_reg_t &data, unsigned src_size, const operand_info &dst )$/;"	f	typeref:typename:void
signal_fall_time	gpuwattch/cacti/wire.cc	/^Wire::signal_fall_time ()$/;"	f	class:Wire	typeref:typename:double
signal_rise_time	gpuwattch/cacti/wire.cc	/^double Wire::signal_rise_time ()$/;"	f	class:Wire	typeref:typename:double
sim_nuca	gpuwattch/cacti/nuca.cc	/^Nuca::sim_nuca()$/;"	f	class:Nuca	typeref:typename:void
simd_function_unit	gpgpu-sim/shader.cc	/^simd_function_unit::simd_function_unit( const shader_core_config *config )$/;"	f	class:simd_function_unit
simd_function_unit	gpgpu-sim/shader.h	/^class simd_function_unit {$/;"	c
simd_model	gpgpu-sim/gpu-sim.cc	/^enum divergence_support_t gpgpu_sim::simd_model() const$/;"	f	class:gpgpu_sim	typeref:enum:divergence_support_t
simd_width	gpuwattch/XML_Parse.h	/^   int simd_width;\/\/ (8)$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
simplified_nmos_leakage	gpuwattch/cacti/basic_circuit.cc	/^double simplified_nmos_leakage($/;"	f	typeref:typename:double
simplified_pmos_leakage	gpuwattch/cacti/basic_circuit.cc	/^double simplified_pmos_leakage($/;"	f	typeref:typename:double
simt_core_cluster	gpgpu-sim/shader.cc	/^simt_core_cluster::simt_core_cluster( class gpgpu_sim *gpu, $/;"	f	class:simt_core_cluster
simt_core_cluster	gpgpu-sim/shader.h	/^class simt_core_cluster {$/;"	c
simt_core_sim_order	gpgpu-sim/shader.h	/^    int simt_core_sim_order; $/;"	m	struct:shader_core_config	typeref:typename:int
simt_mask_t	abstract_hardware_model.h	/^typedef std::bitset<MAX_WARP_SIZE_SIMT_STACK> simt_mask_t;$/;"	t	typeref:typename:std::bitset<MAX_WARP_SIZE_SIMT_STACK>
simt_stack	abstract_hardware_model.cc	/^simt_stack::simt_stack( unsigned wid, unsigned warpSize)$/;"	f	class:simt_stack
simt_stack	abstract_hardware_model.h	/^class simt_stack {$/;"	c
simt_stack_entry	abstract_hardware_model.h	/^        simt_stack_entry() :$/;"	f	struct:simt_stack::simt_stack_entry
simt_stack_entry	abstract_hardware_model.h	/^    struct simt_stack_entry {$/;"	s	class:simt_stack
sin_impl	cuda-sim/instructions.cc	/^void sin_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
size	abstract_hardware_model.h	/^   int size; \/\/in bytes$/;"	m	struct:cudaArray	typeref:typename:int
size	cuda-sim/ptx_sim.h	/^   size_t size;$/;"	m	struct:param_t	typeref:typename:size_t
size	gpgpu-sim/gpu-cache.h	/^        unsigned size() const { return m_num;}$/;"	f	class:tex_cache::fifo	typeref:typename:unsigned
size	gpgpu-sim/gpu-cache.h	/^    unsigned size() const { return m_config.get_num_lines();}$/;"	f	class:tag_array	typeref:typename:unsigned
size	gpgpu-sim/mem_fetch.h	/^   unsigned size() const { return m_data_size+m_ctrl_size; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
size_stack	gpgpu-sim/stack.cc	/^int size_stack(Stack *S) {$/;"	f	typeref:typename:int
sl_data_drv	gpuwattch/cacti/mat.h	/^    Driver * sl_data_drv;\/\/search line data driver$/;"	m	class:Mat	typeref:typename:Driver *
sl_precharge_eq_drv	gpuwattch/cacti/mat.h	/^    Driver * sl_precharge_eq_drv;\/\/searchline prechage driver$/;"	m	class:Mat	typeref:typename:Driver *
slct_impl	cuda-sim/instructions.cc	/^void slct_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
sm_next_access_uid	abstract_hardware_model.cc	/^unsigned mem_access_t::sm_next_access_uid = 0;   $/;"	m	class:mem_access_t	typeref:typename:unsigned
sm_next_access_uid	abstract_hardware_model.h	/^   static unsigned sm_next_access_uid;$/;"	m	class:mem_access_t	typeref:typename:unsigned
sm_next_mf_request_uid	gpgpu-sim/mem_fetch.cc	/^unsigned mem_fetch::sm_next_mf_request_uid=1;$/;"	m	class:mem_fetch	typeref:typename:unsigned
sm_next_mf_request_uid	gpgpu-sim/mem_fetch.h	/^   static unsigned sm_next_mf_request_uid;$/;"	m	class:mem_fetch	typeref:typename:unsigned
sm_next_stream_uid	stream_manager.cc	/^unsigned CUstream_st::sm_next_stream_uid = 0;$/;"	m	class:CUstream_st	typeref:typename:unsigned
sm_next_stream_uid	stream_manager.h	/^    static unsigned sm_next_stream_uid;$/;"	m	struct:CUstream_st	typeref:typename:unsigned
sm_next_uid	abstract_hardware_model.cc	/^unsigned warp_inst_t::sm_next_uid = 0;$/;"	m	class:warp_inst_t	typeref:typename:unsigned
sm_next_uid	abstract_hardware_model.h	/^    static unsigned sm_next_uid;$/;"	m	class:warp_inst_t	typeref:typename:unsigned
sm_next_uid	cuda-sim/ptx_ir.cc	/^unsigned function_info::sm_next_uid = 1;$/;"	m	class:function_info	typeref:typename:unsigned
sm_next_uid	cuda-sim/ptx_ir.cc	/^unsigned operand_info::sm_next_uid=1;$/;"	m	class:operand_info	typeref:typename:unsigned
sm_next_uid	cuda-sim/ptx_ir.cc	/^unsigned symbol::sm_next_uid = 1;$/;"	m	class:symbol	typeref:typename:unsigned
sm_next_uid	cuda-sim/ptx_ir.h	/^   static unsigned sm_next_uid;$/;"	m	class:function_info	typeref:typename:unsigned
sm_next_uid	cuda-sim/ptx_ir.h	/^   static unsigned sm_next_uid;$/;"	m	class:operand_info	typeref:typename:unsigned
sm_next_uid	cuda-sim/ptx_ir.h	/^   static unsigned sm_next_uid;$/;"	m	class:symbol	typeref:typename:unsigned
sm_target	abstract_hardware_model.h	/^   unsigned sm_target;$/;"	m	struct:gpgpu_ptx_sim_kernel_info	typeref:typename:unsigned
smem	abstract_hardware_model.h	/^   int smem;$/;"	m	struct:gpgpu_ptx_sim_kernel_info	typeref:typename:int
smem_n_way_bank_conflict_total	cuda-sim/ptx-stats.cc	/^    unsigned long long smem_n_way_bank_conflict_total;  \/\/ total number of banks accessed by t/;"	m	class:ptx_file_line_stats	typeref:typename:unsigned long long	file:
smem_warp_count	cuda-sim/ptx-stats.cc	/^    unsigned long smem_warp_count;                      \/\/ number of warps accessing shared me/;"	m	class:ptx_file_line_stats	typeref:typename:unsigned long	file:
snap_shot	gpgpu-sim/stat-tool.cc	/^void linear_histogram_logger::snap_shot(unsigned long long  current_cycle) {$/;"	f	class:linear_histogram_logger	typeref:typename:void
snap_shot	gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::snap_shot(unsigned long long  current_cycle) $/;"	f	class:thread_CFlocality	typeref:typename:void
snap_shot_trigger	gpgpu-sim/stat-tool.h	/^   snap_shot_trigger(unsigned long long  interval) : m_snap_shot_interval(interval) {}$/;"	f	class:snap_shot_trigger
snap_shot_trigger	gpgpu-sim/stat-tool.h	/^class snap_shot_trigger {$/;"	c
solution	gpuwattch/cacti/Ucache.h	/^struct solution$/;"	s
solve	gpuwattch/cacti/Ucache.cc	/^void solve(uca_org_t *fin_res)$/;"	f	typeref:typename:void
sort_warps_by_oldest_dynamic_id	gpgpu-sim/shader.cc	/^bool scheduler_unit::sort_warps_by_oldest_dynamic_id(shd_warp_t* lhs, shd_warp_t* rhs)$/;"	f	class:scheduler_unit	typeref:typename:bool
source	intersim2/packet_reply_info.hpp	/^  int source;$/;"	m	class:PacketReplyInfo	typeref:typename:int
source_file	cuda-sim/ptx_ir.h	/^   const char *source_file() const { return m_source_file.c_str();} $/;"	f	class:ptx_instruction	typeref:typename:const char *
source_inst	cuda-sim/ptx_ir.h	/^   class ptx_instruction* source_inst;$/;"	m	struct:gpgpu_recon_t	typeref:class:ptx_instruction *
source_line	cuda-sim/ptx_ir.h	/^   unsigned source_line() const { return m_source_line;}$/;"	f	class:ptx_instruction	typeref:typename:unsigned
source_pc	cuda-sim/ptx_ir.h	/^   address_type source_pc;$/;"	m	struct:gpgpu_recon_t	typeref:typename:address_type
sp_average_active_lanes	gpuwattch/XML_Parse.h	/^	double sp_average_active_lanes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
sp_op	abstract_hardware_model.h	/^    special_ops sp_op;           \/\/ code (uarch visible) identify if int_alu, fp_alu, int_mul /;"	m	class:inst_t	typeref:typename:special_ops
sp_unit	gpgpu-sim/shader.cc	/^sp_unit::sp_unit( register_set* result_port, const shader_core_config *config,shader_core_ctx *c/;"	f	class:sp_unit
sp_unit	gpgpu-sim/shader.h	/^class sp_unit : public pipelined_simd_unit$/;"	c
space	abstract_hardware_model.h	/^    memory_space_t space;$/;"	m	class:inst_t	typeref:typename:memory_space_t
space_scaling	gpuwattch/interconnect.h	/^    double width_scaling, space_scaling;$/;"	m	class:interconnect	typeref:typename:double
space_spec	cuda-sim/ptx.y	/^space_spec: REG_DIRECTIVE {  add_space_spec(reg_space,0); }$/;"	l
spacing_poly_to_contact	gpuwattch/cacti/parameter.h	/^  double spacing_poly_to_contact;$/;"	m	class:TechnologyParameter	typeref:typename:double
spacing_poly_to_poly	gpuwattch/cacti/parameter.h	/^  double spacing_poly_to_poly;$/;"	m	class:TechnologyParameter	typeref:typename:double
span_count_map	gpgpu-sim/stat-tool.h	/^   typedef tr1_hash_map<address_type, int> span_count_map;$/;"	t	class:thread_insn_span	typeref:typename:tr1_hash_map<address_type,int>
special_operations_t	abstract_hardware_model.h	/^enum special_operations_t {$/;"	g
special_ops	abstract_hardware_model.h	/^typedef enum special_operations_t special_ops; \/\/ Required to identify for the power model$/;"	t	typeref:enum:special_operations_t
special_regs	cuda-sim/opcodes.h	/^enum special_regs {$/;"	g
specific_tag	gpuwattch/cacti/cacti_interface.h	/^    bool     specific_tag;$/;"	m	class:InputParameter	typeref:typename:bool
spill	gpgpu-sim/stat-tool.cc	/^void linear_histogram_logger::spill(FILE *fout, bool final) $/;"	f	class:linear_histogram_logger	typeref:typename:void
spill	gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::spill(FILE *fout, bool final) $/;"	f	class:thread_CFlocality	typeref:typename:void
spill_interval	gpgpu-sim/stat-tool.cc	/^static unsigned long long  spill_interval = 0;$/;"	v	typeref:typename:unsigned long long	file:
spill_log_interface	gpgpu-sim/stat-tool.h	/^   spill_log_interface() {}$/;"	f	class:spill_log_interface
spill_log_interface	gpgpu-sim/stat-tool.h	/^class spill_log_interface {$/;"	c
spill_log_to_file	gpgpu-sim/stat-tool.cc	/^void spill_log_to_file (FILE *fout, int final, unsigned long long  current_cycle)$/;"	f	typeref:typename:void
sqrt_impl	cuda-sim/instructions.cc	/^void sqrt_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
sram	gpuwattch/cacti/parameter.h	/^  MemoryType sram;$/;"	m	class:TechnologyParameter	typeref:typename:MemoryType
sram_cell	gpuwattch/cacti/parameter.h	/^  DeviceType sram_cell;   \/\/ SRAM cell transistor$/;"	m	class:TechnologyParameter	typeref:typename:DeviceType
sram_num_cells_wl_stitching_	gpuwattch/cacti/const.h	/^const static uint32_t sram_num_cells_wl_stitching_ = 16;$/;"	v	typeref:typename:const uint32_t
src	abstract_hardware_model.h	/^        int src[MAX_REG_OPERANDS];$/;"	m	struct:inst_t::__anon0cb733cc0108	typeref:typename:int[]
src	intersim2/flit.hpp	/^  int  src;$/;"	m	class:Flit	typeref:typename:int
src1	cuda-sim/ptx_ir.h	/^   const operand_info &src1() const $/;"	f	class:ptx_instruction	typeref:typename:const operand_info &
src2	cuda-sim/ptx_ir.h	/^   const operand_info &src2() const $/;"	f	class:ptx_instruction	typeref:typename:const operand_info &
src3	cuda-sim/ptx_ir.h	/^   const operand_info &src3() const $/;"	f	class:ptx_instruction	typeref:typename:const operand_info &
srcOperandModifiers	cuda-sim/instructions.cc	/^ptx_reg_t srcOperandModifiers(ptx_reg_t opData, operand_info opInfo, operand_info dstInfo, unsig/;"	f	typeref:typename:ptx_reg_t
src_vc	intersim2/routers/event_router.hpp	/^    int  src_vc;$/;"	m	struct:EventRouter::tArrivalEvent	typeref:typename:int
src_vc	intersim2/routers/event_router.hpp	/^    int  src_vc;$/;"	m	struct:EventRouter::tTransportEvent	typeref:typename:int
ssy_impl	cuda-sim/instructions.cc	/^void ssy_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
st	cuda-sim/ptx-stats.cc	/^    std::string st;$/;"	m	class:ptx_file_line	typeref:typename:std::string	file:
st_impl	cuda-sim/instructions.cc	/^void st_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
st_time_dist	gpgpu-sim/visualizer.cc	/^   std::vector<double>  st_time_dist;$/;"	m	class:my_time_vector	typeref:typename:std::vector<double>	file:
st_time_map	gpgpu-sim/visualizer.cc	/^   std::map< unsigned int, std::vector<long int> > st_time_map;$/;"	m	class:my_time_vector	typeref:typename:std::map<unsigned int,std::vector<long int>>	file:
st_vector_size	gpgpu-sim/visualizer.cc	/^   unsigned st_vector_size;$/;"	m	class:my_time_vector	typeref:typename:unsigned	file:
stack_entry	cuda-sim/ptx_sim.h	/^   stack_entry( symbol_table *s, function_info *f, unsigned pc, unsigned rpc, const symbol *retu/;"	f	struct:stack_entry
stack_entry	cuda-sim/ptx_sim.h	/^   stack_entry() {$/;"	f	struct:stack_entry
stack_entry	cuda-sim/ptx_sim.h	/^struct stack_entry {$/;"	s
stack_entry_type	abstract_hardware_model.h	/^    enum stack_entry_type {$/;"	g	class:simt_stack
stallBit	gpgpu-sim/warp_status.h	/^			unsigned char memBit:1,stallBit:1;$/;"	m	struct:WST::table_entry::__anona6602e20010a::__anona6602e200208	typeref:typename:unsigned char:1
stallable	gpgpu-sim/shader.h	/^    virtual bool stallable() const { return false; }$/;"	f	class:pipelined_simd_unit	typeref:typename:bool
stallable	gpgpu-sim/shader.h	/^    virtual bool stallable() const { return true; }$/;"	f	class:ldst_unit	typeref:typename:bool
start_function	cuda-sim/ptx_parser.cc	/^void start_function( int entry_point ) $/;"	f	typeref:typename:void
start_sim_thread	gpgpusim_entrypoint.cc	/^void start_sim_thread(int api)$/;"	f	typeref:typename:void
start_wiring_level	gpuwattch/interconnect.h	/^    int start_wiring_level;$/;"	m	class:interconnect	typeref:typename:int
stat_idx	gpgpu-sim/power_stat.h	/^}stat_idx;$/;"	t	typeref:enum:_stat_idx
state	gpgpu-sim/dram.h	/^   unsigned char state; \/\/is the bank active or idle?$/;"	m	struct:bank_t	typeref:typename:unsigned char
state_info_t	intersim2/vc.hpp	/^  struct state_info_t {$/;"	s	class:VC
state_max	intersim2/vc.hpp	/^		  state_max = active };$/;"	e	enum:VC::eVCState
state_min	intersim2/vc.hpp	/^  enum eVCState { state_min = 0, idle = state_min, routing, vc_alloc, active, $/;"	e	enum:VC::eVCState
statement_block	cuda-sim/ptx.y	/^statement_block: LEFT_BRACE statement_list RIGHT_BRACE $/;"	l
statement_list	cuda-sim/ptx.y	/^statement_list: directive_statement { add_directive(); }$/;"	l
statsComponents	gpuwattch/basic_components.h	/^    statsComponents() : access(0), hit(0), miss(0)  {}$/;"	f	class:statsComponents
statsComponents	gpuwattch/basic_components.h	/^    statsComponents(const statsComponents & obj) { *this = obj; }$/;"	f	class:statsComponents
statsComponents	gpuwattch/basic_components.h	/^class statsComponents$/;"	c
statsDef	gpuwattch/basic_components.h	/^    statsDef() : readAc(), writeAc(),searchAc() { }$/;"	f	class:statsDef
statsDef	gpuwattch/basic_components.h	/^class statsDef$/;"	c
stats_t	gpuwattch/array.h	/^  statsDef       stats_t;$/;"	m	class:ArrayST	typeref:typename:statsDef
stats_t	gpuwattch/logic.h	/^	statsDef       stats_t;$/;"	m	class:FunctionalUnit	typeref:typename:statsDef
stats_t	gpuwattch/logic.h	/^	statsDef       stats_t;$/;"	m	class:dep_resource_conflict_check	typeref:typename:statsDef
stats_t	gpuwattch/logic.h	/^	statsDef       stats_t;$/;"	m	class:inst_decoder	typeref:typename:statsDef
stats_t	gpuwattch/memoryctrl.h	/^    statsDef       stats_t;$/;"	m	class:MCPHY	typeref:typename:statsDef
stats_t	gpuwattch/memoryctrl.h	/^    statsDef stats_t;$/;"	m	class:MCBackend	typeref:typename:statsDef
stats_t	gpuwattch/noc.h	/^	statsDef       stats_t;$/;"	m	class:NoC	typeref:typename:statsDef
statusTable	gpgpu-sim/warp_status.h	/^	std::vector<table_entry> statusTable;	$/;"	m	class:WST	typeref:typename:std::vector<table_entry>
steady_state_tacking_file	gpuwattch/gpgpu_sim_wrapper.h	/^    gzFile steady_state_tacking_file;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:gzFile
step	gpgpu-sim/shader.h	/^   void step()$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
store_ack	gpgpu-sim/shader.cc	/^void shader_core_ctx::store_ack( class mem_fetch *mf )$/;"	f	class:shader_core_ctx	typeref:typename:void
store_buffer_cams	gpuwattch/XML_Parse.h	/^	double store_buffer_cams;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
store_buffer_forwards	gpuwattch/XML_Parse.h	/^	double store_buffer_forwards;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
store_buffer_reads	gpuwattch/XML_Parse.h	/^	double store_buffer_reads;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
store_buffer_size	gpuwattch/XML_Parse.h	/^	int store_buffer_size;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
store_buffer_writes	gpuwattch/XML_Parse.h	/^	double store_buffer_writes;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
store_info_of_last_inst_at_barrier	gpgpu-sim/shader.h	/^    void store_info_of_last_inst_at_barrier(const warp_inst_t *pI){ m_inst_at_barrier = pI;}$/;"	f	class:shd_warp_t	typeref:typename:void
store_instructions	gpuwattch/XML_Parse.h	/^	double store_instructions;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
stores_done	gpgpu-sim/shader.h	/^    bool stores_done() const { return m_stores_outstanding == 0; }$/;"	f	class:shd_warp_t	typeref:typename:bool
stream_event	stream_manager.h	/^    stream_event$/;"	e	enum:stream_operation_type
stream_kernel_launch	stream_manager.h	/^    stream_kernel_launch,$/;"	e	enum:stream_operation_type
stream_manager	stream_manager.cc	/^stream_manager::stream_manager( gpgpu_sim *gpu, bool cuda_launch_blocking ) $/;"	f	class:stream_manager
stream_manager	stream_manager.h	/^class stream_manager {$/;"	c
stream_memcpy_device_to_device	stream_manager.h	/^    stream_memcpy_device_to_device,$/;"	e	enum:stream_operation_type
stream_memcpy_device_to_host	stream_manager.h	/^    stream_memcpy_device_to_host,$/;"	e	enum:stream_operation_type
stream_memcpy_from_symbol	stream_manager.h	/^    stream_memcpy_from_symbol,$/;"	e	enum:stream_operation_type
stream_memcpy_host_to_device	stream_manager.h	/^    stream_memcpy_host_to_device,$/;"	e	enum:stream_operation_type
stream_memcpy_to_symbol	stream_manager.h	/^    stream_memcpy_to_symbol,$/;"	e	enum:stream_operation_type
stream_no_op	stream_manager.h	/^    stream_no_op,$/;"	e	enum:stream_operation_type
stream_operation	stream_manager.h	/^    stream_operation( class CUevent_st *e, struct CUstream_st *stream )$/;"	f	class:stream_operation
stream_operation	stream_manager.h	/^    stream_operation( const char *symbol, void *dst, size_t count, size_t offset, struct CUstrea/;"	f	class:stream_operation
stream_operation	stream_manager.h	/^    stream_operation( const void *host_address_src, size_t device_address_dst, size_t cnt, struc/;"	f	class:stream_operation
stream_operation	stream_manager.h	/^    stream_operation( const void *src, const char *symbol, size_t count, size_t offset, struct C/;"	f	class:stream_operation
stream_operation	stream_manager.h	/^    stream_operation( kernel_info_t *kernel, bool sim_mode, struct CUstream_st *stream )$/;"	f	class:stream_operation
stream_operation	stream_manager.h	/^    stream_operation( size_t device_address_src, size_t device_address_dst, size_t cnt, struct C/;"	f	class:stream_operation
stream_operation	stream_manager.h	/^    stream_operation( size_t device_address_src, void *host_address_dst, size_t cnt, struct CUst/;"	f	class:stream_operation
stream_operation	stream_manager.h	/^    stream_operation()$/;"	f	class:stream_operation
stream_operation	stream_manager.h	/^class stream_operation {$/;"	c
stream_operation_type	stream_manager.h	/^enum stream_operation_type {$/;"	g
stringDup	gpuwattch/xmlParser.cc	/^XMLSTR stringDup(XMLCSTR lpszData, int cbData)$/;"	f	typeref:typename:XMLSTR
stringparsertest	option_parser.cc	/^int stringparsertest()$/;"	f	typeref:typename:int
sub_count	cuda-sim/ptx-stats.cc	/^    void sub_count(const ptx_instruction * pInsn, int count = 1)$/;"	f	class:ptx_inflight_memory_insn_tracker	typeref:typename:void	file:
sub_impl	cuda-sim/instructions.cc	/^void sub_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
sub_partition	gpgpu-sim/addrdec.h	/^   unsigned sub_partition; $/;"	m	struct:addrdec_t	typeref:typename:unsigned
sub_partition_id_mask	gpgpu-sim/addrdec.h	/^   new_addr_type sub_partition_id_mask; $/;"	m	class:linear_to_raw_address_translation	typeref:typename:new_addr_type
sub_sw	gpuwattch/cacti/highradix.h	/^    Component sub_sw;$/;"	m	class:HighRadix	typeref:typename:Component
sub_switch_power	gpuwattch/cacti/highradix.cc	/^HighRadix::sub_switch_power()$/;"	f	class:HighRadix	typeref:typename:void
subarray	gpuwattch/cacti/mat.h	/^    Subarray subarray;$/;"	m	class:Mat	typeref:typename:Subarray
subarray_height	gpuwattch/cacti/cacti_interface.h	/^  double subarray_height;$/;"	m	class:mem_array	typeref:typename:double
subarray_length	gpuwattch/cacti/cacti_interface.h	/^  double subarray_length;$/;"	m	class:mem_array	typeref:typename:double
subarray_memory_cell_area_height	gpuwattch/cacti/cacti_interface.h	/^  double subarray_memory_cell_area_height;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
subarray_memory_cell_area_width	gpuwattch/cacti/cacti_interface.h	/^  double subarray_memory_cell_area_width;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
subarray_out_wire	gpuwattch/cacti/mat.h	/^    Wire   * subarray_out_wire;$/;"	m	class:Mat	typeref:typename:Wire *
subc_impl	cuda-sim/instructions.cc	/^void subc_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
subnetwork	intersim2/flit.hpp	/^  int  subnetwork;$/;"	m	class:Flit	typeref:typename:int
subsample	gpgpu-sim/stat-tool.h	/^   void subsample(int pos) {$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
successor_ids	cuda-sim/ptx_ir.h	/^   std::set<int> successor_ids;$/;"	m	struct:basic_block_t	typeref:typename:std::set<int>
suld_impl	cuda-sim/instructions.cc	/^void suld_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
suq_impl	cuda-sim/instructions.cc	/^void suq_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); /;"	f	typeref:typename:void
sured_impl	cuda-sim/instructions.cc	/^void sured_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI)/;"	f	typeref:typename:void
surf_space	abstract_hardware_model.h	/^   surf_space,$/;"	e	enum:_memory_space_t
sust_impl	cuda-sim/instructions.cc	/^void sust_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
sweep_test	gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::sweep_test() const$/;"	f	class:linear_to_raw_address_translation	typeref:typename:void
switchArea	intersim2/power/power_module.hpp	/^  double switchArea;$/;"	m	class:Power_Module	typeref:typename:double
switchPower	intersim2/power/power_module.hpp	/^  double switchPower;$/;"	m	class:Power_Module	typeref:typename:double
switchPowerCtrl	intersim2/power/power_module.hpp	/^  double switchPowerCtrl;$/;"	m	class:Power_Module	typeref:typename:double
switchPowerLeak	intersim2/power/power_module.hpp	/^  double switchPowerLeak;$/;"	m	class:Power_Module	typeref:typename:double
swl_scheduler	gpgpu-sim/shader.cc	/^swl_scheduler::swl_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:swl_scheduler
swl_scheduler	gpgpu-sim/shader.h	/^class swl_scheduler : public scheduler_unit {$/;"	c
symbol	cuda-sim/ptx_ir.h	/^   symbol( const char *name, const type_info *type, const char *location, unsigned size ) $/;"	f	class:symbol
symbol	cuda-sim/ptx_ir.h	/^class symbol {$/;"	c
symbol_table	cuda-sim/ptx_ir.cc	/^symbol_table::symbol_table( const char *scope_name, unsigned entry_point, symbol_table *parent )$/;"	f	class:symbol_table
symbol_table	cuda-sim/ptx_ir.cc	/^symbol_table::symbol_table() $/;"	f	class:symbol_table
symbol_table	cuda-sim/ptx_ir.h	/^class symbol_table {$/;"	c
symbolic_t	cuda-sim/ptx_ir.h	/^   unsigned_t, symbolic_t, label_t, v_reg_t, v_float_op_t, v_double_op_t,$/;"	e	enum:operand_type
synchronize	gpgpusim_entrypoint.cc	/^void synchronize()$/;"	f	typeref:typename:void
synchronize	stream_manager.cc	/^void CUstream_st::synchronize() $/;"	f	class:CUstream_st	typeref:typename:void
sys	gpuwattch/XML_Parse.h	/^	root_system sys;$/;"	m	class:ParseXML	typeref:typename:root_system
system_L1Directory	gpuwattch/XML_Parse.h	/^} system_L1Directory;$/;"	t	typeref:struct:__anon6448b92c0808
system_L2	gpuwattch/XML_Parse.h	/^} system_L2;$/;"	t	typeref:struct:__anon6448b92c0a08
system_L2Directory	gpuwattch/XML_Parse.h	/^} system_L2Directory;$/;"	t	typeref:struct:__anon6448b92c0908
system_L3	gpuwattch/XML_Parse.h	/^} system_L3;$/;"	t	typeref:struct:__anon6448b92c0b08
system_NoC	gpuwattch/XML_Parse.h	/^} system_NoC;$/;"	t	typeref:struct:__anon6448b92c0d08
system_core	gpuwattch/XML_Parse.h	/^} system_core;$/;"	t	typeref:struct:__anon6448b92c0708
system_mc	gpuwattch/XML_Parse.h	/^} system_mc;$/;"	t	typeref:struct:__anon6448b92c0f08
system_mem	gpuwattch/XML_Parse.h	/^} system_mem;$/;"	t	typeref:struct:__anon6448b92c0e08
system_niu	gpuwattch/XML_Parse.h	/^} system_niu;$/;"	t	typeref:struct:__anon6448b92c1008
system_pcie	gpuwattch/XML_Parse.h	/^} system_pcie;$/;"	t	typeref:struct:__anon6448b92c1108
tArrivalEvent	intersim2/routers/event_router.hpp	/^  struct tArrivalEvent {$/;"	s	class:EventRouter
tCCD	gpgpu-sim/gpu-sim.h	/^   unsigned tCCD;   \/\/column to column delay$/;"	m	struct:memory_config	typeref:typename:unsigned
tCCDL	gpgpu-sim/gpu-sim.h	/^   unsigned tCCDL;  \/\/column to column delay when bank groups are enabled$/;"	m	struct:memory_config	typeref:typename:unsigned
tCDLR	gpgpu-sim/gpu-sim.h	/^   unsigned tCDLR;  \/\/Last data-in to Read command (switching from write to read)$/;"	m	struct:memory_config	typeref:typename:unsigned
tCLK	intersim2/power/power_module.hpp	/^  double tCLK ;$/;"	m	class:Power_Module	typeref:typename:double
tRAS	gpgpu-sim/gpu-sim.h	/^   unsigned tRAS;   \/\/time needed to activate row$/;"	m	struct:memory_config	typeref:typename:unsigned
tRC	gpgpu-sim/gpu-sim.h	/^   unsigned tRC;    \/\/row cycle time ie. precharge current, then activate different row$/;"	m	struct:memory_config	typeref:typename:unsigned
tRCD	gpgpu-sim/gpu-sim.h	/^   unsigned tRCD;   \/\/row to column delay - time required to activate a row before a read$/;"	m	struct:memory_config	typeref:typename:unsigned
tRCDWR	gpgpu-sim/gpu-sim.h	/^   unsigned tRCDWR; \/\/row to column delay for a write command$/;"	m	struct:memory_config	typeref:typename:unsigned
tRP	gpgpu-sim/gpu-sim.h	/^   unsigned tRP;    \/\/row precharge ie. deactivate row$/;"	m	struct:memory_config	typeref:typename:unsigned
tRRD	gpgpu-sim/gpu-sim.h	/^   unsigned tRRD;   \/\/minimal time required between activation of rows in different banks$/;"	m	struct:memory_config	typeref:typename:unsigned
tRTPL	gpgpu-sim/gpu-sim.h	/^   unsigned tRTPL;  \/\/read to precharge delay when bank groups are enabled for GDDR5 this is i/;"	m	struct:memory_config	typeref:typename:unsigned
tRTW	gpgpu-sim/gpu-sim.h	/^   unsigned tRTW;   \/\/time to switch from read to write$/;"	m	struct:memory_config	typeref:typename:unsigned
tRoutingFunction	intersim2/routefunc.hpp	/^typedef void (*tRoutingFunction)( const Router *, const Flit *, int in_channel, OutputSet *, boo/;"	t	typeref:typename:void (*)(const Router *,const Flit *,int in_channel,OutputSet *,bool)
tTransportEvent	intersim2/routers/event_router.hpp	/^  struct tTransportEvent {$/;"	s	class:EventRouter
tWR	gpgpu-sim/gpu-sim.h	/^   unsigned tWR;    \/\/Last data-in to Row precharge $/;"	m	struct:memory_config	typeref:typename:unsigned
tWTP	gpgpu-sim/gpu-sim.h	/^   unsigned tWTP;   \/\/time to switch from write to precharge in the same bank$/;"	m	struct:memory_config	typeref:typename:unsigned
tWTR	gpgpu-sim/gpu-sim.h	/^   unsigned tWTR;   \/\/time to switch from write to read $/;"	m	struct:memory_config	typeref:typename:unsigned
tWaiting	intersim2/routers/event_router.hpp	/^  struct tWaiting {$/;"	s	class:EventNextVCState
t_ccd	gpuwattch/basic_components.h	/^	int t_ccd;$/;"	m	class:DRAMParam	typeref:typename:int
t_cdlr	gpuwattch/basic_components.h	/^	int t_cdlr;$/;"	m	class:DRAMParam	typeref:typename:int
t_cl	gpuwattch/basic_components.h	/^	int t_cl;$/;"	m	class:DRAMParam	typeref:typename:int
t_ox	gpuwattch/cacti/parameter.h	/^    double t_ox;$/;"	m	class:TechnologyParameter::DeviceType	typeref:typename:double
t_ras	gpuwattch/basic_components.h	/^	int t_ras;$/;"	m	class:DRAMParam	typeref:typename:int
t_rc	gpuwattch/basic_components.h	/^	int t_rc;$/;"	m	class:DRAMParam	typeref:typename:int
t_rcd	gpuwattch/basic_components.h	/^	int t_rcd;$/;"	m	class:DRAMParam	typeref:typename:int
t_rp	gpuwattch/basic_components.h	/^	int t_rp;$/;"	m	class:DRAMParam	typeref:typename:int
t_rrd	gpuwattch/basic_components.h	/^	int t_rrd;$/;"	m	class:DRAMParam	typeref:typename:int
t_wr	gpuwattch/basic_components.h	/^	int t_wr;$/;"	m	class:DRAMParam	typeref:typename:int
table	gpgpu-sim/gpu-cache.h	/^    typedef tr1_hash_map<new_addr_type,mshr_entry> table;$/;"	t	class:mshr_table	typeref:typename:tr1_hash_map<new_addr_type,mshr_entry>
table_entry	gpgpu-sim/warp_status.h	/^		table_entry(){$/;"	f	struct:WST::table_entry
table_entry	gpgpu-sim/warp_status.h	/^	struct table_entry{$/;"	s	class:WST
tag	gpgpu-sim/gpu-cache.h	/^    new_addr_type tag( new_addr_type addr ) const$/;"	f	class:cache_config	typeref:typename:new_addr_type
tag_arr	gpuwattch/cacti/Ucache.h	/^  list<mem_array *> tag_arr;$/;"	m	struct:calc_time_mt_wrapper_struct	typeref:typename:list<mem_array * >
tag_arr_peri_global_tech_type	gpuwattch/cacti/cacti_interface.h	/^    unsigned int tag_arr_peri_global_tech_type;$/;"	m	class:InputParameter	typeref:typename:unsigned int
tag_arr_ram_cell_tech_type	gpuwattch/cacti/cacti_interface.h	/^    unsigned int tag_arr_ram_cell_tech_type;$/;"	m	class:InputParameter	typeref:typename:unsigned int
tag_array	gpgpu-sim/gpu-cache.cc	/^tag_array::tag_array( cache_config &config,$/;"	f	class:tag_array
tag_array	gpgpu-sim/gpu-cache.h	/^class tag_array {$/;"	c
tag_array	gpuwattch/cacti/cacti_interface.h	/^    results_mem_array tag_array;$/;"	m	class:uca_org_t	typeref:typename:results_mem_array
tag_array2	gpuwattch/cacti/cacti_interface.h	/^    mem_array * tag_array2;$/;"	m	class:uca_org_t	typeref:typename:mem_array *
tag_array_index	gpuwattch/cacti/Ucache.h	/^  int    tag_array_index;$/;"	m	struct:solution	typeref:typename:int
tag_array_iter	gpuwattch/cacti/Ucache.h	/^  list<mem_array *>::iterator tag_array_iter;$/;"	m	struct:solution	typeref:typename:list<mem_array * >::iterator
tag_assoc	gpuwattch/cacti/cacti_interface.h	/^    unsigned int tag_assoc;$/;"	m	class:InputParameter	typeref:typename:unsigned int
tag_num_c_subarray	gpuwattch/cacti/parameter.h	/^    int tag_num_c_subarray;$/;"	m	class:DynamicParameter	typeref:typename:int
tag_num_r_subarray	gpuwattch/cacti/parameter.h	/^    int tag_num_r_subarray;\/\/sheng: fully associative cache tag and data must be computed toge/;"	m	class:DynamicParameter	typeref:typename:int
tag_res	gpuwattch/cacti/Ucache.h	/^  min_values_t * tag_res;$/;"	m	struct:calc_time_mt_wrapper_struct	typeref:typename:min_values_t *
tag_w	gpuwattch/cacti/cacti_interface.h	/^    unsigned int tag_w;$/;"	m	class:InputParameter	typeref:typename:unsigned int
tagbits	gpuwattch/cacti/parameter.h	/^    int tagbits;$/;"	m	class:DynamicParameter	typeref:typename:int
tail	intersim2/credit.hpp	/^  bool head, tail;$/;"	m	class:Credit	typeref:typename:bool
tail	intersim2/flit.hpp	/^  bool tail;$/;"	m	class:Flit	typeref:typename:bool
tail	intersim2/routers/event_router.hpp	/^    bool tail;$/;"	m	struct:EventRouter::tArrivalEvent	typeref:typename:bool
tail_pending	intersim2/routers/event_router.hpp	/^  enum eNextVCState { idle, busy, tail_pending };$/;"	e	enum:EventNextVCState::eNextVCState
target	cuda-sim/ptx_sim.h	/^      unsigned target() const { assert(m_valid&&m_sm_version_valid); return m_sm_version; }$/;"	f	class:ptx_version	typeref:typename:unsigned
target_chip_area	gpuwattch/XML_Parse.h	/^	int target_chip_area;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
target_core_clockrate	gpuwattch/XML_Parse.h	/^	int target_core_clockrate;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
target_header	cuda-sim/ptx_parser.cc	/^void target_header(char* a) $/;"	f	typeref:typename:void
target_header2	cuda-sim/ptx_parser.cc	/^void target_header2(char* a, char* b) $/;"	f	typeref:typename:void
target_header3	cuda-sim/ptx_parser.cc	/^void target_header3(char* a, char* b, char* c) $/;"	f	typeref:typename:void
target_inst	cuda-sim/ptx_ir.h	/^   class ptx_instruction* target_inst;$/;"	m	struct:gpgpu_recon_t	typeref:class:ptx_instruction *
target_pc	cuda-sim/ptx_ir.h	/^   address_type target_pc;$/;"	m	struct:gpgpu_recon_t	typeref:typename:address_type
tcache	gpuwattch/XML_Parse.h	/^	dcache_systemcore tcache;$/;"	m	struct:__anon6448b92c0708	typeref:typename:dcache_systemcore
tcache	gpuwattch/core.h	/^	DataCache tcache;$/;"	m	class:LoadStoreU	typeref:typename:DataCache
tdp_stats	gpuwattch/array.h	/^  statsDef       tdp_stats;$/;"	m	class:ArrayST	typeref:typename:statsDef
tdp_stats	gpuwattch/logic.h	/^	statsDef       tdp_stats;$/;"	m	class:FunctionalUnit	typeref:typename:statsDef
tdp_stats	gpuwattch/logic.h	/^	statsDef       tdp_stats;$/;"	m	class:dep_resource_conflict_check	typeref:typename:statsDef
tdp_stats	gpuwattch/logic.h	/^	statsDef       tdp_stats;$/;"	m	class:inst_decoder	typeref:typename:statsDef
tdp_stats	gpuwattch/memoryctrl.h	/^    statsDef       tdp_stats;$/;"	m	class:MCPHY	typeref:typename:statsDef
tdp_stats	gpuwattch/memoryctrl.h	/^    statsDef tdp_stats;$/;"	m	class:MCBackend	typeref:typename:statsDef
tdp_stats	gpuwattch/noc.h	/^	statsDef       tdp_stats;$/;"	m	class:NoC	typeref:typename:statsDef
temp	gpuwattch/cacti/cacti_interface.h	/^    unsigned int temp;$/;"	m	class:InputParameter	typeref:typename:unsigned int
temperature	gpuwattch/XML_Parse.h	/^	int temperature;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
temperature	gpuwattch/arch_const.h	/^const bool 			temperature		=	360;$/;"	v	typeref:typename:const bool
test	intersim2/injection.cpp	/^bool BernoulliInjectionProcess::test(int source)$/;"	f	class:BernoulliInjectionProcess	typeref:typename:bool
test	intersim2/injection.cpp	/^bool OnOffInjectionProcess::test(int source)$/;"	f	class:OnOffInjectionProcess	typeref:typename:bool
test_bytes	abstract_hardware_model.h	/^        bool test_bytes(unsigned start_bit, unsigned end_bit) {$/;"	f	struct:warp_inst_t::transaction_info	typeref:typename:bool
test_res_bus	gpgpu-sim/shader.cc	/^int shader_core_ctx::test_res_bus(int latency){$/;"	f	class:shader_core_ctx	typeref:typename:int
testtype	option_parser.cc	/^   testtype() $/;"	f	class:testtype	file:
testtype	option_parser.cc	/^class testtype$/;"	c	file:
texAddr_t	cuda-sim/instructions.cc	/^typedef unsigned (*texAddr_t) (unsigned x, unsigned y, unsigned mx, unsigned my, size_t elem_siz/;"	t	typeref:typename:unsigned (*)(unsigned x,unsigned y,unsigned mx,unsigned my,size_t elem_size)	file:
tex_cache	gpgpu-sim/gpu-cache.h	/^    tex_cache( const char *name, cache_config &config, int core_id, int type_id, mem_fetch_inter/;"	f	class:tex_cache
tex_cache	gpgpu-sim/gpu-cache.h	/^class tex_cache : public cache_t {$/;"	c
tex_impl	cuda-sim/instructions.cc	/^void tex_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
tex_linf_sampling	cuda-sim/instructions.cc	/^float tex_linf_sampling(memory_space* mem, unsigned tex_array_base, $/;"	f	typeref:typename:float
tex_operand	cuda-sim/ptx.y	/^tex_operand: LEFT_SQUARE_BRACKET IDENTIFIER COMMA { add_scalar_operand($2); }$/;"	l
tex_space	abstract_hardware_model.h	/^   tex_space,$/;"	e	enum:_memory_space_t
texel_size	cuda-sim/ptx_ir.h	/^   unsigned int texel_size; \/\/size in bytes, e.g. (channelDesc.x+y+z+w)\/8$/;"	m	struct:textureInfo	typeref:typename:unsigned int
texel_size_numbits	cuda-sim/ptx_ir.h	/^   unsigned int texel_size_numbits; \/\/log2(texel_size)$/;"	m	struct:textureInfo	typeref:typename:unsigned int
text	gpuwattch/xmlParser.h	/^    XMLCSTR text;$/;"	m	struct:XMLNodeContents	typeref:typename:XMLCSTR
textureInfo	cuda-sim/ptx_ir.h	/^struct textureInfo {$/;"	s
textureNormalizeElementSigned	cuda-sim/instructions.cc	/^float textureNormalizeElementSigned(int element, int bits)$/;"	f	typeref:typename:float
textureNormalizeElementUnsigned	cuda-sim/instructions.cc	/^float textureNormalizeElementUnsigned(unsigned int element, int bits)$/;"	f	typeref:typename:float
textureNormalizeOutput	cuda-sim/instructions.cc	/^void textureNormalizeOutput( const struct cudaChannelFormatDesc& desc, ptx_reg_t& datax, ptx_reg/;"	f	typeref:typename:void
textureReference	abstract_hardware_model.h	/^struct textureReference {$/;"	s
textureReferenceAttr	abstract_hardware_model.h	/^    textureReferenceAttr(const struct textureReference *texref, $/;"	f	struct:textureReferenceAttr
textureReferenceAttr	abstract_hardware_model.h	/^struct textureReferenceAttr {$/;"	s
texture_cycle	gpgpu-sim/shader.cc	/^bool ldst_unit::texture_cycle( warp_inst_t &inst, mem_stage_stall_type &rc_fail, mem_stage_acces/;"	f	class:ldst_unit	typeref:typename:bool
tg	gpuwattch/cacti/basic_circuit.h	/^    tg$/;"	e	enum:Gate_type
theConfig	intersim2/config_utils.cpp	/^Configuration *Configuration::theConfig = 0;$/;"	m	class:Configuration	typeref:typename:Configuration *
theConfig	intersim2/config_utils.hpp	/^  static Configuration * theConfig;$/;"	m	class:Configuration	typeref:typename:Configuration *
thread	abstract_hardware_model.h	/^   class ptx_thread_info *thread;$/;"	m	struct:dram_callback_t	typeref:class:ptx_thread_info *
thread	debug.cc	/^   const ptx_thread_info *thread() const { return m_thread; }$/;"	f	class:watchpoint_event	typeref:typename:const ptx_thread_info *	file:
threadMasks	gpuwattch/memoryctrl.h	/^	ArrayST * threadMasks;$/;"	m	class:MCFrontEnd	typeref:typename:ArrayST *
thread_CFlocality	gpgpu-sim/stat-tool.cc	/^thread_CFlocality::thread_CFlocality(std::string name, $/;"	f	class:thread_CFlocality
thread_CFlocality	gpgpu-sim/stat-tool.h	/^class thread_CFlocality : public snap_shot_trigger, public spill_log_interface {$/;"	c
thread_CFlogger	gpgpu-sim/stat-tool.cc	/^static thread_CFlocality** thread_CFlogger = NULL;$/;"	v	typeref:typename:thread_CFlocality **	file:
thread_at_brkpt	debug.cc	/^bool thread_at_brkpt( ptx_thread_info *thread, const struct brk_pt &b )$/;"	f	typeref:typename:bool
thread_ctx_t	gpgpu-sim/shader.h	/^class thread_ctx_t {$/;"	c
thread_insn_span	gpgpu-sim/stat-tool.cc	/^thread_insn_span::thread_insn_span(const thread_insn_span& other)$/;"	f	class:thread_insn_span
thread_insn_span	gpgpu-sim/stat-tool.cc	/^thread_insn_span::thread_insn_span(unsigned long long  cycle)$/;"	f	class:thread_insn_span
thread_insn_span	gpgpu-sim/stat-tool.h	/^class thread_insn_span {$/;"	c
threads_per_core	gpgpu-sim/gpu-sim.cc	/^unsigned gpgpu_sim::threads_per_core() const $/;"	f	class:gpgpu_sim	typeref:typename:unsigned
threads_per_cta	abstract_hardware_model.h	/^   size_t threads_per_cta() const$/;"	f	class:kernel_info_t	typeref:typename:size_t
threeD_stack	gpuwattch/XML_Parse.h	/^	char threeD_stack[20];$/;"	m	struct:__anon6448b92c0808	typeref:typename:char[20]
threeD_stack	gpuwattch/XML_Parse.h	/^	char threeD_stack[20];$/;"	m	struct:__anon6448b92c0908	typeref:typename:char[20]
threeD_stack	gpuwattch/XML_Parse.h	/^	char threeD_stack[20];$/;"	m	struct:__anon6448b92c0a08	typeref:typename:char[20]
threeD_stack	gpuwattch/XML_Parse.h	/^	char threeD_stack[20];$/;"	m	struct:__anon6448b92c0b08	typeref:typename:char[20]
throughput	gpuwattch/basic_components.h	/^    double throughput, latency;$/;"	m	class:CacheDynParam	typeref:typename:double
throughput	gpuwattch/cacti/cacti_interface.h	/^  double throughput;$/;"	m	class:InputParameter	typeref:typename:double
throughput	gpuwattch/interconnect.h	/^    double latency, throughput;$/;"	m	class:interconnect	typeref:typename:double
throughput_overflow	gpuwattch/interconnect.h	/^    bool  throughput_overflow;$/;"	m	class:interconnect	typeref:typename:bool
tid	gpuwattch/cacti/Ucache.h	/^  uint32_t tid;$/;"	m	struct:calc_time_mt_wrapper_struct	typeref:typename:uint32_t
time	intersim2/packet_reply_info.hpp	/^  int time;$/;"	m	class:PacketReplyInfo	typeref:typename:int
time_vector_create	gpgpu-sim/visualizer.cc	/^void time_vector_create(int size) {$/;"	f	typeref:typename:void
time_vector_print	gpgpu-sim/visualizer.cc	/^void time_vector_print(void) {$/;"	f	typeref:typename:void
time_vector_print_interval2gzfile	gpgpu-sim/visualizer.cc	/^void time_vector_print_interval2gzfile(gzFile outfile) {$/;"	f	typeref:typename:void
time_vector_update	gpgpu-sim/visualizer.cc	/^void time_vector_update(unsigned int uid,int slot ,long int cycle,int type) {$/;"	f	typeref:typename:void
timestamp	gpgpu-sim/dram.h	/^   unsigned int timestamp;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
tlb_request_status	gpgpu-sim/stats.h	/^enum tlb_request_status {$/;"	g
toString	option_parser.cc	/^   virtual string toString() $/;"	f	class:OptionRegistry	typeref:typename:string	file:
toString	option_parser.cc	/^string OptionRegistry<char *>::toString() $/;"	f	class:OptionRegistry	typeref:typename:string
toXML	gpuwattch/xmlParser.cc	/^XMLSTR ToXMLStringTool::toXML(XMLCSTR source)$/;"	f	class:ToXMLStringTool	typeref:typename:XMLSTR
toXMLUnSafe	gpuwattch/xmlParser.cc	/^XMLSTR ToXMLStringTool::toXMLUnSafe(XMLSTR dest,XMLCSTR source)$/;"	f	class:ToXMLStringTool	typeref:typename:XMLSTR
to_string	cuda-sim/ptx_ir.cc	/^std::string ptx_instruction::to_string() const$/;"	f	class:ptx_instruction	typeref:typename:std::string
tokenize_float	intersim2/config_utils.cpp	/^vector<double> tokenize_float(string const & data)$/;"	f	typeref:typename:vector<double>
tokenize_int	intersim2/config_utils.cpp	/^vector<int> tokenize_int(string const & data)$/;"	f	typeref:typename:vector<int>
tokenize_str	intersim2/config_utils.cpp	/^vector<string> tokenize_str(string const & data)$/;"	f	typeref:typename:vector<string>
top	gpgpu-sim/delayqueue.h	/^   T* top() const$/;"	f	class:fifo_pipeline	typeref:typename:T *
top	gpgpu-sim/l2cache.cc	/^mem_fetch* memory_sub_partition::top() $/;"	f	class:memory_sub_partition	typeref:typename:mem_fetch *
top	gpgpu-sim/stack.h	/^   int top;$/;"	m	struct:__anon97533a990108	typeref:typename:int
top_stack	gpgpu-sim/stack.cc	/^address_type top_stack(Stack *S) {$/;"	f	typeref:typename:address_type
topology	gpuwattch/XML_Parse.h	/^	char topology[20];$/;"	m	struct:__anon6448b92c0d08	typeref:typename:char[20]
totalTime	intersim2/power/power_module.hpp	/^  double totalTime;$/;"	m	class:Power_Module	typeref:typename:double
total_access	gpuwattch/basic_components.h	/^    double executionTime, total_access, link_throughput,link_latency,$/;"	m	class:NoCParam	typeref:typename:double
total_accesses	gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon6448b92c0208	typeref:typename:double
total_accesses	gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
total_accesses	gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon6448b92c0408	typeref:typename:double
total_accesses	gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
total_accesses	gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon6448b92c0608	typeref:typename:double
total_accesses	gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon6448b92c0808	typeref:typename:double
total_accesses	gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon6448b92c0908	typeref:typename:double
total_accesses	gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
total_accesses	gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
total_accesses	gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:double
total_cycles	gpuwattch/XML_Parse.h	/^	double total_cycles;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
total_cycles	gpuwattch/XML_Parse.h	/^    double total_cycles;$/;"	m	struct:__anon6448b92c1208	typeref:typename:double
total_cycles	gpuwattch/basic_components.h	/^    double pipeline_duty_cycle, total_cycles, busy_cycles, idle_cycles;$/;"	m	class:CoreDynParam	typeref:typename:double
total_hits	gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon6448b92c0208	typeref:typename:double
total_hits	gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
total_hits	gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon6448b92c0408	typeref:typename:double
total_hits	gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
total_hits	gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon6448b92c0608	typeref:typename:double
total_hits	gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
total_hits	gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
total_instructions	gpuwattch/XML_Parse.h	/^	double total_instructions;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
total_load_perc	gpuwattch/XML_Parse.h	/^	double total_load_perc;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:double
total_load_perc	gpuwattch/XML_Parse.h	/^	double total_load_perc;$/;"	m	struct:__anon6448b92c1008	typeref:typename:double
total_load_perc	gpuwattch/XML_Parse.h	/^	double total_load_perc;$/;"	m	struct:__anon6448b92c1108	typeref:typename:double
total_misses	gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon6448b92c0208	typeref:typename:double
total_misses	gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon6448b92c0308	typeref:typename:double
total_misses	gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon6448b92c0408	typeref:typename:double
total_misses	gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
total_misses	gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon6448b92c0608	typeref:typename:double
total_misses	gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
total_misses	gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
total_n_access	gpgpu-sim/mem_latency_stat.h	/^   unsigned total_n_access;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
total_n_reads	gpgpu-sim/mem_latency_stat.h	/^   unsigned total_n_reads;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
total_n_writes	gpgpu-sim/mem_latency_stat.h	/^   unsigned total_n_writes;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
total_nodes	gpuwattch/basic_components.h	/^    int    horizontal_nodes,vertical_nodes, total_nodes;$/;"	m	class:NoCParam	typeref:typename:int
total_power	gpuwattch/cacti/Ucache.h	/^  powerDef total_power;$/;"	m	struct:solution	typeref:typename:powerDef
total_power	gpuwattch/cacti/cacti_interface.h	/^  powerDef total_power;$/;"	m	struct:__anon592e3c280108	typeref:typename:powerDef
total_sample_count	gpuwattch/gpgpu_sim_wrapper.h	/^    int total_sample_count; \/\/ # of samples per benchmark$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:int
totalbankaccesses	gpgpu-sim/mem_latency_stat.h	/^   unsigned int **totalbankaccesses; \/\/bankaccesses[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
totalbankreads	gpgpu-sim/mem_latency_stat.h	/^   unsigned int **totalbankreads; \/\/bankreads[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
totalbankwrites	gpgpu-sim/mem_latency_stat.h	/^   unsigned int **totalbankwrites; \/\/bankwrites[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
tr1_hash_map	tr1_hash_map.h	/^          #define tr1_hash_map /;"	d
tr1_hash_map	tr1_hash_map.h	/^      #define tr1_hash_map /;"	d
tr1_hash_map_ismap	tr1_hash_map.h	/^          #define tr1_hash_map_ismap /;"	d
tr1_hash_map_ismap	tr1_hash_map.h	/^      #define tr1_hash_map_ismap /;"	d
tr_R_on	gpuwattch/cacti/basic_circuit.cc	/^double tr_R_on($/;"	f	typeref:typename:double
tr_crossbar_power	gpuwattch/cacti/router.cc	/^MCPAT_Router::tr_crossbar_power() {$/;"	f	class:MCPAT_Router	typeref:typename:double
trace_streams_enabled	trace.cc	/^    bool trace_streams_enabled[NUM_TRACE_STREAMS] = {false};$/;"	v	namespace:Trace	typeref:typename:bool[]
trafficManager	intersim2/main.cpp	/^TrafficManager * trafficManager = NULL;$/;"	v	typeref:typename:TrafficManager *
traffic_breakdown	gpgpu-sim/traffic_breakdown.h	/^   traffic_breakdown(const std::string &network_name) $/;"	f	class:traffic_breakdown
traffic_breakdown	gpgpu-sim/traffic_breakdown.h	/^class traffic_breakdown$/;"	c
traffic_class_t	gpgpu-sim/traffic_breakdown.h	/^   typedef std::map < mf_packet_size, unsigned int > traffic_class_t; $/;"	t	class:traffic_breakdown	typeref:typename:std::map<mf_packet_size,unsigned int>
traffic_stat_t	gpgpu-sim/traffic_breakdown.h	/^   typedef std::map < mf_packet_type, traffic_class_t > traffic_stat_t; $/;"	t	class:traffic_breakdown	typeref:typename:std::map<mf_packet_type,traffic_class_t>
transaction_info	abstract_hardware_model.h	/^    struct transaction_info {$/;"	s	class:warp_inst_t
transecEngine	gpuwattch/memoryctrl.h	/^    MCBackend * transecEngine;$/;"	m	class:MemoryController	typeref:typename:MCBackend *
translate_local_memaddr	gpgpu-sim/shader.cc	/^unsigned shader_core_ctx::translate_local_memaddr( address_type localaddr, unsigned tid, unsigne/;"	f	class:shader_core_ctx	typeref:typename:unsigned
translate_pc_to_ptxlineno	cuda-sim/cuda-sim.cc	/^unsigned translate_pc_to_ptxlineno(unsigned pc)$/;"	f	typeref:typename:unsigned
transmission_buf_ctrcap	gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::transmission_buf_ctrcap() {$/;"	f	class:MCPAT_Arbiter	typeref:typename:double
transmission_buf_ctrcap	gpuwattch/cacti/router.cc	/^MCPAT_Router::transmission_buf_ctrcap() {$/;"	f	class:MCPAT_Router	typeref:typename:double
transmission_buf_inpcap	gpuwattch/cacti/router.cc	/^MCPAT_Router::transmission_buf_inpcap() {$/;"	f	class:MCPAT_Router	typeref:typename:double
transmission_buf_outcap	gpuwattch/cacti/router.cc	/^MCPAT_Router::transmission_buf_outcap() {$/;"	f	class:MCPAT_Router	typeref:typename:double
transmitter	gpuwattch/cacti/wire.h	/^    Component transmitter;$/;"	m	class:Wire	typeref:typename:Component
trap_impl	cuda-sim/instructions.cc	/^void trap_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
traversal	intersim2/power/switch_monitor.cpp	/^void SwitchMonitor::traversal( int input, int output, Flit const * f ) {$/;"	f	class:SwitchMonitor	typeref:typename:void
trcd	gpuwattch/cacti/cacti_interface.h	/^  double trcd;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
tree4_anca	intersim2/routefunc.cpp	/^void tree4_anca( const Router *r, const Flit *f,$/;"	f	typeref:typename:void
tree4_nca	intersim2/routefunc.cpp	/^void tree4_nca( const Router *r, const Flit *f,$/;"	f	typeref:typename:void
tree_type	gpuwattch/cacti/htree2.h	/^    enum Htree_type tree_type;$/;"	m	class:Htree2	typeref:enum:Htree_type
tri	gpuwattch/cacti/basic_circuit.h	/^    tri,$/;"	e	enum:Gate_type
tri_ctr_cap	gpuwattch/cacti/crossbar.h	/^    double tri_inp_cap, tri_out_cap, tri_ctr_cap, tri_int_cap;$/;"	m	class:Crossbar	typeref:typename:double
tri_inp_cap	gpuwattch/cacti/crossbar.h	/^    double tri_inp_cap, tri_out_cap, tri_ctr_cap, tri_int_cap;$/;"	m	class:Crossbar	typeref:typename:double
tri_int_cap	gpuwattch/cacti/crossbar.h	/^    double tri_inp_cap, tri_out_cap, tri_ctr_cap, tri_int_cap;$/;"	m	class:Crossbar	typeref:typename:double
tri_out_cap	gpuwattch/cacti/crossbar.h	/^    double tri_inp_cap, tri_out_cap, tri_ctr_cap, tri_int_cap;$/;"	m	class:Crossbar	typeref:typename:double
try_snap_shot	gpgpu-sim/stat-tool.cc	/^void try_snap_shot (unsigned long long  current_cycle)$/;"	f	typeref:typename:void
try_snap_shot	gpgpu-sim/stat-tool.h	/^   void try_snap_shot(unsigned long long  current_cycle) {$/;"	f	class:snap_shot_trigger	typeref:typename:void
tuple	cuda-sim/ptxinfo.y	/^tuple: INT_OPERAND PLUS INT_OPERAND BYTES { g_declared=$1; g_system=$3; }$/;"	l
twin_operand	cuda-sim/ptx.y	/^twin_operand : IDENTIFIER PLUS IDENTIFIER { add_double_operand($1,$3); change_double_operand_typ/;"	l
two_level_active_scheduler	gpgpu-sim/shader.h	/^	two_level_active_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:two_level_active_scheduler
two_level_active_scheduler	gpgpu-sim/shader.h	/^class two_level_active_scheduler : public scheduler_unit {$/;"	c
txbytes	gpgpu-sim/dram.h	/^   unsigned int txbytes;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
txq_impl	cuda-sim/instructions.cc	/^void txq_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); /;"	f	typeref:typename:void
type	cuda-sim/ptx_ir.h	/^   const type_info *type() const { return m_type;}$/;"	f	class:symbol	typeref:typename:const type_info *
type	cuda-sim/ptx_sim.h	/^   int type;$/;"	m	struct:param_t	typeref:typename:int
type	gpuwattch/XML_Parse.h	/^	bool type;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:bool
type	gpuwattch/XML_Parse.h	/^	int type;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:int
type	gpuwattch/XML_Parse.h	/^	int type;$/;"	m	struct:__anon6448b92c1008	typeref:typename:int
type	gpuwattch/XML_Parse.h	/^	int type;$/;"	m	struct:__anon6448b92c1108	typeref:typename:int
type	gpuwattch/basic_components.h	/^    bool   has_global_link, type;$/;"	m	class:NoCParam	typeref:typename:bool
type	gpuwattch/basic_components.h	/^    int    type;$/;"	m	class:MCParam	typeref:typename:int
type	gpuwattch/basic_components.h	/^    int    type;$/;"	m	class:NIUParam	typeref:typename:int
type	gpuwattch/basic_components.h	/^    int    type;$/;"	m	class:PCIeParam	typeref:typename:int
type	intersim2/flit.hpp	/^  FlitType type;$/;"	m	class:Flit	typeref:typename:FlitType
type	intersim2/packet_reply_info.hpp	/^  Flit::FlitType type;$/;"	m	class:PacketReplyInfo	typeref:typename:Flit::FlitType
type_decode	cuda-sim/ptx_ir.cc	/^unsigned type_info_key::type_decode( int type, size_t &size, int &basic_type )$/;"	f	class:type_info_key	typeref:typename:unsigned
type_decode	cuda-sim/ptx_ir.cc	/^unsigned type_info_key::type_decode( size_t &size, int &basic_type ) const$/;"	f	class:type_info_key	typeref:typename:unsigned
type_info	cuda-sim/ptx_ir.h	/^   type_info( symbol_table *scope, type_info_key t )$/;"	f	class:type_info
type_info	cuda-sim/ptx_ir.h	/^class type_info {$/;"	c
type_info_key	cuda-sim/ptx_ir.h	/^   type_info_key( memory_space_t space_spec, int scalar_type_spec, int vector_spec, int alignmen/;"	f	class:type_info_key
type_info_key	cuda-sim/ptx_ir.h	/^   type_info_key()$/;"	f	class:type_info_key
type_info_key	cuda-sim/ptx_ir.h	/^class type_info_key {$/;"	c
type_info_key_compare	cuda-sim/ptx_ir.h	/^struct type_info_key_compare {$/;"	s
type_spec	cuda-sim/ptx.y	/^type_spec: scalar_type $/;"	l
types_of_operands	abstract_hardware_model.h	/^typedef enum uarch_operand_type_t types_of_operands;$/;"	t	typeref:enum:uarch_operand_type_t
u128	cuda-sim/ptx_sim.h	/^   } u128;$/;"	m	union:ptx_reg_t	typeref:struct:ptx_reg_t::__anondd5d98a10208
u16	cuda-sim/ptx_sim.h	/^   unsigned short    u16;$/;"	m	union:ptx_reg_t	typeref:typename:unsigned short
u2f	cuda-sim/instructions.cc	/^ptx_reg_t u2f( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mo/;"	f	typeref:typename:ptx_reg_t
u32	cuda-sim/ptx_sim.h	/^   unsigned int      u32;$/;"	m	union:ptx_reg_t	typeref:typename:unsigned int
u64	cuda-sim/ptx_sim.h	/^   unsigned long long   u64;$/;"	m	union:ptx_reg_t	typeref:typename:unsigned long long
u8	cuda-sim/ptx_sim.h	/^   unsigned char     u8;$/;"	m	union:ptx_reg_t	typeref:typename:unsigned char
uarch_bar_t	abstract_hardware_model.h	/^enum uarch_bar_t {$/;"	g
uarch_op_t	abstract_hardware_model.h	/^enum uarch_op_t {$/;"	g
uarch_operand_type_t	abstract_hardware_model.h	/^enum uarch_operand_type_t {$/;"	g
uarch_red_t	abstract_hardware_model.h	/^enum uarch_red_t {$/;"	g
uca_org_t	gpuwattch/cacti/cacti_interface.cc	/^uca_org_t :: uca_org_t()$/;"	f	class:uca_org_t
uca_org_t	gpuwattch/cacti/cacti_interface.h	/^class uca_org_t$/;"	c
uca_tree	gpuwattch/cacti/htree2.h	/^    bool uca_tree; \/\/ should have full bandwidth to access all banks in the array simultaneous/;"	m	class:Htree2	typeref:typename:bool
ugal_dragonflynew	intersim2/networks/dragonfly.cpp	/^void ugal_dragonflynew( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
ugal_flatfly_onchip	intersim2/networks/flatfly_onchip.cpp	/^void ugal_flatfly_onchip( const Router *r, const Flit *f, int in_channel,$/;"	f	typeref:typename:void
ugal_pni_flatfly_onchip	intersim2/networks/flatfly_onchip.cpp	/^void ugal_pni_flatfly_onchip( const Router *r, const Flit *f, int in_channel,$/;"	f	typeref:typename:void
ugal_xyyx_flatfly_onchip	intersim2/networks/flatfly_onchip.cpp	/^void ugal_xyyx_flatfly_onchip( const Router *r, const Flit *f, int in_channel,$/;"	f	typeref:typename:void
uid	cuda-sim/ptx_ir.h	/^   unsigned uid() const { return m_uid; }$/;"	f	class:symbol	typeref:typename:unsigned
uid	cuda-sim/ptx_ir.h	/^   unsigned uid() const { return m_uid;}$/;"	f	class:ptx_instruction	typeref:typename:unsigned
uint4	cuda-sim/cuda-math.h	/^   struct uint4 {$/;"	s	namespace:cuda_math
uint4	cuda-sim/cuda-math.h	/^   typedef struct uint4 uint4;$/;"	t	namespace:cuda_math	typeref:struct:uint4
uint_vector_t	gpgpu-sim/shader.h	/^   typedef std::vector<unsigned int> uint_vector_t;$/;"	t	class:opndcoll_rfu_t	typeref:typename:std::vector<unsigned int>
ulldata	option_parser.cc	/^   unsigned long long ulldata;$/;"	m	class:testtype	typeref:typename:unsigned long long	file:
umRobs	gpuwattch/arch_const.h	/^const int umRobs=1;$/;"	v	typeref:typename:const int
undef_t	cuda-sim/ptx_ir.h	/^   v_int_t, v_unsigned_t, undef_t$/;"	e	enum:operand_type
undefined_space	abstract_hardware_model.h	/^   undefined_space=0,$/;"	e	enum:_memory_space_t
undiffCore	gpuwattch/core.h	/^    UndiffCore * undiffCore;$/;"	m	class:Core	typeref:typename:UndiffCore *
unicache	gpuwattch/sharedcache.h	/^    DataCache unicache;\/\/Shared cache$/;"	m	class:SharedCache	typeref:typename:DataCache
unit_len_wire_del	gpuwattch/cacti/parameter.h	/^  double unit_len_wire_del;$/;"	m	class:TechnologyParameter	typeref:typename:double
unlog	gpgpu-sim/stat-tool.h	/^   void unlog(int pos) { m_curr_lin_hist.subsample(pos); }$/;"	f	class:linear_histogram_logger	typeref:typename:void
unput	intersim2/lex.yy.c	/^#define unput(/;"	d	file:
unsigned_t	cuda-sim/ptx_ir.h	/^   unsigned_t, symbolic_t, label_t, v_reg_t, v_float_op_t, v_double_op_t,$/;"	e	enum:operand_type
update	abstract_hardware_model.cc	/^void simt_stack::update( simt_mask_t &thread_done, addr_vector_t &next_pc, address_type recvg_pc/;"	f	class:simt_stack	typeref:typename:void
update	gpuwattch/cacti/Ucache.cc	/^void update(uca_org_t *fin_res)$/;"	f	typeref:typename:void
update	stream_manager.h	/^   void update( double cycle, time_t clk )$/;"	f	class:CUevent_st	typeref:typename:void
updateAttribute	gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::updateAttribute(XMLAttribute *newAttribute, XMLAttribute *oldAttribute)$/;"	f	class:XMLNode	typeref:typename:XMLAttribute *
updateAttribute	gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::updateAttribute(XMLCSTR lpszNewValue, XMLCSTR lpszNewName,XMLCSTR lpszOld/;"	f	class:XMLNode	typeref:typename:XMLAttribute *
updateAttribute	gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::updateAttribute(XMLCSTR lpszNewValue, XMLCSTR lpszNewName,int i)$/;"	f	class:XMLNode	typeref:typename:XMLAttribute *
updateAttribute_WOSD	gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::updateAttribute_WOSD(XMLAttribute *newAttribute, XMLAttribute *oldAttribu/;"	f	class:XMLNode	typeref:typename:XMLAttribute *
updateAttribute_WOSD	gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::updateAttribute_WOSD(XMLSTR lpszNewValue, XMLSTR lpszNewName,XMLCSTR lpsz/;"	f	class:XMLNode	typeref:typename:XMLAttribute *
updateAttribute_WOSD	gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::updateAttribute_WOSD(XMLSTR lpszNewValue, XMLSTR lpszNewName,int i)$/;"	f	class:XMLNode	typeref:typename:XMLAttribute *
updateBits	gpgpu-sim/shader.cc	/^void scheduler_unit::updateBits( std::vector< T > compute_list, std::vector< T > memory_list )$/;"	f	class:scheduler_unit	typeref:typename:void
updateClear	gpuwattch/xmlParser.cc	/^XMLClear     *XMLNode::updateClear(XMLCSTR lpszNewContent, int i)$/;"	f	class:XMLNode	typeref:typename:XMLClear *
updateClear	gpuwattch/xmlParser.cc	/^XMLClear     *XMLNode::updateClear(XMLCSTR lpszNewValue, XMLCSTR lpszOldValue)$/;"	f	class:XMLNode	typeref:typename:XMLClear *
updateClear	gpuwattch/xmlParser.cc	/^XMLClear     *XMLNode::updateClear(XMLClear *newP,XMLClear *oldP)$/;"	f	class:XMLNode	typeref:typename:XMLClear *
updateClear_WOSD	gpuwattch/xmlParser.cc	/^XMLClear *XMLNode::updateClear_WOSD(XMLClear *newP,XMLClear *oldP)$/;"	f	class:XMLNode	typeref:typename:XMLClear *
updateClear_WOSD	gpuwattch/xmlParser.cc	/^XMLClear *XMLNode::updateClear_WOSD(XMLSTR lpszNewContent, XMLCSTR lpszOldValue)$/;"	f	class:XMLNode	typeref:typename:XMLClear *
updateClear_WOSD	gpuwattch/xmlParser.cc	/^XMLClear *XMLNode::updateClear_WOSD(XMLSTR lpszNewContent, int i)$/;"	f	class:XMLNode	typeref:typename:XMLClear *
updateName	gpuwattch/xmlParser.cc	/^XMLCSTR       XMLNode::updateName(XMLCSTR lpszName)$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
updateName_WOSD	gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::updateName_WOSD(XMLSTR lpszName)$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
updateSIMTStack	abstract_hardware_model.cc	/^void core_t::updateSIMTStack(unsigned warpId, warp_inst_t * inst)$/;"	f	class:core_t	typeref:typename:void
updateText	gpuwattch/xmlParser.cc	/^XMLCSTR       XMLNode::updateText(XMLCSTR lpszNewValue, XMLCSTR lpszOldValue)$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
updateText	gpuwattch/xmlParser.cc	/^XMLCSTR       XMLNode::updateText(XMLCSTR lpszNewValue, int i)$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
updateText_WOSD	gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::updateText_WOSD(XMLSTR lpszNewValue, XMLCSTR lpszOldValue)$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
updateText_WOSD	gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::updateText_WOSD(XMLSTR lpszNewValue, int i)$/;"	f	class:XMLNode	typeref:typename:XMLCSTR
update_cache_parameters	gpgpu-sim/gpu-cache.cc	/^void tag_array::update_cache_parameters(cache_config &config)$/;"	f	class:tag_array	typeref:typename:void
update_cache_parameters	gpgpu-sim/gpu-cache.h	/^	void update_cache_parameters(cache_config &config)$/;"	f	class:baseline_cache	typeref:typename:void
update_coefficients	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::update_coefficients()$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
update_components_power	gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::update_components_power()$/;"	f	class:gpgpu_sim_wrapper	typeref:typename:void
update_fullswing	gpuwattch/cacti/wire.cc	/^void Wire::update_fullswing()$/;"	f	class:Wire	typeref:typename:void
update_ld	gpgpu-sim/visualizer.cc	/^   void update_ld(unsigned int uid,unsigned int slot, long int time) { $/;"	f	class:my_time_vector	typeref:typename:void	file:
update_min_values	gpuwattch/cacti/Ucache.cc	/^void min_values_t::update_min_values(const mem_array * res)$/;"	f	class:min_values_t	typeref:typename:void
update_min_values	gpuwattch/cacti/Ucache.cc	/^void min_values_t::update_min_values(const min_values_t * val)$/;"	f	class:min_values_t	typeref:typename:void
update_min_values	gpuwattch/cacti/Ucache.cc	/^void min_values_t::update_min_values(const nuca_org_t * res)$/;"	f	class:min_values_t	typeref:typename:void
update_min_values	gpuwattch/cacti/Ucache.cc	/^void min_values_t::update_min_values(const uca_org_t & res)$/;"	f	class:min_values_t	typeref:typename:void
update_pc	cuda-sim/ptx_sim.h	/^   void update_pc( )$/;"	f	class:ptx_thread_info	typeref:typename:void
update_st	gpgpu-sim/visualizer.cc	/^   void update_st(unsigned int uid,unsigned int slot, long int time) { $/;"	f	class:my_time_vector	typeref:typename:void	file:
update_stats	gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::update_stats() {$/;"	f	class:gpgpu_sim	typeref:typename:void
update_thread_pc	gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::update_thread_pc( int thread_id, address_type pc ) $/;"	f	class:thread_CFlocality	typeref:typename:void
use_cuobjdump	abstract_hardware_model.h	/^    bool use_cuobjdump() const { return m_ptx_use_cuobjdump; }$/;"	f	class:gpgpu_functional_sim_config	typeref:typename:bool
use_data_port	gpgpu-sim/gpu-cache.cc	/^void baseline_cache::bandwidth_management::use_data_port(mem_fetch *mf, enum cache_request_statu/;"	f	class:baseline_cache::bandwidth_management	typeref:typename:void
use_fill_port	gpgpu-sim/gpu-cache.cc	/^void baseline_cache::bandwidth_management::use_fill_port(mem_fetch *mf)$/;"	f	class:baseline_cache::bandwidth_management	typeref:typename:void
use_inp_params	gpuwattch/cacti/parameter.h	/^    int use_inp_params;$/;"	m	class:DynamicParameter	typeref:typename:int
v	gpgpu-sim/stack.h	/^   address_type *v;$/;"	m	struct:__anon97533a990108	typeref:typename:address_type *
v_address_width	gpuwattch/basic_components.h	/^    int  int_data_width, fp_data_width,v_address_width, p_address_width;$/;"	m	class:CoreDynParam	typeref:typename:int
v_double_op_t	cuda-sim/ptx_ir.h	/^   unsigned_t, symbolic_t, label_t, v_reg_t, v_float_op_t, v_double_op_t,$/;"	e	enum:operand_type
v_float_op_t	cuda-sim/ptx_ir.h	/^   unsigned_t, symbolic_t, label_t, v_reg_t, v_float_op_t, v_double_op_t,$/;"	e	enum:operand_type
v_int_t	cuda-sim/ptx_ir.h	/^   v_int_t, v_unsigned_t, undef_t$/;"	e	enum:operand_type
v_reg_t	cuda-sim/ptx_ir.h	/^   unsigned_t, symbolic_t, label_t, v_reg_t, v_float_op_t, v_double_op_t,$/;"	e	enum:operand_type
v_unsigned_t	cuda-sim/ptx_ir.h	/^   v_int_t, v_unsigned_t, undef_t$/;"	e	enum:operand_type
v_wire	gpuwattch/cacti/nuca.h	/^    Wire *v_wire;$/;"	m	class:nuca_org_t	typeref:typename:Wire *
vabsdiff_impl	cuda-sim/instructions.cc	/^void vabsdiff_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(/;"	f	typeref:typename:void
vadd_impl	cuda-sim/instructions.cc	/^void vadd_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
valiant_flatfly	intersim2/networks/flatfly_onchip.cpp	/^void valiant_flatfly( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
valiant_mesh	intersim2/routefunc.cpp	/^void valiant_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inje/;"	f	typeref:typename:void
valiant_ni_torus	intersim2/routefunc.cpp	/^void valiant_ni_torus( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
valiant_torus	intersim2/routefunc.cpp	/^void valiant_torus( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inj/;"	f	typeref:typename:void
valid	abstract_hardware_model.h	/^    bool valid() const { return m_decoded; }$/;"	f	class:inst_t	typeref:typename:bool
valid	gpgpu-sim/shader.h	/^      bool valid() const { return m_valid; }$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:bool
valid	gpuwattch/cacti/cacti_interface.h	/^    bool valid;$/;"	m	class:uca_org_t	typeref:typename:bool
valid	intersim2/arbiters/arbiter.hpp	/^    bool valid ;$/;"	m	struct:Arbiter::__anond10b4dfb0108	typeref:typename:bool
var_spec	cuda-sim/ptx.y	/^var_spec: space_spec $/;"	l
var_spec_list	cuda-sim/ptx.y	/^var_spec_list: var_spec $/;"	l
variable_declaration	cuda-sim/ptx.y	/^variable_declaration: variable_spec identifier_list { add_variables(); }$/;"	l
variable_spec	cuda-sim/ptx.y	/^variable_spec: var_spec_list { set_variable_type(); }$/;"	l
vc	intersim2/credit.hpp	/^  set<int> vc;$/;"	m	class:Credit	typeref:typename:set<int>
vc	intersim2/flit.hpp	/^  int vc;$/;"	m	class:Flit	typeref:typename:int
vc	intersim2/routers/event_router.hpp	/^    int  vc;$/;"	m	struct:EventNextVCState::tWaiting	typeref:typename:int
vc_alloc	intersim2/vc.hpp	/^  enum eVCState { state_min = 0, idle = state_min, routing, vc_alloc, active, $/;"	e	enum:VC::eVCState
vc_arb	gpuwattch/cacti/highradix.h	/^    MCPAT_Arbiter *cb_arb, *vc_arb, *c_arb;$/;"	m	class:HighRadix	typeref:typename:MCPAT_Arbiter **
vc_buffer_size	gpuwattch/cacti/router.h	/^    double vc_buffer_size; \/* vc size = vc_buffer_size * flit_size *\/$/;"	m	class:MCPAT_Router	typeref:typename:double
vc_count	gpuwattch/cacti/router.h	/^    double vc_count;$/;"	m	class:MCPAT_Router	typeref:typename:double
vc_end	intersim2/outputset.hpp	/^    int vc_end;$/;"	m	struct:OutputSet::sSetElement	typeref:typename:int
vc_start	intersim2/outputset.hpp	/^    int vc_start;$/;"	m	struct:OutputSet::sSetElement	typeref:typename:int
vdd_periph_global	gpuwattch/cacti/cacti_interface.h	/^    double vdd_periph_global;$/;"	m	class:uca_org_t	typeref:typename:double
vec_name1	cuda-sim/ptx_ir.h	/^   const std::string &vec_name1() const$/;"	f	class:operand_info	typeref:typename:const std::string &
vec_name2	cuda-sim/ptx_ir.h	/^   const std::string &vec_name2() const$/;"	f	class:operand_info	typeref:typename:const std::string &
vec_name3	cuda-sim/ptx_ir.h	/^   const std::string &vec_name3() const$/;"	f	class:operand_info	typeref:typename:const std::string &
vec_name4	cuda-sim/ptx_ir.h	/^   const std::string &vec_name4() const$/;"	f	class:operand_info	typeref:typename:const std::string &
vec_symbol	cuda-sim/ptx_ir.h	/^   const symbol* vec_symbol(int idx) const $/;"	f	class:operand_info	typeref:typename:const symbol *
vector_operand	cuda-sim/ptx.y	/^vector_operand: LEFT_BRACE IDENTIFIER COMMA IDENTIFIER RIGHT_BRACE { add_2vector_operand($2,$4);/;"	l
vector_spec	cuda-sim/ptx.y	/^vector_spec:  V2_TYPE {  add_option(V2_TYPE); func_header_info(".v2");}$/;"	l
vector_t	cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
ver	cuda-sim/ptx_sim.h	/^      float    ver() const { assert(m_valid); return m_ptx_version; }$/;"	f	class:ptx_version	typeref:typename:float
ver_bus	gpuwattch/cacti/highradix.h	/^    Wire *hor_bus, *ver_bus;$/;"	m	class:HighRadix	typeref:typename:Wire **
ver_htree_wires_over_array	gpuwattch/cacti/cacti_interface.h	/^    unsigned int ver_htree_wires_over_array;$/;"	m	class:InputParameter	typeref:typename:unsigned int
version_header	cuda-sim/ptx_parser.cc	/^void version_header(double a) {}  \/\/intentional dummy function$/;"	f	typeref:typename:void
vert_dielectric_constant	gpuwattch/cacti/parameter.h	/^    double vert_dielectric_constant;$/;"	m	class:TechnologyParameter::InterconnectType	typeref:typename:double
vertical_nodes	gpuwattch/XML_Parse.h	/^	int vertical_nodes;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int
vertical_nodes	gpuwattch/basic_components.h	/^    int    horizontal_nodes,vertical_nodes, total_nodes;$/;"	m	class:NoCParam	typeref:typename:int
virtual_address_width	gpuwattch/XML_Parse.h	/^	int virtual_address_width;$/;"	m	struct:__anon6448b92c0708	typeref:typename:int
virtual_address_width	gpuwattch/XML_Parse.h	/^	int virtual_address_width;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
virtual_channel_per_port	gpuwattch/XML_Parse.h	/^	int virtual_channel_per_port;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:int
virtual_channel_per_port	gpuwattch/basic_components.h	/^    int    virtual_channel_per_port,input_buffer_entries_per_vc;$/;"	m	class:NoCParam	typeref:typename:int
virtual_memory_page_size	gpuwattch/XML_Parse.h	/^	int virtual_memory_page_size;$/;"	m	struct:__anon6448b92c1208	typeref:typename:int
visualize	gpgpu-sim/dram.cc	/^void dram_t::visualize() const$/;"	f	class:dram_t	typeref:typename:void
visualize	gpgpu-sim/l2cache.h	/^   void visualize() const { m_dram->visualize(); }$/;"	f	class:memory_partition_unit	typeref:typename:void
visualizer_print	gpgpu-sim/dram.cc	/^void dram_t::visualizer_print( gzFile visualizer_file )$/;"	f	class:dram_t	typeref:typename:void
visualizer_print	gpgpu-sim/l2cache.cc	/^void memory_partition_unit::visualizer_print( gzFile visualizer_file ) const $/;"	f	class:memory_partition_unit	typeref:typename:void
visualizer_print	gpgpu-sim/l2cache.cc	/^void memory_stats_t::visualizer_print( gzFile visualizer_file )$/;"	f	class:memory_stats_t	typeref:typename:void
visualizer_print	gpgpu-sim/l2cache.cc	/^void memory_sub_partition::visualizer_print( gzFile visualizer_file )$/;"	f	class:memory_sub_partition	typeref:typename:void
visualizer_print	gpgpu-sim/power_stat.cc	/^void power_core_stat_t::visualizer_print( gzFile visualizer_file )$/;"	f	class:power_core_stat_t	typeref:typename:void
visualizer_print	gpgpu-sim/power_stat.cc	/^void power_mem_stat_t::visualizer_print( gzFile power_visualizer_file ){$/;"	f	class:power_mem_stat_t	typeref:typename:void
visualizer_print	gpgpu-sim/power_stat.cc	/^void power_stat_t::visualizer_print( gzFile visualizer_file )$/;"	f	class:power_stat_t	typeref:typename:void
visualizer_print	gpgpu-sim/shader.cc	/^void shader_core_stats::visualizer_print( gzFile visualizer_file )$/;"	f	class:shader_core_stats	typeref:typename:void
visualizer_printstat	gpgpu-sim/visualizer.cc	/^void gpgpu_sim::visualizer_printstat()$/;"	f	class:gpgpu_sim	typeref:typename:void
vmad_impl	cuda-sim/instructions.cc	/^void vmad_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
vmax_impl	cuda-sim/instructions.cc	/^void vmax_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
vmin_impl	cuda-sim/instructions.cc	/^void vmin_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
vote_all	cuda-sim/ptx_ir.h	/^   enum vote_mode_t { vote_any, vote_all, vote_uni, vote_ballot };$/;"	e	enum:ptx_instruction::vote_mode_t
vote_any	cuda-sim/ptx_ir.h	/^   enum vote_mode_t { vote_any, vote_all, vote_uni, vote_ballot };$/;"	e	enum:ptx_instruction::vote_mode_t
vote_ballot	cuda-sim/ptx_ir.h	/^   enum vote_mode_t { vote_any, vote_all, vote_uni, vote_ballot };$/;"	e	enum:ptx_instruction::vote_mode_t
vote_impl	cuda-sim/instructions.cc	/^void vote_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
vote_mode	cuda-sim/ptx_ir.h	/^   enum vote_mode_t vote_mode() const { return m_vote_mode; }$/;"	f	class:ptx_instruction	typeref:enum:vote_mode_t
vote_mode_t	cuda-sim/ptx_ir.h	/^   enum vote_mode_t { vote_any, vote_all, vote_uni, vote_ballot };$/;"	g	class:ptx_instruction
vote_uni	cuda-sim/ptx_ir.h	/^   enum vote_mode_t { vote_any, vote_all, vote_uni, vote_ballot };$/;"	e	enum:ptx_instruction::vote_mode_t
vpp	gpuwattch/cacti/parameter.h	/^  double vpp;$/;"	m	class:TechnologyParameter	typeref:typename:double
vset_impl	cuda-sim/instructions.cc	/^void vset_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
vshl_impl	cuda-sim/instructions.cc	/^void vshl_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
vshr_impl	cuda-sim/instructions.cc	/^void vshr_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
vsub_impl	cuda-sim/instructions.cc	/^void vsub_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI);/;"	f	typeref:typename:void
w	abstract_hardware_model.h	/^   int                        w;$/;"	m	struct:cudaChannelFormatDesc	typeref:typename:int
w	cuda-sim/cuda-math.h	/^      float x, y, z, w;$/;"	m	struct:cuda_math::float4	typeref:typename:float
w	cuda-sim/cuda-math.h	/^      int x, y, z, w;$/;"	m	struct:cuda_math::int4	typeref:typename:int
w	cuda-sim/cuda-math.h	/^      unsigned int x, y, z, w;$/;"	m	struct:cuda_math::uint4	typeref:typename:unsigned int
w	gpuwattch/cacti/area.h	/^  double w;$/;"	m	class:Area	typeref:typename:double
w_L1_nand2_n	gpuwattch/cacti/decoder.h	/^  double w_L1_nand2_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlk	typeref:typename:double[]
w_L1_nand2_p	gpuwattch/cacti/decoder.h	/^  double w_L1_nand2_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlk	typeref:typename:double[]
w_L1_nand3_n	gpuwattch/cacti/decoder.h	/^  double w_L1_nand3_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlk	typeref:typename:double[]
w_L1_nand3_p	gpuwattch/cacti/decoder.h	/^  double w_L1_nand3_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlk	typeref:typename:double[]
w_L2_n	gpuwattch/cacti/decoder.h	/^  double w_L2_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlk	typeref:typename:double[]
w_L2_p	gpuwattch/cacti/decoder.h	/^  double w_L2_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlk	typeref:typename:double[]
w_comp_inv_n1	gpuwattch/cacti/parameter.h	/^  double w_comp_inv_n1;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_comp_inv_n2	gpuwattch/cacti/parameter.h	/^  double w_comp_inv_n2;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_comp_inv_n3	gpuwattch/cacti/parameter.h	/^  double w_comp_inv_n3;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_comp_inv_p1	gpuwattch/cacti/parameter.h	/^  double w_comp_inv_p1;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_comp_inv_p2	gpuwattch/cacti/parameter.h	/^  double w_comp_inv_p2;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_comp_inv_p3	gpuwattch/cacti/parameter.h	/^  double w_comp_inv_p3;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_comp_n	gpuwattch/cacti/parameter.h	/^  double w_comp_n;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_comp_p	gpuwattch/cacti/parameter.h	/^  double w_comp_p;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_dec_n	gpuwattch/cacti/decoder.h	/^    double w_dec_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:Decoder	typeref:typename:double[]
w_dec_p	gpuwattch/cacti/decoder.h	/^    double w_dec_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:Decoder	typeref:typename:double[]
w_eval_inv_n	gpuwattch/cacti/parameter.h	/^  double w_eval_inv_n;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_eval_inv_p	gpuwattch/cacti/parameter.h	/^  double w_eval_inv_p;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_iso	gpuwattch/cacti/parameter.h	/^  double w_iso;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_nmos_b_mux	gpuwattch/cacti/parameter.h	/^  double w_nmos_b_mux;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_nmos_sa_mux	gpuwattch/cacti/parameter.h	/^  double w_nmos_sa_mux;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_pmos_bl_eq	gpuwattch/cacti/parameter.h	/^  double w_pmos_bl_eq;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_pmos_bl_precharge	gpuwattch/cacti/parameter.h	/^  double w_pmos_bl_precharge;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_poly_contact	gpuwattch/cacti/parameter.h	/^  double w_poly_contact;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_scale	gpuwattch/cacti/wire.h	/^    double w_scale, s_scale;$/;"	m	class:Wire	typeref:typename:double
w_sense_en	gpuwattch/cacti/parameter.h	/^  double w_sense_en;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_sense_n	gpuwattch/cacti/parameter.h	/^  double w_sense_n;$/;"	m	class:TechnologyParameter	typeref:typename:double
w_sense_p	gpuwattch/cacti/parameter.h	/^  double w_sense_p;$/;"	m	class:TechnologyParameter	typeref:typename:double
waiting	gpgpu-sim/shader.cc	/^bool shd_warp_t::waiting() $/;"	f	class:shd_warp_t	typeref:typename:bool
waiting_for_fill	gpgpu-sim/gpu-cache.cc	/^bool baseline_cache::waiting_for_fill( mem_fetch *mf ){$/;"	f	class:baseline_cache	typeref:typename:bool
warming_up	intersim2/trafficmanager.hpp	/^  enum eSimState { warming_up, running, draining, done };$/;"	e	enum:TrafficManager::eSimState
warp	gpgpu-sim/shader.cc	/^shd_warp_t& scheduler_unit::warp(int i){$/;"	f	class:scheduler_unit	typeref:typename:shd_warp_t &
warp_divergence	cuda-sim/ptx-stats.cc	/^    unsigned long long warp_divergence; \/\/ number of warp divergence occured at this instructi/;"	m	class:ptx_file_line_stats	typeref:typename:unsigned long long	file:
warp_exit	cuda-sim/cuda-sim.cc	/^void functionalCoreSim::warp_exit( unsigned warp_id )$/;"	f	class:functionalCoreSim	typeref:typename:void
warp_exit	gpgpu-sim/shader.cc	/^void barrier_set_t::warp_exit( unsigned warp_id )$/;"	f	class:barrier_set_t	typeref:typename:void
warp_exit	gpgpu-sim/shader.cc	/^void shader_core_ctx::warp_exit( unsigned warp_id )$/;"	f	class:shader_core_ctx	typeref:typename:void
warp_id	abstract_hardware_model.h	/^    unsigned warp_id() const $/;"	f	class:warp_inst_t	typeref:typename:unsigned
warp_inst_complete	gpgpu-sim/shader.cc	/^void shader_core_ctx::warp_inst_complete(const warp_inst_t &inst)$/;"	f	class:shader_core_ctx	typeref:typename:void
warp_inst_t	abstract_hardware_model.h	/^    warp_inst_t( const core_config *config ) $/;"	f	class:warp_inst_t
warp_inst_t	abstract_hardware_model.h	/^    warp_inst_t() $/;"	f	class:warp_inst_t
warp_inst_t	abstract_hardware_model.h	/^class warp_inst_t: public inst_t {$/;"	c
warp_reaches_barrier	gpgpu-sim/shader.cc	/^void barrier_set_t::warp_reaches_barrier(unsigned cta_id,unsigned warp_id,warp_inst_t* inst)$/;"	f	class:barrier_set_t	typeref:typename:void
warp_set_t	gpgpu-sim/shader.h	/^typedef std::bitset<WARP_PER_CTA_MAX> warp_set_t;$/;"	t	typeref:typename:std::bitset<WARP_PER_CTA_MAX>
warp_size	abstract_hardware_model.h	/^    unsigned warp_size() const { return m_config->warp_size; }$/;"	f	class:warp_inst_t	typeref:typename:unsigned
warp_size	abstract_hardware_model.h	/^    unsigned warp_size;$/;"	m	struct:core_config	typeref:typename:unsigned
warp_size	gpuwattch/XML_Parse.h	/^   int warp_size;\/\/ (32) $/;"	m	struct:__anon6448b92c0708	typeref:typename:int
warp_waiting_at_barrier	cuda-sim/cuda-sim.h	/^    virtual bool warp_waiting_at_barrier( unsigned warp_id ) const  $/;"	f	class:functionalCoreSim	typeref:typename:bool
warp_waiting_at_barrier	gpgpu-sim/shader.cc	/^bool barrier_set_t::warp_waiting_at_barrier( unsigned warp_id ) const$/;"	f	class:barrier_set_t	typeref:typename:bool
warp_waiting_at_barrier	gpgpu-sim/shader.cc	/^bool shader_core_ctx::warp_waiting_at_barrier( unsigned warp_id ) const$/;"	f	class:shader_core_ctx	typeref:typename:bool
warp_waiting_at_mem_barrier	gpgpu-sim/shader.cc	/^bool shader_core_ctx::warp_waiting_at_mem_barrier( unsigned warp_id ) $/;"	f	class:shader_core_ctx	typeref:typename:bool
was_read_sent	gpgpu-sim/gpu-cache.cc	/^bool was_read_sent( const std::list<cache_event> &events )$/;"	f	typeref:typename:bool
was_write_sent	gpgpu-sim/gpu-cache.cc	/^bool was_write_sent( const std::list<cache_event> &events )$/;"	f	typeref:typename:bool
was_writeback_sent	gpgpu-sim/gpu-cache.cc	/^bool was_writeback_sent( const std::list<cache_event> &events )$/;"	f	typeref:typename:bool
watch	intersim2/flit.hpp	/^  bool watch;$/;"	m	class:Flit	typeref:typename:bool
watch	intersim2/routers/event_router.hpp	/^    bool watch; \/\/ debug$/;"	m	struct:EventRouter::tArrivalEvent	typeref:typename:bool
watch	intersim2/routers/event_router.hpp	/^    bool watch; \/\/ debug$/;"	m	struct:EventRouter::tTransportEvent	typeref:typename:bool
watch	intersim2/routers/event_router.hpp	/^    bool watch;$/;"	m	struct:EventNextVCState::tWaiting	typeref:typename:bool
watchpoint_event	debug.cc	/^   watchpoint_event()$/;"	f	class:watchpoint_event	file:
watchpoint_event	debug.cc	/^   watchpoint_event(const ptx_thread_info *thd, const ptx_instruction *pI) $/;"	f	class:watchpoint_event	file:
watchpoint_event	debug.cc	/^class watchpoint_event {$/;"	c	file:
way_sel_drv1	gpuwattch/cacti/mat.h	/^    PredecBlkDrv * way_sel_drv1;$/;"	m	class:Mat	typeref:typename:PredecBlkDrv *
way_select	gpuwattch/cacti/decoder.h	/^  int   way_select;$/;"	m	class:PredecBlkDrv	typeref:typename:int
wb_addr	gpgpu-sim/l2cache.h	/^   unsigned long long int wb_addr;$/;"	m	class:memory_sub_partition	typeref:typename:unsigned long long int
wbb	gpuwattch/array.h	/^  ArrayST* wbb;$/;"	m	class:DataCache	typeref:typename:ArrayST *
wbb_reads	gpuwattch/XML_Parse.h	/^	double wbb_reads;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
wbb_reads	gpuwattch/XML_Parse.h	/^	double wbb_reads;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
wbb_reads	gpuwattch/XML_Parse.h	/^	double wbb_reads;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
wbb_size	gpuwattch/basic_components.h	/^    int missb_size, fu_size, prefetchb_size, wbb_size;$/;"	m	class:CacheDynParam	typeref:typename:int
wbb_writes	gpuwattch/XML_Parse.h	/^	double wbb_writes;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
wbb_writes	gpuwattch/XML_Parse.h	/^	double wbb_writes;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
wbb_writes	gpuwattch/XML_Parse.h	/^	double wbb_writes;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
whichspace	cuda-sim/cuda-sim.cc	/^memory_space_t whichspace( addr_t addr )$/;"	f	typeref:typename:memory_space_t
wid_from_hw_tid	gpgpu-sim/shader.h	/^inline unsigned wid_from_hw_tid(unsigned tid, unsigned warp_size){return tid\/warp_size;};$/;"	f	typeref:typename:unsigned
width	abstract_hardware_model.h	/^   int width;$/;"	m	struct:cudaArray	typeref:typename:int
width	gpuwattch/cacti/cacti_interface.h	/^  double width;$/;"	m	class:mem_array	typeref:typename:double
width_n	gpuwattch/cacti/decoder.h	/^  double width_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:Driver	typeref:typename:double[]
width_nand2_path_n	gpuwattch/cacti/decoder.h	/^  double width_nand2_path_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlkDrv	typeref:typename:double[]
width_nand2_path_p	gpuwattch/cacti/decoder.h	/^  double width_nand2_path_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlkDrv	typeref:typename:double[]
width_nand3_path_n	gpuwattch/cacti/decoder.h	/^  double width_nand3_path_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlkDrv	typeref:typename:double[]
width_nand3_path_p	gpuwattch/cacti/decoder.h	/^  double width_nand3_path_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlkDrv	typeref:typename:double[]
width_p	gpuwattch/cacti/decoder.h	/^  double width_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:Driver	typeref:typename:double[]
width_scaling	gpuwattch/interconnect.h	/^    double width_scaling, space_scaling;$/;"	m	class:interconnect	typeref:typename:double
width_write_driver_or_write_mux	gpuwattch/cacti/mat.cc	/^double Mat::width_write_driver_or_write_mux()$/;"	f	class:Mat	typeref:typename:double
win_entries	gpuwattch/logic.h	/^	int win_entries;$/;"	m	class:selection_logic	typeref:typename:int
windowed_miss_rate	gpgpu-sim/gpu-cache.cc	/^float tag_array::windowed_miss_rate( ) const$/;"	f	class:tag_array	typeref:typename:float
windowed_reg_accesses	gpuwattch/XML_Parse.h	/^	double windowed_reg_accesses;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
windowed_reg_transports	gpuwattch/XML_Parse.h	/^	double windowed_reg_transports;$/;"	m	struct:__anon6448b92c0708	typeref:typename:double
wire	intersim2/power/power_module.hpp	/^struct wire{$/;"	s
wireOptimize	intersim2/power/power_module.cpp	/^wire const & Power_Module::wireOptimize(double L){$/;"	f	class:Power_Module	typeref:typename:wire const &
wire_bw	gpuwattch/cacti/htree2.h	/^    double wire_bw;$/;"	m	class:Htree2	typeref:typename:double
wire_bw	gpuwattch/interconnect.h	/^    double wire_bw;$/;"	m	class:interconnect	typeref:typename:double
wire_cap	gpuwattch/cacti/wire.cc	/^double Wire::wire_cap (double len \/* in m *\/, bool call_from_outside)$/;"	f	class:Wire	typeref:typename:double
wire_capacitance	gpuwattch/cacti/technology.cc	/^double wire_capacitance(double wire_width, double wire_thickness, double wire_spacing,$/;"	f	typeref:typename:double
wire_capacitance	gpuwattch/technology_xeon_core.cc	/^double wire_capacitance(double wire_width, double wire_thickness, double wire_spacing,$/;"	f	typeref:typename:double
wire_horizontal	gpuwattch/cacti/nuca.h	/^         *wire_horizontal[WIRE_TYPES];$/;"	m	class:Nuca	typeref:typename:Wire * []* []
wire_inside_mat	gpuwattch/cacti/parameter.h	/^  InterconnectType wire_inside_mat;$/;"	m	class:TechnologyParameter	typeref:typename:InterconnectType
wire_is_mat_type	gpuwattch/cacti/cacti_interface.h	/^    unsigned int wire_is_mat_type;  \/\/ wire_inside_mat_type$/;"	m	class:InputParameter	typeref:typename:unsigned int
wire_length	gpuwattch/cacti/wire.h	/^    double wire_length;$/;"	m	class:Wire	typeref:typename:double
wire_length	intersim2/power/power_module.hpp	/^  double wire_length;$/;"	m	class:Power_Module	typeref:typename:double
wire_local	gpuwattch/cacti/parameter.h	/^  InterconnectType wire_local;$/;"	m	class:TechnologyParameter	typeref:typename:InterconnectType
wire_map	intersim2/power/power_module.hpp	/^  map<double, wire> wire_map;$/;"	m	class:Power_Module	typeref:typename:map<double,wire>
wire_model	gpuwattch/cacti/wire.cc	/^powerDef Wire::wire_model (double space, double size, double *delay)$/;"	f	class:Wire	typeref:typename:powerDef
wire_os_mat_type	gpuwattch/cacti/cacti_interface.h	/^    unsigned int wire_os_mat_type; \/\/ wire_outside_mat_type$/;"	m	class:InputParameter	typeref:typename:unsigned int
wire_outside_mat	gpuwattch/cacti/parameter.h	/^  InterconnectType wire_outside_mat;$/;"	m	class:TechnologyParameter	typeref:typename:InterconnectType
wire_pda	gpuwattch/cacti/nuca.h	/^    Component wire_pda;$/;"	m	class:nuca_org_t	typeref:typename:Component
wire_placement	gpuwattch/cacti/router.h	/^    enum Wire_placement wire_placement;$/;"	m	class:MCPAT_Router	typeref:enum:Wire_placement
wire_placement	gpuwattch/cacti/wire.h	/^    enum Wire_placement wire_placement;$/;"	m	class:Wire	typeref:enum:Wire_placement
wire_res	gpuwattch/cacti/wire.cc	/^Wire::wire_res (double len \/*(in m)*\/)$/;"	f	class:Wire	typeref:typename:double
wire_resistance	gpuwattch/cacti/technology.cc	/^double wire_resistance(double resistivity, double wire_width, double wire_thickness,$/;"	f	typeref:typename:double
wire_resistance	gpuwattch/technology_xeon_core.cc	/^double wire_resistance(double resistivity, double wire_width, double wire_thickness,$/;"	f	typeref:typename:double
wire_spacing	gpuwattch/cacti/wire.h	/^    double wire_spacing;$/;"	m	class:Wire	typeref:typename:double
wire_spacing_init	gpuwattch/cacti/wire.cc	/^    double Wire::wire_spacing_init;$/;"	m	class:Wire	typeref:typename:double
wire_spacing_init	gpuwattch/cacti/wire.h	/^    static double wire_spacing_init;$/;"	m	class:Wire	typeref:typename:double
wire_tot	gpuwattch/cacti/highradix.h	/^    Component wire_tot, buff_tot, crossbar_tot, arb_tot;$/;"	m	class:HighRadix	typeref:typename:Component
wire_vertical	gpuwattch/cacti/nuca.h	/^    Wire *wire_vertical[WIRE_TYPES],$/;"	m	class:Nuca	typeref:typename:Wire * []
wire_width	gpuwattch/cacti/wire.h	/^    double wire_width;$/;"	m	class:Wire	typeref:typename:double
wire_width_init	gpuwattch/cacti/wire.cc	/^    double Wire::wire_width_init;$/;"	m	class:Wire	typeref:typename:double
wire_width_init	gpuwattch/cacti/wire.h	/^    static double wire_width_init;$/;"	m	class:Wire	typeref:typename:double
withPHY	gpuwattch/XML_Parse.h	/^	bool withPHY;$/;"	m	struct:__anon6448b92c0f08	typeref:typename:bool
withPHY	gpuwattch/XML_Parse.h	/^	bool withPHY;$/;"	m	struct:__anon6448b92c1108	typeref:typename:bool
withPHY	gpuwattch/basic_components.h	/^    bool   LVDS, withPHY;$/;"	m	class:MCParam	typeref:typename:bool
withPHY	gpuwattch/basic_components.h	/^    bool   withPHY;$/;"	m	class:PCIeParam	typeref:typename:bool
with_clock_grid	gpuwattch/cacti/cacti_interface.h	/^  bool with_clock_grid;$/;"	m	class:InputParameter	typeref:typename:bool
wr_coeff	gpuwattch/basic_components.h	/^    double wr_coeff;$/;"	m	class:DRAMParam	typeref:typename:double
wr_hit_global_we_local_wb	gpgpu-sim/gpu-cache.cc	/^enum cache_request_status data_cache::wr_hit_global_we_local_wb(new_addr_type addr, unsigned cac/;"	f	class:data_cache	typeref:enum:cache_request_status
wr_hit_wb	gpgpu-sim/gpu-cache.cc	/^cache_request_status data_cache::wr_hit_wb(new_addr_type addr, unsigned cache_index, mem_fetch */;"	f	class:data_cache	typeref:typename:cache_request_status
wr_hit_we	gpgpu-sim/gpu-cache.cc	/^cache_request_status data_cache::wr_hit_we(new_addr_type addr, unsigned cache_index, mem_fetch */;"	f	class:data_cache	typeref:typename:cache_request_status
wr_hit_wt	gpgpu-sim/gpu-cache.cc	/^cache_request_status data_cache::wr_hit_wt(new_addr_type addr, unsigned cache_index, mem_fetch */;"	f	class:data_cache	typeref:typename:cache_request_status
wr_miss_no_wa	gpgpu-sim/gpu-cache.cc	/^data_cache::wr_miss_no_wa( new_addr_type addr,$/;"	f	class:data_cache	typeref:enum:cache_request_status
wr_miss_wa	gpgpu-sim/gpu-cache.cc	/^data_cache::wr_miss_wa( new_addr_type addr,$/;"	f	class:data_cache	typeref:enum:cache_request_status
wrap	cuda-sim/instructions.cc	/^unsigned wrap( unsigned x, unsigned y, unsigned mx, unsigned my, size_t elem_size )$/;"	f	typeref:typename:unsigned
write	cuda-sim/memory.cc	/^template<unsigned BSIZE> void memory_space_impl<BSIZE>::write( mem_addr_t addr, size_t length, c/;"	f	class:memory_space_impl	typeref:typename:void
write	cuda-sim/memory.h	/^   void write( unsigned offset, size_t length, const unsigned char *data )$/;"	f	class:mem_storage	typeref:typename:void
write	intersim2/power/buffer_monitor.cpp	/^void BufferMonitor::write( int input, Flit const * f ) {$/;"	f	class:BufferMonitor	typeref:typename:void
writeAc	gpuwattch/basic_components.h	/^    statsComponents writeAc;$/;"	m	class:statsDef	typeref:typename:statsComponents
writeBuffer	gpuwattch/memoryctrl.h	/^	ArrayST  * writeBuffer;$/;"	m	class:MCFrontEnd	typeref:typename:ArrayST *
writeOp	gpuwattch/cacti/cacti_interface.h	/^    powerComponents writeOp;$/;"	m	class:powerDef	typeref:typename:powerComponents
writeToFile	gpuwattch/xmlParser.cc	/^XMLError XMLNode::writeToFile(XMLCSTR filename, const char *encoding, char nFormat) const$/;"	f	class:XMLNode	typeref:typename:XMLError
write_accesses	gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon6448b92c0408	typeref:typename:double
write_accesses	gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
write_accesses	gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon6448b92c0608	typeref:typename:double
write_accesses	gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon6448b92c0808	typeref:typename:double
write_accesses	gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon6448b92c0908	typeref:typename:double
write_accesses	gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
write_accesses	gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
write_allocate_policy_t	gpgpu-sim/gpu-cache.h	/^enum write_allocate_policy_t {$/;"	g
write_backs	gpuwattch/XML_Parse.h	/^	double write_backs;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
write_backs	gpuwattch/XML_Parse.h	/^	double write_backs;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
write_backs	gpuwattch/XML_Parse.h	/^	double write_backs;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
write_energy	gpuwattch/cacti/cacti_interface.h	/^  double activate_energy, read_energy, write_energy, precharge_energy,$/;"	m	class:mem_array	typeref:typename:double
write_energy	gpuwattch/cacti/cacti_interface.h	/^  double write_energy;$/;"	m	struct:__anon592e3c280108	typeref:typename:double
write_energy	gpuwattch/cacti/uca.h	/^    double write_energy;$/;"	m	class:UCA	typeref:typename:double
write_hits	gpuwattch/XML_Parse.h	/^	double write_hits;$/;"	m	struct:__anon6448b92c0408	typeref:typename:double
write_hits	gpuwattch/XML_Parse.h	/^	double write_hits;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
write_hits	gpuwattch/XML_Parse.h	/^	double write_hits;$/;"	m	struct:__anon6448b92c0608	typeref:typename:double
write_hits	gpuwattch/XML_Parse.h	/^	double write_hits;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
write_hits	gpuwattch/XML_Parse.h	/^	double write_hits;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
write_misses	gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon6448b92c0408	typeref:typename:double
write_misses	gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon6448b92c0508	typeref:typename:double
write_misses	gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon6448b92c0608	typeref:typename:double
write_misses	gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon6448b92c0808	typeref:typename:double
write_misses	gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon6448b92c0908	typeref:typename:double
write_misses	gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon6448b92c0a08	typeref:typename:double
write_misses	gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon6448b92c0b08	typeref:typename:double
write_policy_t	gpgpu-sim/gpu-cache.h	/^enum write_policy_t {$/;"	g
writeback	gpgpu-sim/shader.cc	/^bool opndcoll_rfu_t::writeback( const warp_inst_t &inst )$/;"	f	class:opndcoll_rfu_t	typeref:typename:bool
writeback	gpgpu-sim/shader.cc	/^void ldst_unit::writeback()$/;"	f	class:ldst_unit	typeref:typename:void
writeback	gpgpu-sim/shader.cc	/^void shader_core_ctx::writeback()$/;"	f	class:shader_core_ctx	typeref:typename:void
writes	gpuwattch/basic_components.h	/^    double executionTime, reads, writes;$/;"	m	class:MCParam	typeref:typename:double
wrp_size	gpgpu-sim/gpu-sim.cc	/^int gpgpu_sim::wrp_size() const$/;"	f	class:gpgpu_sim	typeref:typename:int
wst_begin	gpgpu-sim/warp_status.h	/^    	iterator wst_begin() { return statusTable.begin();}$/;"	f	class:WST	typeref:typename:iterator
wst_end	gpgpu-sim/warp_status.h	/^    	iterator wst_end() { return statusTable.end();}$/;"	f	class:WST	typeref:typename:iterator
wt	gpuwattch/cacti/cacti_interface.h	/^    enum Wire_type wt;$/;"	m	class:InputParameter	typeref:enum:Wire_type
wt	gpuwattch/cacti/cacti_interface.h	/^  enum Wire_type wt;$/;"	m	class:mem_array	typeref:enum:Wire_type
wt	gpuwattch/cacti/htree2.h	/^    enum Wire_type wt;$/;"	m	class:Htree2	typeref:enum:Wire_type
wt	gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router	typeref:typename:double
wt	gpuwattch/cacti/wire.h	/^    enum Wire_type wt;$/;"	m	class:Wire	typeref:enum:Wire_type
wt	gpuwattch/interconnect.h	/^    enum Wire_type wt;$/;"	m	class:interconnect	typeref:enum:Wire_type
wt_max	gpuwattch/cacti/nuca.h	/^    int wt_min, wt_max;$/;"	m	class:Nuca	typeref:typename:int
wt_min	gpuwattch/cacti/nuca.h	/^    int wt_min, wt_max;$/;"	m	class:Nuca	typeref:typename:int
wtype	gpuwattch/cacti/router.h	/^    enum Wire_type wtype;$/;"	m	class:MCPAT_Router	typeref:enum:Wire_type
x	abstract_hardware_model.h	/^   int                        x;$/;"	m	struct:cudaChannelFormatDesc	typeref:typename:int
x	abstract_hardware_model.h	/^   unsigned int x, y, z;$/;"	m	struct:dim3	typeref:typename:unsigned int
x	cuda-sim/cuda-math.h	/^      float x, y, z, w;$/;"	m	struct:cuda_math::float4	typeref:typename:float
x	cuda-sim/cuda-math.h	/^      float x, y;$/;"	m	struct:cuda_math::float2	typeref:typename:float
x	cuda-sim/cuda-math.h	/^      int x, y, z, w;$/;"	m	struct:cuda_math::int4	typeref:typename:int
x	cuda-sim/cuda-math.h	/^      unsigned int x, y, z, w;$/;"	m	struct:cuda_math::uint4	typeref:typename:unsigned int
x86	gpuwattch/XML_Parse.h	/^	bool x86;$/;"	m	struct:__anon6448b92c0708	typeref:typename:bool
x86	gpuwattch/basic_components.h	/^	bool x86;$/;"	m	class:CoreDynParam	typeref:typename:bool
x86	gpuwattch/logic.h	/^	bool x86;$/;"	m	class:inst_decoder	typeref:typename:bool
xbar0	gpuwattch/XML_Parse.h	/^	xbar0_systemNoC xbar0;$/;"	m	struct:__anon6448b92c0d08	typeref:typename:xbar0_systemNoC
xbar0_systemNoC	gpuwattch/XML_Parse.h	/^} xbar0_systemNoC;$/;"	t	typeref:struct:__anon6448b92c0c08
xbar_rfu	gpuwattch/core.h	/^	Crossbar * xbar_rfu;$/;"	m	class:RegFU	typeref:typename:Crossbar *
xbar_shared	gpuwattch/core.h	/^   Crossbar *xbar_shared;$/;"	m	class:LoadStoreU	typeref:typename:Crossbar *
xfopen	gpuwattch/xmlParser.cc	/^        static inline FILE *xfopen(XMLCSTR filename,XMLCSTR mode) { return _wfopen(filename,mode/;"	f	typeref:typename:FILE *	file:
xfopen	gpuwattch/xmlParser.cc	/^        static inline FILE *xfopen(XMLCSTR filename,XMLCSTR mode) { return fopen(filename,mode);/;"	f	typeref:typename:FILE *	file:
xfopen	gpuwattch/xmlParser.cc	/^        static inline FILE *xfopen(XMLCSTR filename,XMLCSTR mode)$/;"	f	typeref:typename:FILE *	file:
xml_filename	gpuwattch/gpgpu_sim_wrapper.h	/^    char *xml_filename;$/;"	m	class:gpgpu_sim_wrapper	typeref:typename:char *
xmltoa	gpuwattch/xmlParser.cc	/^XMLCSTR xmltoa(XMLCSTR t,XMLCSTR v){ if (t)       return  t; return v; }$/;"	f	typeref:typename:XMLCSTR
xmltob	gpuwattch/xmlParser.cc	/^           char    xmltob(XMLCSTR t,int     v){ if (t) return (char)wcstol(t,NULL,10); return v;/;"	f	typeref:typename:char
xmltob	gpuwattch/xmlParser.cc	/^           char    xmltob(XMLCSTR t,int     v){ if (t) return (char)wstol(t,NULL,10); return v; /;"	f	typeref:typename:char
xmltob	gpuwattch/xmlParser.cc	/^        char    xmltob(XMLCSTR t,int     v){ if (t&&(*t)) return (char)_wtoi(t); return v; }$/;"	f	typeref:typename:char
xmltob	gpuwattch/xmlParser.cc	/^    char    xmltob(XMLCSTR t,char    v){ if (t&&(*t)) return (char)atoi(t); return v; }$/;"	f	typeref:typename:char
xmltoc	gpuwattch/xmlParser.cc	/^XMLCHAR xmltoc(XMLCSTR t,XMLCHAR v){ if (t&&(*t)) return *t; return v; }$/;"	f	typeref:typename:XMLCHAR
xmltof	gpuwattch/xmlParser.cc	/^		double  xmltof(XMLCSTR t,double  v){ if (t&&(*t)) wscanf(t, "%f", &v); \/*v=_wtof(t);*\/ retur/;"	f	typeref:typename:double
xmltof	gpuwattch/xmlParser.cc	/^        double  xmltof(XMLCSTR t,double  v){ if (t&&(*t)) wscanf(t, "%f", &v); \/*v=_wtof(t);*\//;"	f	typeref:typename:double
xmltof	gpuwattch/xmlParser.cc	/^    double  xmltof(XMLCSTR t,double  v){ if (t&&(*t)) return atof(t); return v; }$/;"	f	typeref:typename:double
xmltoi	gpuwattch/xmlParser.cc	/^           int     xmltoi(XMLCSTR t,int     v){ if (t) return (int)wcstol(t,NULL,10); return v; /;"	f	typeref:typename:int
xmltoi	gpuwattch/xmlParser.cc	/^           int     xmltoi(XMLCSTR t,int     v){ if (t) return (int)wstol(t,NULL,10); return v; }$/;"	f	typeref:typename:int
xmltoi	gpuwattch/xmlParser.cc	/^        int     xmltoi(XMLCSTR t,int     v){ if (t&&(*t)) return _wtoi(t); return v; }$/;"	f	typeref:typename:int
xmltoi	gpuwattch/xmlParser.cc	/^    int     xmltoi(XMLCSTR t,int     v){ if (t&&(*t)) return atoi(t); return v; }$/;"	f	typeref:typename:int
xmltol	gpuwattch/xmlParser.cc	/^           long    xmltol(XMLCSTR t,long    v){ if (t) return wcstol(t,NULL,10); return v; }$/;"	f	typeref:typename:long
xmltol	gpuwattch/xmlParser.cc	/^           long    xmltol(XMLCSTR t,long    v){ if (t) return wstol(t,NULL,10); return v; }$/;"	f	typeref:typename:long
xmltol	gpuwattch/xmlParser.cc	/^        long    xmltol(XMLCSTR t,long    v){ if (t&&(*t)) return _wtol(t); return v; }$/;"	f	typeref:typename:long
xmltol	gpuwattch/xmlParser.cc	/^    long    xmltol(XMLCSTR t,long    v){ if (t&&(*t)) return atol(t); return v; }$/;"	f	typeref:typename:long
xor_impl	cuda-sim/instructions.cc	/^void xor_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f	typeref:typename:void
xstrcpy	gpuwattch/xmlParser.cc	/^        static inline XMLSTR xstrcpy(XMLSTR c1, XMLCSTR c2) { return (XMLSTR)strcpy(c1,c2); }$/;"	f	typeref:typename:XMLSTR	file:
xstrcpy	gpuwattch/xmlParser.cc	/^        static inline XMLSTR xstrcpy(XMLSTR c1, XMLCSTR c2) { return (XMLSTR)wcscpy(c1,c2); }$/;"	f	typeref:typename:XMLSTR	file:
xstricmp	gpuwattch/xmlParser.cc	/^            static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return _stricmp(c1,c2); }$/;"	f	typeref:typename:int	file:
xstricmp	gpuwattch/xmlParser.cc	/^            static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return stricmp(c1,c2); }$/;"	f	typeref:typename:int	file:
xstricmp	gpuwattch/xmlParser.cc	/^           static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return wcscasecmp(c1,c2); }$/;"	f	typeref:typename:int	file:
xstricmp	gpuwattch/xmlParser.cc	/^           static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return wscasecmp(c1,c2); }$/;"	f	typeref:typename:int	file:
xstricmp	gpuwattch/xmlParser.cc	/^        static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return _wcsicmp(c1,c2); }$/;"	f	typeref:typename:int	file:
xstricmp	gpuwattch/xmlParser.cc	/^        static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return strcasecmp(c1,c2); }$/;"	f	typeref:typename:int	file:
xstrlen	gpuwattch/xmlParser.cc	/^        int xstrlen(XMLCSTR c)   { return wcslen(c); }$/;"	f	typeref:typename:int
xstrlen	gpuwattch/xmlParser.cc	/^        static inline int xstrlen(XMLCSTR c)   { return (int)strlen(c); }$/;"	f	typeref:typename:int	file:
xstrlen	gpuwattch/xmlParser.cc	/^        static inline int xstrlen(XMLCSTR c)   { return (int)wcslen(c); }$/;"	f	typeref:typename:int	file:
xstrlen	gpuwattch/xmlParser.cc	/^        static inline int xstrlen(XMLCSTR c)   { return strlen(c); }$/;"	f	typeref:typename:int	file:
xstrncmp	gpuwattch/xmlParser.cc	/^           static inline int xstrncmp(XMLCSTR c1, XMLCSTR c2, int l) { return wcsncmp(c1,c2,l);}$/;"	f	typeref:typename:int	file:
xstrncmp	gpuwattch/xmlParser.cc	/^           static inline int xstrncmp(XMLCSTR c1, XMLCSTR c2, int l) { return wsncmp(c1,c2,l);}$/;"	f	typeref:typename:int	file:
xstrncmp	gpuwattch/xmlParser.cc	/^        static inline int xstrncmp(XMLCSTR c1, XMLCSTR c2, int l) { return strncmp(c1,c2,l);}$/;"	f	typeref:typename:int	file:
xstrncmp	gpuwattch/xmlParser.cc	/^        static inline int xstrncmp(XMLCSTR c1, XMLCSTR c2, int l) { return wcsncmp(c1,c2,l);}$/;"	f	typeref:typename:int	file:
xstrnicmp	gpuwattch/xmlParser.cc	/^            static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return _strnicmp(c1,c2,/;"	f	typeref:typename:int	file:
xstrnicmp	gpuwattch/xmlParser.cc	/^            static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return strnicmp(c1,c2,l/;"	f	typeref:typename:int	file:
xstrnicmp	gpuwattch/xmlParser.cc	/^           static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return wcsncasecmp(c1,c2/;"	f	typeref:typename:int	file:
xstrnicmp	gpuwattch/xmlParser.cc	/^           static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return wsncasecmp(c1,c2,/;"	f	typeref:typename:int	file:
xstrnicmp	gpuwattch/xmlParser.cc	/^        static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return _wcsnicmp(c1,c2,l);}$/;"	f	typeref:typename:int	file:
xstrnicmp	gpuwattch/xmlParser.cc	/^        static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return strncasecmp(c1,c2,l)/;"	f	typeref:typename:int	file:
xstrstr	gpuwattch/xmlParser.cc	/^        static inline XMLSTR xstrstr(XMLCSTR c1, XMLCSTR c2) { return (XMLSTR)strstr(c1,c2); }$/;"	f	typeref:typename:XMLSTR	file:
xstrstr	gpuwattch/xmlParser.cc	/^        static inline XMLSTR xstrstr(XMLCSTR c1, XMLCSTR c2) { return (XMLSTR)wcsstr(c1,c2); }$/;"	f	typeref:typename:XMLSTR	file:
xy_yx_cmesh	intersim2/networks/cmesh.cpp	/^void xy_yx_cmesh( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
xy_yx_mesh	intersim2/routefunc.cpp	/^void xy_yx_mesh( const Router *r, const Flit *f, $/;"	f	typeref:typename:void
xy_yx_no_express_cmesh	intersim2/networks/cmesh.cpp	/^void xy_yx_no_express_cmesh( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
xyyx_flatfly	intersim2/networks/flatfly_onchip.cpp	/^void xyyx_flatfly( const Router *r, const Flit *f, int in_channel, $/;"	f	typeref:typename:void
y	abstract_hardware_model.h	/^   int                        y;$/;"	m	struct:cudaChannelFormatDesc	typeref:typename:int
y	abstract_hardware_model.h	/^   unsigned int x, y, z;$/;"	m	struct:dim3	typeref:typename:unsigned int
y	cuda-sim/cuda-math.h	/^      float x, y, z, w;$/;"	m	struct:cuda_math::float4	typeref:typename:float
y	cuda-sim/cuda-math.h	/^      float x, y;$/;"	m	struct:cuda_math::float2	typeref:typename:float
y	cuda-sim/cuda-math.h	/^      int x, y, z, w;$/;"	m	struct:cuda_math::int4	typeref:typename:int
y	cuda-sim/cuda-math.h	/^      unsigned int x, y, z, w;$/;"	m	struct:cuda_math::uint4	typeref:typename:unsigned int
y.tab.c	intersim2/Makefile	/^y.tab.c y.tab.h: config.y$/;"	t
y.tab.h	intersim2/Makefile	/^y.tab.c y.tab.h: config.y$/;"	t
yy_accept	intersim2/lex.yy.c	/^static yyconst flex_int16_t yy_accept[36] =$/;"	v	typeref:typename:yyconst flex_int16_t[36]	file:
yy_act	intersim2/lex.yy.c	/^	register int yy_act;$/;"	v	typeref:typename:register int
yy_amount_of_matched_text	intersim2/lex.yy.c	/^		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;$/;"	v	typeref:typename:int
yy_at_bol	intersim2/lex.yy.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_base	intersim2/lex.yy.c	/^static yyconst flex_int16_t yy_base[42] =$/;"	v	typeref:typename:yyconst flex_int16_t[42]	file:
yy_bp	intersim2/lex.yy.c	/^	register char *yy_cp, *yy_bp;$/;"	v	typeref:typename:register char **
yy_bs_column	intersim2/lex.yy.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_bs_lineno	intersim2/lex.yy.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_buf_pos	intersim2/lex.yy.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	typeref:typename:char *	file:
yy_buf_size	intersim2/lex.yy.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	typeref:typename:yy_size_t	file:
yy_buffer_stack	intersim2/lex.yy.c	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	typeref:typename:YY_BUFFER_STATE *	file:
yy_buffer_stack_max	intersim2/lex.yy.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	typeref:typename:size_t	file:
yy_buffer_stack_top	intersim2/lex.yy.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	typeref:typename:size_t	file:
yy_buffer_state	intersim2/lex.yy.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	intersim2/lex.yy.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_c	intersim2/lex.yy.c	/^			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];$/;"	v	typeref:typename:register YY_CHAR
yy_c_buf_p	intersim2/lex.yy.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	typeref:typename:char *	file:
yy_ch_buf	intersim2/lex.yy.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	typeref:typename:char *	file:
yy_chk	intersim2/lex.yy.c	/^static yyconst flex_int16_t yy_chk[86] =$/;"	v	typeref:typename:yyconst flex_int16_t[86]	file:
yy_cp	intersim2/lex.yy.c	/^	register char *yy_cp, *yy_bp;$/;"	v	typeref:typename:register char *
yy_create_buffer	intersim2/lex.yy.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f	typeref:typename:YY_BUFFER_STATE
yy_current_state	intersim2/lex.yy.c	/^	register yy_state_type yy_current_state;$/;"	v	typeref:typename:register yy_state_type
yy_def	intersim2/lex.yy.c	/^static yyconst flex_int16_t yy_def[42] =$/;"	v	typeref:typename:yyconst flex_int16_t[42]	file:
yy_delete_buffer	intersim2/lex.yy.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f	typeref:typename:void
yy_did_buffer_switch_on_eof	intersim2/lex.yy.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	typeref:typename:int	file:
yy_ec	intersim2/lex.yy.c	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	typeref:typename:yyconst flex_int32_t[256]	file:
yy_fatal_error	intersim2/lex.yy.c	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	typeref:typename:void	file:
yy_fill_buffer	intersim2/lex.yy.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_flex_debug	intersim2/lex.yy.c	/^int yy_flex_debug = 0;$/;"	v	typeref:typename:int
yy_flex_strlen	intersim2/lex.yy.c	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	typeref:typename:int	file:
yy_flex_strncpy	intersim2/lex.yy.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	typeref:typename:void	file:
yy_flush_buffer	intersim2/lex.yy.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f	typeref:typename:void
yy_get_next_buffer	intersim2/lex.yy.c	/^static int yy_get_next_buffer (void)$/;"	f	typeref:typename:int	file:
yy_get_previous_state	intersim2/lex.yy.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	typeref:typename:yy_state_type	file:
yy_hold_char	intersim2/lex.yy.c	/^static char yy_hold_char;$/;"	v	typeref:typename:char	file:
yy_init	intersim2/lex.yy.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	typeref:typename:int	file:
yy_init_buffer	intersim2/lex.yy.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	typeref:typename:void	file:
yy_init_globals	intersim2/lex.yy.c	/^static int yy_init_globals (void)$/;"	f	typeref:typename:int	file:
yy_input_file	intersim2/lex.yy.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	typeref:typename:FILE *	file:
yy_is_interactive	intersim2/lex.yy.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_is_our_buffer	intersim2/lex.yy.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_last_accepting_cpos	intersim2/lex.yy.c	/^static char *yy_last_accepting_cpos;$/;"	v	typeref:typename:char *	file:
yy_last_accepting_state	intersim2/lex.yy.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	typeref:typename:yy_state_type	file:
yy_load_buffer_state	intersim2/lex.yy.c	/^static void yy_load_buffer_state  (void)$/;"	f	typeref:typename:void	file:
yy_meta	intersim2/lex.yy.c	/^static yyconst flex_int32_t yy_meta[15] =$/;"	v	typeref:typename:yyconst flex_int32_t[15]	file:
yy_n_chars	intersim2/lex.yy.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	typeref:typename:int	file:
yy_n_chars	intersim2/lex.yy.c	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	typeref:typename:int	file:
yy_new_buffer	intersim2/lex.yy.c	/^#define yy_new_buffer /;"	d	file:
yy_next_state	intersim2/lex.yy.c	/^			yy_state_type yy_next_state;$/;"	v	typeref:typename:yy_state_type
yy_nxt	intersim2/lex.yy.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	typeref:typename:flex_int32_t	file:
yy_nxt	intersim2/lex.yy.c	/^static yyconst flex_int16_t yy_nxt[86] =$/;"	v	typeref:typename:yyconst flex_int16_t[86]	file:
yy_reduce_print	intersim2/y.tab.c	/^yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule)$/;"	f	typeref:typename:void	file:
yy_scan_buffer	intersim2/lex.yy.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f	typeref:typename:YY_BUFFER_STATE
yy_scan_bytes	intersim2/lex.yy.c	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )$/;"	f	typeref:typename:YY_BUFFER_STATE
yy_scan_string	intersim2/lex.yy.c	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f	typeref:typename:YY_BUFFER_STATE
yy_set_bol	intersim2/lex.yy.c	/^#define yy_set_bol(/;"	d	file:
yy_set_interactive	intersim2/lex.yy.c	/^#define yy_set_interactive(/;"	d	file:
yy_size_t	intersim2/lex.yy.c	/^typedef size_t yy_size_t;$/;"	t	typeref:typename:size_t	file:
yy_stack_print	intersim2/y.tab.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	typeref:typename:void	file:
yy_start	intersim2/lex.yy.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	typeref:typename:int	file:
yy_state_type	intersim2/lex.yy.c	/^typedef int yy_state_type;$/;"	t	typeref:typename:int	file:
yy_switch_to_buffer	intersim2/lex.yy.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f	typeref:typename:void
yy_symbol_print	intersim2/y.tab.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	typeref:typename:void	file:
yy_symbol_value_print	intersim2/y.tab.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	typeref:typename:void	file:
yy_trans_info	intersim2/lex.yy.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	intersim2/lex.yy.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	typeref:typename:yy_state_type	file:
yy_verify	intersim2/lex.yy.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	typeref:typename:flex_int32_t	file:
yyalloc	intersim2/lex.yy.c	/^void *yyalloc (yy_size_t  size )$/;"	f	typeref:typename:void *
yyalloc	intersim2/y.tab.c	/^union yyalloc$/;"	u	file:
yychar	intersim2/y.tab.c	/^int yychar;$/;"	v	typeref:typename:int
yycheck	intersim2/y.tab.c	/^static const yytype_int8 yycheck[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yyclearin	intersim2/y.tab.c	/^#define yyclearin /;"	d	file:
yyconst	intersim2/lex.yy.c	/^#define yyconst /;"	d	file:
yyconst	intersim2/lex.yy.c	/^#define yyconst$/;"	d	file:
yydebug	intersim2/y.tab.c	/^int yydebug;$/;"	v	typeref:typename:int
yydefact	intersim2/y.tab.c	/^static const yytype_uint8 yydefact[] =$/;"	v	typeref:typename:const yytype_uint8[]	file:
yydefgoto	intersim2/y.tab.c	/^static const yytype_int8 yydefgoto[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yydestruct	intersim2/y.tab.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	typeref:typename:void	file:
yyensure_buffer_stack	intersim2/lex.yy.c	/^static void yyensure_buffer_stack (void)$/;"	f	typeref:typename:void	file:
yyerrok	intersim2/y.tab.c	/^#define yyerrok /;"	d	file:
yyerror	intersim2/lex.yy.c	/^void yyerror( char * msg )$/;"	f	typeref:typename:void
yyfree	intersim2/lex.yy.c	/^void yyfree (void * ptr )$/;"	f	typeref:typename:void
yyget_debug	intersim2/lex.yy.c	/^int yyget_debug  (void)$/;"	f	typeref:typename:int
yyget_in	intersim2/lex.yy.c	/^FILE *yyget_in  (void)$/;"	f	typeref:typename:FILE *
yyget_leng	intersim2/lex.yy.c	/^int yyget_leng  (void)$/;"	f	typeref:typename:int
yyget_lineno	intersim2/lex.yy.c	/^int yyget_lineno  (void)$/;"	f	typeref:typename:int
yyget_out	intersim2/lex.yy.c	/^FILE *yyget_out  (void)$/;"	f	typeref:typename:FILE *
yyget_text	intersim2/lex.yy.c	/^char *yyget_text  (void)$/;"	f	typeref:typename:char *
yyin	intersim2/lex.yy.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v	typeref:typename:FILE *
yyinput	intersim2/lex.yy.c	/^    static int yyinput (void)$/;"	f	typeref:typename:int	file:
yyleng	intersim2/lex.yy.c	/^int yyleng;$/;"	v	typeref:typename:int
yyless	intersim2/lex.yy.c	/^#define yyless(/;"	d	file:
yylex_destroy	intersim2/lex.yy.c	/^int yylex_destroy  (void)$/;"	f	typeref:typename:int
yylineno	intersim2/lex.yy.c	/^int yylineno = 1;$/;"	v	typeref:typename:int
yylval	intersim2/y.tab.c	/^YYSTYPE yylval;$/;"	v	typeref:typename:YYSTYPE
yymore	intersim2/lex.yy.c	/^#define yymore(/;"	d	file:
yynerrs	intersim2/y.tab.c	/^int yynerrs;$/;"	v	typeref:typename:int
yyout	intersim2/lex.yy.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v	typeref:typename:FILE **
yypact	intersim2/y.tab.c	/^static const yytype_int8 yypact[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yypact_value_is_default	intersim2/y.tab.c	/^#define yypact_value_is_default(/;"	d	file:
yyparse	intersim2/y.tab.c	/^yyparse (void)$/;"	f	typeref:typename:int
yypgoto	intersim2/y.tab.c	/^static const yytype_int8 yypgoto[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yypop_buffer_state	intersim2/lex.yy.c	/^void yypop_buffer_state (void)$/;"	f	typeref:typename:void
yypush_buffer_state	intersim2/lex.yy.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f	typeref:typename:void
yyr1	intersim2/y.tab.c	/^static const yytype_uint8 yyr1[] =$/;"	v	typeref:typename:const yytype_uint8[]	file:
yyr2	intersim2/y.tab.c	/^static const yytype_uint8 yyr2[] =$/;"	v	typeref:typename:const yytype_uint8[]	file:
yyrealloc	intersim2/lex.yy.c	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f	typeref:typename:void *
yyrestart	intersim2/lex.yy.c	/^    void yyrestart  (FILE * input_file )$/;"	f	typeref:typename:void
yyrline	intersim2/y.tab.c	/^static const yytype_uint8 yyrline[] =$/;"	v	typeref:typename:const yytype_uint8[]	file:
yyset_debug	intersim2/lex.yy.c	/^void yyset_debug (int  bdebug )$/;"	f	typeref:typename:void
yyset_in	intersim2/lex.yy.c	/^void yyset_in (FILE *  in_str )$/;"	f	typeref:typename:void
yyset_lineno	intersim2/lex.yy.c	/^void yyset_lineno (int  line_number )$/;"	f	typeref:typename:void
yyset_out	intersim2/lex.yy.c	/^void yyset_out (FILE *  out_str )$/;"	f	typeref:typename:void
yyss_alloc	intersim2/y.tab.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	typeref:typename:yytype_int16	file:
yystos	intersim2/y.tab.c	/^static const yytype_uint8 yystos[] =$/;"	v	typeref:typename:const yytype_uint8[]	file:
yystpcpy	intersim2/y.tab.c	/^#   define yystpcpy /;"	d	file:
yystpcpy	intersim2/y.tab.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	typeref:typename:char *	file:
yystrlen	intersim2/y.tab.c	/^#   define yystrlen /;"	d	file:
yystrlen	intersim2/y.tab.c	/^yystrlen (const char *yystr)$/;"	f	typeref:typename:YYSIZE_T	file:
yysyntax_error	intersim2/y.tab.c	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	typeref:typename:int	file:
yytable	intersim2/y.tab.c	/^static const yytype_uint8 yytable[] =$/;"	v	typeref:typename:const yytype_uint8[]	file:
yytable_value_is_error	intersim2/y.tab.c	/^#define yytable_value_is_error(/;"	d	file:
yyterminate	intersim2/lex.yy.c	/^#define yyterminate(/;"	d	file:
yytext	intersim2/lex.yy.c	/^char *yytext;$/;"	v	typeref:typename:char *
yytext_ptr	intersim2/lex.yy.c	/^#define yytext_ptr /;"	d	file:
yytname	intersim2/y.tab.c	/^static const char *const yytname[] =$/;"	v	typeref:typename:const char * const[]	file:
yytnamerr	intersim2/y.tab.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	typeref:typename:YYSIZE_T	file:
yytokentype	intersim2/y.tab.c	/^  enum yytokentype$/;"	g	file:
yytokentype	intersim2/y.tab.h	/^  enum yytokentype$/;"	g
yytoknum	intersim2/y.tab.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	typeref:typename:const yytype_uint16[]	file:
yytranslate	intersim2/y.tab.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	typeref:typename:const yytype_uint8[]	file:
yytype_int16	intersim2/y.tab.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	typeref:typename:YYTYPE_INT16	file:
yytype_int16	intersim2/y.tab.c	/^typedef short int yytype_int16;$/;"	t	typeref:typename:short int	file:
yytype_int8	intersim2/y.tab.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	typeref:typename:YYTYPE_INT8	file:
yytype_int8	intersim2/y.tab.c	/^typedef signed char yytype_int8;$/;"	t	typeref:typename:signed char	file:
yytype_uint16	intersim2/y.tab.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	typeref:typename:YYTYPE_UINT16	file:
yytype_uint16	intersim2/y.tab.c	/^typedef unsigned short int yytype_uint16;$/;"	t	typeref:typename:unsigned short int	file:
yytype_uint8	intersim2/y.tab.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	typeref:typename:YYTYPE_UINT8	file:
yytype_uint8	intersim2/y.tab.c	/^typedef unsigned char yytype_uint8;$/;"	t	typeref:typename:unsigned char	file:
yyunput	intersim2/lex.yy.c	/^    static void yyunput (int c, register char * yy_bp )$/;"	f	typeref:typename:void	file:
yyvs_alloc	intersim2/y.tab.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	typeref:typename:YYSTYPE	file:
yywrap	intersim2/lex.yy.c	/^int yywrap()$/;"	f	typeref:typename:int
z	abstract_hardware_model.h	/^   int                        z;$/;"	m	struct:cudaChannelFormatDesc	typeref:typename:int
z	abstract_hardware_model.h	/^   unsigned int x, y, z;$/;"	m	struct:dim3	typeref:typename:unsigned int
z	cuda-sim/cuda-math.h	/^      float x, y, z, w;$/;"	m	struct:cuda_math::float4	typeref:typename:float
z	cuda-sim/cuda-math.h	/^      int x, y, z, w;$/;"	m	struct:cuda_math::int4	typeref:typename:int
z	cuda-sim/cuda-math.h	/^      unsigned int x, y, z, w;$/;"	m	struct:cuda_math::uint4	typeref:typename:unsigned int
zext	cuda-sim/instructions.cc	/^ptx_reg_t zext( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_m/;"	f	typeref:typename:ptx_reg_t
~AnyNet	intersim2/networks/anynet.cpp	/^AnyNet::~AnyNet(){$/;"	f	class:AnyNet
~ArrayST	gpuwattch/array.cc	/^ArrayST:: ~ArrayST()$/;"	f	class:ArrayST
~Bank	gpuwattch/cacti/bank.cc	/^Bank::~Bank()$/;"	f	class:Bank
~BatchTrafficManager	intersim2/batchtrafficmanager.cpp	/^BatchTrafficManager::~BatchTrafficManager( )$/;"	f	class:BatchTrafficManager
~BranchPredictor	gpuwattch/core.cc	/^BranchPredictor ::~BranchPredictor(){$/;"	f	class:BranchPredictor
~Buffer	intersim2/buffer.cpp	/^Buffer::~Buffer()$/;"	f	class:Buffer
~BufferState	intersim2/buffer_state.cpp	/^BufferState::~BufferState()$/;"	f	class:BufferState
~CacheDynParam	gpuwattch/basic_components.h	/^    ~CacheDynParam(){};$/;"	f	class:CacheDynParam
~Channel	intersim2/channel.hpp	/^  virtual ~Channel() {}$/;"	f	class:Channel
~ChaosRouter	intersim2/routers/chaos_router.cpp	/^ChaosRouter::~ChaosRouter( )$/;"	f	class:ChaosRouter
~Component	gpuwattch/cacti/component.cc	/^Component::~Component()$/;"	f	class:Component
~Core	gpuwattch/core.cc	/^Core ::~Core(){$/;"	f	class:Core
~CoreDynParam	gpuwattch/basic_components.h	/^    ~CoreDynParam(){};$/;"	f	class:CoreDynParam
~Credit	intersim2/credit.hpp	/^  ~Credit() {}$/;"	f	class:Credit
~Crossbar	gpuwattch/cacti/crossbar.cc	/^Crossbar::~Crossbar(){}$/;"	f	class:Crossbar
~DRAMParam	gpuwattch/basic_components.h	/^    ~DRAMParam(){};$/;"	f	class:DRAMParam
~DataCache	gpuwattch/array.h	/^  ~DataCache(){$/;"	f	class:DataCache
~EXECU	gpuwattch/core.cc	/^EXECU ::~EXECU(){$/;"	f	class:EXECU
~EventRouter	intersim2/routers/event_router.cpp	/^EventRouter::~EventRouter( )$/;"	f	class:EventRouter
~FlashController	gpuwattch/iocontrollers.h	/^    ~FlashController(){};$/;"	f	class:FlashController
~Flit	intersim2/flit.hpp	/^  ~Flit() {}$/;"	f	class:Flit
~GPUTrafficManager	intersim2/gputrafficmanager.cpp	/^GPUTrafficManager::~GPUTrafficManager()$/;"	f	class:GPUTrafficManager
~HighRadix	gpuwattch/cacti/highradix.cc	/^HighRadix::~HighRadix()$/;"	f	class:HighRadix
~Htree2	gpuwattch/cacti/htree2.h	/^    ~Htree2() {};$/;"	f	class:Htree2
~IQRouter	intersim2/routers/iq_router.cpp	/^IQRouter::~IQRouter( )$/;"	f	class:IQRouter
~InjectionProcess	intersim2/injection.hpp	/^  virtual ~InjectionProcess() {}$/;"	f	class:InjectionProcess
~InstCache	gpuwattch/array.h	/^  ~InstCache(){$/;"	f	class:InstCache
~InstFetchU	gpuwattch/core.cc	/^InstFetchU ::~InstFetchU(){$/;"	f	class:InstFetchU
~InterconnectInterface	intersim2/interconnect_interface.cpp	/^InterconnectInterface::~InterconnectInterface()$/;"	f	class:InterconnectInterface
~L2interface	gpgpu-sim/l2cache.h	/^    virtual ~L2interface() {}$/;"	f	class:L2interface
~LoadStoreU	gpuwattch/core.cc	/^LoadStoreU ::~LoadStoreU(){$/;"	f	class:LoadStoreU
~MCBackend	gpuwattch/memoryctrl.h	/^    ~MCBackend(){};$/;"	f	class:MCBackend
~MCFrontEnd	gpuwattch/memoryctrl.cc	/^MCFrontEnd ::~MCFrontEnd(){$/;"	f	class:MCFrontEnd
~MCPAT_Arbiter	gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::~MCPAT_Arbiter(){}$/;"	f	class:MCPAT_Arbiter
~MCPAT_Router	gpuwattch/cacti/router.cc	/^MCPAT_Router::~MCPAT_Router(){}$/;"	f	class:MCPAT_Router
~MCPHY	gpuwattch/memoryctrl.h	/^    ~MCPHY(){};$/;"	f	class:MCPHY
~MCParam	gpuwattch/basic_components.h	/^    ~MCParam(){};$/;"	f	class:MCParam
~Mat	gpuwattch/cacti/mat.cc	/^Mat::~Mat()$/;"	f	class:Mat
~MaxSizeMatch	intersim2/allocators/maxsize.cpp	/^MaxSizeMatch::~MaxSizeMatch( )$/;"	f	class:MaxSizeMatch
~MemManU	gpuwattch/core.cc	/^MemManU ::~MemManU(){$/;"	f	class:MemManU
~MemoryController	gpuwattch/memoryctrl.cc	/^MemoryController ::~MemoryController(){$/;"	f	class:MemoryController
~Module	intersim2/module.hpp	/^  virtual ~Module( ) { }$/;"	f	class:Module
~NIUController	gpuwattch/iocontrollers.h	/^    ~NIUController(){};$/;"	f	class:NIUController
~NIUParam	gpuwattch/basic_components.h	/^    ~NIUParam(){};$/;"	f	class:NIUParam
~Network	intersim2/networks/network.cpp	/^Network::~Network( )$/;"	f	class:Network
~NoC	gpuwattch/noc.cc	/^NoC ::~NoC(){$/;"	f	class:NoC
~NoCParam	gpuwattch/basic_components.h	/^    ~NoCParam(){};$/;"	f	class:NoCParam
~Nuca	gpuwattch/cacti/nuca.cc	/^Nuca::~Nuca(){$/;"	f	class:Nuca
~OptionParser	option_parser.cc	/^   ~OptionParser() $/;"	f	class:OptionParser	file:
~OptionRegistry	option_parser.cc	/^   virtual ~OptionRegistry() {}$/;"	f	class:OptionRegistry	file:
~OptionRegistryInterface	option_parser.cc	/^   virtual ~OptionRegistryInterface() {}$/;"	f	class:OptionRegistryInterface	file:
~PCIeController	gpuwattch/iocontrollers.h	/^    ~PCIeController(){};$/;"	f	class:PCIeController
~PCIeParam	gpuwattch/basic_components.h	/^    ~PCIeParam(){};$/;"	f	class:PCIeParam
~PIM	intersim2/allocators/pim.cpp	/^PIM::~PIM( )$/;"	f	class:PIM
~PacketReplyInfo	intersim2/packet_reply_info.hpp	/^  ~PacketReplyInfo() {}$/;"	f	class:PacketReplyInfo
~Pipeline	gpuwattch/logic.h	/^	~Pipeline(){$/;"	f	class:Pipeline
~PipelineFIFO	intersim2/pipefifo.hpp	/^template<class T> PipelineFIFO<T>::~PipelineFIFO( ) $/;"	f	class:PipelineFIFO
~Power_Module	intersim2/power/power_module.cpp	/^Power_Module::~Power_Module(){$/;"	f	class:Power_Module
~ProcParam	gpuwattch/basic_components.h	/^    ~ProcParam(){};$/;"	f	class:ProcParam
~Processor	gpuwattch/processor.cc	/^Processor::~Processor(){$/;"	f	class:Processor
~RENAMINGU	gpuwattch/core.cc	/^RENAMINGU ::~RENAMINGU(){$/;"	f	class:RENAMINGU
~RegFU	gpuwattch/core.cc	/^RegFU ::~RegFU(){$/;"	f	class:RegFU
~SchedulerU	gpuwattch/core.cc	/^SchedulerU ::~SchedulerU(){$/;"	f	class:SchedulerU
~SeparableAllocator	intersim2/allocators/separable.cpp	/^SeparableAllocator::~SeparableAllocator() {$/;"	f	class:SeparableAllocator
~SharedCache	gpuwattch/sharedcache.h	/^    ~SharedCache(){};$/;"	f	class:SharedCache
~Subarray	gpuwattch/cacti/subarray.cc	/^Subarray::~Subarray()$/;"	f	class:Subarray
~TimedModule	intersim2/timed_module.hpp	/^  virtual ~TimedModule() {}$/;"	f	class:TimedModule
~ToXMLStringTool	gpuwattch/xmlParser.cc	/^ToXMLStringTool::~ToXMLStringTool(){ freeBuffer(); }$/;"	f	class:ToXMLStringTool
~TrafficManager	intersim2/trafficmanager.cpp	/^TrafficManager::~TrafficManager( )$/;"	f	class:TrafficManager
~TrafficPattern	intersim2/traffic.hpp	/^  virtual ~TrafficPattern() {}$/;"	f	class:TrafficPattern
~TreeArbiter	intersim2/arbiters/tree_arb.cpp	/^TreeArbiter::~TreeArbiter() {$/;"	f	class:TreeArbiter
~UCA	gpuwattch/cacti/uca.cc	/^UCA::~UCA()$/;"	f	class:UCA
~UndiffCore	gpuwattch/logic.h	/^	~UndiffCore(){};$/;"	f	class:UndiffCore
~VC	intersim2/vc.cpp	/^VC::~VC()$/;"	f	class:VC
~Wire	gpuwattch/cacti/wire.cc	/^Wire::~Wire()$/;"	f	class:Wire
~XMLNode	gpuwattch/xmlParser.cc	/^XMLNode::~XMLNode()$/;"	f	class:XMLNode
~XMLParserBase64Tool	gpuwattch/xmlParser.cc	/^XMLParserBase64Tool::~XMLParserBase64Tool(){ freeBuffer(); }$/;"	f	class:XMLParserBase64Tool
~arg_buffer_t	cuda-sim/ptx_ir.h	/^   ~arg_buffer_t()$/;"	f	class:arg_buffer_t
~baseline_cache	gpgpu-sim/gpu-cache.h	/^    virtual ~baseline_cache()$/;"	f	class:baseline_cache
~binned_histogram	gpgpu-sim/histogram.cc	/^binned_histogram::~binned_histogram () {$/;"	f	class:binned_histogram
~cache_t	gpgpu-sim/gpu-cache.h	/^    virtual ~cache_t() {}$/;"	f	class:cache_t
~core_t	abstract_hardware_model.h	/^        virtual ~core_t() { free(m_thread); }$/;"	f	class:core_t
~data_cache	gpgpu-sim/gpu-cache.h	/^    virtual ~data_cache() {}$/;"	f	class:data_cache
~dep_resource_conflict_check	gpuwattch/logic.h	/^	~dep_resource_conflict_check(){$/;"	f	class:dep_resource_conflict_check
~fifo_pipeline	gpgpu-sim/delayqueue.h	/^   ~fifo_pipeline() $/;"	f	class:fifo_pipeline
~functionalCoreSim	cuda-sim/cuda-sim.h	/^    virtual ~functionalCoreSim(){$/;"	f	class:functionalCoreSim
~gpgpu_sim_wrapper	gpuwattch/gpgpu_sim_wrapper.cc	/^gpgpu_sim_wrapper::~gpgpu_sim_wrapper() { }$/;"	f	class:gpgpu_sim_wrapper
~gto_scheduler	gpgpu-sim/shader.h	/^	virtual ~gto_scheduler () {}$/;"	f	class:gto_scheduler
~insn_warp_occ_logger	gpgpu-sim/stat-tool.h	/^   ~insn_warp_occ_logger() {}$/;"	f	class:insn_warp_occ_logger
~inst_decoder	gpuwattch/logic.cc	/^inst_decoder::~inst_decoder()$/;"	f	class:inst_decoder
~interconnect	gpuwattch/interconnect.h	/^    ~interconnect() {};$/;"	f	class:interconnect
~kernel_info_t	abstract_hardware_model.cc	/^kernel_info_t::~kernel_info_t()$/;"	f	class:kernel_info_t
~l1_cache	gpgpu-sim/gpu-cache.h	/^    virtual ~l1_cache(){}$/;"	f	class:l1_cache
~l2_cache	gpgpu-sim/gpu-cache.h	/^    virtual ~l2_cache() {}$/;"	f	class:l2_cache
~linear_histogram	gpgpu-sim/histogram.h	/^   ~linear_histogram() {}$/;"	f	class:linear_histogram
~linear_histogram_logger	gpgpu-sim/stat-tool.cc	/^linear_histogram_logger::~linear_histogram_logger() $/;"	f	class:linear_histogram_logger
~linear_histogram_snapshot	gpgpu-sim/stat-tool.h	/^   ~linear_histogram_snapshot() { }$/;"	f	class:linear_histogram_snapshot
~lrr_scheduler	gpgpu-sim/shader.h	/^	virtual ~lrr_scheduler () {}$/;"	f	class:lrr_scheduler
~mascar_scheduler	gpgpu-sim/shader.h	/^	virtual ~mascar_scheduler () {}$/;"	f	class:mascar_scheduler
~mem_fetch	gpgpu-sim/mem_fetch.cc	/^mem_fetch::~mem_fetch()$/;"	f	class:mem_fetch
~mem_storage	cuda-sim/memory.h	/^   ~mem_storage()$/;"	f	class:mem_storage
~memory_partition_unit	gpgpu-sim/l2cache.cc	/^memory_partition_unit::~memory_partition_unit() $/;"	f	class:memory_partition_unit
~memory_space	cuda-sim/memory.h	/^   virtual ~memory_space() {}$/;"	f	class:memory_space
~memory_sub_partition	gpgpu-sim/l2cache.cc	/^memory_sub_partition::~memory_sub_partition()$/;"	f	class:memory_sub_partition
~nuca_org_t	gpuwattch/cacti/nuca.cc	/^nuca_org_t::~nuca_org_t() {$/;"	f	class:nuca_org_t
~pow2_histogram	gpgpu-sim/histogram.h	/^   ~pow2_histogram() {}$/;"	f	class:pow2_histogram
~ptx_thread_info	cuda-sim/ptx_sim.cc	/^ptx_thread_info::~ptx_thread_info()$/;"	f	class:ptx_thread_info
~read_only_cache	gpgpu-sim/gpu-cache.h	/^    virtual ~read_only_cache(){}$/;"	f	class:read_only_cache
~scheduler_unit	gpgpu-sim/shader.h	/^    virtual ~scheduler_unit(){}$/;"	f	class:scheduler_unit
~shader_core_stats	gpgpu-sim/shader.h	/^    ~shader_core_stats()$/;"	f	class:shader_core_stats
~simd_function_unit	gpgpu-sim/shader.h	/^    ~simd_function_unit() { delete m_dispatch_reg; }$/;"	f	class:simd_function_unit
~snap_shot_trigger	gpgpu-sim/stat-tool.h	/^   virtual ~snap_shot_trigger() {}$/;"	f	class:snap_shot_trigger
~spill_log_interface	gpgpu-sim/stat-tool.h	/^   virtual ~spill_log_interface() {}$/;"	f	class:spill_log_interface
~swl_scheduler	gpgpu-sim/shader.h	/^	virtual ~swl_scheduler () {}$/;"	f	class:swl_scheduler
~tag_array	gpgpu-sim/gpu-cache.cc	/^tag_array::~tag_array() $/;"	f	class:tag_array
~thread_CFlocality	gpgpu-sim/stat-tool.cc	/^thread_CFlocality::~thread_CFlocality() $/;"	f	class:thread_CFlocality
~thread_insn_span	gpgpu-sim/stat-tool.cc	/^thread_insn_span::~thread_insn_span() { }$/;"	f	class:thread_insn_span
~two_level_active_scheduler	gpgpu-sim/shader.h	/^	virtual ~two_level_active_scheduler () {}$/;"	f	class:two_level_active_scheduler
~uca_org_t	gpuwattch/cacti/cacti_interface.h	/^    ~uca_org_t(){};$/;"	f	class:uca_org_t
~warp_inst_t	abstract_hardware_model.h	/^    virtual ~warp_inst_t(){$/;"	f	class:warp_inst_t
