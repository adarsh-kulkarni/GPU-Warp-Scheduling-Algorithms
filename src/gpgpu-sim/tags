!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/6418097/
$(OUTPUT_DIR)/%.$(OEXT)	Makefile	/^$(OUTPUT_DIR)\/%.$(OEXT): %.cc$/;"	t
$(OUTPUT_DIR)/../cuda-sim/ptx.tab.h	Makefile	/^$(OUTPUT_DIR)\/..\/cuda-sim\/ptx.tab.h:$/;"	t
$(OUTPUT_DIR)/Makefile.makedepend	Makefile	/^$(OUTPUT_DIR)\/Makefile.makedepend: depend$/;"	t
$(OUTPUT_DIR)/dram_sched.$(OEXT)	Makefile	/^$(OUTPUT_DIR)\/dram_sched.$(OEXT): $(OUTPUT_DIR)\/..\/cuda-sim\/ptx.tab.h$/;"	t
$(OUTPUT_DIR)/option_parser.$(OEXT)	Makefile	/^$(OUTPUT_DIR)\/option_parser.$(OEXT): option_parser.h$/;"	t
ADDRDEC_H	addrdec.h	/^#define ADDRDEC_H$/;"	d
ADDR_CHIP_S	addrdec.h	/^   int ADDR_CHIP_S;$/;"	m	class:linear_to_raw_address_translation	typeref:typename:int
ASSOC	gpu-cache.h	/^    ASSOC \/\/ normal cache $/;"	e	enum:mshr_config_t
BANK_ACTIVE	dram.h	/^#define BANK_ACTIVE /;"	d
BANK_IDLE	dram.h	/^#define BANK_IDLE /;"	d
BK	addrdec.h	/^      BK    = 1,$/;"	e	enum:linear_to_raw_address_translation::__anon81f0f7220103
BK_CONF	stats.h	/^   BK_CONF,$/;"	e	enum:mem_stage_stall_type
BL	gpu-sim.h	/^   unsigned BL;     \/\/Burst Length in bytes (4 in GDDR3, 8 in GDDR5)$/;"	m	struct:memory_config	typeref:typename:unsigned
BURST	addrdec.h	/^      BURST = 4,$/;"	e	enum:linear_to_raw_address_translation::__anon81f0f7220103
CCDLc	dram.h	/^	unsigned int CCDLc;$/;"	m	struct:bankgrp_t	typeref:typename:unsigned int
CCDc	dram.h	/^   unsigned int CCDc;$/;"	m	class:dram_t	typeref:typename:unsigned int
CHIP	addrdec.h	/^      CHIP  = 0,$/;"	e	enum:linear_to_raw_address_translation::__anon81f0f7220103
CL	gpu-sim.h	/^   unsigned CL;     \/\/CAS latency$/;"	m	struct:memory_config	typeref:typename:unsigned
COAL_STALL	stats.h	/^   COAL_STALL,$/;"	e	enum:mem_stage_stall_type
COL	addrdec.h	/^      COL   = 3,$/;"	e	enum:linear_to_raw_address_translation::__anon81f0f7220103
CONCRETE_SCHEDULER_GTO	shader.h	/^    CONCRETE_SCHEDULER_GTO,$/;"	e	enum:concrete_scheduler
CONCRETE_SCHEDULER_LRR	shader.h	/^    CONCRETE_SCHEDULER_LRR = 0,$/;"	e	enum:concrete_scheduler
CONCRETE_SCHEDULER_MASCAR	shader.h	/^    CONCRETE_SCHEDULER_MASCAR,$/;"	e	enum:concrete_scheduler
CONCRETE_SCHEDULER_TWO_LEVEL_ACTIVE	shader.h	/^    CONCRETE_SCHEDULER_TWO_LEVEL_ACTIVE,$/;"	e	enum:concrete_scheduler
CONCRETE_SCHEDULER_WARP_LIMITING	shader.h	/^    CONCRETE_SCHEDULER_WARP_LIMITING, $/;"	e	enum:concrete_scheduler
CONSTANT	stat-tool.cc	/^   NORMAL, TEXTURE, CONSTANT, INSTRUCTION$/;"	e	enum:cache_access_logger_types	file:
CONST_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {CONST_ACC_R};$/;"	e	enum:power_stat_t::get_constant_c_accesses::access_type
CONST_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {CONST_ACC_R};$/;"	e	enum:power_stat_t::get_constant_c_misses::access_type
CONST_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_accesses::access_type
CONST_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_misses::access_type
CONST_MSHR_MERGE	gpu-sim.h	/^#define CONST_MSHR_MERGE /;"	d
CORE	gpu-sim.cc	/^#define  CORE /;"	d	file:
CPP	Makefile	/^CPP = g++ $(SNOW)$/;"	m
CREATELOG	gpu-sim.h	/^#define CREATELOG /;"	d
CSRCS	Makefile	/^CSRCS = $(filter-out $(EXCLUDES), $(SRCS))$/;"	m
CURRENT_STAT_IDX	power_stat.h	/^    CURRENT_STAT_IDX = 0,    \/\/ Current activity count$/;"	e	enum:_stat_idx
CUSTOM_SET_FUNCTION	gpu-cache.h	/^    CUSTOM_SET_FUNCTION$/;"	e	enum:set_index_function
CXXFLAGS	Makefile	/^	CXXFLAGS = -Wall -DDEBUG$/;"	m
CXXFLAGS	Makefile	/^	CXXFLAGS = -Wall$/;"	m
C_MEM	stats.h	/^   C_MEM,$/;"	e	enum:mem_stage_access_type
DATA_PORT_STALL	stats.h	/^   DATA_PORT_STALL,$/;"	e	enum:mem_stage_stall_type
DEBUG	Makefile	/^DEBUG?=0$/;"	m
DEBUGL1MISS	gpu-misc.h	/^#define DEBUGL1MISS /;"	d
DEC2ZERO	dram.cc	/^#define DEC2ZERO(/;"	d	file:
DELAYQUEUE_H	delayqueue.h	/^#define DELAYQUEUE_H$/;"	d
DRAM	gpu-sim.cc	/^#define  DRAM /;"	d	file:
DRAM_FIFO	gpu-sim.h	/^   DRAM_FIFO=0,$/;"	e	enum:dram_ctrl_t
DRAM_FRFCFS	gpu-sim.h	/^   DRAM_FRFCFS=1$/;"	e	enum:dram_ctrl_t
DRAM_H	dram.h	/^#define DRAM_H$/;"	d
DUMPLOG	gpu-sim.h	/^#define DUMPLOG /;"	d
DYNAMIC_WARP_PRINT_RESOLUTION	shader.cc	/^    #define DYNAMIC_WARP_PRINT_RESOLUTION /;"	d	file:
EXCLUDES	Makefile	/^EXCLUDES = $/;"	m
EX_WB	shader.h	/^    EX_WB,$/;"	e	enum:pipeline_stage_name_t
FERMI_HASH_SET_FUNCTION	gpu-cache.h	/^    FERMI_HASH_SET_FUNCTION = 0,$/;"	e	enum:set_index_function
FIFO	gpu-cache.h	/^    FIFO$/;"	e	enum:replacement_policy_t
GEN_CUS	shader.cc	/^    enum { SP_CUS, SFU_CUS, MEM_CUS, GEN_CUS };$/;"	e	enum:shader_core_ctx::shader_core_ctx::__anon5c39ac700103	file:
GLOBAL_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_accesses::access_type
GLOBAL_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_misses::access_type
GLOBAL_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R};$/;"	e	enum:power_stat_t::get_l1d_read_accesses::access_type
GLOBAL_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R};$/;"	e	enum:power_stat_t::get_l1d_read_misses::access_type
GLOBAL_ACC_W	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	e	enum:power_stat_t::get_l2_write_accesses::access_type
GLOBAL_ACC_W	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	e	enum:power_stat_t::get_l2_write_misses::access_type
GLOBAL_ACC_W	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W};$/;"	e	enum:power_stat_t::get_l1d_write_accesses::access_type
GLOBAL_ACC_W	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W};$/;"	e	enum:power_stat_t::get_l1d_write_misses::access_type
GLOBAL_MSHR_MERGE	gpu-sim.h	/^#define GLOBAL_MSHR_MERGE /;"	d
GPU_CACHE_H	gpu-cache.h	/^#define GPU_CACHE_H$/;"	d
GPU_MEMLATSTAT_MC	gpu-sim.h	/^#define GPU_MEMLATSTAT_MC /;"	d
GPU_MISC_H	gpu-misc.h	/^#define GPU_MISC_H$/;"	d
GPU_RSTAT_BW_STAT	gpu-sim.h	/^#define GPU_RSTAT_BW_STAT /;"	d
GPU_RSTAT_DWF_MAP	gpu-sim.h	/^#define GPU_RSTAT_DWF_MAP /;"	d
GPU_RSTAT_L1MISS	gpu-sim.h	/^#define GPU_RSTAT_L1MISS /;"	d
GPU_RSTAT_PDOM	gpu-sim.h	/^#define GPU_RSTAT_PDOM /;"	d
GPU_RSTAT_SCHED	gpu-sim.h	/^#define GPU_RSTAT_SCHED /;"	d
GPU_RSTAT_SHD_INFO	gpu-sim.h	/^#define GPU_RSTAT_SHD_INFO /;"	d
GPU_RSTAT_WARP_DIS	gpu-sim.h	/^#define GPU_RSTAT_WARP_DIS /;"	d
GPU_SIM_H	gpu-sim.h	/^#define GPU_SIM_H$/;"	d
G_MEM_LD	stats.h	/^   G_MEM_LD,$/;"	e	enum:mem_stage_access_type
G_MEM_ST	stats.h	/^   G_MEM_ST,$/;"	e	enum:mem_stage_access_type
HISTOGRAM_H	histogram.h	/^#define HISTOGRAM_H$/;"	d
HIT	gpu-cache.h	/^    HIT = 0,$/;"	e	enum:cache_request_status
HIT	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_constant_c_accesses::request_status
HIT	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_inst_c_accesses::request_status
HIT	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l1d_read_accesses::request_status
HIT	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l1d_write_accesses::request_status
HIT	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l2_read_accesses::request_status
HIT	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l2_write_accesses::request_status
HIT	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_texture_c_accesses::request_status
HIT_RESERVED	gpu-cache.h	/^    HIT_RESERVED,$/;"	e	enum:cache_request_status
HIT_RESERVED	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_constant_c_accesses::request_status
HIT_RESERVED	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_inst_c_accesses::request_status
HIT_RESERVED	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l1d_read_accesses::request_status
HIT_RESERVED	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l1d_write_accesses::request_status
HIT_RESERVED	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l2_read_accesses::request_status
HIT_RESERVED	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l2_write_accesses::request_status
HIT_RESERVED	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_texture_c_accesses::request_status
IBUFFER_SIZE	shader.h	/^    static const unsigned IBUFFER_SIZE=1;$/;"	m	class:shd_warp_t	typeref:typename:const unsigned
ICNT	gpu-sim.cc	/^#define  ICNT /;"	d	file:
ICNT_RC_FAIL	stats.h	/^   ICNT_RC_FAIL,$/;"	e	enum:mem_stage_stall_type
ICNT_WRAPPER_H	icnt_wrapper.h	/^#define ICNT_WRAPPER_H$/;"	d
ID_OC_MEM	shader.h	/^    ID_OC_MEM,  $/;"	e	enum:pipeline_stage_name_t
ID_OC_SFU	shader.h	/^    ID_OC_SFU,  $/;"	e	enum:pipeline_stage_name_t
ID_OC_SP	shader.h	/^    ID_OC_SP=0,$/;"	e	enum:pipeline_stage_name_t
INSTRUCTION	stat-tool.cc	/^   NORMAL, TEXTURE, CONSTANT, INSTRUCTION$/;"	e	enum:cache_access_logger_types	file:
INST_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_accesses::access_type
INST_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_misses::access_type
INST_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {INST_ACC_R};$/;"	e	enum:power_stat_t::get_inst_c_accesses::access_type
INST_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {INST_ACC_R};$/;"	e	enum:power_stat_t::get_inst_c_misses::access_type
INTERSIM	icnt_wrapper.h	/^   INTERSIM = 1,$/;"	e	enum:network_mode
INVALID	gpu-cache.h	/^    INVALID,$/;"	e	enum:cache_block_state
L1_WRBK_ACC	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	e	enum:power_stat_t::get_l2_write_accesses::access_type
L1_WRBK_ACC	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	e	enum:power_stat_t::get_l2_write_misses::access_type
L2	gpu-sim.cc	/^#define  L2 /;"	d	file:
L2_L2tocblength	mem_latency_stat.h	/^   unsigned int *L2_L2tocblength;$/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
L2_L2todramlength	mem_latency_stat.h	/^   unsigned int *L2_L2todramlength;$/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
L2_cbtoL2length	mem_latency_stat.h	/^   unsigned int *L2_cbtoL2length;$/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
L2_cbtoL2writelength	mem_latency_stat.h	/^   unsigned int *L2_cbtoL2writelength;$/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
L2_dram_queue_empty	l2cache.cc	/^bool memory_sub_partition::L2_dram_queue_empty() const$/;"	f	class:memory_sub_partition	typeref:typename:bool
L2_dram_queue_pop	l2cache.cc	/^void memory_sub_partition::L2_dram_queue_pop() $/;"	f	class:memory_sub_partition	typeref:class:memory_sub_partition::L2_dram_queue_top void
L2_dram_queue_top	l2cache.cc	/^class mem_fetch* memory_sub_partition::L2_dram_queue_top() const$/;"	c	class:memory_sub_partition	file:
L2_dramtoL2length	mem_latency_stat.h	/^   unsigned int *L2_dramtoL2length;$/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
L2_dramtoL2writelength	mem_latency_stat.h	/^   unsigned int *L2_dramtoL2writelength;$/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
L2dramout	l2cache.h	/^   class mem_fetch *L2dramout; $/;"	m	class:memory_sub_partition	typeref:class:mem_fetch *
L2interface	l2cache.h	/^    L2interface( memory_sub_partition *unit ) { m_unit=unit; }$/;"	f	class:L2interface
L2interface	l2cache.h	/^class L2interface : public mem_fetch_interface {$/;"	c
LINEAR_SET_FUNCTION	gpu-cache.h	/^    LINEAR_SET_FUNCTION,$/;"	e	enum:set_index_function
LOCAL_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_accesses::access_type
LOCAL_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_misses::access_type
LOCAL_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R};$/;"	e	enum:power_stat_t::get_l1d_read_accesses::access_type
LOCAL_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R};$/;"	e	enum:power_stat_t::get_l1d_read_misses::access_type
LOCAL_ACC_W	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	e	enum:power_stat_t::get_l2_write_accesses::access_type
LOCAL_ACC_W	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	e	enum:power_stat_t::get_l2_write_misses::access_type
LOCAL_ACC_W	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W};$/;"	e	enum:power_stat_t::get_l1d_write_accesses::access_type
LOCAL_ACC_W	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W};$/;"	e	enum:power_stat_t::get_l1d_write_misses::access_type
LOCAL_WB_GLOBAL_WT	gpu-cache.h	/^    LOCAL_WB_GLOBAL_WT$/;"	e	enum:write_policy_t
LOGB2	gpu-misc.cc	/^unsigned int LOGB2( unsigned int v ) {$/;"	f	typeref:typename:unsigned int
LOGB2_32	addrdec.cc	/^static unsigned int LOGB2_32( unsigned int v ) $/;"	f	typeref:typename:unsigned int	file:
LRU	gpu-cache.h	/^    LRU,$/;"	e	enum:replacement_policy_t
L_MEM_LD	stats.h	/^   L_MEM_LD,$/;"	e	enum:mem_stage_access_type
L_MEM_ST	stats.h	/^   L_MEM_ST,$/;"	e	enum:mem_stage_access_type
MAX	gpu-sim.cc	/^#define MAX(/;"	d	file:
MAX	shader.cc	/^#define MAX(/;"	d	file:
MAX_ALU_LATENCY	shader.h	/^    static const unsigned MAX_ALU_LATENCY = 512;$/;"	m	class:shader_core_ctx	typeref:typename:const unsigned
MAX_ALU_LATENCY	shader.h	/^    static const unsigned MAX_ALU_LATENCY = 512;$/;"	m	class:simd_function_unit	typeref:typename:const unsigned
MAX_DEFAULT_CACHE_SIZE_MULTIBLIER	gpu-cache.cc	/^#define MAX_DEFAULT_CACHE_SIZE_MULTIBLIER /;"	d	file:
MC_PARTITION_INCLUDED	l2cache.h	/^#define MC_PARTITION_INCLUDED$/;"	d
MEMPART_DPRINTF	l2cache_trace.h	/^#define MEMPART_DPRINTF(/;"	d
MEMPART_DTRACE	l2cache_trace.h	/^#define MEMPART_DTRACE(/;"	d
MEMPART_PRINT_STR	l2cache_trace.h	/^#define MEMPART_PRINT_STR /;"	d
MEM_CUS	shader.cc	/^    enum { SP_CUS, SFU_CUS, MEM_CUS, GEN_CUS };$/;"	e	enum:shader_core_ctx::shader_core_ctx::__anon5c39ac700103	file:
MEM_FETCH_H	mem_fetch.h	/^#define MEM_FETCH_H$/;"	d
MEM_LATENCY_STAT_H	mem_latency_stat.h	/^#define MEM_LATENCY_STAT_H$/;"	d
MEM_LATENCY_STAT_IMPL	gpu-sim.cc	/^#define MEM_LATENCY_STAT_IMPL$/;"	d	file:
MF_TUP	mem_fetch.cc	/^#define MF_TUP(/;"	d	file:
MF_TUP	mem_fetch.h	/^#define MF_TUP(/;"	d
MF_TUP_BEGIN	mem_fetch.cc	/^#define MF_TUP_BEGIN(/;"	d	file:
MF_TUP_BEGIN	mem_fetch.h	/^#define MF_TUP_BEGIN(/;"	d
MF_TUP_END	mem_fetch.cc	/^#define MF_TUP_END(/;"	d	file:
MF_TUP_END	mem_fetch.h	/^#define MF_TUP_END(/;"	d
MIN	shader.cc	/^#define MIN(/;"	d	file:
MISS	gpu-cache.h	/^    MISS,$/;"	e	enum:cache_request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_constant_c_accesses::request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_inst_c_accesses::request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l1d_read_accesses::request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l1d_write_accesses::request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l2_read_accesses::request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_l2_write_accesses::request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	e	enum:power_stat_t::get_texture_c_accesses::request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_constant_c_misses::request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_inst_c_misses::request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_l1d_read_misses::request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_l1d_write_misses::request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_l2_read_misses::request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_l2_write_misses::request_status
MISS	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	e	enum:power_stat_t::get_texture_c_misses::request_status
MODIFIED	gpu-cache.h	/^    MODIFIED$/;"	e	enum:cache_block_state
MSHR_RC_FAIL	stats.h	/^   MSHR_RC_FAIL,$/;"	e	enum:mem_stage_stall_type
MhZ	gpu-sim.h	/^#define MhZ /;"	d
NORMAL	stat-tool.cc	/^   NORMAL, TEXTURE, CONSTANT, INSTRUCTION$/;"	e	enum:cache_access_logger_types	file:
NO_ALLOC	shader.h	/^      NO_ALLOC,$/;"	e	enum:opndcoll_rfu_t::alloc_t
NO_OP_FLAG	shader.h	/^#define NO_OP_FLAG /;"	d
NO_RC_FAIL	stats.h	/^   NO_RC_FAIL = 0, $/;"	e	enum:mem_stage_stall_type
NO_WRITE_ALLOCATE	gpu-cache.h	/^	NO_WRITE_ALLOCATE,$/;"	e	enum:write_allocate_policy_t
NUM_CACHE_REQUEST_STATUS	gpu-cache.h	/^    NUM_CACHE_REQUEST_STATUS$/;"	e	enum:cache_request_status
NUM_CONCRETE_SCHEDULERS	shader.h	/^    NUM_CONCRETE_SCHEDULERS$/;"	e	enum:concrete_scheduler
NUM_ORDERING	shader.h	/^        NUM_ORDERING,$/;"	e	enum:scheduler_unit::OrderingType
NUM_STAT_IDX	power_stat.h	/^    NUM_STAT_IDX     \/\/ Total number of samples$/;"	e	enum:_stat_idx
N_ADDRDEC	addrdec.h	/^      N_ADDRDEC$/;"	e	enum:linear_to_raw_address_translation::__anon81f0f7220103
N_MEM_STAGE_ACCESS_TYPE	stats.h	/^   N_MEM_STAGE_ACCESS_TYPE$/;"	e	enum:mem_stage_access_type
N_MEM_STAGE_STALL_TYPE	stats.h	/^   N_MEM_STAGE_STALL_TYPE$/;"	e	enum:mem_stage_stall_type
N_NETWORK_MODE	icnt_wrapper.h	/^   N_NETWORK_MODE$/;"	e	enum:network_mode
N_PIPELINE_STAGES	shader.h	/^    N_PIPELINE_STAGES $/;"	e	enum:pipeline_stage_name_t
OBJS	Makefile	/^OBJS = $(CSRCS:%.cc=$(OUTPUT_DIR)\/%.$(OEXT))$/;"	m
OC_EX_MEM	shader.h	/^    OC_EX_MEM,$/;"	e	enum:pipeline_stage_name_t
OC_EX_SFU	shader.h	/^    OC_EX_SFU,$/;"	e	enum:pipeline_stage_name_t
OC_EX_SP	shader.h	/^    OC_EX_SP,$/;"	e	enum:pipeline_stage_name_t
ON_FILL	gpu-cache.h	/^    ON_FILL$/;"	e	enum:allocation_policy_t
ON_MISS	gpu-cache.h	/^    ON_MISS,$/;"	e	enum:allocation_policy_t
ORDERED_PRIORITY_FUNC_ONLY	shader.h	/^        ORDERED_PRIORITY_FUNC_ONLY,$/;"	e	enum:scheduler_unit::OrderingType
ORDERING_GREEDY_THEN_PRIORITY_FUNC	shader.h	/^        ORDERING_GREEDY_THEN_PRIORITY_FUNC = 0,$/;"	e	enum:scheduler_unit::OrderingType
OUTPUT_DIR	Makefile	/^OUTPUT_DIR=$(SIM_OBJ_FILES_DIR)\/gpgpu-sim$/;"	m
OrderingType	shader.h	/^    enum OrderingType $/;"	g	class:scheduler_unit
POWER_FLAGS	Makefile	/^	POWER_FLAGS = -I$(GPGPUSIM_POWER_MODEL) -DGPGPUSIM_POWER_MODEL$/;"	m
POWER_FLAGS	Makefile	/^POWER_FLAGS=$/;"	m
POWER_INTERFACE_H_	power_interface.h	/^#define POWER_INTERFACE_H_$/;"	d
POWER_STAT_H	power_stat.h	/^#define POWER_STAT_H$/;"	d
PREV_STAT_IDX	power_stat.h	/^    PREV_STAT_IDX,           \/\/ Previous sample activity count$/;"	e	enum:_stat_idx
PRINT_CYCLE	dram.cc	/^int PRINT_CYCLE = 0;$/;"	v	typeref:typename:int
PRIORITIZE_MSHR_OVER_WB	shader.cc	/^#define PRIORITIZE_MSHR_OVER_WB /;"	d	file:
PROGRAM_MEM_START	shader.cc	/^#define PROGRAM_MEM_START /;"	d	file:
RASc	dram.h	/^   unsigned int RASc;$/;"	m	struct:bank_t	typeref:typename:unsigned int
RCDWRc	dram.h	/^   unsigned int RCDWRc;$/;"	m	struct:bank_t	typeref:typename:unsigned int
RCDc	dram.h	/^   unsigned int RCDc;$/;"	m	struct:bank_t	typeref:typename:unsigned int
RCc	dram.h	/^   unsigned int RCc;$/;"	m	struct:bank_t	typeref:typename:unsigned int
READ	dram.h	/^#define READ /;"	d
READ_ALLOC	shader.h	/^      READ_ALLOC,$/;"	e	enum:opndcoll_rfu_t::alloc_t
READ_ONLY	gpu-cache.h	/^    READ_ONLY,$/;"	e	enum:write_policy_t
READ_PACKET_SIZE	shader.h	/^#define READ_PACKET_SIZE /;"	d
READ_REPLY	mem_fetch.h	/^   READ_REPLY, \/\/ send to shader$/;"	e	enum:mf_type
READ_REQUEST	mem_fetch.h	/^   READ_REQUEST = 0,$/;"	e	enum:mf_type
READ_REQUEST_SENT	gpu-cache.h	/^    READ_REQUEST_SENT,$/;"	e	enum:cache_event
RESERVATION_FAIL	gpu-cache.h	/^    RESERVATION_FAIL, $/;"	e	enum:cache_request_status
RESERVED	gpu-cache.h	/^    RESERVED,$/;"	e	enum:cache_block_state
ROW	addrdec.h	/^      ROW   = 2,$/;"	e	enum:linear_to_raw_address_translation::__anon81f0f7220103
RPc	dram.h	/^   unsigned int RPc;$/;"	m	struct:bank_t	typeref:typename:unsigned int
RRDc	dram.h	/^   unsigned int RRDc;$/;"	m	class:dram_t	typeref:typename:unsigned int
RTPLc	dram.h	/^	unsigned int RTPLc;$/;"	m	struct:bankgrp_t	typeref:typename:unsigned int
RTPc	dram.h	/^   unsigned int RTPc; \/\/ read to precharge$/;"	m	struct:bank_t	typeref:typename:unsigned int
RTWc	dram.h	/^   unsigned int RTWc;   \/\/read to write penalty applies across banks$/;"	m	class:dram_t	typeref:typename:unsigned int
SAMPLELOG	gpu-sim.h	/^#define SAMPLELOG /;"	d
SCHEDULER_PRIORITIZATION_GTLRR	shader.h	/^    SCHEDULER_PRIORITIZATION_GTLRR, \/\/ Greedy Then Loose Round Robin$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_GTO	shader.h	/^    SCHEDULER_PRIORITIZATION_GTO, \/\/ Greedy Then Oldest$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_GTY	shader.h	/^    SCHEDULER_PRIORITIZATION_GTY, \/\/ Greedy Then Youngest$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_LRR	shader.h	/^    SCHEDULER_PRIORITIZATION_LRR = 0, \/\/ Loose Round Robin$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_OLDEST	shader.h	/^    SCHEDULER_PRIORITIZATION_OLDEST, \/\/ Oldest First$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_SRR	shader.h	/^    SCHEDULER_PRIORITIZATION_SRR, \/\/ Strict Round Robin$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_YOUNGEST	shader.h	/^    SCHEDULER_PRIORITIZATION_YOUNGEST, \/\/ Youngest First$/;"	e	enum:scheduler_prioritization_type
SCHED_DPRINTF	shader_trace.h	/^#define SCHED_DPRINTF(/;"	d
SCHED_PRINT_STR	shader_trace.h	/^#define SCHED_PRINT_STR /;"	d
SCOREBOARD_H_	scoreboard.h	/^#define SCOREBOARD_H_$/;"	d
SFU_CUS	shader.cc	/^    enum { SP_CUS, SFU_CUS, MEM_CUS, GEN_CUS };$/;"	e	enum:shader_core_ctx::shader_core_ctx::__anon5c39ac700103	file:
SHADER_DPRINTF	shader_trace.h	/^#define SHADER_DPRINTF(/;"	d
SHADER_DTRACE	shader_trace.h	/^#define SHADER_DTRACE(/;"	d
SHADER_H	shader.h	/^#define SHADER_H$/;"	d
SHADER_PRINT_STR	shader_trace.h	/^#define SHADER_PRINT_STR /;"	d
SP_CUS	shader.cc	/^    enum { SP_CUS, SFU_CUS, MEM_CUS, GEN_CUS };$/;"	e	enum:shader_core_ctx::shader_core_ctx::__anon5c39ac700103	file:
SRCS	Makefile	/^SRCS = $(shell ls *.cc)$/;"	m
STATS_INCLUDED	stats.h	/^#define STATS_INCLUDED$/;"	d
STAT_TOOL_H	stat-tool.h	/^#define STAT_TOOL_H$/;"	d
STRSIZE	shader.cc	/^    #define STRSIZE /;"	d	file:
STR_SIZE	shader.cc	/^    #define STR_SIZE /;"	d	file:
SWAP	dram.cc	/^#define SWAP(/;"	d	file:
S_MEM	stats.h	/^   S_MEM,$/;"	e	enum:mem_stage_access_type
Scoreboard	scoreboard.cc	/^Scoreboard::Scoreboard( unsigned sid, unsigned n_warps )$/;"	f	class:Scoreboard
Scoreboard	scoreboard.h	/^class Scoreboard {$/;"	c
Stack	stack.h	/^} Stack;$/;"	t	typeref:struct:__anonadd2b0f10108
TEXTURE	stat-tool.cc	/^   NORMAL, TEXTURE, CONSTANT, INSTRUCTION$/;"	e	enum:cache_access_logger_types	file:
TEXTURE_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_accesses::access_type
TEXTURE_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	e	enum:power_stat_t::get_l2_read_misses::access_type
TEXTURE_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {TEXTURE_ACC_R};$/;"	e	enum:power_stat_t::get_texture_c_accesses::access_type
TEXTURE_ACC_R	power_stat.h	/^        enum mem_access_type access_type[] = {TEXTURE_ACC_R};$/;"	e	enum:power_stat_t::get_texture_c_misses::access_type
TEX_FIFO	gpu-cache.h	/^    TEX_FIFO,$/;"	e	enum:mshr_config_t
TEX_MSHR_MERGE	gpu-sim.h	/^#define TEX_MSHR_MERGE /;"	d
TLB_HIT	stats.h	/^	TLB_HIT = 0,$/;"	e	enum:tlb_request_status
TLB_PENDING	stats.h	/^	TLB_PENDING$/;"	e	enum:tlb_request_status
TLB_READY	stats.h	/^	TLB_READY,$/;"	e	enum:tlb_request_status
TLB_STALL	stats.h	/^   TLB_STALL,$/;"	e	enum:mem_stage_stall_type
TRACE	Makefile	/^TRACE?=0$/;"	m
T_MEM	stats.h	/^   T_MEM,$/;"	e	enum:mem_stage_access_type
VALID	gpu-cache.h	/^    VALID,$/;"	e	enum:cache_block_state
VISUALIZER_H_INCLUDED	visualizer.h	/^#define VISUALIZER_H_INCLUDED$/;"	d
WARP_PER_CTA_MAX	shader.h	/^const unsigned WARP_PER_CTA_MAX = 48;$/;"	v	typeref:typename:const unsigned
WB_CACHE_RSRV_FAIL	stats.h	/^   WB_CACHE_RSRV_FAIL,$/;"	e	enum:mem_stage_stall_type
WB_ICNT_RC_FAIL	stats.h	/^   WB_ICNT_RC_FAIL,$/;"	e	enum:mem_stage_stall_type
WL	gpu-sim.h	/^   unsigned WL;     \/\/WRITE latency$/;"	m	struct:memory_config	typeref:typename:unsigned
WRC_H	wrc.h	/^#define WRC_H$/;"	d
WRITE	dram.h	/^#define WRITE /;"	d
WRITE_ACK	mem_fetch.h	/^   WRITE_ACK$/;"	e	enum:mf_type
WRITE_ALLOC	shader.h	/^      WRITE_ALLOC,$/;"	e	enum:opndcoll_rfu_t::alloc_t
WRITE_ALLOCATE	gpu-cache.h	/^	WRITE_ALLOCATE$/;"	e	enum:write_allocate_policy_t
WRITE_BACK	gpu-cache.h	/^    WRITE_BACK,$/;"	e	enum:write_policy_t
WRITE_BACK_REQUEST_SENT	gpu-cache.h	/^    WRITE_BACK_REQUEST_SENT,$/;"	e	enum:cache_event
WRITE_EVICT	gpu-cache.h	/^    WRITE_EVICT,$/;"	e	enum:write_policy_t
WRITE_MASK_SIZE	shader.h	/^#define WRITE_MASK_SIZE /;"	d
WRITE_PACKET_SIZE	shader.h	/^#define WRITE_PACKET_SIZE /;"	d
WRITE_REQUEST	mem_fetch.h	/^   WRITE_REQUEST,$/;"	e	enum:mf_type
WRITE_REQUEST_SENT	gpu-cache.h	/^    WRITE_REQUEST_SENT$/;"	e	enum:cache_event
WRITE_THROUGH	gpu-cache.h	/^    WRITE_THROUGH,$/;"	e	enum:write_policy_t
WST	warp_status.cc	/^	WST::WST(unsigned warpCount){$/;"	f	class:WST
WST	warp_status.h	/^class WST{$/;"	c
WST_H	warp_status.h	/^#define WST_H$/;"	d
WTPc	dram.h	/^   unsigned int WTPc; \/\/ write to precharge$/;"	m	struct:bank_t	typeref:typename:unsigned int
WTRc	dram.h	/^   unsigned int WTRc;   \/\/write to read penalty applies across banks$/;"	m	class:dram_t	typeref:typename:unsigned int
Wrc	wrc.cc	/^Wrc::Wrc(){$/;"	f	class:Wrc
Wrc	wrc.h	/^class Wrc{$/;"	c
_MY_STACK_	stack.h	/^#define _MY_STACK_$/;"	d
__SHADER_TRACE_H__	shader_trace.h	/^#define __SHADER_TRACE_H__$/;"	d
__anon2e250678010a	warp_status.h	/^		union{$/;"	u	struct:WST::table_entry
__anon2e2506780208	warp_status.h	/^			struct {$/;"	s	union:WST::table_entry::__anon2e250678010a
__anon5c39ac700103	shader.cc	/^    enum { SP_CUS, SFU_CUS, MEM_CUS, GEN_CUS };$/;"	g	function:shader_core_ctx::shader_core_ctx	file:
__anon81f0f7220103	addrdec.h	/^   enum {$/;"	g	class:linear_to_raw_address_translation
__anonadd2b0f10108	stack.h	/^typedef struct {$/;"	s
__anoncb0c5d68010a	gpu-cache.h	/^    union {$/;"	u	class:cache_config
__anoncb0c5d68020a	gpu-cache.h	/^    union {$/;"	u	class:cache_config
__anoncb0c5d68030a	gpu-cache.h	/^    union {$/;"	u	class:cache_config
_inmatch	shader.h	/^      int *_inmatch;$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:int *
_outmatch	shader.h	/^      int *_outmatch;$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:int *
_request	shader.h	/^      int **_request;$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:int **
_stat_idx	power_stat.h	/^typedef enum _stat_idx{$/;"	g
accept_fetch_response	shader.cc	/^void shader_core_ctx::accept_fetch_response( mem_fetch *mf )$/;"	f	class:shader_core_ctx	typeref:typename:void
accept_ldst_unit_response	shader.cc	/^void shader_core_ctx::accept_ldst_unit_response(mem_fetch * mf) $/;"	f	class:shader_core_ctx	typeref:typename:void
access	gpu-cache.cc	/^data_cache::access( new_addr_type addr,$/;"	f	class:data_cache	typeref:enum:cache_request_status
access	gpu-cache.cc	/^enum cache_request_status tag_array::access( new_addr_type addr, unsigned time, unsigned &idx )$/;"	f	class:tag_array	typeref:enum:cache_request_status
access	gpu-cache.cc	/^enum cache_request_status tag_array::access( new_addr_type addr, unsigned time, unsigned &idx, b/;"	f	class:tag_array	typeref:enum:cache_request_status
access	gpu-cache.cc	/^enum cache_request_status tex_cache::access( new_addr_type addr, mem_fetch *mf,$/;"	f	class:tex_cache	typeref:enum:cache_request_status
access	gpu-cache.cc	/^l1_cache::access( new_addr_type addr,$/;"	f	class:l1_cache	typeref:enum:cache_request_status
access	gpu-cache.cc	/^l2_cache::access( new_addr_type addr,$/;"	f	class:l2_cache	typeref:enum:cache_request_status
access	gpu-cache.cc	/^read_only_cache::access( new_addr_type addr,$/;"	f	class:read_only_cache	typeref:enum:cache_request_status
access_ready	gpu-cache.h	/^    bool access_ready() const {return !m_current_response.empty();}$/;"	f	class:mshr_table	typeref:typename:bool
access_ready	gpu-cache.h	/^    bool access_ready() const {return m_mshrs.access_ready();}$/;"	f	class:baseline_cache	typeref:typename:bool
access_ready	gpu-cache.h	/^    bool access_ready() const{return !m_result_fifo.empty();}$/;"	f	class:tex_cache	typeref:typename:bool
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {CONST_ACC_R};$/;"	g	function:power_stat_t::get_constant_c_accesses
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {CONST_ACC_R};$/;"	g	function:power_stat_t::get_constant_c_misses
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	g	function:power_stat_t::get_l2_read_accesses
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R, CONST_ACC_R, TEXTURE_AC/;"	g	function:power_stat_t::get_l2_read_misses
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R};$/;"	g	function:power_stat_t::get_l1d_read_accesses
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_R, LOCAL_ACC_R};$/;"	g	function:power_stat_t::get_l1d_read_misses
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	g	function:power_stat_t::get_l2_write_accesses
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W, L1_WRBK_ACC};$/;"	g	function:power_stat_t::get_l2_write_misses
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W};$/;"	g	function:power_stat_t::get_l1d_write_accesses
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {GLOBAL_ACC_W, LOCAL_ACC_W};$/;"	g	function:power_stat_t::get_l1d_write_misses
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {INST_ACC_R};$/;"	g	function:power_stat_t::get_inst_c_accesses
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {INST_ACC_R};$/;"	g	function:power_stat_t::get_inst_c_misses
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {TEXTURE_ACC_R};$/;"	g	function:power_stat_t::get_texture_c_accesses
access_type	power_stat.h	/^        enum mem_access_type access_type[] = {TEXTURE_ACC_R};$/;"	g	function:power_stat_t::get_texture_c_misses
accesses	gpu-cache.h	/^    unsigned accesses;$/;"	m	struct:cache_sub_stats	typeref:typename:unsigned
accumulate_L2cache_stats	l2cache.cc	/^void memory_sub_partition::accumulate_L2cache_stats(class cache_stats &l2_stats) const {$/;"	f	class:memory_sub_partition	typeref:typename:void
active	gpu-sim.cc	/^bool gpgpu_sim::active()$/;"	f	class:gpgpu_sim	typeref:typename:bool
active_lanes_in_pipeline	shader.cc	/^void ldst_unit::active_lanes_in_pipeline(){$/;"	f	class:ldst_unit	typeref:typename:void
active_lanes_in_pipeline	shader.cc	/^void sfu::active_lanes_in_pipeline(){$/;"	f	class:sfu	typeref:typename:void
active_lanes_in_pipeline	shader.cc	/^void sp_unit::active_lanes_in_pipeline(){$/;"	f	class:sp_unit	typeref:typename:void
active_sms	gpu-sim.h	/^   float * active_sms;$/;"	m	class:gpgpu_sim	typeref:typename:float *
add	gpu-cache.cc	/^void mshr_table::add( new_addr_type block_addr, mem_fetch *mf ){$/;"	f	class:mshr_table	typeref:typename:void
add2bin	histogram.cc	/^void binned_histogram::add2bin (int sample) {$/;"	f	class:binned_histogram	typeref:typename:void
add2bin	histogram.cc	/^void linear_histogram::add2bin (int sample) {$/;"	f	class:linear_histogram	typeref:typename:void
add2bin	histogram.cc	/^void pow2_histogram::add2bin (int sample) {$/;"	f	class:pow2_histogram	typeref:typename:void
add_cu_set	shader.cc	/^void opndcoll_rfu_t::add_cu_set(unsigned set_id, unsigned num_cu, unsigned num_dispatch){$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
add_port	shader.cc	/^void opndcoll_rfu_t::add_port(port_vector_t & input, port_vector_t & output, uint_vector_t cu_se/;"	f	class:opndcoll_rfu_t	typeref:typename:void
add_read_requests	shader.h	/^      void add_read_requests( collector_unit_t *cu ) $/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:void
add_req	dram_sched.cc	/^void frfcfs_scheduler::add_req( dram_req_t *req )$/;"	f	class:frfcfs_scheduler	typeref:typename:void
add_snap_shot_trigger	stat-tool.cc	/^void add_snap_shot_trigger (snap_shot_trigger* ss_trigger)$/;"	f	typeref:typename:void
add_spill_log	stat-tool.cc	/^void add_spill_log (spill_log_interface* spill_log)$/;"	f	typeref:typename:void
add_supervised_warp_id	shader.h	/^	void add_supervised_warp_id(int i) {$/;"	f	class:two_level_active_scheduler	typeref:typename:void
add_supervised_warp_id	shader.h	/^    virtual void add_supervised_warp_id(int i) {$/;"	f	class:scheduler_unit	typeref:typename:void
addr	dram.h	/^   unsigned long long int addr;$/;"	m	class:dram_req_t	typeref:typename:unsigned long long int
addrdec_getmasklimit	addrdec.cc	/^static void addrdec_getmasklimit(new_addr_type mask, unsigned char *high, unsigned char *low) $/;"	f	typeref:typename:void	file:
addrdec_mask	addrdec.h	/^   new_addr_type addrdec_mask[N_ADDRDEC];$/;"	m	class:linear_to_raw_address_translation	typeref:typename:new_addr_type[]
addrdec_mkhigh	addrdec.h	/^   unsigned char addrdec_mkhigh[N_ADDRDEC];$/;"	m	class:linear_to_raw_address_translation	typeref:typename:unsigned char[]
addrdec_mklow	addrdec.h	/^   unsigned char addrdec_mklow[N_ADDRDEC];$/;"	m	class:linear_to_raw_address_translation	typeref:typename:unsigned char[]
addrdec_option	addrdec.h	/^   const char *addrdec_option;$/;"	m	class:linear_to_raw_address_translation	typeref:typename:const char *
addrdec_packbits	addrdec.cc	/^static new_addr_type addrdec_packbits( new_addr_type mask, new_addr_type val, unsigned char high/;"	f	typeref:typename:new_addr_type	file:
addrdec_parseoption	addrdec.cc	/^void linear_to_raw_address_translation::addrdec_parseoption(const char *option)$/;"	f	class:linear_to_raw_address_translation	typeref:typename:void
addrdec_setoption	addrdec.cc	/^void linear_to_raw_address_translation::addrdec_setoption(option_parser_t opp)$/;"	f	class:linear_to_raw_address_translation	typeref:typename:void
addrdec_t	addrdec.h	/^struct addrdec_t {$/;"	s
addrdec_tlx	addrdec.cc	/^void linear_to_raw_address_translation::addrdec_tlx(new_addr_type addr, addrdec_t *tlx) const$/;"	f	class:linear_to_raw_address_translation	typeref:typename:void
addsample	stat-tool.h	/^   void addsample(int pos) {$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
age	dram.h	/^   unsigned int age;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
alloc	l2cache.cc	/^mem_fetch * partition_mf_allocator::alloc(new_addr_type addr, mem_access_type type, unsigned siz/;"	f	class:partition_mf_allocator	typeref:typename:mem_fetch *
alloc	l2cache.h	/^    virtual mem_fetch * alloc(const class warp_inst_t &inst, const mem_access_t &access) const $/;"	f	class:partition_mf_allocator	typeref:typename:mem_fetch *
alloc	shader.h	/^    mem_fetch *alloc( const warp_inst_t &inst, const mem_access_t &access ) const$/;"	f	class:shader_core_mem_fetch_allocator	typeref:typename:mem_fetch *
alloc	shader.h	/^    mem_fetch *alloc( new_addr_type addr, mem_access_type type, unsigned size, bool wr ) const $/;"	f	class:shader_core_mem_fetch_allocator	typeref:typename:mem_fetch *
alloc_read	shader.h	/^      void alloc_read( const op_t &op )  { assert(is_free()); m_allocation=READ_ALLOC; m_op=op; /;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:void
alloc_t	shader.h	/^   enum alloc_t {$/;"	g	class:opndcoll_rfu_t
alloc_write	shader.h	/^      void alloc_write( const op_t &op ) { assert(is_free()); m_allocation=WRITE_ALLOC; m_op=op;/;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:void
allocate	gpu-cache.h	/^    void allocate( new_addr_type tag, new_addr_type block_addr, unsigned time )$/;"	f	struct:cache_block_t	typeref:typename:void
allocate	shader.cc	/^bool opndcoll_rfu_t::collector_unit_t::allocate( register_set* pipeline_reg_set, register_set* o/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:bool
allocate_bank_for_write	shader.h	/^      void allocate_bank_for_write( unsigned bank, const op_t &op )$/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:void
allocate_barrier	shader.cc	/^void barrier_set_t::allocate_barrier( unsigned cta_id, warp_set_t warps )$/;"	f	class:barrier_set_t	typeref:typename:void
allocate_cu	shader.cc	/^void opndcoll_rfu_t::allocate_cu( unsigned port_num )$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
allocate_for_read	shader.h	/^      void allocate_for_read( unsigned bank, const op_t &op )$/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:void
allocate_reads	shader.cc	/^std::list<opndcoll_rfu_t::op_t> opndcoll_rfu_t::arbiter_t::allocate_reads() $/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:std::list<opndcoll_rfu_t::op_t>
allocate_reads	shader.cc	/^void opndcoll_rfu_t::allocate_reads()$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
allocation_policy_t	gpu-cache.h	/^enum allocation_policy_t {$/;"	g
allocation_t	shader.h	/^      allocation_t() { m_allocation = NO_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t
allocation_t	shader.h	/^   class allocation_t {$/;"	c	class:opndcoll_rfu_t
arbiter_t	shader.h	/^      arbiter_t()$/;"	f	class:opndcoll_rfu_t::arbiter_t
arbiter_t	shader.h	/^   class arbiter_t {$/;"	c	class:opndcoll_rfu_t
arbitration_metadata	l2cache.cc	/^memory_partition_unit::arbitration_metadata::arbitration_metadata(const struct memory_config *co/;"	f	class:memory_partition_unit::arbitration_metadata
arbitration_metadata	l2cache.h	/^   class arbitration_metadata$/;"	c	class:memory_partition_unit
ave_mrqs	dram.h	/^   unsigned int ave_mrqs;$/;"	m	class:dram_t	typeref:typename:unsigned int
ave_mrqs_partial	dram.h	/^   unsigned int ave_mrqs_partial;$/;"	m	class:dram_t	typeref:typename:unsigned int
average_duty_cycle	power_stat.h	/^   float average_duty_cycle;$/;"	m	class:power_core_stat_t	typeref:typename:float
average_pipeline_duty_cycle	gpu-sim.h	/^   float * average_pipeline_duty_cycle;$/;"	m	class:gpgpu_sim	typeref:typename:float *
bandwidth_management	gpu-cache.cc	/^baseline_cache::bandwidth_management::bandwidth_management(cache_config &config) $/;"	f	class:baseline_cache::bandwidth_management
bandwidth_management	gpu-cache.h	/^    class bandwidth_management $/;"	c	class:baseline_cache
bank_idle	shader.h	/^      bool bank_idle( unsigned bank ) const$/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:bool
bank_t	dram.h	/^struct bank_t$/;"	s
bankgrp_t	dram.h	/^struct bankgrp_t$/;"	s
bankreads	mem_latency_stat.h	/^   unsigned int ***bankreads; \/\/bankreads[shader id][dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int ***
bankwrites	mem_latency_stat.h	/^   unsigned int ***bankwrites; \/\/bankwrites[shader id][dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int ***
bar_id_to_warp_t	shader.h	/^   typedef std::map<unsigned, warp_set_t >  bar_id_to_warp_t; \/*set of warps reached a specific/;"	t	class:barrier_set_t	typeref:typename:std::map<unsigned,warp_set_t>
barrier_set_t	shader.cc	/^barrier_set_t::barrier_set_t(shader_core_ctx *shader,unsigned max_warps_per_core, unsigned max_c/;"	f	class:barrier_set_t
barrier_set_t	shader.h	/^class barrier_set_t {$/;"	c
baseline_cache	gpu-cache.h	/^    baseline_cache( const char *name, cache_config &config, int core_id, int type_id, mem_fetch_/;"	f	class:baseline_cache
baseline_cache	gpu-cache.h	/^    baseline_cache( const char *name,$/;"	f	class:baseline_cache
baseline_cache	gpu-cache.h	/^class baseline_cache : public cache_t {$/;"	c
binned_histogram	histogram.cc	/^binned_histogram::binned_histogram (const binned_histogram& other)$/;"	f	class:binned_histogram
binned_histogram	histogram.cc	/^binned_histogram::binned_histogram (std::string name, int nbins, int* bins) $/;"	f	class:binned_histogram
binned_histogram	histogram.h	/^class binned_histogram {$/;"	c
bk	addrdec.h	/^   unsigned bk;$/;"	m	struct:addrdec_t	typeref:typename:unsigned
bk	dram.h	/^   bank_t **bk;$/;"	m	class:dram_t	typeref:typename:bank_t **
bk	dram.h	/^   unsigned int bk;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
bk_tag_length	gpu-sim.h	/^   unsigned bk_tag_length; \/\/number of bits that define a bank inside a bank group$/;"	m	struct:memory_config	typeref:typename:unsigned
bkgrp	dram.h	/^   bankgrp_t **bkgrp;$/;"	m	class:dram_t	typeref:typename:bankgrp_t **
bkgrpindex	dram.h	/^   unsigned int bkgrpindex;$/;"	m	struct:bank_t	typeref:typename:unsigned int
block_addr	gpu-cache.h	/^    new_addr_type block_addr( new_addr_type addr ) const$/;"	f	class:cache_config	typeref:typename:new_addr_type
borrow_credit	l2cache.cc	/^void memory_partition_unit::arbitration_metadata::borrow_credit(int inner_sub_partition_id) $/;"	f	class:memory_partition_unit::arbitration_metadata	typeref:typename:void
broadcast_barrier_reduction	shader.cc	/^void shader_core_ctx::broadcast_barrier_reduction(unsigned cta_id,unsigned bar_id,warp_set_t war/;"	f	class:shader_core_ctx	typeref:typename:void
burst	addrdec.h	/^   unsigned burst;$/;"	m	struct:addrdec_t	typeref:typename:unsigned
busW	gpu-sim.h	/^   unsigned busW;$/;"	m	struct:memory_config	typeref:typename:unsigned
busy	gpu-cache.h	/^    bool busy() const {return false;}$/;"	f	class:mshr_table	typeref:typename:bool
busy	l2cache.cc	/^bool memory_partition_unit::busy() const $/;"	f	class:memory_partition_unit	typeref:typename:bool
busy	l2cache.cc	/^bool memory_sub_partition::busy() const $/;"	f	class:memory_sub_partition	typeref:typename:bool
bwutil	dram.h	/^   unsigned int bwutil;$/;"	m	class:dram_t	typeref:typename:unsigned int
bwutil_partial	dram.h	/^   unsigned int bwutil_partial;$/;"	m	class:dram_t	typeref:typename:unsigned int
cache_access_logger_types	stat-tool.cc	/^enum cache_access_logger_types {$/;"	g	file:
cache_block_state	gpu-cache.h	/^enum cache_block_state {$/;"	g
cache_block_t	gpu-cache.h	/^    cache_block_t()$/;"	f	struct:cache_block_t
cache_block_t	gpu-cache.h	/^struct cache_block_t {$/;"	s
cache_config	gpu-cache.h	/^    cache_config() $/;"	f	class:cache_config
cache_config	gpu-cache.h	/^class cache_config {$/;"	c
cache_cycle	l2cache.cc	/^void memory_partition_unit::cache_cycle(unsigned cycle) $/;"	f	class:memory_partition_unit	typeref:typename:void
cache_cycle	l2cache.cc	/^void memory_sub_partition::cache_cycle( unsigned cycle )$/;"	f	class:memory_sub_partition	typeref:typename:void
cache_event	gpu-cache.h	/^enum cache_event {$/;"	g
cache_flush	shader.cc	/^void shader_core_ctx::cache_flush()$/;"	f	class:shader_core_ctx	typeref:typename:void
cache_flush	shader.cc	/^void simt_core_cluster::cache_flush()$/;"	f	class:simt_core_cluster	typeref:typename:void
cache_request_status	gpu-cache.h	/^enum cache_request_status {$/;"	g
cache_request_status_str	gpu-cache.cc	/^const char * cache_request_status_str(enum cache_request_status status) $/;"	f	typeref:typename:const char *
cache_stats	gpu-cache.cc	/^cache_stats::cache_stats(){$/;"	f	class:cache_stats
cache_stats	gpu-cache.h	/^class cache_stats {$/;"	c
cache_status	gpu-cache.h	/^    FuncCache cache_status;$/;"	m	class:cache_config	typeref:typename:FuncCache
cache_sub_stats	gpu-cache.h	/^    cache_sub_stats(){$/;"	f	struct:cache_sub_stats
cache_sub_stats	gpu-cache.h	/^struct cache_sub_stats{$/;"	s
cache_t	gpu-cache.h	/^class cache_t {$/;"	c
calculate_dist	visualizer.cc	/^   void calculate_dist() {$/;"	f	class:my_time_vector	typeref:typename:void	file:
calculate_ld_dist	visualizer.cc	/^   void calculate_ld_dist(void) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
calculate_st_dist	visualizer.cc	/^   void calculate_st_dist(void) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
can_issue	shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const { return m_dispatch_reg->empty() && /;"	f	class:simd_function_unit	typeref:typename:bool
can_issue	shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const$/;"	f	class:ldst_unit	typeref:typename:bool
can_issue	shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const$/;"	f	class:pipelined_simd_unit	typeref:typename:bool
can_issue	shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const$/;"	f	class:sfu	typeref:typename:bool
can_issue	shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const$/;"	f	class:sp_unit	typeref:typename:bool
can_issue_to_dram	l2cache.cc	/^bool memory_partition_unit::can_issue_to_dram(int inner_sub_partition_id) $/;"	f	class:memory_partition_unit	typeref:typename:bool
can_start_kernel	gpu-sim.cc	/^bool gpgpu_sim::can_start_kernel()$/;"	f	class:gpgpu_sim	typeref:typename:bool
capacity	gpu-cache.h	/^        unsigned capacity() const { return m_size;}$/;"	f	class:tex_cache::fifo	typeref:typename:unsigned
cflog_print	stat-tool.cc	/^void cflog_print(FILE *fout) $/;"	f	typeref:typename:void
cflog_snapshot	stat-tool.cc	/^void cflog_snapshot( int logger_id, unsigned long long  cycle ) $/;"	f	typeref:typename:void
cflog_update_thread_pc	stat-tool.cc	/^void cflog_update_thread_pc( int logger_id, int thread_id, address_type pc ) $/;"	f	typeref:typename:void
cflog_visualizer_gzprint	stat-tool.cc	/^void cflog_visualizer_gzprint(gzFile fout) $/;"	f	typeref:typename:void
cflog_visualizer_print	stat-tool.cc	/^void cflog_visualizer_print(FILE *fout) $/;"	f	typeref:typename:void
change_cache_config	gpu-sim.cc	/^void gpgpu_sim::change_cache_config(FuncCache cache_config)$/;"	f	class:gpgpu_sim	typeref:typename:void
checkCollision	scoreboard.cc	/^bool Scoreboard::checkCollision( unsigned wid, const class inst_t *inst ) const$/;"	f	class:Scoreboard	typeref:typename:bool
checkExecutionStatusAndUpdate	shader.cc	/^void shader_core_ctx::checkExecutionStatusAndUpdate(warp_inst_t &inst, unsigned t, unsigned tid)$/;"	f	class:shader_core_ctx	typeref:typename:void
check_if_non_released_reduction_barrier	shader.cc	/^bool shader_core_ctx::check_if_non_released_reduction_barrier(warp_inst_t &inst)$/;"	f	class:shader_core_ctx	typeref:typename:bool
check_ld_update	visualizer.cc	/^   void check_ld_update(unsigned int uid,unsigned int slot, long int latency) { $/;"	f	class:my_time_vector	typeref:typename:void	file:
check_mshr_parameters	gpu-cache.h	/^    void check_mshr_parameters( unsigned num_entries, unsigned max_merged )$/;"	f	class:mshr_table	typeref:typename:void
check_st_update	visualizer.cc	/^   void check_st_update(unsigned int uid,unsigned int slot, long int latency) { $/;"	f	class:my_time_vector	typeref:typename:void	file:
check_time_vector_update	visualizer.cc	/^void check_time_vector_update(unsigned int uid,int slot ,long int latency,int type) $/;"	f	typeref:typename:void
check_valid	gpu-cache.cc	/^bool cache_stats::check_valid(int type, int status) const{$/;"	f	class:cache_stats	typeref:typename:bool
chip	addrdec.h	/^   unsigned chip;$/;"	m	struct:addrdec_t	typeref:typename:unsigned
cid_to_sid	shader.h	/^    unsigned cid_to_sid( unsigned cid, unsigned cluster_id ) const { return cluster_id*n_simt_co/;"	f	struct:shader_core_config	typeref:typename:unsigned
classify_memfetch	traffic_breakdown.cc	/^std::string traffic_breakdown::classify_memfetch(class mem_fetch * mf)$/;"	f	class:traffic_breakdown	typeref:typename:std::string
clean	Makefile	/^clean:$/;"	t
clear	gpu-cache.cc	/^void cache_stats::clear(){$/;"	f	class:cache_stats	typeref:typename:void
clear	gpu-cache.h	/^    void clear(){$/;"	f	struct:cache_sub_stats	typeref:typename:void
clearBits	warp_status.cc	/^	void WST::clearBits () {$/;"	f	class:WST	typeref:typename:void
clearStallBits	warp_status.cc	/^	void WST::clearStallBits () {$/;"	f	class:WST	typeref:typename:void
clear_executed_kernel_info	gpu-sim.cc	/^void gpgpu_sim::clear_executed_kernel_info()$/;"	f	class:gpgpu_sim	typeref:typename:void
clear_imiss_pending	shader.h	/^    void clear_imiss_pending() { m_imiss_pending=false; }$/;"	f	class:shd_warp_t	typeref:typename:void
clear_membar	shader.h	/^    void clear_membar() { m_membar=false; }$/;"	f	class:shd_warp_t	typeref:typename:void
clear_time_map_vectors	visualizer.cc	/^   void clear_time_map_vectors(void) {   $/;"	f	class:my_time_vector	typeref:typename:void	file:
clock_multiplier	shader.cc	/^unsigned ldst_unit::clock_multiplier() const$/;"	f	class:ldst_unit	typeref:typename:unsigned
clock_multiplier	shader.h	/^    virtual unsigned clock_multiplier() const { return 1; }$/;"	f	class:simd_function_unit	typeref:typename:unsigned
coalesced_segment	shader.cc	/^address_type coalesced_segment(address_type addr, unsigned segment_size_lg2bytes)$/;"	f	typeref:typename:address_type
col	addrdec.h	/^   unsigned col;$/;"	m	struct:addrdec_t	typeref:typename:unsigned
col	dram.h	/^   unsigned int col;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
collect_operand	shader.h	/^      void collect_operand( unsigned op )$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:void
collector_unit_t	shader.h	/^      collector_unit_t()$/;"	f	class:opndcoll_rfu_t::collector_unit_t
collector_unit_t	shader.h	/^   class collector_unit_t {$/;"	c	class:opndcoll_rfu_t
compute_ready_warps	shader.h	/^    std::vector< shd_warp_t* > compute_ready_warps;$/;"	m	class:scheduler_unit	typeref:typename:std::vector<shd_warp_t * >
concrete_scheduler	shader.h	/^enum concrete_scheduler$/;"	g
concurrent_row_access	mem_latency_stat.h	/^   unsigned int **concurrent_row_access; \/\/concurrent_row_access[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
constant_cycle	shader.cc	/^bool ldst_unit::constant_cycle( warp_inst_t &inst, mem_stage_stall_type &rc_fail, mem_stage_acce/;"	f	class:ldst_unit	typeref:typename:bool
core_cache_stats	power_stat.h	/^    class cache_stats core_cache_stats[NUM_STAT_IDX]; \/\/ Total core stats$/;"	m	struct:mem_power_stats_pod	typeref:class:cache_stats[]
core_cycle	shader.cc	/^void simt_core_cluster::core_cycle()$/;"	f	class:simt_core_cluster	typeref:typename:void
core_freq	gpu-sim.h	/^    double core_freq;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
core_period	gpu-sim.h	/^    double core_period;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
core_time	gpu-sim.h	/^   double core_time;$/;"	m	class:gpgpu_sim	typeref:typename:double
create_thread_CFlogger	stat-tool.cc	/^void create_thread_CFlogger( int n_loggers, int n_threads, address_type start_pc, unsigned long /;"	f	typeref:typename:void
cta_to_warp_t	shader.h	/^   typedef std::map<unsigned, warp_set_t >  cta_to_warp_t;$/;"	t	class:barrier_set_t	typeref:typename:std::map<unsigned,warp_set_t>
ctrlBit	warp_status.h	/^			unsigned char ctrlBit;$/;"	m	union:WST::table_entry::__anon2e250678010a	typeref:typename:unsigned char
cu_sets_t	shader.h	/^   typedef std::map<unsigned \/* collector set *\/, std::vector<collector_unit_t> \/*collector s/;"	t	class:opndcoll_rfu_t	typeref:typename:std::map<unsigned,std::vector<collector_unit_t>>
curr_row	dram.h	/^   unsigned int curr_row;$/;"	m	struct:bank_t	typeref:typename:unsigned int
curr_row_service_time	dram_sched.h	/^   unsigned *curr_row_service_time; \/\/one set of variables for each bank.$/;"	m	class:frfcfs_scheduler	typeref:typename:unsigned *
cycle	dram.cc	/^void dram_t::cycle()$/;"	f	class:dram_t	typeref:typename:void
cycle	gpu-cache.cc	/^void baseline_cache::cycle(){$/;"	f	class:baseline_cache	typeref:typename:void
cycle	gpu-cache.cc	/^void tex_cache::cycle(){$/;"	f	class:tex_cache	typeref:typename:void
cycle	gpu-sim.cc	/^void gpgpu_sim::cycle()$/;"	f	class:gpgpu_sim	typeref:typename:void
cycle	shader.cc	/^void ldst_unit::cycle()$/;"	f	class:ldst_unit	typeref:typename:void
cycle	shader.cc	/^void pipelined_simd_unit::cycle()$/;"	f	class:pipelined_simd_unit	typeref:typename:void
cycle	shader.cc	/^void scheduler_unit::cycle()$/;"	f	class:scheduler_unit	typeref:typename:void
cycle	shader.cc	/^void shader_core_ctx::cycle()$/;"	f	class:shader_core_ctx	typeref:typename:void
data	dram.h	/^   class mem_fetch * data;$/;"	m	class:dram_req_t	typeref:class:mem_fetch *
data_block	gpu-cache.h	/^        data_block() { m_valid = false;}$/;"	f	struct:tex_cache::data_block
data_block	gpu-cache.h	/^    struct data_block {$/;"	s	class:tex_cache
data_cache	gpu-cache.h	/^    data_cache( const char *name, cache_config &config,$/;"	f	class:data_cache
data_cache	gpu-cache.h	/^    data_cache( const char *name,$/;"	f	class:data_cache
data_cache	gpu-cache.h	/^class data_cache : public baseline_cache {$/;"	c
data_collection	dram_sched.cc	/^void frfcfs_scheduler::data_collection(unsigned int bank)$/;"	f	class:frfcfs_scheduler	typeref:typename:void
data_command_freq_ratio	gpu-sim.h	/^   unsigned data_command_freq_ratio; \/\/ frequency ratio between DRAM data bus and command bus /;"	m	struct:memory_config	typeref:typename:unsigned
data_port_busy_cycles	gpu-cache.h	/^    unsigned long long data_port_busy_cycles; $/;"	m	struct:cache_sub_stats	typeref:typename:unsigned long long
data_port_free	gpu-cache.cc	/^bool baseline_cache::bandwidth_management::data_port_free() const$/;"	f	class:baseline_cache::bandwidth_management	typeref:typename:bool
data_port_free	gpu-cache.h	/^    bool data_port_free() const { return m_bandwidth_management.data_port_free(); } $/;"	f	class:baseline_cache	typeref:typename:bool
data_port_free	gpu-cache.h	/^    bool data_port_free() const { return true; }$/;"	f	class:tex_cache	typeref:typename:bool
deadlock_check	gpu-sim.cc	/^void gpgpu_sim::deadlock_check()$/;"	f	class:gpgpu_sim	typeref:typename:void
deallocate_barrier	shader.cc	/^void barrier_set_t::deallocate_barrier( unsigned cta_id )$/;"	f	class:barrier_set_t	typeref:typename:void
dec_inst_in_pipeline	shader.h	/^    void dec_inst_in_pipeline( unsigned warp_id ) { m_warp[warp_id].dec_inst_in_pipeline(); } \//;"	f	class:shader_core_ctx	typeref:typename:void
dec_inst_in_pipeline	shader.h	/^    void dec_inst_in_pipeline() $/;"	f	class:shd_warp_t	typeref:typename:void
dec_n_atomic	shader.h	/^    void dec_n_atomic(unsigned n) { m_n_atomic-=n; }$/;"	f	class:shd_warp_t	typeref:typename:void
dec_store_req	shader.h	/^    void dec_store_req() $/;"	f	class:shd_warp_t	typeref:typename:void
decode	shader.cc	/^void shader_core_ctx::decode()$/;"	f	class:shader_core_ctx	typeref:typename:void
decrement_atomic_count	shader.cc	/^void shader_core_ctx::decrement_atomic_count( unsigned wid, unsigned n )$/;"	f	class:shader_core_ctx	typeref:typename:void
depend	Makefile	/^depend:$/;"	t
destroy_thread_CFlogger	stat-tool.cc	/^void destroy_thread_CFlogger( ) $/;"	f	typeref:typename:void
disabled	gpu-cache.h	/^    bool disabled() const { return m_disabled;}$/;"	f	class:cache_config	typeref:typename:bool
dispatch	shader.cc	/^void opndcoll_rfu_t::collector_unit_t::dispatch()$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:void
dispatch_ready_cu	shader.cc	/^void opndcoll_rfu_t::dispatch_ready_cu()$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
dispatch_unit_t	shader.h	/^      dispatch_unit_t(std::vector<collector_unit_t>* cus) $/;"	f	class:opndcoll_rfu_t::dispatch_unit_t
dispatch_unit_t	shader.h	/^   class dispatch_unit_t {$/;"	c	class:opndcoll_rfu_t
display	gpu-cache.cc	/^void mshr_table::display( FILE *fp ) const{$/;"	f	class:mshr_table	typeref:typename:void
display_pipeline	shader.cc	/^void shader_core_ctx::display_pipeline(FILE *fout, int print_mem, int mask ) const$/;"	f	class:shader_core_ctx	typeref:typename:void
display_pipeline	shader.cc	/^void simt_core_cluster::display_pipeline( unsigned sid, FILE *fout, int print_mem, int mask )$/;"	f	class:simt_core_cluster	typeref:typename:void
display_simt_state	shader.cc	/^void shader_core_ctx::display_simt_state(FILE *fout, int mask ) const$/;"	f	class:shader_core_ctx	typeref:typename:void
display_state	gpu-cache.cc	/^void baseline_cache::display_state( FILE *fp ) const{$/;"	f	class:baseline_cache	typeref:typename:void
display_state	gpu-cache.cc	/^void tex_cache::display_state( FILE *fp ) const$/;"	f	class:tex_cache	typeref:typename:void
do_atomic	mem_fetch.cc	/^void mem_fetch::do_atomic()$/;"	f	class:mem_fetch	typeref:typename:void
do_on_warp_issued	shader.cc	/^void scheduler_unit::do_on_warp_issued( unsigned warp_id,$/;"	f	class:scheduler_unit	typeref:typename:void
do_on_warp_issued	shader.cc	/^void two_level_active_scheduler::do_on_warp_issued( unsigned warp_id,$/;"	f	class:two_level_active_scheduler	typeref:typename:void
done_adding_supervised_warps	shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:gto_scheduler	typeref:typename:void
done_adding_supervised_warps	shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:lrr_scheduler	typeref:typename:void
done_adding_supervised_warps	shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:mascar_scheduler	typeref:typename:void
done_adding_supervised_warps	shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:scheduler_unit	typeref:typename:void
done_adding_supervised_warps	shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:swl_scheduler	typeref:typename:void
done_adding_supervised_warps	shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:two_level_active_scheduler	typeref:typename:void
done_exit	shader.h	/^    bool done_exit() const { return m_done_exit; }$/;"	f	class:shd_warp_t	typeref:typename:bool
dq_lat_table	mem_latency_stat.h	/^   unsigned dq_lat_table[32];$/;"	m	class:memory_stats_t	typeref:typename:unsigned[32]
dqbytes	dram.h	/^   unsigned int dqbytes;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
dram_L2_queue_full	l2cache.cc	/^bool memory_sub_partition::dram_L2_queue_full() const$/;"	f	class:memory_sub_partition	typeref:typename:bool
dram_L2_queue_push	l2cache.cc	/^void memory_sub_partition::dram_L2_queue_push( class mem_fetch* mf )$/;"	f	class:memory_sub_partition	typeref:typename:void
dram_atom_size	gpu-sim.h	/^   unsigned dram_atom_size; \/\/ number of bytes transferred per read or write command $/;"	m	struct:memory_config	typeref:typename:unsigned
dram_ctrl_t	gpu-sim.h	/^enum dram_ctrl_t {$/;"	g
dram_cycle	l2cache.cc	/^void memory_partition_unit::dram_cycle() $/;"	f	class:memory_partition_unit	typeref:typename:void
dram_delay_t	l2cache.h	/^   struct dram_delay_t$/;"	s	class:memory_partition_unit
dram_eff_bins	dram.h	/^   unsigned int dram_eff_bins[10];$/;"	m	class:dram_t	typeref:typename:unsigned int[10]
dram_freq	gpu-sim.h	/^    double dram_freq;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
dram_latency	gpu-sim.h	/^   unsigned dram_latency;$/;"	m	struct:memory_config	typeref:typename:unsigned
dram_log	gpu-sim.cc	/^void dram_t::dram_log( int task ) $/;"	f	class:dram_t	typeref:typename:void
dram_period	gpu-sim.h	/^    double dram_period;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
dram_req_t	dram.cc	/^dram_req_t::dram_req_t( class mem_fetch *mf )$/;"	f	class:dram_req_t
dram_req_t	dram.h	/^class dram_req_t {$/;"	c
dram_sched_h_INCLUDED	dram_sched.h	/^#define dram_sched_h_INCLUDED$/;"	d
dram_t	dram.cc	/^dram_t::dram_t( unsigned int partition_id, const struct memory_config *config, memory_stats_t *s/;"	f	class:dram_t
dram_t	dram.h	/^class dram_t $/;"	c
dram_time	gpu-sim.h	/^   double dram_time;$/;"	m	class:gpgpu_sim	typeref:typename:double
dram_util_bins	dram.h	/^   unsigned int dram_util_bins[10];$/;"	m	class:dram_t	typeref:typename:unsigned int[10]
dump	shader.cc	/^void barrier_set_t::dump()$/;"	f	class:barrier_set_t	typeref:typename:void
dump	shader.cc	/^void opndcoll_rfu_t::collector_unit_t::dump(FILE *fp, const shader_core_ctx *shader ) const$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:void
dump	shader.h	/^      void dump(FILE *fp) const $/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:void
dump	shader.h	/^      void dump(FILE *fp) const {$/;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:void
dump	shader.h	/^      void dump(FILE *fp) const$/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:void
dump	shader.h	/^   void dump( FILE *fp ) const$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
dump_pipeline	gpu-sim.cc	/^void gpgpu_sim::dump_pipeline( int mask, int s, int m ) const$/;"	f	class:gpgpu_sim	typeref:typename:void
dump_warp_state	gpu-sim.cc	/^void shader_core_ctx::dump_warp_state( FILE *fout ) const$/;"	f	class:shader_core_ctx	typeref:typename:void
element_exist_stack	stack.cc	/^int element_exist_stack(Stack *S, address_type value) {$/;"	f	typeref:typename:int
empty	delayqueue.h	/^   bool empty() const { return m_head == NULL; }$/;"	f	class:fifo_pipeline	typeref:typename:bool
empty	gpu-cache.h	/^        bool empty() const { return m_num == 0;}$/;"	f	class:tex_cache::fifo	typeref:typename:bool
empty_stack	stack.cc	/^int empty_stack(Stack *S) {$/;"	f	typeref:typename:int
event_warp_issued	shader.cc	/^void shader_core_stats::event_warp_issued( unsigned s_id, unsigned warp_id, unsigned num_issued,/;"	f	class:shader_core_stats	typeref:typename:void
execute	shader.cc	/^void shader_core_ctx::execute()$/;"	f	class:shader_core_ctx	typeref:typename:void
executed_kernel_info_string	gpu-sim.cc	/^std::string gpgpu_sim::executed_kernel_info_string() $/;"	f	class:gpgpu_sim	typeref:typename:std::string
exit_parse_error	gpu-cache.h	/^    void exit_parse_error()$/;"	f	class:cache_config	typeref:typename:void
extra_mf_fields	gpu-cache.h	/^        extra_mf_fields( new_addr_type a, unsigned i, unsigned d ) $/;"	f	struct:baseline_cache::extra_mf_fields
extra_mf_fields	gpu-cache.h	/^        extra_mf_fields( unsigned i ) $/;"	f	struct:tex_cache::extra_mf_fields
extra_mf_fields	gpu-cache.h	/^        extra_mf_fields()  { m_valid = false;}$/;"	f	struct:baseline_cache::extra_mf_fields
extra_mf_fields	gpu-cache.h	/^        extra_mf_fields()  { m_valid = false;}$/;"	f	struct:tex_cache::extra_mf_fields
extra_mf_fields	gpu-cache.h	/^    struct extra_mf_fields {$/;"	s	class:baseline_cache
extra_mf_fields	gpu-cache.h	/^    struct extra_mf_fields {$/;"	s	class:tex_cache
extra_mf_fields_lookup	gpu-cache.h	/^    typedef std::map<mem_fetch*,extra_mf_fields> extra_mf_fields_lookup;$/;"	t	class:baseline_cache	typeref:typename:std::map<mem_fetch *,extra_mf_fields>
extra_mf_fields_lookup	gpu-cache.h	/^    typedef std::map<mem_fetch*,extra_mf_fields> extra_mf_fields_lookup;$/;"	t	class:tex_cache	typeref:typename:std::map<mem_fetch *,extra_mf_fields>
fetch	shader.cc	/^void shader_core_ctx::fetch()$/;"	f	class:shader_core_ctx	typeref:typename:void
fetch_unit_response_buffer_full	shader.cc	/^bool shader_core_ctx::fetch_unit_response_buffer_full() const$/;"	f	class:shader_core_ctx	typeref:typename:bool
fifo	gpu-cache.h	/^        fifo( unsigned size ) $/;"	f	class:tex_cache::fifo
fifo	gpu-cache.h	/^    template<class T> class fifo {$/;"	c	class:tex_cache
fifo_data	delayqueue.h	/^struct fifo_data {$/;"	s
fifo_pipeline	delayqueue.h	/^   fifo_pipeline(const char* nm, unsigned int minlen, unsigned int maxlen ) $/;"	f	class:fifo_pipeline
fifo_pipeline	delayqueue.h	/^class fifo_pipeline {$/;"	c
fifo_pipeline	dram.cc	/^template class fifo_pipeline<dram_req_t>;$/;"	v	typeref:typename:class
fifo_pipeline	dram.cc	/^template class fifo_pipeline<mem_fetch>;$/;"	v	typeref:typename:class
fill	gpu-cache.cc	/^void baseline_cache::fill(mem_fetch *mf, unsigned time){$/;"	f	class:baseline_cache	typeref:typename:void
fill	gpu-cache.cc	/^void tag_array::fill( new_addr_type addr, unsigned time )$/;"	f	class:tag_array	typeref:typename:void
fill	gpu-cache.cc	/^void tag_array::fill( unsigned index, unsigned time ) $/;"	f	class:tag_array	typeref:typename:void
fill	gpu-cache.cc	/^void tex_cache::fill( mem_fetch *mf, unsigned time )$/;"	f	class:tex_cache	typeref:typename:void
fill	gpu-cache.h	/^    void fill( unsigned time )$/;"	f	struct:cache_block_t	typeref:typename:void
fill	shader.cc	/^void ldst_unit::fill( mem_fetch *mf )$/;"	f	class:ldst_unit	typeref:typename:void
fill_port_busy_cycles	gpu-cache.h	/^    unsigned long long fill_port_busy_cycles; $/;"	m	struct:cache_sub_stats	typeref:typename:unsigned long long
fill_port_free	gpu-cache.cc	/^bool baseline_cache::bandwidth_management::fill_port_free() const$/;"	f	class:baseline_cache::bandwidth_management	typeref:typename:bool
fill_port_free	gpu-cache.h	/^    bool fill_port_free() const { return m_bandwidth_management.fill_port_free(); } $/;"	f	class:baseline_cache	typeref:typename:bool
fill_port_free	gpu-cache.h	/^    bool fill_port_free() const { return true; }$/;"	f	class:tex_cache	typeref:typename:bool
find_ready	shader.h	/^      collector_unit_t *find_ready()$/;"	f	class:opndcoll_rfu_t::dispatch_unit_t	typeref:typename:collector_unit_t *
finished_kernel	gpu-sim.cc	/^unsigned gpgpu_sim::finished_kernel()$/;"	f	class:gpgpu_sim	typeref:typename:unsigned
firstCheck	shader.h	/^    int firstCheck;$/;"	m	class:scheduler_unit	typeref:typename:int
flush	gpu-cache.cc	/^void tag_array::flush() $/;"	f	class:tag_array	typeref:typename:void
flush	gpu-cache.h	/^    void flush(){m_tag_array->flush();}$/;"	f	class:baseline_cache	typeref:typename:void
flush	shader.cc	/^void ldst_unit::flush(){$/;"	f	class:ldst_unit	typeref:typename:void
flushL2	l2cache.cc	/^unsigned memory_sub_partition::flushL2() $/;"	f	class:memory_sub_partition	typeref:typename:unsigned
fprint	histogram.cc	/^void binned_histogram::fprint (FILE *fout) const$/;"	f	class:binned_histogram	typeref:typename:void
fragment_entry	gpu-cache.h	/^        fragment_entry( mem_fetch *mf, unsigned idx, bool m, unsigned d )$/;"	f	struct:tex_cache::fragment_entry
fragment_entry	gpu-cache.h	/^        fragment_entry() {}$/;"	f	struct:tex_cache::fragment_entry
fragment_entry	gpu-cache.h	/^    struct fragment_entry {$/;"	s	class:tex_cache
free_stack	stack.cc	/^void free_stack(Stack *S) {$/;"	f	typeref:typename:void
frfcfs_scheduler	dram_sched.cc	/^frfcfs_scheduler::frfcfs_scheduler( const memory_config *config, dram_t *dm, memory_stats_t *sta/;"	f	class:frfcfs_scheduler
frfcfs_scheduler	dram_sched.h	/^class frfcfs_scheduler {$/;"	c
full	delayqueue.h	/^   bool full() const { return (m_max_len && m_length >= m_max_len); }$/;"	f	class:fifo_pipeline	typeref:typename:bool
full	dram.cc	/^bool dram_t::full() const $/;"	f	class:dram_t	typeref:typename:bool
full	gpu-cache.cc	/^bool mshr_table::full( new_addr_type block_addr ) const{$/;"	f	class:mshr_table	typeref:typename:bool
full	gpu-cache.h	/^        bool full() const { return m_num == m_size;}$/;"	f	class:tex_cache::fifo	typeref:typename:bool
full	l2cache.cc	/^bool memory_sub_partition::full() const$/;"	f	class:memory_sub_partition	typeref:typename:bool
full	l2cache.h	/^    virtual bool full( unsigned size, bool write) const $/;"	f	class:L2interface	typeref:typename:bool
full	shader.h	/^    virtual bool full( unsigned size, bool write ) const $/;"	f	class:shader_memory_interface	typeref:typename:bool
full	shader.h	/^    virtual bool full( unsigned size, bool write) const$/;"	f	class:perfect_memory_interface	typeref:typename:bool
full_stack	stack.cc	/^int full_stack(Stack *S) {$/;"	f	typeref:typename:int
func_exec_inst	shader.cc	/^void shader_core_ctx::func_exec_inst( warp_inst_t &inst )$/;"	f	class:shader_core_ctx	typeref:typename:void
functional_done	shader.cc	/^bool shd_warp_t::functional_done() const$/;"	f	class:shd_warp_t	typeref:typename:bool
g_interactive_debugger_enabled	gpu-sim.cc	/^bool g_interactive_debugger_enabled=false;$/;"	v	typeref:typename:bool
g_metric_trace_filename	gpu-sim.h	/^    char *g_metric_trace_filename;$/;"	m	struct:power_config	typeref:typename:char *
g_my_time_vector	visualizer.cc	/^my_time_vector* g_my_time_vector; $/;"	v	typeref:typename:my_time_vector *
g_network_config_filename	icnt_wrapper.cc	/^char* g_network_config_filename;$/;"	v	typeref:typename:char *
g_network_mode	icnt_wrapper.cc	/^int   g_network_mode;$/;"	v	typeref:typename:int
g_power_config_name	gpu-sim.h	/^	char *g_power_config_name;$/;"	m	struct:power_config	typeref:typename:char *
g_power_filename	gpu-sim.h	/^    char *g_power_filename;$/;"	m	struct:power_config	typeref:typename:char *
g_power_per_cycle_dump	gpu-sim.h	/^    bool g_power_per_cycle_dump;$/;"	m	struct:power_config	typeref:typename:bool
g_power_simulation_enabled	gpu-sim.h	/^    bool g_power_simulation_enabled;$/;"	m	struct:power_config	typeref:typename:bool
g_power_simulator_debug	gpu-sim.h	/^    bool g_power_simulator_debug;$/;"	m	struct:power_config	typeref:typename:bool
g_power_trace_enabled	gpu-sim.h	/^    bool g_power_trace_enabled;$/;"	m	struct:power_config	typeref:typename:bool
g_power_trace_filename	gpu-sim.h	/^    char *g_power_trace_filename;$/;"	m	struct:power_config	typeref:typename:char *
g_power_trace_zlevel	gpu-sim.h	/^    int g_power_trace_zlevel;$/;"	m	struct:power_config	typeref:typename:int
g_single_step	gpu-sim.cc	/^unsigned long long g_single_step=0; \/\/ set this in gdb to single step the pipeline$/;"	v	typeref:typename:unsigned long long
g_steady_power_levels_enabled	gpu-sim.h	/^    bool g_steady_power_levels_enabled;$/;"	m	struct:power_config	typeref:typename:bool
g_steady_state_tracking_filename	gpu-sim.h	/^    char * g_steady_state_tracking_filename;$/;"	m	struct:power_config	typeref:typename:char *
g_use_nonlinear_model	gpu-sim.h	/^    bool g_use_nonlinear_model;$/;"	m	struct:power_config	typeref:typename:bool
g_visualizer_enabled	gpu-sim.h	/^    bool  g_visualizer_enabled;$/;"	m	class:gpgpu_sim_config	typeref:typename:bool
g_visualizer_filename	gpu-sim.h	/^    char *g_visualizer_filename;$/;"	m	class:gpgpu_sim_config	typeref:typename:char *
g_visualizer_zlevel	gpu-sim.h	/^    int   g_visualizer_zlevel;$/;"	m	class:gpgpu_sim_config	typeref:typename:int
gap	addrdec.h	/^   unsigned int gap;$/;"	m	class:linear_to_raw_address_translation	typeref:typename:unsigned int
getMemoryBit	warp_status.cc	/^	char WST::getMemoryBit (unsigned warpId) const {$/;"	f	class:WST	typeref:typename:char
getMemoryConfig	gpu-sim.cc	/^const struct memory_config * gpgpu_sim::getMemoryConfig()$/;"	f	class:gpgpu_sim	typeref:typename:const struct memory_config *
getSIMTCluster	gpu-sim.cc	/^simt_core_cluster * gpgpu_sim::getSIMTCluster()$/;"	f	class:gpgpu_sim	typeref:typename:simt_core_cluster *
getShaderCoreConfig	gpu-sim.cc	/^const struct shader_core_config * gpgpu_sim::getShaderCoreConfig()$/;"	f	class:gpgpu_sim	typeref:typename:const struct shader_core_config *
getStallBit	warp_status.cc	/^	char WST::getStallBit (unsigned warpId) const {$/;"	f	class:WST	typeref:typename:char
get_L1C_sub_stats	shader.cc	/^void ldst_unit::get_L1C_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:ldst_unit	typeref:typename:void
get_L1C_sub_stats	shader.cc	/^void shader_core_ctx::get_L1C_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:shader_core_ctx	typeref:typename:void
get_L1C_sub_stats	shader.cc	/^void simt_core_cluster::get_L1C_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:simt_core_cluster	typeref:typename:void
get_L1D_sub_stats	shader.cc	/^void ldst_unit::get_L1D_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:ldst_unit	typeref:typename:void
get_L1D_sub_stats	shader.cc	/^void shader_core_ctx::get_L1D_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:shader_core_ctx	typeref:typename:void
get_L1D_sub_stats	shader.cc	/^void simt_core_cluster::get_L1D_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:simt_core_cluster	typeref:typename:void
get_L1I_sub_stats	shader.cc	/^void shader_core_ctx::get_L1I_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:shader_core_ctx	typeref:typename:void
get_L1I_sub_stats	shader.cc	/^void simt_core_cluster::get_L1I_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:simt_core_cluster	typeref:typename:void
get_L1T_sub_stats	shader.cc	/^void ldst_unit::get_L1T_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:ldst_unit	typeref:typename:void
get_L1T_sub_stats	shader.cc	/^void shader_core_ctx::get_L1T_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:shader_core_ctx	typeref:typename:void
get_L1T_sub_stats	shader.cc	/^void simt_core_cluster::get_L1T_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:simt_core_cluster	typeref:typename:void
get_L2cache_sub_stats	l2cache.cc	/^void memory_sub_partition::get_L2cache_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:memory_sub_partition	typeref:typename:void
get_access_byte_mask	mem_fetch.h	/^   mem_access_byte_mask_t get_access_byte_mask() const { return m_access.get_byte_mask(); }$/;"	f	class:mem_fetch	typeref:typename:mem_access_byte_mask_t
get_access_type	mem_fetch.h	/^   enum mem_access_type get_access_type() const { return m_access.get_type(); }$/;"	f	class:mem_fetch	typeref:enum:mem_access_type
get_access_warp_mask	mem_fetch.h	/^   const active_mask_t& get_access_warp_mask() const { return m_access.get_warp_mask(); }$/;"	f	class:mem_fetch	typeref:typename:const active_mask_t &
get_active_count	shader.h	/^      unsigned get_active_count() const { return m_warp->active_count(); }$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
get_active_count	shader.h	/^      unsigned get_active_count() const$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
get_active_lanes_in_pipeline	shader.h	/^    virtual unsigned get_active_lanes_in_pipeline()$/;"	f	class:pipelined_simd_unit	typeref:typename:unsigned
get_active_mask	shader.h	/^      const active_mask_t & get_active_mask() const { return m_warp->get_active_mask(); }$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:const active_mask_t &
get_active_mask	shader.h	/^      const active_mask_t & get_active_mask()$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:const active_mask_t &
get_addr	mem_fetch.h	/^   new_addr_type get_addr() const { return m_access.get_addr(); }$/;"	f	class:mem_fetch	typeref:typename:new_addr_type
get_bank	shader.h	/^      unsigned get_bank() const { return m_bank; }$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
get_block	gpu-cache.h	/^    cache_block_t &get_block(unsigned idx) { return m_lines[idx];}$/;"	f	class:tag_array	typeref:typename:cache_block_t &
get_cache_config	gpu-sim.cc	/^FuncCache gpgpu_sim::get_cache_config(std::string kernel_name)$/;"	f	class:gpgpu_sim	typeref:typename:FuncCache
get_cache_misses	power_stat.h	/^    unsigned get_cache_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_cache_read_misses	power_stat.h	/^    unsigned get_cache_read_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_cache_stats	shader.cc	/^void ldst_unit::get_cache_stats(cache_stats &cs) {$/;"	f	class:ldst_unit	typeref:typename:void
get_cache_stats	shader.cc	/^void shader_core_ctx::get_cache_stats(cache_stats &cs){$/;"	f	class:shader_core_ctx	typeref:typename:void
get_cache_stats	shader.cc	/^void simt_core_cluster::get_cache_stats(cache_stats &cs) const{$/;"	f	class:simt_core_cluster	typeref:typename:void
get_cache_status	gpu-cache.h	/^    FuncCache get_cache_status() {return cache_status;}$/;"	f	class:cache_config	typeref:typename:FuncCache
get_cache_write_misses	power_stat.h	/^    unsigned get_cache_write_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_committed_inst	power_stat.h	/^    unsigned get_committed_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_config	gpu-sim.h	/^   const gpgpu_sim_config &get_config() const { return m_config; }$/;"	f	class:gpgpu_sim	typeref:typename:const gpgpu_sim_config &
get_config	shader.h	/^    const shader_core_config *get_config() const { return m_config; }$/;"	f	class:shader_core_ctx	typeref:typename:const shader_core_config *
get_constant_c_accesses	power_stat.h	/^    unsigned get_constant_c_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_constant_c_hits	power_stat.h	/^    unsigned get_constant_c_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_constant_c_misses	power_stat.h	/^    unsigned get_constant_c_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_cta_id	shader.h	/^    unsigned get_cta_id() const { return m_cta_id; }$/;"	f	class:shd_warp_t	typeref:typename:unsigned
get_ctrl_size	mem_fetch.h	/^   unsigned get_ctrl_size() const { return m_ctrl_size; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_data_size	mem_fetch.h	/^   unsigned get_data_size() const { return m_data_size; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_dram_act	power_stat.h	/^    unsigned get_dram_act(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_activity	power_stat.h	/^    unsigned get_dram_activity(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_cmd	power_stat.h	/^    unsigned get_dram_cmd(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_nop	power_stat.h	/^    unsigned get_dram_nop(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_pre	power_stat.h	/^    unsigned get_dram_pre(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_rd	power_stat.h	/^    unsigned get_dram_rd(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_req	power_stat.h	/^    unsigned get_dram_req(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dram_wr	power_stat.h	/^    unsigned get_dram_wr(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_dynamic_warp_id	shader.h	/^    unsigned get_dynamic_warp_id() const { return m_dynamic_warp_id; }$/;"	f	class:shd_warp_t	typeref:typename:unsigned
get_dynamic_warp_issue	shader.h	/^    const std::vector< std::vector<unsigned> >& get_dynamic_warp_issue() const$/;"	f	class:shader_core_stats	typeref:typename:const std::vector<std::vector<unsigned>> &
get_fpdiv_accessess	power_stat.h	/^    unsigned get_fpdiv_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_fpmul_accessess	power_stat.h	/^    unsigned get_fpmul_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_gpu	shader.h	/^    gpgpu_sim *get_gpu() { return m_gpu; }$/;"	f	class:simt_core_cluster	typeref:typename:gpgpu_sim *
get_ialu_accessess	power_stat.h	/^    unsigned get_ialu_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_icnt_mem_to_simt	power_stat.h	/^    long get_icnt_mem_to_simt(){$/;"	f	class:power_stat_t	typeref:typename:long
get_icnt_power_stats	shader.cc	/^void shader_core_ctx::get_icnt_power_stats(long &n_simt_to_mem, long &n_mem_to_simt) const{$/;"	f	class:shader_core_ctx	typeref:typename:void
get_icnt_receive_time	mem_fetch.h	/^   unsigned get_icnt_receive_time() const { return m_icnt_receive_time; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_icnt_simt_to_mem	power_stat.h	/^    long get_icnt_simt_to_mem(){$/;"	f	class:power_stat_t	typeref:typename:long
get_icnt_stats	shader.cc	/^void simt_core_cluster::get_icnt_stats(long &n_simt_to_mem, long &n_mem_to_simt) const {$/;"	f	class:simt_core_cluster	typeref:typename:void
get_id	l2cache.h	/^   unsigned get_id() const { return m_id; } $/;"	f	class:memory_sub_partition	typeref:typename:unsigned
get_id	shader.h	/^      unsigned get_id() const { return m_cuid; } \/\/ returns CU hw id$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
get_inst	mem_fetch.h	/^   const warp_inst_t &get_inst() { return m_inst; }$/;"	f	class:mem_fetch	typeref:typename:const warp_inst_t &
get_inst_c_accesses	power_stat.h	/^    unsigned get_inst_c_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_inst_c_hits	power_stat.h	/^    unsigned get_inst_c_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_inst_c_misses	power_stat.h	/^    unsigned get_inst_c_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_intdiv_accessess	power_stat.h	/^    unsigned get_intdiv_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_interval	stat-tool.h	/^   const unsigned long long & get_interval() const { return m_snap_shot_interval;}$/;"	f	class:snap_shot_trigger	typeref:typename:const unsigned long long &
get_intmul24_accessess	power_stat.h	/^    unsigned get_intmul24_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_intmul32_accessess	power_stat.h	/^    unsigned get_intmul32_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_intmul_accessess	power_stat.h	/^    unsigned get_intmul_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_is_write	mem_fetch.h	/^   bool     get_is_write() const { return m_access.is_write(); }$/;"	f	class:mem_fetch	typeref:typename:bool
get_kernel	shader.h	/^    kernel_info_t *get_kernel() { return m_kernel; }$/;"	f	class:shader_core_ctx	typeref:typename:kernel_info_t *
get_l1d_read_accesses	power_stat.h	/^    unsigned get_l1d_read_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l1d_read_hits	power_stat.h	/^    unsigned get_l1d_read_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l1d_read_misses	power_stat.h	/^    unsigned get_l1d_read_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l1d_write_accesses	power_stat.h	/^    unsigned get_l1d_write_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l1d_write_hits	power_stat.h	/^    unsigned get_l1d_write_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l1d_write_misses	power_stat.h	/^    unsigned get_l1d_write_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l2_read_accesses	power_stat.h	/^    unsigned get_l2_read_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l2_read_hits	power_stat.h	/^    unsigned get_l2_read_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l2_read_misses	power_stat.h	/^    unsigned get_l2_read_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l2_write_accesses	power_stat.h	/^    unsigned get_l2_write_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l2_write_hits	power_stat.h	/^    unsigned get_l2_write_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_l2_write_misses	power_stat.h	/^    unsigned get_l2_write_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_length	delayqueue.h	/^   unsigned get_length() const { return m_length; }$/;"	f	class:fifo_pipeline	typeref:typename:unsigned
get_line_sz	gpu-cache.h	/^    unsigned get_line_sz() const$/;"	f	class:cache_config	typeref:typename:unsigned
get_max_concurrent_kernel	gpu-sim.h	/^    unsigned get_max_concurrent_kernel() const { return max_concurrent_kernel; }$/;"	f	class:gpgpu_sim_config	typeref:typename:unsigned
get_max_len	delayqueue.h	/^   unsigned get_max_len() const { return m_max_len; }$/;"	f	class:fifo_pipeline	typeref:typename:unsigned
get_mem_accessess	power_stat.h	/^    unsigned get_mem_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_mem_committed_inst	power_stat.h	/^    unsigned get_mem_committed_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_mem_config	mem_fetch.h	/^   const memory_config *get_mem_config(){return m_mem_config;}$/;"	f	class:mem_fetch	typeref:typename:const memory_config *
get_membar	shader.h	/^    bool get_membar() const { return m_membar; }$/;"	f	class:shd_warp_t	typeref:typename:bool
get_more_cta_left	gpu-sim.cc	/^bool gpgpu_sim::get_more_cta_left() const$/;"	f	class:gpgpu_sim	typeref:typename:bool
get_mpid	l2cache.h	/^   unsigned get_mpid() const { return m_id; }$/;"	f	class:memory_partition_unit	typeref:typename:unsigned
get_n_active_cta	shader.cc	/^unsigned simt_core_cluster::get_n_active_cta() const$/;"	f	class:simt_core_cluster	typeref:typename:unsigned
get_n_active_cta	shader.h	/^    unsigned get_n_active_cta() const { return m_n_active_cta; }$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
get_n_active_sms	shader.cc	/^unsigned simt_core_cluster::get_n_active_sms() const$/;"	f	class:simt_core_cluster	typeref:typename:unsigned
get_n_atomic	shader.h	/^    unsigned get_n_atomic() const { return m_n_atomic; }$/;"	f	class:shd_warp_t	typeref:typename:unsigned
get_n_completed	shader.h	/^    unsigned get_n_completed() const { return n_completed; }$/;"	f	class:shd_warp_t	typeref:typename:unsigned
get_n_element	delayqueue.h	/^   unsigned get_n_element() const { return m_n_element; }$/;"	f	class:fifo_pipeline	typeref:typename:unsigned
get_non_regfile_operands	power_stat.h	/^    unsigned get_non_regfile_operands(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_not_completed	shader.cc	/^unsigned simt_core_cluster::get_not_completed() const$/;"	f	class:simt_core_cluster	typeref:typename:unsigned
get_not_completed	shader.h	/^    unsigned get_not_completed() const { return m_not_completed; }$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
get_num_flits	mem_fetch.cc	/^unsigned mem_fetch::get_num_flits(bool simt_to_mem){$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_num_lines	gpu-cache.h	/^    unsigned get_num_lines() const$/;"	f	class:cache_config	typeref:typename:unsigned
get_num_operands	shader.h	/^      unsigned get_num_operands() const{$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
get_num_regs	shader.h	/^      unsigned get_num_regs() const{$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
get_oc_id	shader.h	/^      unsigned get_oc_id() const { return m_cu->get_id(); }$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
get_operand	shader.h	/^      unsigned get_operand() const { return m_operand; }$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
get_operands	shader.h	/^      const op_t *get_operands() const { return m_src_op; }$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:const op_t *
get_partition_addr	mem_fetch.h	/^   new_addr_type get_partition_addr() const { return m_partition_addr; }$/;"	f	class:mem_fetch	typeref:typename:new_addr_type
get_pc	mem_fetch.h	/^   address_type get_pc() const { return m_inst.empty()?-1:m_inst.pc; }$/;"	f	class:mem_fetch	typeref:typename:address_type
get_pc	shader.h	/^    address_type get_pc() const { return m_next_pc; }$/;"	f	class:shd_warp_t	typeref:typename:address_type
get_pdom_stack_top_info	shader.cc	/^void gpgpu_sim::get_pdom_stack_top_info( unsigned sid, unsigned tid, unsigned *pc, unsigned *rpc/;"	f	class:gpgpu_sim	typeref:typename:void
get_pdom_stack_top_info	shader.cc	/^void shader_core_ctx::get_pdom_stack_top_info( unsigned tid, unsigned *pc, unsigned *rpc ) const$/;"	f	class:shader_core_ctx	typeref:typename:void
get_pdom_stack_top_info	shader.cc	/^void simt_core_cluster::get_pdom_stack_top_info( unsigned sid, unsigned tid, unsigned *pc, unsig/;"	f	class:simt_core_cluster	typeref:typename:void
get_pipeline_duty	power_stat.h	/^    float get_pipeline_duty(){$/;"	f	class:power_stat_t	typeref:typename:float
get_prop	gpu-sim.cc	/^const struct cudaDeviceProp *gpgpu_sim::get_prop() const$/;"	f	class:gpgpu_sim	typeref:typename:const struct cudaDeviceProp *
get_reg	shader.h	/^      unsigned get_reg() const$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
get_reg_string	shader.h	/^      std::string get_reg_string() const$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:std::string
get_regfile_reads	power_stat.h	/^    unsigned get_regfile_reads(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_regfile_writes	power_stat.h	/^    unsigned get_regfile_writes(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_regs_written	shader.cc	/^std::list<unsigned> shader_core_ctx::get_regs_written( const inst_t &fvt ) const$/;"	f	class:shader_core_ctx	typeref:typename:std::list<unsigned>
get_request_uid	mem_fetch.h	/^   unsigned get_request_uid() const { return m_request_uid; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_return_timestamp	mem_fetch.h	/^   unsigned get_return_timestamp() const { return m_timestamp2; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_sfu_accessess	power_stat.h	/^    unsigned get_sfu_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_sfu_active_lanes	power_stat.h	/^    float get_sfu_active_lanes(){$/;"	f	class:power_stat_t	typeref:typename:float
get_sfu_committed_inst	power_stat.h	/^    unsigned get_sfu_committed_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_shader_constant_cache_id	stat-tool.cc	/^int get_shader_constant_cache_id() { return CONSTANT; }$/;"	f	typeref:typename:int
get_shader_instruction_cache_id	stat-tool.cc	/^int get_shader_instruction_cache_id() { return INSTRUCTION; }$/;"	f	typeref:typename:int
get_shader_normal_cache_id	stat-tool.cc	/^int get_shader_normal_cache_id() { return NORMAL; }$/;"	f	typeref:typename:int
get_shader_texture_cache_id	stat-tool.cc	/^int get_shader_texture_cache_id() { return TEXTURE; }$/;"	f	typeref:typename:int
get_shmem_read_access	power_stat.h	/^    unsigned get_shmem_read_access(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_sid	mem_fetch.h	/^   unsigned get_sid() const { return m_sid; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_sid	scoreboard.h	/^    int get_sid() const { return m_sid; }$/;"	f	class:Scoreboard	typeref:typename:int
get_sid	shader.h	/^    unsigned get_sid() const {return m_sid;}$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
get_sid	shader.h	/^inline int scheduler_unit::get_sid() const { return m_shader->get_sid(); }$/;"	f	class:scheduler_unit	typeref:typename:int
get_size	gpu-cache.cc	/^bool mshr_table::get_size() const {$/;"	f	class:mshr_table	typeref:typename:bool
get_size_reset	gpu-cache.cc	/^bool mshr_table::get_size_reset() const {$/;"	f	class:mshr_table	typeref:typename:bool
get_sp_accessess	power_stat.h	/^    unsigned get_sp_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_sp_active_lanes	power_stat.h	/^    float get_sp_active_lanes(){$/;"	f	class:power_stat_t	typeref:typename:float
get_sp_committed_inst	power_stat.h	/^    unsigned get_sp_committed_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_sp_op	shader.h	/^      unsigned get_sp_op() const { return m_warp->sp_op; }$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
get_sp_op	shader.h	/^      unsigned get_sp_op() const$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
get_stats	gpu-cache.cc	/^unsigned cache_stats::get_stats(enum mem_access_type *access_type, unsigned num_access_type, enu/;"	f	class:cache_stats	typeref:typename:unsigned
get_stats	gpu-cache.cc	/^void tag_array::get_stats(unsigned &total_access, unsigned &total_misses, unsigned &total_hit_re/;"	f	class:tag_array	typeref:typename:void
get_stats	gpu-cache.h	/^    const cache_stats &get_stats() const {$/;"	f	class:baseline_cache	typeref:typename:const cache_stats &
get_stats	gpu-cache.h	/^    const cache_stats &get_stats() const {$/;"	f	class:tex_cache	typeref:typename:const cache_stats &
get_stats	gpu-cache.h	/^    unsigned get_stats(enum mem_access_type *access_type, unsigned num_access_type, enum cache_r/;"	f	class:baseline_cache	typeref:typename:unsigned
get_stats	gpu-cache.h	/^    unsigned get_stats(enum mem_access_type *access_type, unsigned num_access_type, enum cache_r/;"	f	class:tex_cache	typeref:typename:unsigned
get_status	mem_fetch.h	/^   enum mem_fetch_status get_status() const { return m_status; }$/;"	f	class:mem_fetch	typeref:enum:mem_fetch_status
get_sub_partition	l2cache.h	/^   class memory_sub_partition * get_sub_partition(int sub_partition_id) $/;"	c	class:memory_partition_unit
get_sub_partition_id	mem_fetch.h	/^   unsigned get_sub_partition_id() const { return m_raw_addr.sub_partition; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_sub_stats	gpu-cache.cc	/^void cache_stats::get_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:cache_stats	typeref:typename:void
get_sub_stats	gpu-cache.h	/^    void get_sub_stats(struct cache_sub_stats &css) const {$/;"	f	class:baseline_cache	typeref:typename:void
get_sub_stats	gpu-cache.h	/^    void get_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:tex_cache	typeref:typename:void
get_tex_inst	power_stat.h	/^    unsigned get_tex_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_texture_c_accesses	power_stat.h	/^    unsigned get_texture_c_accesses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_texture_c_hits	power_stat.h	/^    unsigned get_texture_c_hits(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_texture_c_misses	power_stat.h	/^    unsigned get_texture_c_misses(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_timestamp	mem_fetch.h	/^   unsigned get_timestamp() const { return m_timestamp; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_tlx_addr	mem_fetch.h	/^   const addrdec_t &get_tlx_addr() const { return m_raw_addr; }$/;"	f	class:mem_fetch	typeref:typename:const addrdec_t &
get_tot_fpu_accessess	power_stat.h	/^    unsigned get_tot_fpu_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_tot_sfu_accessess	power_stat.h	/^    unsigned get_tot_sfu_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_total_fp_inst	power_stat.h	/^    unsigned get_total_fp_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_total_inst	power_stat.h	/^    unsigned get_total_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_total_int_inst	power_stat.h	/^    unsigned get_total_int_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_total_load_inst	power_stat.h	/^    unsigned get_total_load_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_total_store_inst	power_stat.h	/^    unsigned get_total_store_inst(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_tpc	mem_fetch.h	/^   unsigned get_tpc() const { return m_tpc; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_trans_accessess	power_stat.h	/^    unsigned get_trans_accessess(){$/;"	f	class:power_stat_t	typeref:typename:unsigned
get_type	mem_fetch.h	/^   enum mf_type get_type() const { return m_type; }$/;"	f	class:mem_fetch	typeref:enum:mf_type
get_warp_id	shader.h	/^      unsigned get_warp_id() const { return m_warp_id; }$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
get_warp_id	shader.h	/^    unsigned get_warp_id() const { return m_warp_id; }$/;"	f	class:shd_warp_t	typeref:typename:unsigned
get_warp_slot_issue	shader.h	/^    const std::vector< std::vector<unsigned> >& get_warp_slot_issue() const$/;"	f	class:shader_core_stats	typeref:typename:const std::vector<std::vector<unsigned>> &
get_wid	mem_fetch.h	/^   unsigned get_wid() const { return m_wid; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
get_wid	shader.h	/^      unsigned get_wid() const$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
global_sub_partition_id_to_local_id	l2cache.cc	/^int memory_partition_unit::global_sub_partition_id_to_local_id(int global_sub_partition_id) cons/;"	f	class:memory_partition_unit	typeref:typename:int
gmem_skip_L1D	shader.h	/^    bool gmem_skip_L1D; \/\/ on = global memory access always skip the L1 cache $/;"	m	struct:shader_core_config	typeref:typename:bool
gpgpu_L2_queue_config	gpu-sim.h	/^   char *gpgpu_L2_queue_config;$/;"	m	struct:memory_config	typeref:typename:char *
gpgpu_cflog_interval	gpu-sim.h	/^    int   gpgpu_cflog_interval;$/;"	m	class:gpgpu_sim_config	typeref:typename:int
gpgpu_clock_domains	gpu-sim.h	/^    char * gpgpu_clock_domains;$/;"	m	class:gpgpu_sim_config	typeref:typename:char *
gpgpu_clock_gated_lanes	shader.h	/^    bool gpgpu_clock_gated_lanes;$/;"	m	struct:shader_core_config	typeref:typename:bool
gpgpu_clock_gated_reg_file	shader.h	/^    bool gpgpu_clock_gated_reg_file;$/;"	m	struct:shader_core_config	typeref:typename:bool
gpgpu_dram_return_queue_size	gpu-sim.h	/^   unsigned gpgpu_dram_return_queue_size;$/;"	m	struct:memory_config	typeref:typename:unsigned
gpgpu_dram_timing_opt	gpu-sim.h	/^   char *gpgpu_dram_timing_opt;$/;"	m	struct:memory_config	typeref:typename:char *
gpgpu_dwf_reg_bankconflict	shader.h	/^    bool gpgpu_dwf_reg_bankconflict;$/;"	m	struct:shader_core_config	typeref:typename:bool
gpgpu_flush_l1_cache	gpu-sim.h	/^    bool  gpgpu_flush_l1_cache;$/;"	m	class:gpgpu_sim_config	typeref:typename:bool
gpgpu_flush_l2_cache	gpu-sim.h	/^    bool  gpgpu_flush_l2_cache;$/;"	m	class:gpgpu_sim_config	typeref:typename:bool
gpgpu_frfcfs_dram_sched_queue_size	gpu-sim.h	/^    int   gpgpu_frfcfs_dram_sched_queue_size; $/;"	m	class:gpgpu_sim_config	typeref:typename:int
gpgpu_frfcfs_dram_sched_queue_size	gpu-sim.h	/^   unsigned gpgpu_frfcfs_dram_sched_queue_size;$/;"	m	struct:memory_config	typeref:typename:unsigned
gpgpu_local_mem_map	shader.h	/^    bool gpgpu_local_mem_map;$/;"	m	struct:shader_core_config	typeref:typename:bool
gpgpu_max_insn_issue_per_warp	shader.h	/^    int gpgpu_max_insn_issue_per_warp;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_mem_address_mask	addrdec.h	/^   int gpgpu_mem_address_mask;$/;"	m	class:linear_to_raw_address_translation	typeref:typename:int
gpgpu_memlatency_stat	gpu-sim.h	/^   bool gpgpu_memlatency_stat;$/;"	m	struct:memory_config	typeref:typename:bool
gpgpu_n_cache_bkconflict	shader.h	/^    unsigned gpgpu_n_cache_bkconflict;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_cmem_portconflict	shader.h	/^    unsigned gpgpu_n_cmem_portconflict;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_const_insn	shader.h	/^    unsigned gpgpu_n_const_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_intrawarp_mshr_merge	shader.h	/^    int      gpgpu_n_intrawarp_mshr_merge;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_load_insn	shader.h	/^    unsigned gpgpu_n_load_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_mem_const	shader.h	/^    int gpgpu_n_mem_const;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_l1_write_allocate	shader.h	/^    int gpgpu_n_mem_l1_write_allocate; $/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_l2_write_allocate	shader.h	/^    int gpgpu_n_mem_l2_write_allocate;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_l2_writeback	shader.h	/^    int gpgpu_n_mem_l2_writeback;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_read_global	shader.h	/^    int gpgpu_n_mem_read_global;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_read_inst	shader.h	/^    int gpgpu_n_mem_read_inst;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_read_local	shader.h	/^    int gpgpu_n_mem_read_local;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_texture	shader.h	/^    int gpgpu_n_mem_texture;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_write_global	shader.h	/^    int gpgpu_n_mem_write_global;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_mem_write_local	shader.h	/^    int gpgpu_n_mem_write_local;$/;"	m	struct:shader_core_stats_pod	typeref:typename:int
gpgpu_n_param_insn	shader.h	/^    unsigned gpgpu_n_param_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_shmem_bank_access	shader.h	/^    unsigned *gpgpu_n_shmem_bank_access;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
gpgpu_n_shmem_bkconflict	shader.h	/^    unsigned gpgpu_n_shmem_bkconflict;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_shmem_insn	shader.h	/^    unsigned gpgpu_n_shmem_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_stall_shd_mem	shader.h	/^    unsigned gpgpu_n_stall_shd_mem;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_store_insn	shader.h	/^    unsigned gpgpu_n_store_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_n_tex_insn	shader.h	/^    unsigned gpgpu_n_tex_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpgpu_num_mem_units	shader.h	/^    int gpgpu_num_mem_units;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_num_reg_banks	shader.h	/^    unsigned gpgpu_num_reg_banks;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
gpgpu_num_sched_per_core	shader.h	/^    int gpgpu_num_sched_per_core;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_num_sfu_units	shader.h	/^    int gpgpu_num_sfu_units;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_num_sp_units	shader.h	/^    int gpgpu_num_sp_units;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_operand_collector_num_in_ports_gen	shader.h	/^    unsigned int gpgpu_operand_collector_num_in_ports_gen;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_in_ports_mem	shader.h	/^    unsigned int gpgpu_operand_collector_num_in_ports_mem;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_in_ports_sfu	shader.h	/^    unsigned int gpgpu_operand_collector_num_in_ports_sfu;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_in_ports_sp	shader.h	/^    unsigned int gpgpu_operand_collector_num_in_ports_sp;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_out_ports_gen	shader.h	/^    unsigned int gpgpu_operand_collector_num_out_ports_gen;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_out_ports_mem	shader.h	/^    unsigned int gpgpu_operand_collector_num_out_ports_mem;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_out_ports_sfu	shader.h	/^    unsigned int gpgpu_operand_collector_num_out_ports_sfu;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_out_ports_sp	shader.h	/^    unsigned int gpgpu_operand_collector_num_out_ports_sp;$/;"	m	struct:shader_core_config	typeref:typename:unsigned int
gpgpu_operand_collector_num_units_gen	shader.h	/^    int gpgpu_operand_collector_num_units_gen;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_operand_collector_num_units_mem	shader.h	/^    int gpgpu_operand_collector_num_units_mem;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_operand_collector_num_units_sfu	shader.h	/^    int gpgpu_operand_collector_num_units_sfu;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_operand_collector_num_units_sp	shader.h	/^    int gpgpu_operand_collector_num_units_sp;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_perfect_mem	shader.h	/^    bool gpgpu_perfect_mem;$/;"	m	struct:shader_core_config	typeref:typename:bool
gpgpu_reg_bank_use_warp_id	shader.h	/^    bool gpgpu_reg_bank_use_warp_id;$/;"	m	struct:shader_core_config	typeref:typename:bool
gpgpu_runtime_stat	gpu-sim.h	/^    char *gpgpu_runtime_stat;$/;"	m	class:gpgpu_sim_config	typeref:typename:char *
gpgpu_scheduler_string	shader.h	/^    char * gpgpu_scheduler_string;$/;"	m	struct:shader_core_config	typeref:typename:char *
gpgpu_shader_core_pipeline_opt	shader.h	/^    char *gpgpu_shader_core_pipeline_opt;$/;"	m	struct:shader_core_config	typeref:typename:char *
gpgpu_shader_registers	shader.h	/^    unsigned gpgpu_shader_registers;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
gpgpu_sim	gpu-sim.cc	/^gpgpu_sim::gpgpu_sim( const gpgpu_sim_config &config ) $/;"	f	class:gpgpu_sim
gpgpu_sim	gpu-sim.h	/^class gpgpu_sim : public gpgpu_t {$/;"	c
gpgpu_sim_config	gpu-sim.h	/^    gpgpu_sim_config() { m_valid = false; }$/;"	f	class:gpgpu_sim_config
gpgpu_sim_config	gpu-sim.h	/^class gpgpu_sim_config : public power_config, public gpgpu_functional_sim_config {$/;"	c
gpgpu_sim_wrapper	gpu-sim.cc	/^class  gpgpu_sim_wrapper {};$/;"	c	file:
gpgpu_warp_issue_shader	shader.h	/^    int gpgpu_warp_issue_shader;$/;"	m	struct:shader_core_config	typeref:typename:int
gpgpu_warpdistro_shader	shader.h	/^    int gpgpu_warpdistro_shader;$/;"	m	struct:shader_core_config	typeref:typename:int
gpu_deadlock	gpu-sim.h	/^   bool gpu_deadlock;$/;"	m	class:gpgpu_sim	typeref:typename:bool
gpu_deadlock_detect	gpu-sim.h	/^    bool  gpu_deadlock_detect;$/;"	m	class:gpgpu_sim_config	typeref:typename:bool
gpu_idle_core_power	gpu-sim.h	/^    double gpu_idle_core_power;$/;"	m	struct:power_config	typeref:typename:double
gpu_max_cta_opt	gpu-sim.h	/^    unsigned gpu_max_cta_opt;$/;"	m	class:gpgpu_sim_config	typeref:typename:unsigned
gpu_max_cycle_opt	gpu-sim.h	/^    unsigned gpu_max_cycle_opt;$/;"	m	class:gpgpu_sim_config	typeref:typename:unsigned
gpu_max_insn_opt	gpu-sim.h	/^    unsigned gpu_max_insn_opt;$/;"	m	class:gpgpu_sim_config	typeref:typename:unsigned
gpu_min_inc_per_active_sm	gpu-sim.h	/^    double gpu_min_inc_per_active_sm;$/;"	m	struct:power_config	typeref:typename:double
gpu_n_mem_per_ctrlr	gpu-sim.h	/^   unsigned gpu_n_mem_per_ctrlr;$/;"	m	struct:memory_config	typeref:typename:unsigned
gpu_nonlinear_model_config	gpu-sim.h	/^    char * gpu_nonlinear_model_config;$/;"	m	struct:power_config	typeref:typename:char *
gpu_print_stat	gpu-sim.cc	/^void gpgpu_sim::gpu_print_stat() $/;"	f	class:gpgpu_sim	typeref:typename:void
gpu_reg_bank_conflict_stalls	shader.h	/^    unsigned gpu_reg_bank_conflict_stalls;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
gpu_runtime_stat_flag	gpu-sim.h	/^    int gpu_runtime_stat_flag;$/;"	m	class:gpgpu_sim_config	typeref:typename:int
gpu_sim_cycle	gpu-sim.cc	/^unsigned long long  gpu_sim_cycle = 0;$/;"	v	typeref:typename:unsigned long long
gpu_sim_insn	gpu-sim.h	/^   unsigned long long  gpu_sim_insn;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned long long
gpu_sim_insn_last_update	gpu-sim.h	/^   unsigned long long  gpu_sim_insn_last_update;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned long long
gpu_sim_insn_last_update_sid	gpu-sim.h	/^   unsigned gpu_sim_insn_last_update_sid;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned
gpu_stall_dramfull	gpu-sim.cc	/^unsigned int gpu_stall_dramfull = 0; $/;"	v	typeref:typename:unsigned int
gpu_stall_icnt2sh	gpu-sim.cc	/^unsigned int gpu_stall_icnt2sh = 0;$/;"	v	typeref:typename:unsigned int
gpu_stall_shd_mem_breakdown	shader.h	/^    unsigned gpu_stall_shd_mem_breakdown[N_MEM_STAGE_ACCESS_TYPE][N_MEM_STAGE_STALL_TYPE];$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned[][]
gpu_stat_sample_freq	gpu-sim.h	/^    int gpu_stat_sample_freq;$/;"	m	class:gpgpu_sim_config	typeref:typename:int
gpu_steady_min_period	gpu-sim.h	/^    double gpu_steady_min_period;$/;"	m	struct:power_config	typeref:typename:double
gpu_steady_power_deviation	gpu-sim.h	/^    double gpu_steady_power_deviation;$/;"	m	struct:power_config	typeref:typename:double
gpu_steady_state_definition	gpu-sim.h	/^    char * gpu_steady_state_definition;$/;"	m	struct:power_config	typeref:typename:char *
gpu_tot_issued_cta	gpu-sim.h	/^   unsigned long long  gpu_tot_issued_cta;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned long long
gpu_tot_sim_cycle	gpu-sim.cc	/^unsigned long long  gpu_tot_sim_cycle = 0;$/;"	v	typeref:typename:unsigned long long
gpu_tot_sim_insn	gpu-sim.h	/^   unsigned long long  gpu_tot_sim_insn;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned long long
gs_min2	gpu-misc.h	/^#define gs_min2(/;"	d
gto_scheduler	shader.h	/^	gto_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:gto_scheduler
gto_scheduler	shader.h	/^class gto_scheduler : public scheduler_unit {$/;"	c
hardware_done	shader.cc	/^bool shd_warp_t::hardware_done() const$/;"	f	class:shd_warp_t	typeref:typename:bool
has_credits	l2cache.cc	/^bool memory_partition_unit::arbitration_metadata::has_credits(int inner_sub_partition_id) const $/;"	f	class:memory_partition_unit::arbitration_metadata	typeref:typename:bool
has_special_cache_config	gpu-sim.cc	/^bool gpgpu_sim::has_special_cache_config(std::string kernel_name)$/;"	f	class:gpgpu_sim	typeref:typename:bool
hash_addrdec_t	addrdec.cc	/^class hash_addrdec_t$/;"	c	file:
history_map_t	addrdec.cc	/^   typedef tr1_hash_map<addrdec_t, new_addr_type, hash_addrdec_t> history_map_t; $/;"	t	function:linear_to_raw_address_translation::sweep_test	typeref:typename:tr1_hash_map<addrdec_t,new_addr_type,hash_addrdec_t>	file:
history_map_t	addrdec.cc	/^   typedef tr1_hash_map<addrdec_t, new_addr_type> history_map_t; $/;"	t	function:linear_to_raw_address_translation::sweep_test	typeref:typename:tr1_hash_map<addrdec_t,new_addr_type>	file:
hw_tid_from_wid	shader.h	/^inline unsigned hw_tid_from_wid(unsigned wid, unsigned warp_size, unsigned i){return wid * warp_/;"	f	typeref:typename:unsigned
ibuffer_empty	shader.h	/^    bool ibuffer_empty() const$/;"	f	class:shd_warp_t	typeref:typename:bool
ibuffer_entry	shader.h	/^       ibuffer_entry() { m_valid = false; m_inst = NULL; }$/;"	f	struct:shd_warp_t::ibuffer_entry
ibuffer_entry	shader.h	/^    struct ibuffer_entry {$/;"	s	class:shd_warp_t
ibuffer_fill	shader.h	/^    void ibuffer_fill( unsigned slot, const warp_inst_t *pI )$/;"	f	class:shd_warp_t	typeref:typename:void
ibuffer_flush	shader.h	/^    void ibuffer_flush()$/;"	f	class:shd_warp_t	typeref:typename:void
ibuffer_free	shader.h	/^    void ibuffer_free()$/;"	f	class:shd_warp_t	typeref:typename:void
ibuffer_next_inst	shader.h	/^    const warp_inst_t *ibuffer_next_inst() { return m_ibuffer[m_next].m_inst; }$/;"	f	class:shd_warp_t	typeref:typename:const warp_inst_t *
ibuffer_next_valid	shader.h	/^    bool ibuffer_next_valid() { return m_ibuffer[m_next].m_valid; }$/;"	f	class:shd_warp_t	typeref:typename:bool
ibuffer_step	shader.h	/^    void ibuffer_step() { m_next = (m_next+1)%IBUFFER_SIZE; }$/;"	f	class:shd_warp_t	typeref:typename:void
icnt2mem_lat_table	mem_latency_stat.h	/^   unsigned icnt2mem_lat_table[24];$/;"	m	class:memory_stats_t	typeref:typename:unsigned[24]
icnt2sh_lat_table	mem_latency_stat.h	/^   unsigned icnt2sh_lat_table[24];$/;"	m	class:memory_stats_t	typeref:typename:unsigned[24]
icnt_busy	icnt_wrapper.cc	/^icnt_busy_p                  icnt_busy;$/;"	v	typeref:typename:icnt_busy_p
icnt_busy_p	icnt_wrapper.h	/^typedef bool (*icnt_busy_p)( );$/;"	t	typeref:typename:bool (*)()
icnt_create	icnt_wrapper.cc	/^icnt_create_p                icnt_create;$/;"	v	typeref:typename:icnt_create_p
icnt_create_p	icnt_wrapper.h	/^typedef void (*icnt_create_p)(unsigned n_shader,  unsigned n_mem);$/;"	t	typeref:typename:void (*)(unsigned n_shader,unsigned n_mem)
icnt_cycle	shader.cc	/^void simt_core_cluster::icnt_cycle()$/;"	f	class:simt_core_cluster	typeref:typename:void
icnt_display_overall_stats	icnt_wrapper.cc	/^icnt_display_overall_stats_p icnt_display_overall_stats;$/;"	v	typeref:typename:icnt_display_overall_stats_p
icnt_display_overall_stats_p	icnt_wrapper.h	/^typedef void (*icnt_display_overall_stats_p)( );$/;"	t	typeref:typename:void (*)()
icnt_display_state	icnt_wrapper.cc	/^icnt_display_state_p         icnt_display_state;$/;"	v	typeref:typename:icnt_display_state_p
icnt_display_state_p	icnt_wrapper.h	/^typedef void (*icnt_display_state_p)(FILE* fp);$/;"	t	typeref:typename:void (*)(FILE * fp)
icnt_display_stats	icnt_wrapper.cc	/^icnt_display_stats_p         icnt_display_stats;$/;"	v	typeref:typename:icnt_display_stats_p
icnt_display_stats_p	icnt_wrapper.h	/^typedef void (*icnt_display_stats_p)( );$/;"	t	typeref:typename:void (*)()
icnt_drain_p	icnt_wrapper.h	/^typedef void (*icnt_drain_p)( );$/;"	t	typeref:typename:void (*)()
icnt_flit_size	gpu-sim.h	/^   unsigned icnt_flit_size;$/;"	m	struct:memory_config	typeref:typename:unsigned
icnt_flit_size	mem_fetch.h	/^   unsigned icnt_flit_size;$/;"	m	class:mem_fetch	typeref:typename:unsigned
icnt_freq	gpu-sim.h	/^    double icnt_freq;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
icnt_get_flit_size	icnt_wrapper.cc	/^icnt_get_flit_size_p         icnt_get_flit_size;$/;"	v	typeref:typename:icnt_get_flit_size_p
icnt_get_flit_size_p	icnt_wrapper.h	/^typedef unsigned (*icnt_get_flit_size_p)();$/;"	t	typeref:typename:unsigned (*)()
icnt_has_buffer	icnt_wrapper.cc	/^icnt_has_buffer_p            icnt_has_buffer;$/;"	v	typeref:typename:icnt_has_buffer_p
icnt_has_buffer_p	icnt_wrapper.h	/^typedef bool (*icnt_has_buffer_p)(unsigned input, unsigned int size);$/;"	t	typeref:typename:bool (*)(unsigned input,unsigned int size)
icnt_init	icnt_wrapper.cc	/^icnt_init_p                  icnt_init;$/;"	v	typeref:typename:icnt_init_p
icnt_init_p	icnt_wrapper.h	/^typedef void (*icnt_init_p)( );$/;"	t	typeref:typename:void (*)()
icnt_inject_request_packet	shader.cc	/^void simt_core_cluster::icnt_inject_request_packet(class mem_fetch *mf)$/;"	f	class:simt_core_cluster	typeref:typename:void
icnt_injection_buffer_full	shader.cc	/^bool simt_core_cluster::icnt_injection_buffer_full(unsigned size, bool write)$/;"	f	class:simt_core_cluster	typeref:typename:bool
icnt_period	gpu-sim.h	/^    double icnt_period;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
icnt_pop	icnt_wrapper.cc	/^icnt_pop_p                   icnt_pop;$/;"	v	typeref:typename:icnt_pop_p
icnt_pop_p	icnt_wrapper.h	/^typedef void* (*icnt_pop_p)(unsigned output);$/;"	t	typeref:typename:void * (*)(unsigned output)
icnt_push	icnt_wrapper.cc	/^icnt_push_p                  icnt_push;$/;"	v	typeref:typename:icnt_push_p
icnt_push_p	icnt_wrapper.h	/^typedef void (*icnt_push_p)(unsigned input, unsigned output, void* data, unsigned int size);$/;"	t	typeref:typename:void (*)(unsigned input,unsigned output,void * data,unsigned int size)
icnt_reg_options	icnt_wrapper.cc	/^void icnt_reg_options( class OptionParser * opp )$/;"	f	typeref:typename:void
icnt_time	gpu-sim.h	/^   double icnt_time;$/;"	m	class:gpgpu_sim	typeref:typename:double
icnt_transfer	icnt_wrapper.cc	/^icnt_transfer_p              icnt_transfer;$/;"	v	typeref:typename:icnt_transfer_p
icnt_transfer_p	icnt_wrapper.h	/^typedef void (*icnt_transfer_p)( );$/;"	t	typeref:typename:void (*)()
icnt_wrapper_init	icnt_wrapper.cc	/^void icnt_wrapper_init()$/;"	f	typeref:typename:void
id	dram.h	/^   unsigned int id;$/;"	m	class:dram_t	typeref:typename:unsigned int
ifetch_buffer_t	shader.h	/^    ifetch_buffer_t( address_type pc, unsigned nbytes, unsigned warp_id ) $/;"	f	struct:ifetch_buffer_t
ifetch_buffer_t	shader.h	/^    ifetch_buffer_t() { m_valid=false; }$/;"	f	struct:ifetch_buffer_t
ifetch_buffer_t	shader.h	/^struct ifetch_buffer_t {$/;"	s
imiss_pending	shader.h	/^    bool imiss_pending() const { return m_imiss_pending; }$/;"	f	class:shd_warp_t	typeref:typename:bool
inactive_lanes_accesses_nonsfu	shader.h	/^	 unsigned inactive_lanes_accesses_nonsfu(unsigned active_count,double latency){$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
inactive_lanes_accesses_sfu	shader.h	/^	 unsigned inactive_lanes_accesses_sfu(unsigned active_count,double latency){$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
inc_head	gpu-cache.h	/^        void inc_head() { m_head = (m_head+1)%m_size; m_num++;}$/;"	f	class:tex_cache::fifo	typeref:typename:void
inc_inst_in_pipeline	shader.h	/^    void inc_inst_in_pipeline() { m_inst_in_pipeline++; }$/;"	f	class:shd_warp_t	typeref:typename:void
inc_n_atomic	shader.h	/^    void inc_n_atomic() { m_n_atomic++; }$/;"	f	class:shd_warp_t	typeref:typename:void
inc_simt_to_mem	shader.h	/^	 void inc_simt_to_mem(unsigned n_flits){ m_stats->n_simt_to_mem[m_sid] += n_flits; }$/;"	f	class:shader_core_ctx	typeref:typename:void
inc_stats	gpu-cache.cc	/^void cache_stats::inc_stats(int access_type, int access_outcome){$/;"	f	class:cache_stats	typeref:typename:void
inc_store_req	shader.h	/^    void inc_store_req( unsigned warp_id) { m_warp[warp_id].inc_store_req(); }$/;"	f	class:shader_core_ctx	typeref:typename:void
inc_store_req	shader.h	/^    void inc_store_req() { m_stores_outstanding++; }$/;"	f	class:shd_warp_t	typeref:typename:void
inc_tail	gpu-cache.h	/^        void inc_tail() { assert(m_num>0); m_tail = (m_tail+1)%m_size; m_num--;}$/;"	f	class:tex_cache::fifo	typeref:typename:void
incexecstat	shader.cc	/^void shader_core_ctx::incexecstat(warp_inst_t *&inst)$/;"	f	class:shader_core_ctx	typeref:typename:void
incfpalu_stat	shader.h	/^	 void incfpalu_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incfpdiv_stat	shader.h	/^	 void incfpdiv_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incfpmul_stat	shader.h	/^	 void incfpmul_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incfuactivelanes_stat	shader.h	/^	 void incfuactivelanes_stat(unsigned active_count) {m_stats->m_active_fu_lanes[m_sid]=m_stats->/;"	f	class:shader_core_ctx	typeref:typename:void
incfumemactivelanes_stat	shader.h	/^	 void incfumemactivelanes_stat(unsigned active_count) {m_stats->m_active_fu_mem_lanes[m_sid]=m_/;"	f	class:shader_core_ctx	typeref:typename:void
incialu_stat	shader.h	/^    void incialu_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incidiv_stat	shader.h	/^	 void incidiv_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incimul24_stat	shader.h	/^    void incimul24_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incimul32_stat	shader.h	/^	 void incimul32_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incimul_stat	shader.h	/^    void incimul_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incload_stat	shader.h	/^    void incload_stat() {m_stats->m_num_loadqueued_insn[m_sid]++;}$/;"	f	class:shader_core_ctx	typeref:typename:void
incmem_stat	shader.h	/^	 void incmem_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
incnon_rf_operands	shader.h	/^	 void incnon_rf_operands(unsigned active_count){m_stats->m_non_rf_operands[m_sid]=m_stats->m_no/;"	f	class:shader_core_ctx	typeref:typename:void
incregfile_reads	shader.h	/^	 void incregfile_reads(unsigned active_count) {m_stats->m_read_regfile_acesses[m_sid]=m_stats->/;"	f	class:shader_core_ctx	typeref:typename:void
incregfile_writes	shader.h	/^	 void incregfile_writes(unsigned active_count){m_stats->m_write_regfile_acesses[m_sid]=m_stats-/;"	f	class:shader_core_ctx	typeref:typename:void
increment_x_then_y_then_z	gpu-sim.cc	/^void increment_x_then_y_then_z( dim3 &i, const dim3 &bound)$/;"	f	typeref:typename:void
incsfu_stat	shader.h	/^	 void incsfu_stat(unsigned active_count,double latency) {m_stats->m_num_sfu_acesses[m_sid]=m_st/;"	f	class:shader_core_ctx	typeref:typename:void
incsfuactivelanes_stat	shader.h	/^	 void incsfuactivelanes_stat(unsigned active_count) {m_stats->m_active_sfu_lanes[m_sid]=m_stats/;"	f	class:shader_core_ctx	typeref:typename:void
incsp_stat	shader.h	/^	 void incsp_stat(unsigned active_count,double latency) {m_stats->m_num_sp_acesses[m_sid]=m_stat/;"	f	class:shader_core_ctx	typeref:typename:void
incspactivelanes_stat	shader.h	/^	 void incspactivelanes_stat(unsigned active_count) {m_stats->m_active_sp_lanes[m_sid]=m_stats->/;"	f	class:shader_core_ctx	typeref:typename:void
incstore_stat	shader.h	/^    void incstore_stat() {m_stats->m_num_storequeued_insn[m_sid]++;}$/;"	f	class:shader_core_ctx	typeref:typename:void
inctex_stat	shader.h	/^    void inctex_stat(unsigned active_count,double latency){$/;"	f	class:shader_core_ctx	typeref:typename:void
inctrans_stat	shader.h	/^	 void inctrans_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx	typeref:typename:void
init	addrdec.cc	/^void linear_to_raw_address_translation::init(unsigned int n_channel, unsigned int n_sub_partitio/;"	f	class:linear_to_raw_address_translation	typeref:typename:void
init	gpu-cache.cc	/^void l2_cache_config::init(linear_to_raw_address_translation *address_mapping){$/;"	f	class:l2_cache_config	typeref:typename:void
init	gpu-cache.cc	/^void tag_array::init( int core_id, int type_id )$/;"	f	class:tag_array	typeref:typename:void
init	gpu-cache.h	/^    virtual void init( mem_fetch_allocator *mfcreator )$/;"	f	class:data_cache	typeref:typename:void
init	gpu-cache.h	/^    void init( const char *name,$/;"	f	class:baseline_cache	typeref:typename:void
init	gpu-cache.h	/^    void init(char * config, FuncCache status)$/;"	f	class:cache_config	typeref:typename:void
init	gpu-sim.cc	/^void gpgpu_sim::init()$/;"	f	class:gpgpu_sim	typeref:typename:void
init	gpu-sim.h	/^	void init()$/;"	f	struct:power_config	typeref:typename:void
init	gpu-sim.h	/^    void init() $/;"	f	class:gpgpu_sim_config	typeref:typename:void
init	gpu-sim.h	/^   void init()$/;"	f	struct:memory_config	typeref:typename:void
init	power_stat.cc	/^void power_core_stat_t::init()$/;"	f	class:power_core_stat_t	typeref:typename:void
init	power_stat.cc	/^void power_mem_stat_t::init(){$/;"	f	class:power_mem_stat_t	typeref:typename:void
init	shader.cc	/^void ldst_unit::init( mem_fetch_interface *icnt,$/;"	f	class:ldst_unit	typeref:typename:void
init	shader.cc	/^void opndcoll_rfu_t::collector_unit_t::init( unsigned n, $/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:void
init	shader.cc	/^void opndcoll_rfu_t::init( unsigned num_banks, shader_core_ctx *shader )$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
init	shader.h	/^      void init( unsigned num_cu, unsigned num_banks ) $/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:void
init	shader.h	/^    void init( address_type start_pc,$/;"	f	class:shd_warp_t	typeref:typename:void
init	shader.h	/^    void init()$/;"	f	struct:shader_core_config	typeref:typename:void
init_clock_domains	gpu-sim.cc	/^void gpgpu_sim_config::init_clock_domains(void ) $/;"	f	class:gpgpu_sim_config	typeref:typename:void
init_mcpat	power_interface.cc	/^void init_mcpat(const gpgpu_sim_config &config, class gpgpu_sim_wrapper *wrapper, unsigned stat_/;"	f	typeref:typename:void
init_warps	shader.cc	/^void shader_core_ctx::init_warps( unsigned cta_id, unsigned start_thread, unsigned end_thread )$/;"	f	class:shader_core_ctx	typeref:typename:void
input_port_t	shader.h	/^       input_port_t(port_vector_t & input, port_vector_t & output, uint_vector_t cu_sets)$/;"	f	class:opndcoll_rfu_t::input_port_t
input_port_t	shader.h	/^   class input_port_t {$/;"	c	class:opndcoll_rfu_t
insertion_time	dram.h	/^   unsigned int insertion_time;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
insn_latency_info	shader.h	/^struct insn_latency_info {$/;"	s
insn_warp_occ_create	stat-tool.cc	/^void insn_warp_occ_create( int n_loggers, int simd_width )$/;"	f	typeref:typename:void
insn_warp_occ_log	stat-tool.cc	/^void insn_warp_occ_log( int logger_id, address_type pc, int warp_occ)$/;"	f	typeref:typename:void
insn_warp_occ_logger	stat-tool.h	/^   insn_warp_occ_logger(const insn_warp_occ_logger& other)$/;"	f	class:insn_warp_occ_logger
insn_warp_occ_logger	stat-tool.h	/^   insn_warp_occ_logger(int simd_width)$/;"	f	class:insn_warp_occ_logger
insn_warp_occ_logger	stat-tool.h	/^class insn_warp_occ_logger {$/;"	c
insn_warp_occ_print	stat-tool.cc	/^void insn_warp_occ_print( FILE *fout )$/;"	f	typeref:typename:void
inst_in_pipeline	shader.h	/^    bool inst_in_pipeline() const { return m_inst_in_pipeline > 0; }$/;"	f	class:shd_warp_t	typeref:typename:bool
intersim2_busy	icnt_wrapper.cc	/^static bool intersim2_busy()$/;"	f	typeref:typename:bool	file:
intersim2_create	icnt_wrapper.cc	/^static void intersim2_create(unsigned int n_shader, unsigned int n_mem)$/;"	f	typeref:typename:void	file:
intersim2_display_overall_stats	icnt_wrapper.cc	/^static void intersim2_display_overall_stats()$/;"	f	typeref:typename:void	file:
intersim2_display_state	icnt_wrapper.cc	/^static void intersim2_display_state(FILE *fp)$/;"	f	typeref:typename:void	file:
intersim2_display_stats	icnt_wrapper.cc	/^static void intersim2_display_stats()$/;"	f	typeref:typename:void	file:
intersim2_get_flit_size	icnt_wrapper.cc	/^static unsigned intersim2_get_flit_size()$/;"	f	typeref:typename:unsigned	file:
intersim2_has_buffer	icnt_wrapper.cc	/^static bool intersim2_has_buffer(unsigned input, unsigned int size)$/;"	f	typeref:typename:bool	file:
intersim2_init	icnt_wrapper.cc	/^static void intersim2_init()$/;"	f	typeref:typename:void	file:
intersim2_pop	icnt_wrapper.cc	/^static void* intersim2_pop(unsigned output)$/;"	f	typeref:typename:void *	file:
intersim2_push	icnt_wrapper.cc	/^static void intersim2_push(unsigned input, unsigned output, void* data, unsigned int size)$/;"	f	typeref:typename:void	file:
intersim2_transfer	icnt_wrapper.cc	/^static void intersim2_transfer()$/;"	f	typeref:typename:void	file:
is_free	shader.h	/^      bool is_free() const {return m_allocation==NO_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:bool
is_free	shader.h	/^      bool is_free(){return m_free;}$/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:bool
is_read	shader.h	/^      bool is_read() const { return m_allocation==READ_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:bool
is_write	mem_fetch.h	/^   bool is_write() {return m_access.is_write();}$/;"	f	class:mem_fetch	typeref:typename:bool
is_write	shader.h	/^      bool is_write() const {return m_allocation==WRITE_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:bool
isactive	shader.h	/^    unsigned isactive() const {if(m_n_active_cta>0) return 1; else return 0;}$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
isatomic	mem_fetch.cc	/^bool mem_fetch::isatomic() const$/;"	f	class:mem_fetch	typeref:typename:bool
isconst	mem_fetch.cc	/^bool mem_fetch::isconst() const$/;"	f	class:mem_fetch	typeref:typename:bool
islongop	scoreboard.cc	/^const bool Scoreboard::islongop (unsigned warp_id,unsigned regnum) {$/;"	f	class:Scoreboard	typeref:typename:const bool
issue	shader.cc	/^void ldst_unit:: issue( register_set &reg_set )$/;"	f	class:ldst_unit	typeref:typename:void
issue	shader.cc	/^void pipelined_simd_unit::issue( register_set& source_reg )$/;"	f	class:pipelined_simd_unit	typeref:typename:void
issue	shader.cc	/^void sfu::issue( register_set& source_reg )$/;"	f	class:sfu	typeref:typename:void
issue	shader.cc	/^void shader_core_ctx::issue(){$/;"	f	class:shader_core_ctx	typeref:typename:void
issue	shader.cc	/^void sp_unit :: issue(register_set& source_reg)$/;"	f	class:sp_unit	typeref:typename:void
issue	shader.h	/^    virtual void issue( register_set& source_reg ) { source_reg.move_out_to(m_dispatch_reg); occ/;"	f	class:simd_function_unit	typeref:typename:void
issue_block2core	gpu-sim.cc	/^void gpgpu_sim::issue_block2core()$/;"	f	class:gpgpu_sim	typeref:typename:void
issue_block2core	gpu-sim.cc	/^void shader_core_ctx::issue_block2core( kernel_info_t &kernel ) $/;"	f	class:shader_core_ctx	typeref:typename:void
issue_block2core	shader.cc	/^unsigned simt_core_cluster::issue_block2core()$/;"	f	class:simt_core_cluster	typeref:typename:unsigned
issue_warp	shader.cc	/^void shader_core_ctx::issue_warp( register_set& pipe_reg_set, const warp_inst_t* next_inst, cons/;"	f	class:shader_core_ctx	typeref:typename:void
issuedWarp	wrc.h	/^		unsigned issuedWarp;	$/;"	m	class:Wrc	typeref:typename:unsigned
istexture	mem_fetch.cc	/^bool mem_fetch::istexture() const$/;"	f	class:mem_fetch	typeref:typename:bool
iterator	warp_status.h	/^	typedef std::vector<table_entry>::iterator iterator;$/;"	t	class:WST	typeref:typename:std::vector<table_entry>::iterator
iwo_logger	stat-tool.cc	/^static std::vector<insn_warp_occ_logger> iwo_logger;$/;"	v	typeref:typename:std::vector<insn_warp_occ_logger>	file:
kernel_max_cta_per_shader	shader.h	/^    unsigned kernel_max_cta_per_shader;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned
kernel_padded_threads_per_cta	shader.h	/^    unsigned kernel_padded_threads_per_cta;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned
l1_cache	gpu-cache.h	/^    l1_cache( const char *name,$/;"	f	class:l1_cache
l1_cache	gpu-cache.h	/^    l1_cache(const char *name, cache_config &config,$/;"	f	class:l1_cache
l1_cache	gpu-cache.h	/^class l1_cache : public data_cache {$/;"	c
l1d_cache_config	gpu-cache.h	/^	l1d_cache_config() : cache_config(){}$/;"	f	class:l1d_cache_config
l1d_cache_config	gpu-cache.h	/^class l1d_cache_config : public cache_config{$/;"	c
l2_cache	gpu-cache.h	/^    l2_cache(const char *name,  cache_config &config,$/;"	f	class:l2_cache
l2_cache	gpu-cache.h	/^class l2_cache : public data_cache {$/;"	c
l2_cache_config	gpu-cache.h	/^	l2_cache_config() : cache_config(){}$/;"	f	class:l2_cache_config
l2_cache_config	gpu-cache.h	/^class l2_cache_config : public cache_config {$/;"	c
l2_cache_stats	power_stat.h	/^    class cache_stats l2_cache_stats[NUM_STAT_IDX]; \/\/ Total L2 partition stats$/;"	m	struct:mem_power_stats_pod	typeref:class:cache_stats[]
l2_freq	gpu-sim.h	/^    double l2_freq;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
l2_ideal	gpu-sim.h	/^   bool l2_ideal;$/;"	m	struct:memory_config	typeref:typename:bool
l2_period	gpu-sim.h	/^    double l2_period;$/;"	m	class:gpgpu_sim_config	typeref:typename:double
l2_time	gpu-sim.h	/^   double l2_time;$/;"	m	class:gpgpu_sim	typeref:typename:double
last_borrower	l2cache.h	/^      int last_borrower() const { return m_last_borrower; } $/;"	f	class:memory_partition_unit::arbitration_metadata	typeref:typename:int
last_bwutil	dram.h	/^   unsigned int last_n_cmd, last_n_activity, last_bwutil;$/;"	m	class:dram_t	typeref:typename:unsigned int
last_gpu_sim_insn	gpu-sim.h	/^   unsigned long long  last_gpu_sim_insn;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned long long
last_liveness_message_time	gpu-sim.h	/^   unsigned long long  last_liveness_message_time; $/;"	m	class:gpgpu_sim	typeref:typename:unsigned long long
last_n_activity	dram.h	/^   unsigned int last_n_cmd, last_n_activity, last_bwutil;$/;"	m	class:dram_t	typeref:typename:unsigned int
last_n_cmd	dram.h	/^   unsigned int last_n_cmd, last_n_activity, last_bwutil;$/;"	m	class:dram_t	typeref:typename:unsigned int
last_shader_cycle_distro	shader.h	/^    unsigned *last_shader_cycle_distro;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
latency	shader.h	/^   unsigned long latency;$/;"	m	struct:insn_latency_info	typeref:typename:unsigned long
launch	gpu-sim.cc	/^void gpgpu_sim::launch( kernel_info_t *kinfo )$/;"	f	class:gpgpu_sim	typeref:typename:void
ld_time_dist	visualizer.cc	/^   std::vector<double>  ld_time_dist;$/;"	m	class:my_time_vector	typeref:typename:std::vector<double>	file:
ld_time_map	visualizer.cc	/^   std::map< unsigned int, std::vector<long int> > ld_time_map;$/;"	m	class:my_time_vector	typeref:typename:std::map<unsigned int,std::vector<long int>>	file:
ld_vector_size	visualizer.cc	/^   unsigned ld_vector_size;$/;"	m	class:my_time_vector	typeref:typename:unsigned	file:
ldst_unit	shader.cc	/^ldst_unit::ldst_unit( mem_fetch_interface *icnt,$/;"	f	class:ldst_unit
ldst_unit	shader.h	/^class ldst_unit: public pipelined_simd_unit {$/;"	c
ldst_unit_response_buffer_full	shader.cc	/^bool shader_core_ctx::ldst_unit_response_buffer_full() const$/;"	f	class:shader_core_ctx	typeref:typename:bool
ldst_unit_response_queue_size	shader.h	/^    unsigned ldst_unit_response_queue_size;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
libgpu_uarch_sim.a	Makefile	/^libgpu_uarch_sim.a:$(OBJS)$/;"	t
linear_histogram	histogram.cc	/^linear_histogram::linear_histogram (int stride, const char *name, int nbins, int* bins) $/;"	f	class:linear_histogram
linear_histogram	histogram.h	/^class linear_histogram : public binned_histogram {$/;"	c
linear_histogram_logger	stat-tool.cc	/^linear_histogram_logger::linear_histogram_logger(const linear_histogram_logger& other) $/;"	f	class:linear_histogram_logger
linear_histogram_logger	stat-tool.cc	/^linear_histogram_logger::linear_histogram_logger(int n_bins, $/;"	f	class:linear_histogram_logger
linear_histogram_logger	stat-tool.h	/^class linear_histogram_logger : public snap_shot_trigger, public spill_log_interface {$/;"	c
linear_histogram_snapshot	stat-tool.h	/^   linear_histogram_snapshot(const linear_histogram_snapshot& other) $/;"	f	class:linear_histogram_snapshot
linear_histogram_snapshot	stat-tool.h	/^   linear_histogram_snapshot(int n_bins, unsigned long long  cycle) $/;"	f	class:linear_histogram_snapshot
linear_histogram_snapshot	stat-tool.h	/^class linear_histogram_snapshot {$/;"	c
linear_to_raw_address_translation	addrdec.cc	/^linear_to_raw_address_translation::linear_to_raw_address_translation()$/;"	f	class:linear_to_raw_address_translation
linear_to_raw_address_translation	addrdec.h	/^class linear_to_raw_address_translation {$/;"	c
list_spill_log	stat-tool.cc	/^static std::list<spill_log_interface*> list_spill_log;$/;"	v	typeref:typename:std::list<spill_log_interface * >	file:
list_ss_trigger	stat-tool.cc	/^static std::list<snap_shot_trigger*> list_ss_trigger;$/;"	v	typeref:typename:std::list<snap_shot_trigger * >	file:
liveness_message_freq	gpu-sim.h	/^    unsigned long long liveness_message_freq; $/;"	m	class:gpgpu_sim_config	typeref:typename:unsigned long long
log	stat-tool.h	/^   void log(address_type pc, int warp_occ) {$/;"	f	class:insn_warp_occ_logger	typeref:typename:void
log	stat-tool.h	/^   void log(int pos) { m_curr_lin_hist.addsample(pos); }$/;"	f	class:linear_histogram_logger	typeref:typename:void
longopregs	scoreboard.h	/^    std::vector< std::set<unsigned> > longopregs;$/;"	m	class:Scoreboard	typeref:typename:std::vector<std::set<unsigned>>
lrr_scheduler	shader.h	/^	lrr_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:lrr_scheduler
lrr_scheduler	shader.h	/^class lrr_scheduler : public scheduler_unit {$/;"	c
m_L1C	shader.h	/^   read_only_cache *m_L1C; \/\/ constant cache$/;"	m	class:ldst_unit	typeref:typename:read_only_cache *
m_L1C_config	shader.h	/^    mutable cache_config m_L1C_config;$/;"	m	struct:shader_core_config	typeref:typename:cache_config
m_L1D	shader.h	/^   l1_cache *m_L1D; \/\/ data cache$/;"	m	class:ldst_unit	typeref:typename:l1_cache *
m_L1D_config	shader.h	/^    mutable l1d_cache_config m_L1D_config;$/;"	m	struct:shader_core_config	typeref:typename:l1d_cache_config
m_L1I	shader.h	/^    read_only_cache *m_L1I; \/\/ instruction cache$/;"	m	class:shader_core_ctx	typeref:typename:read_only_cache *
m_L1I_config	shader.h	/^    mutable cache_config m_L1I_config;$/;"	m	struct:shader_core_config	typeref:typename:cache_config
m_L1T	shader.h	/^   tex_cache *m_L1T; \/\/ texture cache$/;"	m	class:ldst_unit	typeref:typename:tex_cache *
m_L1T_config	shader.h	/^    mutable cache_config m_L1T_config;$/;"	m	struct:shader_core_config	typeref:typename:cache_config
m_L2_config	gpu-sim.h	/^   mutable l2_cache_config m_L2_config;$/;"	m	struct:memory_config	typeref:typename:l2_cache_config
m_L2_dram_queue	l2cache.h	/^   fifo_pipeline<mem_fetch> *m_L2_dram_queue;$/;"	m	class:memory_sub_partition	typeref:typename:fifo_pipeline<mem_fetch> *
m_L2_icnt_queue	l2cache.h	/^   fifo_pipeline<mem_fetch> *m_L2_icnt_queue; \/\/ L2 cache hit response queue$/;"	m	class:memory_sub_partition	typeref:typename:fifo_pipeline<mem_fetch> *
m_L2_texure_only	gpu-sim.h	/^   bool m_L2_texure_only;$/;"	m	struct:memory_config	typeref:typename:bool
m_L2cache	l2cache.h	/^   class l2_cache *m_L2cache;$/;"	m	class:memory_sub_partition	typeref:class:l2_cache *
m_L2interface	l2cache.h	/^   class L2interface *m_L2interface;$/;"	m	class:memory_sub_partition	typeref:class:L2interface *
m_access	gpu-cache.h	/^    unsigned m_access;$/;"	m	class:tag_array	typeref:typename:unsigned
m_access	mem_fetch.h	/^   mem_access_t m_access;$/;"	m	class:mem_fetch	typeref:typename:mem_access_t
m_active	shader.h	/^   bool m_active; $/;"	m	class:thread_ctx_t	typeref:typename:bool
m_active_fu_lanes	shader.h	/^    unsigned *m_active_fu_lanes;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_active_fu_mem_lanes	shader.h	/^    unsigned *m_active_fu_mem_lanes;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_active_sfu_lanes	power_stat.h	/^    unsigned *m_active_sfu_lanes[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_active_sfu_lanes	shader.h	/^    unsigned *m_active_sfu_lanes;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_active_sms	power_stat.h	/^   float * m_active_sms;$/;"	m	class:power_stat_t	typeref:typename:float *
m_active_sp_lanes	power_stat.h	/^    unsigned *m_active_sp_lanes[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_active_sp_lanes	shader.h	/^    unsigned *m_active_sp_lanes;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_active_threads	shader.h	/^    std::bitset<MAX_THREAD_PER_SM> m_active_threads;$/;"	m	class:shader_core_ctx	typeref:typename:std::bitset<MAX_THREAD_PER_SM>
m_active_threads	shader.h	/^    std::bitset<MAX_WARP_SIZE> m_active_threads;$/;"	m	class:shd_warp_t	typeref:typename:std::bitset<MAX_WARP_SIZE>
m_address_mapping	gpu-cache.h	/^	linear_to_raw_address_translation *m_address_mapping;$/;"	m	class:l2_cache_config	typeref:typename:linear_to_raw_address_translation *
m_address_mapping	gpu-sim.h	/^   linear_to_raw_address_translation m_address_mapping;$/;"	m	struct:memory_config	typeref:typename:linear_to_raw_address_translation
m_alloc_policy	gpu-cache.h	/^    enum allocation_policy_t m_alloc_policy;        \/\/ 'm' = allocate on miss, 'f' = allocate /;"	m	class:cache_config	typeref:enum:allocation_policy_t
m_alloc_time	gpu-cache.h	/^    unsigned         m_alloc_time;$/;"	m	struct:cache_block_t	typeref:typename:unsigned
m_allocated_bank	shader.h	/^      allocation_t *m_allocated_bank; \/\/ bank # -> register that wins$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:allocation_t *
m_allocation	shader.h	/^      enum alloc_t m_allocation;$/;"	m	class:opndcoll_rfu_t::allocation_t	typeref:enum:alloc_t
m_allocator_rr_head	shader.h	/^      unsigned *m_allocator_rr_head; \/\/ cu # -> next bank to check for request (rr-arb)$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:unsigned *
m_arbiter	shader.h	/^   arbiter_t m_arbiter;$/;"	m	class:opndcoll_rfu_t	typeref:typename:arbiter_t
m_arbitration_metadata	l2cache.h	/^   arbitration_metadata m_arbitration_metadata; $/;"	m	class:memory_partition_unit	typeref:typename:arbitration_metadata
m_assoc	gpu-cache.h	/^    unsigned m_assoc;$/;"	m	class:cache_config	typeref:typename:unsigned
m_average_pipeline_duty_cycle	power_stat.h	/^   float * m_average_pipeline_duty_cycle;$/;"	m	class:power_stat_t	typeref:typename:float *
m_bandwidth_management	gpu-cache.h	/^    bandwidth_management m_bandwidth_management; $/;"	m	class:baseline_cache	typeref:typename:bandwidth_management
m_bank	shader.h	/^      unsigned  m_bank;$/;"	m	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
m_bank_warp_shift	shader.h	/^      unsigned m_bank_warp_shift;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
m_bank_warp_shift	shader.h	/^   unsigned m_bank_warp_shift;$/;"	m	class:opndcoll_rfu_t	typeref:typename:unsigned
m_bar_id_to_warps	shader.h	/^   bar_id_to_warp_t m_bar_id_to_warps;$/;"	m	class:barrier_set_t	typeref:typename:bar_id_to_warp_t
m_barriers	shader.h	/^    barrier_set_t             m_barriers;$/;"	m	class:shader_core_ctx	typeref:typename:barrier_set_t
m_bin_cnts	histogram.h	/^   int *m_bin_cnts;    \/\/ counters$/;"	m	class:binned_histogram	typeref:typename:int *
m_bins	dram_sched.h	/^   std::map<unsigned,std::list<std::list<dram_req_t*>::iterator> >    *m_bins;$/;"	m	class:frfcfs_scheduler	typeref:typename:std::map<unsigned,std::list<std::list<dram_req_t * >::iterator>> *
m_bins	histogram.h	/^   int *m_bins;        \/\/ bin boundaries$/;"	m	class:binned_histogram	typeref:typename:int *
m_block_addr	gpu-cache.h	/^        new_addr_type m_block_addr;$/;"	m	struct:baseline_cache::extra_mf_fields	typeref:typename:new_addr_type
m_block_addr	gpu-cache.h	/^        new_addr_type m_block_addr;$/;"	m	struct:tex_cache::data_block	typeref:typename:new_addr_type
m_block_addr	gpu-cache.h	/^        new_addr_type m_block_addr;$/;"	m	struct:tex_cache::rob_entry	typeref:typename:new_addr_type
m_block_addr	gpu-cache.h	/^    new_addr_type    m_block_addr;$/;"	m	struct:cache_block_t	typeref:typename:new_addr_type
m_cache	gpu-cache.h	/^    data_block             *m_cache;$/;"	m	class:tex_cache	typeref:typename:data_block *
m_cache_data_port_busy_cycles	gpu-cache.h	/^    unsigned long long m_cache_data_port_busy_cycles; $/;"	m	class:cache_stats	typeref:typename:unsigned long long
m_cache_fill_port_busy_cycles	gpu-cache.h	/^    unsigned long long m_cache_fill_port_busy_cycles; $/;"	m	class:cache_stats	typeref:typename:unsigned long long
m_cache_index	gpu-cache.h	/^        unsigned   m_cache_index; \/\/ where to look for data$/;"	m	struct:tex_cache::fragment_entry	typeref:typename:unsigned
m_cache_index	gpu-cache.h	/^        unsigned m_cache_index;$/;"	m	struct:baseline_cache::extra_mf_fields	typeref:typename:unsigned
m_cache_port_available_cycles	gpu-cache.h	/^    unsigned long long m_cache_port_available_cycles; $/;"	m	class:cache_stats	typeref:typename:unsigned long long
m_cluster	gpu-sim.h	/^   class simt_core_cluster **m_cluster;$/;"	m	class:gpgpu_sim	typeref:class:simt_core_cluster **
m_cluster	shader.h	/^    class simt_core_cluster *m_cluster;$/;"	m	class:shader_core_ctx	typeref:class:simt_core_cluster *
m_cluster	shader.h	/^    simt_core_cluster *m_cluster;$/;"	m	class:perfect_memory_interface	typeref:typename:simt_core_cluster *
m_cluster	shader.h	/^    simt_core_cluster *m_cluster;$/;"	m	class:shader_memory_interface	typeref:typename:simt_core_cluster *
m_cluster_id	shader.h	/^    unsigned m_cluster_id;$/;"	m	class:shader_core_mem_fetch_allocator	typeref:typename:unsigned
m_cluster_id	shader.h	/^    unsigned m_cluster_id;$/;"	m	class:simt_core_cluster	typeref:typename:unsigned
m_collector_units	shader.h	/^      std::vector<collector_unit_t>* m_collector_units;$/;"	m	class:opndcoll_rfu_t::dispatch_unit_t	typeref:typename:std::vector<collector_unit_t> *
m_config	dram.h	/^   const struct memory_config *m_config;$/;"	m	class:dram_t	typeref:typename:const struct memory_config *
m_config	dram_sched.h	/^   const memory_config *m_config;$/;"	m	class:frfcfs_scheduler	typeref:typename:const memory_config *
m_config	gpu-cache.h	/^        const cache_config &m_config; $/;"	m	class:baseline_cache::bandwidth_management	typeref:typename:const cache_config &
m_config	gpu-cache.h	/^    cache_config &m_config;$/;"	m	class:baseline_cache	typeref:typename:cache_config &
m_config	gpu-cache.h	/^    cache_config &m_config;$/;"	m	class:tag_array	typeref:typename:cache_config &
m_config	gpu-cache.h	/^    const cache_config &m_config;$/;"	m	class:tex_cache	typeref:typename:const cache_config &
m_config	gpu-sim.h	/^   const gpgpu_sim_config &m_config;$/;"	m	class:gpgpu_sim	typeref:typename:const gpgpu_sim_config &
m_config	l2cache.h	/^   const struct memory_config *m_config;$/;"	m	class:memory_partition_unit	typeref:typename:const struct memory_config *
m_config	l2cache.h	/^   const struct memory_config *m_config;$/;"	m	class:memory_sub_partition	typeref:typename:const struct memory_config *
m_config	power_stat.h	/^   const memory_config *m_config;$/;"	m	class:power_mem_stat_t	typeref:typename:const memory_config *
m_config	power_stat.h	/^   const shader_core_config *m_config;$/;"	m	class:power_core_stat_t	typeref:typename:const shader_core_config *
m_config	power_stat.h	/^   const shader_core_config *m_config;$/;"	m	class:power_stat_t	typeref:typename:const shader_core_config *
m_config	shader.h	/^    const shader_core_config *m_config;$/;"	m	class:shader_core_ctx	typeref:typename:const shader_core_config *
m_config	shader.h	/^    const shader_core_config *m_config;$/;"	m	class:shader_core_stats	typeref:typename:const shader_core_config *
m_config	shader.h	/^    const shader_core_config *m_config;$/;"	m	class:simd_function_unit	typeref:typename:const shader_core_config *
m_config	shader.h	/^    const shader_core_config *m_config;$/;"	m	class:simt_core_cluster	typeref:typename:const shader_core_config *
m_config_string	gpu-cache.h	/^    char *m_config_string;$/;"	m	class:cache_config	typeref:typename:char *
m_config_stringPrefL1	gpu-cache.h	/^    char *m_config_stringPrefL1;$/;"	m	class:cache_config	typeref:typename:char *
m_config_stringPrefShared	gpu-cache.h	/^    char *m_config_stringPrefShared;$/;"	m	class:cache_config	typeref:typename:char *
m_core	shader.h	/^    class shader_core_ctx *m_core;$/;"	m	class:pipelined_simd_unit	typeref:class:shader_core_ctx *
m_core	shader.h	/^    shader_core_ctx **m_core;$/;"	m	class:simt_core_cluster	typeref:typename:shader_core_ctx **
m_core	shader.h	/^    shader_core_ctx *m_core;$/;"	m	class:perfect_memory_interface	typeref:typename:shader_core_ctx *
m_core	shader.h	/^    shader_core_ctx *m_core;$/;"	m	class:shader_memory_interface	typeref:typename:shader_core_ctx *
m_core	shader.h	/^   class shader_core_ctx *m_core;$/;"	m	class:ldst_unit	typeref:class:shader_core_ctx *
m_core_config	power_stat.h	/^   const shader_core_config *m_core_config;$/;"	m	class:power_mem_stat_t	typeref:typename:const shader_core_config *
m_core_id	gpu-cache.h	/^    int m_core_id; \/\/ which shader core is using this$/;"	m	class:tag_array	typeref:typename:int
m_core_id	shader.h	/^    unsigned m_core_id;$/;"	m	class:shader_core_mem_fetch_allocator	typeref:typename:unsigned
m_core_sim_order	shader.h	/^    std::list<unsigned> m_core_sim_order;$/;"	m	class:simt_core_cluster	typeref:typename:std::list<unsigned>
m_core_stats	power_stat.h	/^   shader_core_stats * m_core_stats;$/;"	m	class:power_core_stat_t	typeref:typename:shader_core_stats *
m_core_stats	power_stat.h	/^   shader_core_stats * m_core_stats;$/;"	m	class:power_mem_stat_t	typeref:typename:shader_core_stats *
m_cta_id	shader.h	/^    unsigned m_cta_id;$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_cta_id	shader.h	/^   unsigned m_cta_id; \/\/ hardware CTA this thread belongs$/;"	m	class:thread_ctx_t	typeref:typename:unsigned
m_cta_issue_next_core	shader.h	/^    unsigned m_cta_issue_next_core;$/;"	m	class:simt_core_cluster	typeref:typename:unsigned
m_cta_status	shader.h	/^    unsigned m_cta_status[MAX_CTA_PER_SHADER]; \/\/ CTAs status $/;"	m	class:shader_core_ctx	typeref:typename:unsigned[]
m_cta_to_warps	shader.h	/^   cta_to_warp_t m_cta_to_warps;$/;"	m	class:barrier_set_t	typeref:typename:cta_to_warp_t
m_ctrl_size	mem_fetch.h	/^   unsigned m_ctrl_size; \/\/ how big would all this meta data be in hardware (does not necessar/;"	m	class:mem_fetch	typeref:typename:unsigned
m_cu	shader.h	/^      collector_unit_t  *m_cu; $/;"	m	class:opndcoll_rfu_t::op_t	typeref:typename:collector_unit_t *
m_cu	shader.h	/^   std::vector<collector_unit_t *> m_cu;$/;"	m	class:opndcoll_rfu_t	typeref:typename:std::vector<collector_unit_t * >
m_cu_sets	shader.h	/^       uint_vector_t m_cu_sets;$/;"	m	class:opndcoll_rfu_t::input_port_t	typeref:typename:uint_vector_t
m_cuda_properties	gpu-sim.h	/^   const struct cudaDeviceProp     *m_cuda_properties;$/;"	m	class:gpgpu_sim	typeref:typename:const struct cudaDeviceProp *
m_cuid	shader.h	/^      unsigned m_cuid; \/\/ collector unit hw id$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
m_curr_lin_hist	stat-tool.h	/^   linear_histogram_snapshot m_curr_lin_hist;$/;"	m	class:linear_histogram_logger	typeref:typename:linear_histogram_snapshot
m_current_response	gpu-cache.h	/^    std::list<new_addr_type> m_current_response;$/;"	m	class:mshr_table	typeref:typename:std::list<new_addr_type>
m_current_response_ready	gpu-cache.h	/^    bool m_current_response_ready;$/;"	m	class:mshr_table	typeref:typename:bool
m_cus	shader.h	/^   cu_sets_t m_cus;$/;"	m	class:opndcoll_rfu_t	typeref:typename:cu_sets_t
m_cycle	stat-tool.h	/^   unsigned long long  m_cycle;$/;"	m	class:linear_histogram_logger	typeref:typename:unsigned long long
m_cycle	stat-tool.h	/^   unsigned long long  m_cycle;$/;"	m	class:linear_histogram_snapshot	typeref:typename:unsigned long long
m_cycle	stat-tool.h	/^   unsigned long long  m_cycle;$/;"	m	class:thread_CFlocality	typeref:typename:unsigned long long
m_cycle	stat-tool.h	/^   unsigned long long  m_cycle;$/;"	m	class:thread_insn_span	typeref:typename:unsigned long long
m_data	delayqueue.h	/^   T *m_data;$/;"	m	struct:fifo_data	typeref:typename:T *
m_data	gpu-cache.h	/^        T         *m_data;$/;"	m	class:tex_cache::fifo	typeref:typename:T *
m_data	gpu-cache.h	/^    table m_data;$/;"	m	class:mshr_table	typeref:typename:table
m_data_port_occupied_cycles	gpu-cache.h	/^        int m_data_port_occupied_cycles; \/\/< Number of cycle that the data port remains used $/;"	m	class:baseline_cache::bandwidth_management	typeref:typename:int
m_data_port_width	gpu-cache.h	/^    unsigned m_data_port_width; \/\/< number of byte the cache can access per cycle $/;"	m	class:cache_config	typeref:typename:unsigned
m_data_size	gpu-cache.h	/^        unsigned   m_data_size;$/;"	m	struct:tex_cache::fragment_entry	typeref:typename:unsigned
m_data_size	gpu-cache.h	/^        unsigned m_data_size;$/;"	m	struct:baseline_cache::extra_mf_fields	typeref:typename:unsigned
m_data_size	mem_fetch.h	/^   unsigned m_data_size; \/\/ how much data is being written$/;"	m	class:mem_fetch	typeref:typename:unsigned
m_disabled	gpu-cache.h	/^    bool m_disabled;$/;"	m	class:cache_config	typeref:typename:bool
m_dispatch_port	shader.h	/^    std::vector<pipeline_stage_name_t> m_dispatch_port;$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<pipeline_stage_name_t>
m_dispatch_reg	shader.h	/^    warp_inst_t *m_dispatch_reg;$/;"	m	class:simd_function_unit	typeref:typename:warp_inst_t *
m_dispatch_units	shader.h	/^   std::vector<dispatch_unit_t> m_dispatch_units;$/;"	m	class:opndcoll_rfu_t	typeref:typename:std::vector<dispatch_unit_t>
m_done_exit	shader.h	/^    bool m_done_exit; \/\/ true once thread exit has been registered for threads in this warp$/;"	m	class:shd_warp_t	typeref:typename:bool
m_dram	dram_sched.h	/^   dram_t *m_dram;$/;"	m	class:frfcfs_scheduler	typeref:typename:dram_t *
m_dram	l2cache.h	/^   class dram_t *m_dram;$/;"	m	class:memory_partition_unit	typeref:class:dram_t *
m_dram_L2_queue	l2cache.h	/^   fifo_pipeline<mem_fetch> *m_dram_L2_queue;$/;"	m	class:memory_sub_partition	typeref:typename:fifo_pipeline<mem_fetch> *
m_dram_latency_queue	l2cache.h	/^   std::list<dram_delay_t> m_dram_latency_queue;$/;"	m	class:memory_partition_unit	typeref:typename:std::list<dram_delay_t>
m_dynamic_warp_id	shader.h	/^    unsigned m_dynamic_warp_id;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned
m_dynamic_warp_id	shader.h	/^    unsigned m_dynamic_warp_id;$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_executed_kernel_names	gpu-sim.h	/^   std::vector<std::string> m_executed_kernel_names; \/\/< names of kernel for stat printout $/;"	m	class:gpgpu_sim	typeref:typename:std::vector<std::string>
m_executed_kernel_uids	gpu-sim.h	/^   std::vector<unsigned> m_executed_kernel_uids; \/\/< uids of kernel launches for stat printout$/;"	m	class:gpgpu_sim	typeref:typename:std::vector<unsigned>
m_extra_mf_fields	gpu-cache.h	/^    extra_mf_fields_lookup m_extra_mf_fields;$/;"	m	class:baseline_cache	typeref:typename:extra_mf_fields_lookup
m_extra_mf_fields	gpu-cache.h	/^    extra_mf_fields_lookup m_extra_mf_fields;$/;"	m	class:tex_cache	typeref:typename:extra_mf_fields_lookup
m_fill_port_occupied_cycles	gpu-cache.h	/^        int m_fill_port_occupied_cycles; \/\/< Number of cycle that the fill port remains used $/;"	m	class:baseline_cache::bandwidth_management	typeref:typename:int
m_fill_time	gpu-cache.h	/^    unsigned         m_fill_time;$/;"	m	struct:cache_block_t	typeref:typename:unsigned
m_finished_kernel	gpu-sim.h	/^   std::list<unsigned> m_finished_kernel;$/;"	m	class:gpgpu_sim	typeref:typename:std::list<unsigned>
m_fragment_fifo	gpu-cache.h	/^    fifo<fragment_entry>    m_fragment_fifo;$/;"	m	class:tex_cache	typeref:typename:fifo<fragment_entry>
m_fragment_fifo_entries	gpu-cache.h	/^        unsigned m_fragment_fifo_entries;$/;"	m	union:cache_config::__anoncb0c5d68010a	typeref:typename:unsigned
m_free	shader.h	/^      bool m_free;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:bool
m_frfcfs_scheduler	dram.h	/^   class frfcfs_scheduler* m_frfcfs_scheduler;$/;"	m	class:dram_t	typeref:class:frfcfs_scheduler *
m_fu	shader.h	/^    std::vector<simd_function_unit*> m_fu; \/\/ stallable pipelines should be last in this array$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<simd_function_unit * >
m_gpgpusim_wrapper	gpu-sim.h	/^   class gpgpu_sim_wrapper *m_gpgpusim_wrapper;$/;"	m	class:gpgpu_sim	typeref:class:gpgpu_sim_wrapper *
m_gpu	shader.h	/^    gpgpu_sim *m_gpu;$/;"	m	class:simt_core_cluster	typeref:typename:gpgpu_sim *
m_has_atomic	gpu-cache.h	/^        bool m_has_atomic; $/;"	m	struct:mshr_table::mshr_entry	typeref:typename:bool
m_head	delayqueue.h	/^   fifo_data<T> *m_head;$/;"	m	class:fifo_pipeline	typeref:typename:fifo_data<T> *
m_head	gpu-cache.h	/^        unsigned   m_head; \/\/ next entry goes here$/;"	m	class:tex_cache::fifo	typeref:typename:unsigned
m_ibuffer	shader.h	/^    ibuffer_entry m_ibuffer[IBUFFER_SIZE]; $/;"	m	class:shd_warp_t	typeref:typename:ibuffer_entry[]
m_icnt	shader.h	/^    mem_fetch_interface *m_icnt;$/;"	m	class:shader_core_ctx	typeref:typename:mem_fetch_interface *
m_icnt	shader.h	/^   class mem_fetch_interface *m_icnt;$/;"	m	class:ldst_unit	typeref:class:mem_fetch_interface *
m_icnt_L2_queue	l2cache.h	/^   fifo_pipeline<mem_fetch> *m_icnt_L2_queue;$/;"	m	class:memory_sub_partition	typeref:typename:fifo_pipeline<mem_fetch> *
m_icnt_receive_time	mem_fetch.h	/^   unsigned m_icnt_receive_time; \/\/ set to gpu_sim_cycle + interconnect_latency when fixed icn/;"	m	class:mem_fetch	typeref:typename:unsigned
m_id	l2cache.h	/^   unsigned m_id;  \/\/< the global sub partition ID$/;"	m	class:memory_sub_partition	typeref:typename:unsigned
m_id	l2cache.h	/^   unsigned m_id;$/;"	m	class:memory_partition_unit	typeref:typename:unsigned
m_id	shader.h	/^    int m_id;$/;"	m	class:scheduler_unit	typeref:typename:int
m_id	stat-tool.h	/^   int m_id;$/;"	m	class:insn_warp_occ_logger	typeref:typename:int
m_id	stat-tool.h	/^   int m_id;$/;"	m	class:linear_histogram_logger	typeref:typename:int
m_imiss_pending	shader.h	/^    bool m_imiss_pending;$/;"	m	class:shd_warp_t	typeref:typename:bool
m_in	shader.h	/^       port_vector_t m_in,m_out;$/;"	m	class:opndcoll_rfu_t::input_port_t	typeref:typename:port_vector_t
m_in_ports	shader.h	/^   std::vector<input_port_t> m_in_ports;$/;"	m	class:opndcoll_rfu_t	typeref:typename:std::vector<input_port_t>
m_incoming_traffic_stats	shader.h	/^    traffic_breakdown *m_incoming_traffic_stats; \/\/ memory partition to core $/;"	m	class:shader_core_stats	typeref:typename:traffic_breakdown *
m_index	gpu-cache.h	/^        unsigned m_index; \/\/ where in cache should block be placed?$/;"	m	struct:tex_cache::rob_entry	typeref:typename:unsigned
m_initialized	shader.h	/^   bool m_initialized;$/;"	m	class:opndcoll_rfu_t	typeref:typename:bool
m_inner_level_prioritization	shader.h	/^    scheduler_prioritization_type m_inner_level_prioritization;$/;"	m	class:two_level_active_scheduler	typeref:typename:scheduler_prioritization_type
m_insn_span_count	stat-tool.h	/^   span_count_map m_insn_span_count;$/;"	m	class:thread_insn_span	typeref:typename:span_count_map
m_insn_warp_occ	stat-tool.h	/^   std::vector<linear_histogram> m_insn_warp_occ;$/;"	m	class:insn_warp_occ_logger	typeref:typename:std::vector<linear_histogram>
m_inst	mem_fetch.h	/^   warp_inst_t m_inst;$/;"	m	class:mem_fetch	typeref:typename:warp_inst_t
m_inst	shader.h	/^       const warp_inst_t *m_inst;$/;"	m	struct:shd_warp_t::ibuffer_entry	typeref:typename:const warp_inst_t *
m_inst_at_barrier	shader.h	/^    const warp_inst_t *m_inst_at_barrier;$/;"	m	class:shd_warp_t	typeref:typename:const warp_inst_t *
m_inst_fetch_buffer	shader.h	/^    ifetch_buffer_t           m_inst_fetch_buffer;$/;"	m	class:shader_core_ctx	typeref:typename:ifetch_buffer_t
m_inst_in_pipeline	shader.h	/^    unsigned m_inst_in_pipeline;$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_issue_port	shader.h	/^    std::vector<pipeline_stage_name_t> m_issue_port;$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<pipeline_stage_name_t>
m_last_access_time	gpu-cache.h	/^    unsigned         m_last_access_time;$/;"	m	struct:cache_block_t	typeref:typename:unsigned
m_last_borrower	l2cache.h	/^      int m_last_borrower; $/;"	m	class:memory_partition_unit::arbitration_metadata	typeref:typename:int
m_last_cluster_issue	gpu-sim.h	/^   unsigned m_last_cluster_issue;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned
m_last_cu	shader.h	/^      unsigned  m_last_cu; \/\/ first cu to check while arb-ing banks (rr)$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:unsigned
m_last_cu	shader.h	/^      unsigned m_last_cu; \/\/ dispatch ready cu's rr$/;"	m	class:opndcoll_rfu_t::dispatch_unit_t	typeref:typename:unsigned
m_last_fetch	shader.h	/^    unsigned long long m_last_fetch;$/;"	m	class:shd_warp_t	typeref:typename:unsigned long long
m_last_inst_gpu_sim_cycle	shader.h	/^    unsigned long long m_last_inst_gpu_sim_cycle;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned long long
m_last_inst_gpu_sim_cycle	shader.h	/^   unsigned long long m_last_inst_gpu_sim_cycle;$/;"	m	class:ldst_unit	typeref:typename:unsigned long long
m_last_inst_gpu_tot_sim_cycle	shader.h	/^    unsigned long long m_last_inst_gpu_tot_sim_cycle;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned long long
m_last_inst_gpu_tot_sim_cycle	shader.h	/^   unsigned long long m_last_inst_gpu_tot_sim_cycle;$/;"	m	class:ldst_unit	typeref:typename:unsigned long long
m_last_issued_kernel	gpu-sim.h	/^   unsigned m_last_issued_kernel;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned
m_last_num_sim_insn	shader.h	/^	unsigned *m_last_num_sim_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_last_num_sim_winsn	shader.h	/^	unsigned *m_last_num_sim_winsn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_last_row	dram_sched.h	/^   std::list<std::list<dram_req_t*>::iterator>                 **m_last_row;$/;"	m	class:frfcfs_scheduler	typeref:typename:std::list<std::list<dram_req_t * >::iterator> **
m_last_shader_dynamic_warp_issue_distro	shader.h	/^    std::vector<unsigned> m_last_shader_dynamic_warp_issue_distro;$/;"	m	class:shader_core_stats	typeref:typename:std::vector<unsigned>
m_last_shader_warp_slot_issue_distro	shader.h	/^    std::vector<unsigned> m_last_shader_warp_slot_issue_distro;$/;"	m	class:shader_core_stats	typeref:typename:std::vector<unsigned>
m_last_supervised_issued	shader.h	/^    std::vector< shd_warp_t* >::const_iterator m_last_supervised_issued;$/;"	m	class:scheduler_unit	typeref:typename:std::vector<shd_warp_t * >::const_iterator
m_last_warp_fetched	shader.h	/^    int  m_last_warp_fetched;$/;"	m	class:shader_core_ctx	typeref:typename:int
m_ldst_unit	shader.h	/^    ldst_unit *m_ldst_unit;$/;"	m	class:shader_core_ctx	typeref:typename:ldst_unit *
m_length	delayqueue.h	/^   unsigned int m_length;$/;"	m	class:fifo_pipeline	typeref:typename:unsigned int
m_lin_hist_archive	stat-tool.h	/^   std::list<linear_histogram_snapshot> m_lin_hist_archive;$/;"	m	class:linear_histogram_logger	typeref:typename:std::list<linear_histogram_snapshot>
m_line_sz	gpu-cache.h	/^    unsigned m_line_sz;$/;"	m	class:cache_config	typeref:typename:unsigned
m_line_sz_log2	gpu-cache.h	/^    unsigned m_line_sz_log2;$/;"	m	class:cache_config	typeref:typename:unsigned
m_linear_histogram	stat-tool.h	/^   std::vector<int> m_linear_histogram;$/;"	m	class:linear_histogram_snapshot	typeref:typename:std::vector<int>
m_lines	gpu-cache.h	/^    cache_block_t *m_lines; \/* nbanks x nset x assoc lines in total *\/$/;"	m	class:tag_array	typeref:typename:cache_block_t *
m_list	gpu-cache.h	/^        std::list<mem_fetch*> m_list;$/;"	m	struct:mshr_table::mshr_entry	typeref:typename:std::list<mem_fetch * >
m_max_active_warps	shader.h	/^	unsigned m_max_active_warps;$/;"	m	class:two_level_active_scheduler	typeref:typename:unsigned
m_max_barriers_per_cta	shader.h	/^   unsigned m_max_barriers_per_cta;$/;"	m	class:barrier_set_t	typeref:typename:unsigned
m_max_cta_per_core	shader.h	/^   unsigned m_max_cta_per_core;$/;"	m	class:barrier_set_t	typeref:typename:unsigned
m_max_len	delayqueue.h	/^   unsigned int m_max_len;$/;"	m	class:fifo_pipeline	typeref:typename:unsigned int
m_max_merged	gpu-cache.h	/^    const unsigned m_max_merged;$/;"	m	class:mshr_table	typeref:typename:const unsigned
m_max_warps_per_core	shader.h	/^   unsigned m_max_warps_per_core;$/;"	m	class:barrier_set_t	typeref:typename:unsigned
m_maximum	histogram.h	/^   int m_maximum;      \/\/ the maximum sample$/;"	m	class:binned_histogram	typeref:typename:int
m_mem_config	mem_fetch.h	/^   const class memory_config *m_mem_config;$/;"	m	class:mem_fetch	typeref:typename:const class memory_config *
m_mem_config	power_stat.h	/^   const struct memory_config *m_mem_config;$/;"	m	class:power_stat_t	typeref:typename:const struct memory_config *
m_mem_fetch_allocator	shader.h	/^    shader_core_mem_fetch_allocator *m_mem_fetch_allocator;$/;"	m	class:shader_core_ctx	typeref:typename:shader_core_mem_fetch_allocator *
m_mem_out	shader.h	/^    register_set* m_mem_out;$/;"	m	class:scheduler_unit	typeref:typename:register_set *
m_mem_rc	shader.h	/^   enum mem_stage_stall_type m_mem_rc;$/;"	m	class:ldst_unit	typeref:enum:mem_stage_stall_type
m_mem_stats	power_stat.h	/^   memory_stats_t *m_mem_stats;$/;"	m	class:power_mem_stat_t	typeref:typename:memory_stats_t *
m_membar	shader.h	/^    bool     m_membar;             \/\/ if true, warp is waiting at memory barrier$/;"	m	class:shd_warp_t	typeref:typename:bool
m_memfetch_creator	gpu-cache.h	/^    mem_fetch_allocator *m_memfetch_creator;$/;"	m	class:data_cache	typeref:typename:mem_fetch_allocator *
m_memory_config	gpu-sim.h	/^    memory_config m_memory_config;$/;"	m	class:gpgpu_sim_config	typeref:typename:memory_config
m_memory_config	gpu-sim.h	/^   const struct memory_config      *m_memory_config;$/;"	m	class:gpgpu_sim	typeref:typename:const struct memory_config *
m_memory_config	l2cache.h	/^    const memory_config *m_memory_config;$/;"	m	class:partition_mf_allocator	typeref:typename:const memory_config *
m_memory_config	mem_latency_stat.h	/^   const struct memory_config *m_memory_config;$/;"	m	class:memory_stats_t	typeref:typename:const struct memory_config *
m_memory_config	shader.h	/^    const memory_config *m_memory_config;$/;"	m	class:shader_core_ctx	typeref:typename:const memory_config *
m_memory_config	shader.h	/^    const memory_config *m_memory_config;$/;"	m	class:shader_core_mem_fetch_allocator	typeref:typename:const memory_config *
m_memory_config	shader.h	/^   const memory_config *m_memory_config;$/;"	m	class:ldst_unit	typeref:typename:const memory_config *
m_memory_partition_unit	dram.h	/^   class memory_partition_unit *m_memory_partition_unit;$/;"	m	class:dram_t	typeref:class:memory_partition_unit *
m_memory_partition_unit	gpu-sim.h	/^   class memory_partition_unit **m_memory_partition_unit;$/;"	m	class:gpgpu_sim	typeref:class:memory_partition_unit **
m_memory_stats	gpu-sim.h	/^   class memory_stats_t     *m_memory_stats;$/;"	m	class:gpgpu_sim	typeref:class:memory_stats_t *
m_memory_stats	shader.h	/^    memory_stats_t *m_memory_stats;$/;"	m	class:simt_core_cluster	typeref:typename:memory_stats_t *
m_memory_sub_partition	gpu-sim.h	/^   class memory_sub_partition **m_memory_sub_partition;$/;"	m	class:gpgpu_sim	typeref:class:memory_sub_partition **
m_memport	gpu-cache.h	/^    mem_fetch_interface    *m_memport;$/;"	m	class:tex_cache	typeref:typename:mem_fetch_interface *
m_memport	gpu-cache.h	/^    mem_fetch_interface *m_memport;$/;"	m	class:baseline_cache	typeref:typename:mem_fetch_interface *
m_mf_allocator	l2cache.h	/^   partition_mf_allocator *m_mf_allocator;$/;"	m	class:memory_sub_partition	typeref:typename:partition_mf_allocator *
m_mf_allocator	shader.h	/^   shader_core_mem_fetch_allocator *m_mf_allocator;$/;"	m	class:ldst_unit	typeref:typename:shader_core_mem_fetch_allocator *
m_min_len	delayqueue.h	/^   unsigned int m_min_len;$/;"	m	class:fifo_pipeline	typeref:typename:unsigned int
m_miss	gpu-cache.h	/^        bool       m_miss;        \/\/ true if sent memory request$/;"	m	struct:tex_cache::fragment_entry	typeref:typename:bool
m_miss	gpu-cache.h	/^    unsigned m_miss;$/;"	m	class:tag_array	typeref:typename:unsigned
m_miss_queue	gpu-cache.h	/^    std::list<mem_fetch*> m_miss_queue;$/;"	m	class:baseline_cache	typeref:typename:std::list<mem_fetch * >
m_miss_queue_size	gpu-cache.h	/^        unsigned m_miss_queue_size;$/;"	m	union:cache_config::__anoncb0c5d68030a	typeref:typename:unsigned
m_miss_queue_status	gpu-cache.h	/^    enum mem_fetch_status m_miss_queue_status;$/;"	m	class:baseline_cache	typeref:enum:mem_fetch_status
m_mshr_entries	gpu-cache.h	/^        unsigned m_mshr_entries;$/;"	m	union:cache_config::__anoncb0c5d68010a	typeref:typename:unsigned
m_mshr_max_merge	gpu-cache.h	/^        unsigned m_mshr_max_merge;$/;"	m	union:cache_config::__anoncb0c5d68020a	typeref:typename:unsigned
m_mshr_type	gpu-cache.h	/^    enum mshr_config_t m_mshr_type;$/;"	m	class:cache_config	typeref:enum:mshr_config_t
m_mshrs	gpu-cache.h	/^    mshr_table m_mshrs;$/;"	m	class:baseline_cache	typeref:typename:mshr_table
m_n_active_cta	shader.h	/^    unsigned m_n_active_cta; \/\/ number of Cooperative Thread Arrays (blocks) currently running/;"	m	class:shader_core_ctx	typeref:typename:unsigned
m_n_atomic	shader.h	/^    unsigned m_n_atomic;           \/\/ number of outstanding atomic operations $/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_n_bins	stat-tool.h	/^   int m_n_bins;$/;"	m	class:linear_histogram_logger	typeref:typename:int
m_n_channel	addrdec.h	/^   int m_n_channel;$/;"	m	class:linear_to_raw_address_translation	typeref:typename:int
m_n_diverge	shader.h	/^    unsigned *m_n_diverge;    \/\/ number of divergence occurring in this shader$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_n_element	delayqueue.h	/^   unsigned int m_n_element;$/;"	m	class:fifo_pipeline	typeref:typename:unsigned int
m_n_mem	gpu-sim.h	/^   unsigned m_n_mem;$/;"	m	struct:memory_config	typeref:typename:unsigned
m_n_mem_sub_partition	gpu-sim.h	/^   unsigned m_n_mem_sub_partition;$/;"	m	struct:memory_config	typeref:typename:unsigned
m_n_shader	mem_latency_stat.h	/^   unsigned m_n_shader;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
m_n_sub_partition_in_channel	addrdec.h	/^   int m_n_sub_partition_in_channel; $/;"	m	class:linear_to_raw_address_translation	typeref:typename:int
m_n_sub_partition_per_memory_channel	gpu-sim.h	/^   unsigned m_n_sub_partition_per_memory_channel;$/;"	m	struct:memory_config	typeref:typename:unsigned
m_name	delayqueue.h	/^   const char* m_name;$/;"	m	class:fifo_pipeline	typeref:typename:const char *
m_name	gpu-cache.h	/^    std::string m_name;$/;"	m	class:baseline_cache	typeref:typename:std::string
m_name	gpu-cache.h	/^    std::string m_name;$/;"	m	class:tex_cache	typeref:typename:std::string
m_name	histogram.h	/^   std::string m_name;$/;"	m	class:binned_histogram	typeref:typename:std::string
m_name	shader.h	/^    std::string m_name;$/;"	m	class:simd_function_unit	typeref:typename:std::string
m_name	stat-tool.h	/^   std::string m_name;$/;"	m	class:linear_histogram_logger	typeref:typename:std::string
m_name	stat-tool.h	/^   std::string m_name;$/;"	m	class:thread_CFlocality	typeref:typename:std::string
m_nbins	histogram.h	/^   int m_nbins;$/;"	m	class:binned_histogram	typeref:typename:int
m_nbytes	shader.h	/^    unsigned m_nbytes;$/;"	m	struct:ifetch_buffer_t	typeref:typename:unsigned
m_network_name	traffic_breakdown.h	/^   std::string m_network_name; $/;"	m	class:traffic_breakdown	typeref:typename:std::string
m_next	delayqueue.h	/^   fifo_data *m_next;$/;"	m	struct:fifo_data	typeref:typename:fifo_data *
m_next	shader.h	/^    unsigned m_next;$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_next_cu	shader.h	/^      unsigned m_next_cu;  \/\/ for initialization$/;"	m	class:opndcoll_rfu_t::dispatch_unit_t	typeref:typename:unsigned
m_next_cycle_prioritized_warps	shader.h	/^    std::vector< shd_warp_t* > m_next_cycle_prioritized_warps;$/;"	m	class:scheduler_unit	typeref:typename:std::vector<shd_warp_t * >
m_next_global	shader.h	/^   mem_fetch *m_next_global;$/;"	m	class:ldst_unit	typeref:typename:mem_fetch *
m_next_pc	shader.h	/^    address_type m_next_pc;$/;"	m	class:shd_warp_t	typeref:typename:address_type
m_next_wb	shader.h	/^   warp_inst_t m_next_wb;$/;"	m	class:ldst_unit	typeref:typename:warp_inst_t
m_non_rf_operands	power_stat.h	/^    unsigned *m_non_rf_operands[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_non_rf_operands	shader.h	/^    unsigned *m_non_rf_operands;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_not_completed	shader.h	/^    unsigned m_not_completed; \/\/ number of threads to be completed (==0 when all thread on thi/;"	m	class:shader_core_ctx	typeref:typename:unsigned
m_not_ready	shader.h	/^      std::bitset<MAX_REG_OPERANDS*2> m_not_ready;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:std::bitset<MAX_REG_OPERANDS * 2>
m_nset	gpu-cache.h	/^    unsigned m_nset;$/;"	m	class:cache_config	typeref:typename:unsigned
m_nset_log2	gpu-cache.h	/^    unsigned m_nset_log2;$/;"	m	class:cache_config	typeref:typename:unsigned
m_nthreads	stat-tool.h	/^   int m_nthreads;$/;"	m	class:thread_CFlocality	typeref:typename:int
m_num	gpu-cache.h	/^        unsigned   m_num;  \/\/ how many in fifo?$/;"	m	class:tex_cache::fifo	typeref:typename:unsigned
m_num_FPdecoded_insn	power_stat.h	/^    unsigned *m_num_FPdecoded_insn[NUM_STAT_IDX]; \/\/ number of instructions committed by this /;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_FPdecoded_insn	shader.h	/^    unsigned *m_num_FPdecoded_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_INTdecoded_insn	power_stat.h	/^    unsigned *m_num_INTdecoded_insn[NUM_STAT_IDX]; \/\/ number of instructions committed by this/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_INTdecoded_insn	shader.h	/^    unsigned *m_num_INTdecoded_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_banks	shader.h	/^      unsigned m_num_banks;$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:unsigned
m_num_banks	shader.h	/^      unsigned m_num_banks;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
m_num_banks	shader.h	/^   unsigned m_num_banks;$/;"	m	class:opndcoll_rfu_t	typeref:typename:unsigned
m_num_collector_sets	shader.h	/^   unsigned m_num_collector_sets;$/;"	m	class:opndcoll_rfu_t	typeref:typename:unsigned
m_num_collectors	shader.h	/^      unsigned m_num_collectors;$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:unsigned
m_num_collectors	shader.h	/^      unsigned m_num_collectors;$/;"	m	class:opndcoll_rfu_t::dispatch_unit_t	typeref:typename:unsigned
m_num_decoded_insn	power_stat.h	/^    unsigned *m_num_decoded_insn[NUM_STAT_IDX]; \/\/ number of instructions committed by this sh/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_decoded_insn	shader.h	/^    unsigned *m_num_decoded_insn; \/\/ number of instructions decoded by this shader core$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_entries	gpu-cache.h	/^    const unsigned m_num_entries;$/;"	m	class:mshr_table	typeref:typename:const unsigned
m_num_fp_acesses	power_stat.h	/^    unsigned *m_num_fp_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_fp_acesses	shader.h	/^    unsigned *m_num_fp_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_fpdiv_acesses	power_stat.h	/^    unsigned *m_num_fpdiv_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_fpdiv_acesses	shader.h	/^    unsigned *m_num_fpdiv_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_fpmul_acesses	power_stat.h	/^    unsigned *m_num_fpmul_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_fpmul_acesses	shader.h	/^    unsigned *m_num_fpmul_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_function_units	shader.h	/^    unsigned m_num_function_units;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned
m_num_ialu_acesses	power_stat.h	/^    unsigned *m_num_ialu_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_ialu_acesses	shader.h	/^    unsigned *m_num_ialu_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_idiv_acesses	power_stat.h	/^    unsigned *m_num_idiv_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_idiv_acesses	shader.h	/^    unsigned *m_num_idiv_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_imul24_acesses	power_stat.h	/^    unsigned *m_num_imul24_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_imul24_acesses	shader.h	/^    unsigned *m_num_imul24_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_imul32_acesses	power_stat.h	/^    unsigned *m_num_imul32_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_imul32_acesses	shader.h	/^    unsigned *m_num_imul32_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_imul_acesses	power_stat.h	/^    unsigned *m_num_imul_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_imul_acesses	shader.h	/^    unsigned *m_num_imul_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_loadqueued_insn	power_stat.h	/^    unsigned *m_num_loadqueued_insn[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_loadqueued_insn	shader.h	/^    unsigned *m_num_loadqueued_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_mem_acesses	power_stat.h	/^    unsigned *m_num_mem_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_mem_acesses	shader.h	/^    unsigned *m_num_mem_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_mem_committed	power_stat.h	/^    unsigned *m_num_mem_committed[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_mem_committed	shader.h	/^    unsigned *m_num_mem_committed;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_pending	dram_sched.h	/^   unsigned m_num_pending;$/;"	m	class:frfcfs_scheduler	typeref:typename:unsigned
m_num_sfu_acesses	power_stat.h	/^    unsigned *m_num_sfu_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_sfu_acesses	shader.h	/^    unsigned *m_num_sfu_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_sfu_committed	power_stat.h	/^    unsigned *m_num_sfu_committed[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_sfu_committed	shader.h	/^    unsigned *m_num_sfu_committed;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_sim_insn	shader.h	/^    unsigned *m_num_sim_insn; \/\/ number of scalar thread instructions committed by this shader/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_sim_winsn	shader.h	/^    unsigned *m_num_sim_winsn; \/\/ number of warp instructions committed by this shader core$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_sp_acesses	power_stat.h	/^    unsigned *m_num_sp_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_sp_acesses	shader.h	/^    unsigned *m_num_sp_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_sp_committed	power_stat.h	/^    unsigned *m_num_sp_committed[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_sp_committed	shader.h	/^    unsigned *m_num_sp_committed;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_storequeued_insn	power_stat.h	/^    unsigned *m_num_storequeued_insn[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_storequeued_insn	shader.h	/^    unsigned *m_num_storequeued_insn;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_tex_inst	power_stat.h	/^    unsigned *m_num_tex_inst[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_tex_inst	shader.h	/^    unsigned *m_num_tex_inst;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_tlb_accesses	shader.h	/^    unsigned *m_num_tlb_accesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_tlb_hits	shader.h	/^    unsigned *m_num_tlb_hits;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_trans_acesses	power_stat.h	/^    unsigned *m_num_trans_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_num_trans_acesses	shader.h	/^    unsigned *m_num_trans_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_num_warps_to_limit	shader.h	/^    unsigned m_num_warps_to_limit;$/;"	m	class:swl_scheduler	typeref:typename:unsigned
m_num_writeback_clients	shader.h	/^   unsigned m_num_writeback_clients;$/;"	m	class:ldst_unit	typeref:typename:unsigned
m_op	shader.h	/^      op_t m_op;$/;"	m	class:opndcoll_rfu_t::allocation_t	typeref:typename:op_t
m_operand	shader.h	/^      unsigned  m_operand; \/\/ operand offset in instruction. e.g., add r1,r2,r3; r2 is oprd 0,/;"	m	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
m_operand_collector	shader.h	/^    opndcoll_rfu_t            m_operand_collector;$/;"	m	class:shader_core_ctx	typeref:typename:opndcoll_rfu_t
m_operand_collector	shader.h	/^   opndcoll_rfu_t *m_operand_collector;$/;"	m	class:ldst_unit	typeref:typename:opndcoll_rfu_t *
m_out	shader.h	/^       port_vector_t m_in,m_out;$/;"	m	class:opndcoll_rfu_t::input_port_t	typeref:typename:port_vector_t
m_outer_level_prioritization	shader.h	/^    scheduler_prioritization_type m_outer_level_prioritization;$/;"	m	class:two_level_active_scheduler	typeref:typename:scheduler_prioritization_type
m_outgoing_traffic_stats	shader.h	/^    traffic_breakdown *m_outgoing_traffic_stats; \/\/ core to memory partitions$/;"	m	class:shader_core_stats	typeref:typename:traffic_breakdown *
m_output_register	shader.h	/^      register_set* m_output_register; \/\/ pipeline register to issue to when ready$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:register_set *
m_partition_addr	mem_fetch.h	/^   new_addr_type m_partition_addr; \/\/ linear physical address *within* dram partition (partiti/;"	m	class:mem_fetch	typeref:typename:new_addr_type
m_pc	shader.h	/^    address_type m_pc;$/;"	m	struct:ifetch_buffer_t	typeref:typename:address_type
m_pending_hit	gpu-cache.h	/^    unsigned m_pending_hit; \/\/ number of cache miss that hit a line that is allocated but not /;"	m	class:tag_array	typeref:typename:unsigned
m_pending_warps	shader.h	/^	std::deque< shd_warp_t* > m_pending_warps;$/;"	m	class:two_level_active_scheduler	typeref:typename:std::deque<shd_warp_t * >
m_pending_writes	shader.h	/^   std::map<unsigned\/*warp_id*\/, std::map<unsigned\/*regnum*\/,unsigned\/*count*\/> > m_pendin/;"	m	class:ldst_unit	typeref:typename:std::map<unsigned,std::map<unsigned,unsigned>>
m_pipeline_depth	shader.h	/^    unsigned m_pipeline_depth;$/;"	m	class:pipelined_simd_unit	typeref:typename:unsigned
m_pipeline_duty_cycle	power_stat.h	/^    float *m_pipeline_duty_cycle[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:float * []
m_pipeline_duty_cycle	shader.h	/^    float *m_pipeline_duty_cycle;$/;"	m	struct:shader_core_stats_pod	typeref:typename:float *
m_pipeline_reg	shader.h	/^    std::vector<register_set> m_pipeline_reg;$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<register_set>
m_pipeline_reg	shader.h	/^    warp_inst_t **m_pipeline_reg;$/;"	m	class:pipelined_simd_unit	typeref:typename:warp_inst_t **
m_power_stats	gpu-sim.h	/^   class power_stat_t *m_power_stats;$/;"	m	class:gpgpu_sim	typeref:class:power_stat_t *
m_prev_snapshot_access	gpu-cache.h	/^    unsigned m_prev_snapshot_access;$/;"	m	class:tag_array	typeref:typename:unsigned
m_prev_snapshot_miss	gpu-cache.h	/^    unsigned m_prev_snapshot_miss;$/;"	m	class:tag_array	typeref:typename:unsigned
m_prev_snapshot_pending_hit	gpu-cache.h	/^    unsigned m_prev_snapshot_pending_hit;$/;"	m	class:tag_array	typeref:typename:unsigned
m_prioritization	shader.h	/^    scheduler_prioritization_type m_prioritization;$/;"	m	class:swl_scheduler	typeref:typename:scheduler_prioritization_type
m_private_credit	l2cache.h	/^      std::vector<int> m_private_credit; $/;"	m	class:memory_partition_unit::arbitration_metadata	typeref:typename:std::vector<int>
m_private_credit_limit	l2cache.h	/^      int m_private_credit_limit; $/;"	m	class:memory_partition_unit::arbitration_metadata	typeref:typename:int
m_queue	dram_sched.h	/^   std::list<dram_req_t*>                                    *m_queue;$/;"	m	class:frfcfs_scheduler	typeref:typename:std::list<dram_req_t * > *
m_queue	shader.h	/^      std::list<op_t> *m_queue;$/;"	m	class:opndcoll_rfu_t::arbiter_t	typeref:typename:std::list<op_t> *
m_raw_addr	mem_fetch.h	/^   addrdec_t m_raw_addr; \/\/ raw physical address (i.e., decoded DRAM chip-row-bank-column addr/;"	m	class:mem_fetch	typeref:typename:addrdec_t
m_read_regfile_acesses	power_stat.h	/^    unsigned *m_read_regfile_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_read_regfile_acesses	shader.h	/^    unsigned *m_read_regfile_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_ready	gpu-cache.h	/^        bool m_ready;$/;"	m	struct:tex_cache::rob_entry	typeref:typename:bool
m_register	shader.h	/^      unsigned  m_register;$/;"	m	class:opndcoll_rfu_t::op_t	typeref:typename:unsigned
m_replacement_policy	gpu-cache.h	/^    enum replacement_policy_t m_replacement_policy; \/\/ 'L' = LRU, 'F' = FIFO$/;"	m	class:cache_config	typeref:enum:replacement_policy_t
m_request	gpu-cache.h	/^        mem_fetch *m_request;     \/\/ request information$/;"	m	struct:tex_cache::fragment_entry	typeref:typename:mem_fetch *
m_request	gpu-cache.h	/^        mem_fetch *m_request;$/;"	m	struct:tex_cache::rob_entry	typeref:typename:mem_fetch *
m_request_fifo	gpu-cache.h	/^    fifo<mem_fetch*>        m_request_fifo;$/;"	m	class:tex_cache	typeref:typename:fifo<mem_fetch * >
m_request_fifo_entries	gpu-cache.h	/^        unsigned m_request_fifo_entries;$/;"	m	union:cache_config::__anoncb0c5d68020a	typeref:typename:unsigned
m_request_queue_status	gpu-cache.h	/^    enum mem_fetch_status   m_request_queue_status;$/;"	m	class:tex_cache	typeref:enum:mem_fetch_status
m_request_tracker	l2cache.h	/^   std::set<mem_fetch*> m_request_tracker;$/;"	m	class:memory_sub_partition	typeref:typename:std::set<mem_fetch * >
m_request_uid	mem_fetch.h	/^   unsigned m_request_uid;$/;"	m	class:mem_fetch	typeref:typename:unsigned
m_res_fail	gpu-cache.h	/^    unsigned m_res_fail;$/;"	m	class:tag_array	typeref:typename:unsigned
m_reset_at_snap_shot	stat-tool.h	/^   bool m_reset_at_snap_shot;$/;"	m	class:linear_histogram_logger	typeref:typename:bool
m_response_fifo	shader.h	/^    std::list<mem_fetch*> m_response_fifo;$/;"	m	class:simt_core_cluster	typeref:typename:std::list<mem_fetch * >
m_response_fifo	shader.h	/^   std::list<mem_fetch*> m_response_fifo;$/;"	m	class:ldst_unit	typeref:typename:std::list<mem_fetch * >
m_result_bus	shader.h	/^    std::vector< std::bitset<MAX_ALU_LATENCY>* > m_result_bus;$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<std::bitset<MAX_ALU_LATENCY> * >
m_result_fifo	gpu-cache.h	/^    fifo<mem_fetch*>        m_result_fifo; \/\/ next completed texture fetch$/;"	m	class:tex_cache	typeref:typename:fifo<mem_fetch * >
m_result_fifo_entries	gpu-cache.h	/^    unsigned m_result_fifo_entries;$/;"	m	class:cache_config	typeref:typename:unsigned
m_result_port	shader.h	/^    register_set *m_result_port;$/;"	m	class:pipelined_simd_unit	typeref:typename:register_set *
m_rfu	shader.h	/^      opndcoll_rfu_t *m_rfu;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:opndcoll_rfu_t *
m_rob	gpu-cache.h	/^    fifo<rob_entry>         m_rob;$/;"	m	class:tex_cache	typeref:typename:fifo<rob_entry>
m_rob_entries	gpu-cache.h	/^        unsigned m_rob_entries;$/;"	m	union:cache_config::__anoncb0c5d68030a	typeref:typename:unsigned
m_rob_index	gpu-cache.h	/^        unsigned m_rob_index;$/;"	m	struct:tex_cache::extra_mf_fields	typeref:typename:unsigned
m_rob_status	gpu-cache.h	/^    enum mem_fetch_status   m_rob_status;$/;"	m	class:tex_cache	typeref:enum:mem_fetch_status
m_rop	l2cache.h	/^   std::queue<rop_delay_t> m_rop;$/;"	m	class:memory_sub_partition	typeref:typename:std::queue<rop_delay_t>
m_running_kernels	gpu-sim.h	/^   std::vector<kernel_info_t*> m_running_kernels;$/;"	m	class:gpgpu_sim	typeref:typename:std::vector<kernel_info_t * >
m_scoreboard	shader.h	/^    Scoreboard               *m_scoreboard;$/;"	m	class:shader_core_ctx	typeref:typename:Scoreboard *
m_scoreboard	shader.h	/^    Scoreboard* m_scoreboard; $/;"	m	class:scheduler_unit	typeref:typename:Scoreboard *
m_scoreboard	shader.h	/^   Scoreboard *m_scoreboard;$/;"	m	class:ldst_unit	typeref:typename:Scoreboard *
m_set_index_function	gpu-cache.h	/^    enum set_index_function m_set_index_function; \/\/ Hash, linear, or custom set index functio/;"	m	class:cache_config	typeref:enum:set_index_function
m_sfu_out	shader.h	/^    register_set* m_sfu_out;$/;"	m	class:scheduler_unit	typeref:typename:register_set *
m_shader	shader.h	/^    class shader_core_ctx *m_shader;$/;"	m	class:shd_warp_t	typeref:class:shader_core_ctx *
m_shader	shader.h	/^    shader_core_ctx* m_shader;$/;"	m	class:scheduler_unit	typeref:typename:shader_core_ctx *
m_shader	shader.h	/^   shader_core_ctx                 *m_shader;$/;"	m	class:opndcoll_rfu_t	typeref:typename:shader_core_ctx *
m_shader	shader.h	/^   shader_core_ctx *m_shader;$/;"	m	class:barrier_set_t	typeref:typename:shader_core_ctx *
m_shader_config	gpu-sim.h	/^    shader_core_config m_shader_config;$/;"	m	class:gpgpu_sim_config	typeref:typename:shader_core_config
m_shader_config	gpu-sim.h	/^   const struct shader_core_config *m_shader_config;$/;"	m	class:gpgpu_sim	typeref:typename:const struct shader_core_config *
m_shader_config	mem_latency_stat.h	/^   const struct shader_core_config *m_shader_config;$/;"	m	class:memory_stats_t	typeref:typename:const struct shader_core_config *
m_shader_dynamic_warp_issue_distro	shader.h	/^    std::vector< std::vector<unsigned> > m_shader_dynamic_warp_issue_distro;$/;"	m	class:shader_core_stats	typeref:typename:std::vector<std::vector<unsigned>>
m_shader_stats	gpu-sim.h	/^   class shader_core_stats  *m_shader_stats;$/;"	m	class:gpgpu_sim	typeref:class:shader_core_stats *
m_shader_warp_slot_issue_distro	shader.h	/^    std::vector< std::vector<unsigned> > m_shader_warp_slot_issue_distro;$/;"	m	class:shader_core_stats	typeref:typename:std::vector<std::vector<unsigned>>
m_shared_credit	l2cache.h	/^      int m_shared_credit; $/;"	m	class:memory_partition_unit::arbitration_metadata	typeref:typename:int
m_shared_credit_limit	l2cache.h	/^      int m_shared_credit_limit; $/;"	m	class:memory_partition_unit::arbitration_metadata	typeref:typename:int
m_sid	mem_fetch.h	/^   unsigned m_sid;$/;"	m	class:mem_fetch	typeref:typename:unsigned
m_sid	scoreboard.h	/^    unsigned m_sid;$/;"	m	class:Scoreboard	typeref:typename:unsigned
m_sid	shader.h	/^    unsigned m_sid; \/\/ shader id$/;"	m	class:shader_core_ctx	typeref:typename:unsigned
m_sid	shader.h	/^   unsigned m_sid;$/;"	m	class:ldst_unit	typeref:typename:unsigned
m_simd_width	stat-tool.h	/^   int m_simd_width;$/;"	m	class:insn_warp_occ_logger	typeref:typename:int
m_simt_stack	shader.h	/^    simt_stack** m_simt_stack;$/;"	m	class:scheduler_unit	typeref:typename:simt_stack **
m_size	gpu-cache.h	/^        unsigned   m_size; \/\/ maximum number of entries in fifo$/;"	m	class:tex_cache::fifo	typeref:typename:unsigned
m_snap_shot_interval	stat-tool.h	/^   unsigned long long  m_snap_shot_interval;$/;"	m	class:snap_shot_trigger	typeref:typename:unsigned long long
m_sp_out	shader.h	/^    register_set* m_sp_out;$/;"	m	class:scheduler_unit	typeref:typename:register_set *
m_special_cache_config	gpu-sim.h	/^   std::map<std::string, FuncCache> m_special_cache_config;$/;"	m	class:gpgpu_sim	typeref:typename:std::map<std::string,FuncCache>
m_src_op	shader.h	/^      op_t *m_src_op;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:op_t *
m_stats	dram.h	/^   struct memory_stats_t *m_stats;$/;"	m	class:dram_t	typeref:struct:memory_stats_t *
m_stats	dram_sched.h	/^   memory_stats_t *m_stats;$/;"	m	class:frfcfs_scheduler	typeref:typename:memory_stats_t *
m_stats	gpu-cache.h	/^    cache_stats m_stats;$/;"	m	class:baseline_cache	typeref:typename:cache_stats
m_stats	gpu-cache.h	/^    cache_stats m_stats;$/;"	m	class:tex_cache	typeref:typename:cache_stats
m_stats	gpu-cache.h	/^    std::vector< std::vector<unsigned> > m_stats;$/;"	m	class:cache_stats	typeref:typename:std::vector<std::vector<unsigned>>
m_stats	l2cache.h	/^   class memory_stats_t *m_stats;$/;"	m	class:memory_partition_unit	typeref:class:memory_stats_t *
m_stats	l2cache.h	/^   class memory_stats_t *m_stats;$/;"	m	class:memory_sub_partition	typeref:class:memory_stats_t *
m_stats	shader.h	/^    shader_core_stats *m_stats;$/;"	m	class:scheduler_unit	typeref:typename:shader_core_stats *
m_stats	shader.h	/^    shader_core_stats *m_stats;$/;"	m	class:shader_core_ctx	typeref:typename:shader_core_stats *
m_stats	shader.h	/^    shader_core_stats *m_stats;$/;"	m	class:simt_core_cluster	typeref:typename:shader_core_stats *
m_stats	shader.h	/^   shader_core_stats *m_stats; $/;"	m	class:ldst_unit	typeref:typename:shader_core_stats *
m_stats	traffic_breakdown.h	/^   traffic_stat_t m_stats; $/;"	m	class:traffic_breakdown	typeref:typename:traffic_stat_t
m_status	gpu-cache.h	/^    cache_block_state    m_status;$/;"	m	struct:cache_block_t	typeref:typename:cache_block_state
m_status	mem_fetch.h	/^   enum mem_fetch_status m_status;$/;"	m	class:mem_fetch	typeref:enum:mem_fetch_status
m_status_change	mem_fetch.h	/^   unsigned long long m_status_change;$/;"	m	class:mem_fetch	typeref:typename:unsigned long long
m_stores_outstanding	shader.h	/^    unsigned m_stores_outstanding; \/\/ number of store requests sent but not yet acknowledged$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_stride	histogram.h	/^   int m_stride;$/;"	m	class:linear_histogram	typeref:typename:int
m_sub_partition	l2cache.h	/^   class memory_sub_partition **m_sub_partition; $/;"	m	class:memory_partition_unit	typeref:class:memory_sub_partition **
m_sum	histogram.h	/^   signed long long int m_sum; \/\/ for calculating the average$/;"	m	class:binned_histogram	typeref:typename:signed long long int
m_supervised_warps	shader.h	/^    std::vector< shd_warp_t* > m_supervised_warps;$/;"	m	class:scheduler_unit	typeref:typename:std::vector<shd_warp_t * >
m_tag	gpu-cache.h	/^    new_addr_type    m_tag;$/;"	m	struct:cache_block_t	typeref:typename:new_addr_type
m_tag_array	gpu-cache.h	/^    tag_array*  m_tag_array;$/;"	m	class:baseline_cache	typeref:typename:tag_array *
m_tags	gpu-cache.h	/^    tag_array               m_tags;$/;"	m	class:tex_cache	typeref:typename:tag_array
m_tail	delayqueue.h	/^   fifo_data<T> *m_tail;$/;"	m	class:fifo_pipeline	typeref:typename:fifo_data<T> *
m_tail	gpu-cache.h	/^        unsigned   m_tail; \/\/ oldest entry found here$/;"	m	class:tex_cache::fifo	typeref:typename:unsigned
m_thd_span	stat-tool.h	/^   thread_insn_span m_thd_span;$/;"	m	class:thread_CFlocality	typeref:typename:thread_insn_span
m_thd_span_archive	stat-tool.h	/^   std::list<thread_insn_span> m_thd_span_archive;$/;"	m	class:thread_CFlocality	typeref:typename:std::list<thread_insn_span>
m_threadState	shader.h	/^    thread_ctx_t             *m_threadState;$/;"	m	class:shader_core_ctx	typeref:typename:thread_ctx_t *
m_thread_pc	stat-tool.h	/^   std::vector<address_type> m_thread_pc;$/;"	m	class:thread_CFlocality	typeref:typename:std::vector<address_type>
m_time	gpu-cache.h	/^        unsigned m_time; \/\/ which cycle did this entry become ready?$/;"	m	struct:tex_cache::rob_entry	typeref:typename:unsigned
m_timestamp	mem_fetch.h	/^   unsigned m_timestamp;  \/\/ set to gpu_sim_cycle+gpu_tot_sim_cycle at struct creation$/;"	m	class:mem_fetch	typeref:typename:unsigned
m_timestamp2	mem_fetch.h	/^   unsigned m_timestamp2; \/\/ set to gpu_sim_cycle+gpu_tot_sim_cycle when pushed onto icnt to s/;"	m	class:mem_fetch	typeref:typename:unsigned
m_total_cta_launched	gpu-sim.h	/^   unsigned m_total_cta_launched;$/;"	m	class:gpgpu_sim	typeref:typename:unsigned
m_tpc	mem_fetch.h	/^   unsigned m_tpc;$/;"	m	class:mem_fetch	typeref:typename:unsigned
m_tpc	shader.h	/^    unsigned m_tpc; \/\/ texture processor cluster id (aka, node id when using interconnect conc/;"	m	class:shader_core_ctx	typeref:typename:unsigned
m_tpc	shader.h	/^   unsigned m_tpc;$/;"	m	class:ldst_unit	typeref:typename:unsigned
m_type	mem_fetch.h	/^   enum mf_type m_type;$/;"	m	class:mem_fetch	typeref:enum:mf_type
m_type_id	gpu-cache.h	/^    int m_type_id; \/\/ what kind of cache is this (normal, texture, constant)$/;"	m	class:tag_array	typeref:typename:int
m_unit	l2cache.h	/^    memory_sub_partition *m_unit;$/;"	m	class:L2interface	typeref:typename:memory_sub_partition *
m_valid	gpu-cache.h	/^        bool m_valid;$/;"	m	struct:baseline_cache::extra_mf_fields	typeref:typename:bool
m_valid	gpu-cache.h	/^        bool m_valid;$/;"	m	struct:tex_cache::data_block	typeref:typename:bool
m_valid	gpu-cache.h	/^        bool m_valid;$/;"	m	struct:tex_cache::extra_mf_fields	typeref:typename:bool
m_valid	gpu-cache.h	/^    bool m_valid;$/;"	m	class:cache_config	typeref:typename:bool
m_valid	gpu-sim.h	/^	bool m_valid;$/;"	m	struct:power_config	typeref:typename:bool
m_valid	gpu-sim.h	/^    bool m_valid;$/;"	m	class:gpgpu_sim_config	typeref:typename:bool
m_valid	gpu-sim.h	/^   bool m_valid;$/;"	m	struct:memory_config	typeref:typename:bool
m_valid	shader.h	/^       bool m_valid;$/;"	m	struct:shd_warp_t::ibuffer_entry	typeref:typename:bool
m_valid	shader.h	/^      bool m_valid;$/;"	m	class:opndcoll_rfu_t::op_t	typeref:typename:bool
m_valid	shader.h	/^    bool m_valid;$/;"	m	struct:ifetch_buffer_t	typeref:typename:bool
m_warp	shader.h	/^      const warp_inst_t *m_warp;$/;"	m	class:opndcoll_rfu_t::op_t	typeref:typename:const warp_inst_t *
m_warp	shader.h	/^      warp_inst_t  *m_warp;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:warp_inst_t *
m_warp	shader.h	/^    std::vector<shd_warp_t>   m_warp;   \/\/ per warp information array$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<shd_warp_t>
m_warp	shader.h	/^    std::vector<shd_warp_t>* m_warp;$/;"	m	class:scheduler_unit	typeref:typename:std::vector<shd_warp_t> *
m_warp_active	shader.h	/^   warp_set_t m_warp_active;$/;"	m	class:barrier_set_t	typeref:typename:warp_set_t
m_warp_at_barrier	shader.h	/^   warp_set_t m_warp_at_barrier;$/;"	m	class:barrier_set_t	typeref:typename:warp_set_t
m_warp_id	shader.h	/^      unsigned m_warp_id;$/;"	m	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:unsigned
m_warp_id	shader.h	/^    unsigned m_warp_id;$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_warp_id	shader.h	/^    unsigned m_warp_id;$/;"	m	struct:ifetch_buffer_t	typeref:typename:unsigned
m_warp_size	shader.h	/^    unsigned m_warp_size;$/;"	m	class:shd_warp_t	typeref:typename:unsigned
m_warp_size	shader.h	/^   unsigned m_warp_size;$/;"	m	class:barrier_set_t	typeref:typename:unsigned
m_warp_size	shader.h	/^   unsigned m_warp_size;$/;"	m	class:opndcoll_rfu_t	typeref:typename:unsigned
m_wid	mem_fetch.h	/^   unsigned m_wid;$/;"	m	class:mem_fetch	typeref:typename:unsigned
m_wr_alloc_type	gpu-cache.h	/^    mem_access_type m_wr_alloc_type; \/\/ Specifies type of write allocate request (e.g., L1 or /;"	m	class:data_cache	typeref:typename:mem_access_type
m_wrbk_type	gpu-cache.h	/^    mem_access_type m_wrbk_type; \/\/ Specifies type of writeback request (e.g., L1 or L2)$/;"	m	class:data_cache	typeref:typename:mem_access_type
m_wrc	shader.h	/^    Wrc *m_wrc;$/;"	m	class:shader_core_ctx	typeref:typename:Wrc *
m_wrc	shader.h	/^    Wrc* m_wrc;$/;"	m	class:scheduler_unit	typeref:typename:Wrc *
m_write_alloc_policy	gpu-cache.h	/^    write_allocate_policy_t m_write_alloc_policy;	\/\/ 'W' = Write allocate, 'N' = No write allo/;"	m	class:cache_config	typeref:typename:write_allocate_policy_t
m_write_policy	gpu-cache.h	/^    enum write_policy_t m_write_policy;             \/\/ 'T' = write through, 'B' = write back, /;"	m	class:cache_config	typeref:enum:write_policy_t
m_write_regfile_acesses	power_stat.h	/^    unsigned *m_write_regfile_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod	typeref:typename:unsigned * []
m_write_regfile_acesses	shader.h	/^    unsigned *m_write_regfile_acesses;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
m_writeback_arb	shader.h	/^   unsigned m_writeback_arb; \/\/ round-robin arbiter for writeback contention between L1T, L1C,/;"	m	class:ldst_unit	typeref:typename:unsigned
m_wst	shader.h	/^    WST *m_wst;$/;"	m	class:shader_core_ctx	typeref:typename:WST *
m_wst	shader.h	/^    WST* m_wst;$/;"	m	class:scheduler_unit	typeref:typename:WST *
made_read_mfs	shader.h	/^    unsigned made_read_mfs;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
made_write_mfs	shader.h	/^    unsigned made_write_mfs;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned
mark_ready	gpu-cache.cc	/^void mshr_table::mark_ready( new_addr_type block_addr, bool &has_atomic ){$/;"	f	class:mshr_table	typeref:typename:void
mascar_scheduler	shader.h	/^	mascar_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:mascar_scheduler
mascar_scheduler	shader.h	/^class mascar_scheduler : public scheduler_unit {$/;"	c
max_barriers_per_cta	shader.h	/^    unsigned max_barriers_per_cta;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
max_conc_access2samerow	mem_latency_stat.h	/^   unsigned int **max_conc_access2samerow; \/\/max_conc_access2samerow[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
max_concurrent_kernel	gpu-sim.h	/^    unsigned max_concurrent_kernel;$/;"	m	class:gpgpu_sim_config	typeref:typename:unsigned
max_cta	shader.cc	/^unsigned int shader_core_config::max_cta( const kernel_info_t &k ) const$/;"	f	class:shader_core_config	typeref:typename:unsigned int
max_cta	shader.cc	/^unsigned simt_core_cluster::max_cta( const kernel_info_t &kernel )$/;"	f	class:simt_core_cluster	typeref:typename:unsigned
max_cta_per_core	shader.h	/^    unsigned max_cta_per_core; \/\/Limit on number of concurrent CTAs in shader core$/;"	m	struct:shader_core_config	typeref:typename:unsigned
max_dq_latency	mem_latency_stat.h	/^   unsigned max_dq_latency;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
max_icnt2mem_latency	mem_latency_stat.h	/^   unsigned max_icnt2mem_latency;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
max_icnt2sh_latency	mem_latency_stat.h	/^   unsigned max_icnt2sh_latency;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
max_mf_latency	mem_latency_stat.h	/^   unsigned max_mf_latency;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
max_mrq_latency	mem_latency_stat.h	/^   unsigned max_mrq_latency;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
max_mrqs	dram.h	/^   unsigned int max_mrqs;$/;"	m	class:dram_t	typeref:typename:unsigned int
max_mrqs_temp	dram.h	/^   unsigned int max_mrqs_temp;$/;"	m	class:dram_t	typeref:typename:unsigned int
max_servicetime2samerow	mem_latency_stat.h	/^   unsigned int **max_servicetime2samerow; \/\/max_servicetime2samerow[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
max_sfu_latency	shader.h	/^    unsigned max_sfu_latency;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
max_size	stack.h	/^   int max_size;$/;"	m	struct:__anonadd2b0f10108	typeref:typename:int
max_sp_latency	shader.h	/^    unsigned max_sp_latency;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
max_warps	mem_latency_stat.h	/^   unsigned max_warps;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
max_warps_per_shader	shader.h	/^    unsigned max_warps_per_shader; $/;"	m	struct:shader_core_config	typeref:typename:unsigned
mcpat_cycle	power_interface.cc	/^void mcpat_cycle(const gpgpu_sim_config &config, const struct shader_core_config *shdr_config, c/;"	f	typeref:typename:void
mcpat_reset_perf_count	power_interface.cc	/^void mcpat_reset_perf_count(class gpgpu_sim_wrapper *wrapper){$/;"	f	typeref:typename:void
mem2device	shader.h	/^    unsigned mem2device(unsigned memid) const { return memid + n_simt_clusters; }$/;"	f	struct:shader_core_config	typeref:typename:unsigned
memBit	warp_status.h	/^			unsigned char memBit:1,stallBit:1;$/;"	m	struct:WST::table_entry::__anon2e250678010a::__anon2e2506780208	typeref:typename:unsigned char:1
mem_access_type_stats	mem_latency_stat.h	/^   unsigned ***mem_access_type_stats; \/\/ dram access type classification$/;"	m	class:memory_stats_t	typeref:typename:unsigned ***
mem_fetch	mem_fetch.cc	/^mem_fetch::mem_fetch( const mem_access_t &access, $/;"	f	class:mem_fetch
mem_fetch	mem_fetch.h	/^class mem_fetch {$/;"	c
mem_instruction_stats	gpu-sim.cc	/^void shader_core_ctx::mem_instruction_stats(const warp_inst_t &inst)$/;"	f	class:shader_core_ctx	typeref:typename:void
mem_power_stats_pod	power_stat.h	/^struct mem_power_stats_pod{$/;"	s
mem_sat_flag	gpu-cache.h	/^    bool mem_sat_flag;$/;"	m	class:read_only_cache	typeref:typename:bool
mem_stage_access_type	stats.h	/^enum mem_stage_access_type {$/;"	g
mem_stage_stall_type	stats.h	/^enum mem_stage_stall_type {$/;"	g
memlatstat_done	mem_latency_stat.cc	/^unsigned memory_stats_t::memlatstat_done(mem_fetch *mf )$/;"	f	class:memory_stats_t	typeref:typename:unsigned
memlatstat_dram_access	mem_latency_stat.cc	/^void memory_stats_t::memlatstat_dram_access(mem_fetch *mf)$/;"	f	class:memory_stats_t	typeref:typename:void
memlatstat_icnt2mem_pop	mem_latency_stat.cc	/^void memory_stats_t::memlatstat_icnt2mem_pop(mem_fetch *mf)$/;"	f	class:memory_stats_t	typeref:typename:void
memlatstat_lat_pw	mem_latency_stat.cc	/^void memory_stats_t::memlatstat_lat_pw()$/;"	f	class:memory_stats_t	typeref:typename:void
memlatstat_print	mem_latency_stat.cc	/^void memory_stats_t::memlatstat_print( unsigned n_mem, unsigned gpu_mem_n_bk )$/;"	f	class:memory_stats_t	typeref:typename:void
memlatstat_read_done	mem_latency_stat.cc	/^void memory_stats_t::memlatstat_read_done(mem_fetch *mf)$/;"	f	class:memory_stats_t	typeref:typename:void
memory_config	gpu-sim.h	/^   memory_config()$/;"	f	struct:memory_config
memory_config	gpu-sim.h	/^struct memory_config {$/;"	s
memory_cycle	shader.cc	/^bool ldst_unit::memory_cycle( warp_inst_t &inst, mem_stage_stall_type &stall_reason, mem_stage_a/;"	f	class:ldst_unit	typeref:typename:bool
memory_partition_unit	l2cache.cc	/^memory_partition_unit::memory_partition_unit( unsigned partition_id, $/;"	f	class:memory_partition_unit
memory_partition_unit	l2cache.h	/^class memory_partition_unit$/;"	c
memory_ready_warps	shader.h	/^    std::vector< shd_warp_t* > memory_ready_warps;$/;"	m	class:scheduler_unit	typeref:typename:std::vector<shd_warp_t * >
memory_saturation_flag	gpu-cache.h	/^      bool memory_saturation_flag;$/;"	m	class:l1_cache	typeref:typename:bool
memory_saturation_flag	shader.h	/^   bool memory_saturation_flag;$/;"	m	class:ldst_unit	typeref:typename:bool
memory_saturation_flag	wrc.h	/^		bool memory_saturation_flag;$/;"	m	class:Wrc	typeref:typename:bool
memory_stats_t	mem_latency_stat.cc	/^memory_stats_t::memory_stats_t( unsigned n_shader, const struct shader_core_config *shader_confi/;"	f	class:memory_stats_t
memory_stats_t	mem_latency_stat.h	/^class memory_stats_t {$/;"	c
memory_sub_partition	l2cache.cc	/^memory_sub_partition::memory_sub_partition( unsigned sub_partition_id, $/;"	f	class:memory_sub_partition
memory_sub_partition	l2cache.h	/^class memory_sub_partition$/;"	c
mf_lat_pw_table	mem_latency_stat.h	/^   unsigned mf_lat_pw_table[32]; \/\/table storing values of mf latency Per Window$/;"	m	class:memory_stats_t	typeref:typename:unsigned[32]
mf_lat_table	mem_latency_stat.h	/^   unsigned mf_lat_table[32];$/;"	m	class:memory_stats_t	typeref:typename:unsigned[32]
mf_max_lat_table	mem_latency_stat.h	/^   unsigned ** mf_max_lat_table; \/\/mf latency sums[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned **
mf_num_lat_pw	mem_latency_stat.h	/^   unsigned mf_num_lat_pw;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
mf_packet_size	traffic_breakdown.h	/^   typedef unsigned int mf_packet_size; $/;"	t	class:traffic_breakdown	typeref:typename:unsigned int
mf_packet_type	traffic_breakdown.h	/^   typedef std::string mf_packet_type;  \/\/ use string so that it remains extensible $/;"	t	class:traffic_breakdown	typeref:typename:std::string
mf_tot_lat_pw	mem_latency_stat.h	/^   unsigned mf_tot_lat_pw; \/\/total latency summed up per window. divide by mf_num_lat_pw to ob/;"	m	class:memory_stats_t	typeref:typename:unsigned
mf_total_lat	mem_latency_stat.h	/^   unsigned long long int mf_total_lat;$/;"	m	class:memory_stats_t	typeref:typename:unsigned long long int
mf_total_lat_table	mem_latency_stat.h	/^   unsigned long long int ** mf_total_lat_table; \/\/mf latency sums[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned long long int **
mf_type	mem_fetch.h	/^enum mf_type {$/;"	g
min3	gpu-misc.h	/^#define min3(/;"	d
min_snap_shot_interval	stat-tool.cc	/^static unsigned long long  min_snap_shot_interval = 0;$/;"	v	typeref:typename:unsigned long long	file:
miss_queue_full	gpu-cache.h	/^    bool miss_queue_full(unsigned num_miss){$/;"	f	class:baseline_cache	typeref:typename:bool
miss_queue_size	gpu-cache.h	/^    bool miss_queue_size() const{$/;"	f	class:baseline_cache	typeref:typename:bool
miss_queue_size_reset	gpu-cache.h	/^    bool miss_queue_size_reset() const{$/;"	f	class:baseline_cache	typeref:typename:bool
misses	gpu-cache.h	/^    unsigned misses;$/;"	m	struct:cache_sub_stats	typeref:typename:unsigned
model	shader.h	/^    enum divergence_support_t model;$/;"	m	struct:shader_core_config	typeref:enum:divergence_support_t
modifyBits	warp_status.cc	/^	void WST::modifyBits (bool bitValue, unsigned warpId) {$/;"	f	class:WST	typeref:typename:void
mrq	dram.h	/^   dram_req_t *mrq;$/;"	m	struct:bank_t	typeref:typename:dram_req_t *
mrq_lat_table	mem_latency_stat.h	/^   unsigned mrq_lat_table[32];$/;"	m	class:memory_stats_t	typeref:typename:unsigned[32]
mrqq	dram.h	/^   fifo_pipeline<dram_req_t> *mrqq;$/;"	m	class:dram_t	typeref:typename:fifo_pipeline<dram_req_t> *
mrqq_Dist	dram.h	/^   class Stats* mrqq_Dist; \/\/memory request queue inside DRAM  $/;"	m	class:dram_t	typeref:class:Stats *
mshr_config_t	gpu-cache.h	/^enum mshr_config_t {$/;"	g
mshr_entry	gpu-cache.h	/^        mshr_entry() : m_has_atomic(false) { }$/;"	f	struct:mshr_table::mshr_entry
mshr_entry	gpu-cache.h	/^    struct mshr_entry {$/;"	s	class:mshr_table
mshr_queue_size	gpu-cache.h	/^    bool mshr_queue_size() const{$/;"	f	class:baseline_cache	typeref:typename:bool
mshr_queue_size_reset	gpu-cache.h	/^    bool mshr_queue_size_reset() const{$/;"	f	class:baseline_cache	typeref:typename:bool
mshr_table	gpu-cache.h	/^    mshr_table( unsigned num_entries, unsigned max_merged )$/;"	f	class:mshr_table
mshr_table	gpu-cache.h	/^class mshr_table {$/;"	c
my_time_vector	visualizer.cc	/^   my_time_vector(int ld_size,int st_size){$/;"	f	class:my_time_vector	file:
my_time_vector	visualizer.cc	/^class my_time_vector {$/;"	c	file:
n_access	dram.h	/^   unsigned int n_access;$/;"	m	struct:bank_t	typeref:typename:unsigned int
n_act	dram.h	/^   unsigned int n_act;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_act	power_stat.h	/^    unsigned *n_act[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_act_partial	dram.h	/^   unsigned int n_act_partial; $/;"	m	class:dram_t	typeref:typename:unsigned int
n_activity	dram.h	/^   unsigned int n_activity;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_activity	power_stat.h	/^    unsigned *n_activity[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_activity_partial	dram.h	/^   unsigned int n_activity_partial;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_cmd	dram.h	/^   unsigned int n_cmd;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_cmd	power_stat.h	/^    unsigned *n_cmd[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_cmd_partial	dram.h	/^   unsigned int n_cmd_partial;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_completed	shader.h	/^    unsigned n_completed;          \/\/ number of threads in warp completed$/;"	m	class:shd_warp_t	typeref:typename:unsigned
n_idle	dram.h	/^   unsigned int n_idle;$/;"	m	struct:bank_t	typeref:typename:unsigned int
n_insn	shader.h	/^   unsigned n_insn;$/;"	m	class:thread_ctx_t	typeref:typename:unsigned
n_insn_ac	shader.h	/^   unsigned n_insn_ac;$/;"	m	class:thread_ctx_t	typeref:typename:unsigned
n_l1_access_ac	shader.h	/^   unsigned n_l1_access_ac; $/;"	m	class:thread_ctx_t	typeref:typename:unsigned
n_l1_mis_ac	shader.h	/^   unsigned n_l1_mis_ac;$/;"	m	class:thread_ctx_t	typeref:typename:unsigned
n_l1_mrghit_ac	shader.h	/^   unsigned n_l1_mrghit_ac;$/;"	m	class:thread_ctx_t	typeref:typename:unsigned
n_mem_to_simt	power_stat.h	/^    long *n_mem_to_simt[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:long * []
n_mem_to_simt	shader.h	/^    long *n_mem_to_simt;$/;"	m	struct:shader_core_stats_pod	typeref:typename:long *
n_nop	dram.h	/^   unsigned int n_nop;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_nop	power_stat.h	/^    unsigned *n_nop[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_nop_partial	dram.h	/^   unsigned int n_nop_partial; $/;"	m	class:dram_t	typeref:typename:unsigned int
n_pre	dram.h	/^   unsigned int n_pre;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_pre	power_stat.h	/^    unsigned *n_pre[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_pre_partial	dram.h	/^   unsigned int n_pre_partial; $/;"	m	class:dram_t	typeref:typename:unsigned int
n_rd	dram.h	/^   unsigned int n_rd;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_rd	power_stat.h	/^    unsigned *n_rd[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_regfile_gating_group	shader.h	/^    unsigned n_regfile_gating_group;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
n_req	dram.h	/^   unsigned int n_req;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_req	power_stat.h	/^    unsigned *n_req[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_req_partial	dram.h	/^   unsigned int n_req_partial;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_simt_clusters	shader.h	/^    unsigned n_simt_clusters;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
n_simt_cores_per_cluster	shader.h	/^    unsigned n_simt_cores_per_cluster;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
n_simt_ejection_buffer_size	shader.h	/^    unsigned n_simt_ejection_buffer_size;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
n_simt_to_mem	power_stat.h	/^    long *n_simt_to_mem[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:long * []
n_simt_to_mem	shader.h	/^    long *n_simt_to_mem; \/\/ Interconnect power stats$/;"	m	struct:shader_core_stats_pod	typeref:typename:long *
n_thread_CFloggers	stat-tool.cc	/^static int n_thread_CFloggers = 0;$/;"	v	typeref:typename:int	file:
n_thread_per_shader	shader.h	/^    unsigned n_thread_per_shader;$/;"	m	struct:shader_core_config	typeref:typename:unsigned
n_wr	dram.h	/^   unsigned int n_wr;$/;"	m	class:dram_t	typeref:typename:unsigned int
n_wr	power_stat.h	/^    unsigned *n_wr[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
n_writes	dram.h	/^   unsigned int n_writes;$/;"	m	struct:bank_t	typeref:typename:unsigned int
nbk	gpu-sim.h	/^   unsigned nbk;$/;"	m	struct:memory_config	typeref:typename:unsigned
nbkgrp	gpu-sim.h	/^   unsigned nbkgrp; \/\/ number of bank groups (has to be power of 2)$/;"	m	struct:memory_config	typeref:typename:unsigned
nbytes	dram.h	/^   unsigned int nbytes;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
network_mode	icnt_wrapper.h	/^enum network_mode {$/;"	g
new_grid	shader.h	/^    void new_grid()$/;"	f	class:shader_core_stats	typeref:typename:void
new_stack	stack.cc	/^Stack* new_stack(int size) {$/;"	f	typeref:typename:Stack *
new_window	gpu-cache.cc	/^void tag_array::new_window()$/;"	f	class:tag_array	typeref:typename:void
next_access	gpu-cache.cc	/^mem_fetch *mshr_table::next_access(){$/;"	f	class:mshr_table	typeref:typename:mem_fetch *
next_access	gpu-cache.h	/^    mem_fetch *next_access(){return m_mshrs.next_access();}$/;"	f	class:baseline_cache	typeref:typename:mem_fetch *
next_access	gpu-cache.h	/^    mem_fetch *next_access(){return m_result_fifo.pop();}$/;"	f	class:tex_cache	typeref:typename:mem_fetch *
next_clock_domain	gpu-sim.cc	/^int gpgpu_sim::next_clock_domain(void) $/;"	f	class:gpgpu_sim	typeref:typename:int
next_pc	shader.cc	/^address_type shader_core_ctx::next_pc( int tid ) const$/;"	f	class:shader_core_ctx	typeref:typename:address_type
next_pop_index	gpu-cache.h	/^        unsigned next_pop_index() const $/;"	f	class:tex_cache::fifo	typeref:typename:unsigned
next_snap_shot_cycle	stat-tool.cc	/^static unsigned long long  next_snap_shot_cycle = 0;$/;"	v	typeref:typename:unsigned long long	file:
next_spill_cycle	stat-tool.cc	/^static unsigned long long  next_spill_cycle = 0;$/;"	v	typeref:typename:unsigned long long	file:
num_MCBs_accessed	mem_latency_stat.h	/^   unsigned int *num_MCBs_accessed; \/\/tracks how many memory controllers are accessed whenever/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
num_activates	mem_latency_stat.h	/^   unsigned int **num_activates; \/\/num_activates[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
num_cluster	gpu-sim.h	/^    unsigned num_cluster() const { return m_shader_config.n_simt_clusters; }$/;"	f	class:gpgpu_sim_config	typeref:typename:unsigned
num_inst_in_buffer	shader.h	/^    unsigned num_inst_in_buffer() const$/;"	f	class:shd_warp_t	typeref:typename:unsigned
num_inst_in_pipeline	shader.h	/^    unsigned num_inst_in_pipeline() const { return m_inst_in_pipeline;}$/;"	f	class:shd_warp_t	typeref:typename:unsigned
num_issued_inst_in_pipeline	shader.h	/^    unsigned num_issued_inst_in_pipeline() const {return (num_inst_in_pipeline()-num_inst_in_buf/;"	f	class:shd_warp_t	typeref:typename:unsigned
num_mfs	mem_latency_stat.h	/^   unsigned num_mfs;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
num_pending	dram_sched.h	/^   unsigned num_pending() const { return m_num_pending;}$/;"	f	class:frfcfs_scheduler	typeref:typename:unsigned
num_registers_per_core	gpu-sim.cc	/^int gpgpu_sim::num_registers_per_core() const$/;"	f	class:gpgpu_sim	typeref:typename:int
num_result_bus	shader.h	/^    unsigned num_result_bus;$/;"	m	class:shader_core_ctx	typeref:typename:unsigned
num_shader	gpu-sim.h	/^    unsigned num_shader() const { return m_shader_config.num_shader(); }$/;"	f	class:gpgpu_sim_config	typeref:typename:unsigned
num_shader	shader.h	/^    unsigned num_shader() const { return n_simt_clusters*n_simt_cores_per_cluster; }$/;"	f	struct:shader_core_config	typeref:typename:unsigned
num_warps_issuable	shader.h	/^    unsigned *num_warps_issuable;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
occupied	shader.h	/^    std::bitset<MAX_ALU_LATENCY> occupied;$/;"	m	class:simd_function_unit	typeref:typename:std::bitset<MAX_ALU_LATENCY>
op_t	shader.h	/^      op_t( collector_unit_t *cu, unsigned op, unsigned reg, unsigned num_banks, unsigned bank_w/;"	f	class:opndcoll_rfu_t::op_t
op_t	shader.h	/^      op_t( const warp_inst_t *warp, unsigned reg, unsigned num_banks, unsigned bank_warp_shift /;"	f	class:opndcoll_rfu_t::op_t
op_t	shader.h	/^      op_t() { m_valid = false; }$/;"	f	class:opndcoll_rfu_t::op_t
op_t	shader.h	/^   class op_t {$/;"	c	class:opndcoll_rfu_t
operator ()	addrdec.cc	/^   size_t operator()(const addrdec_t &x) const {$/;"	f	class:hash_addrdec_t	typeref:typename:size_t	file:
operator ()	gpu-cache.cc	/^unsigned &cache_stats::operator()(int access_type, int access_outcome){$/;"	f	class:cache_stats	typeref:typename:unsigned &
operator ()	gpu-cache.cc	/^unsigned cache_stats::operator()(int access_type, int access_outcome) const{$/;"	f	class:cache_stats	typeref:typename:unsigned
operator +	gpu-cache.cc	/^cache_stats cache_stats::operator+(const cache_stats &cs){$/;"	f	class:cache_stats	typeref:typename:cache_stats
operator +	gpu-cache.h	/^    cache_sub_stats operator+(const cache_sub_stats &cs){$/;"	f	struct:cache_sub_stats	typeref:typename:cache_sub_stats
operator +=	gpu-cache.cc	/^cache_stats &cache_stats::operator+=(const cache_stats &cs){$/;"	f	class:cache_stats	typeref:typename:cache_stats &
operator +=	gpu-cache.h	/^    cache_sub_stats &operator+=(const cache_sub_stats &css){$/;"	f	struct:cache_sub_stats	typeref:typename:cache_sub_stats &
operator +=	stat-tool.cc	/^thread_insn_span& thread_insn_span::operator+=(const thread_insn_span& other)$/;"	f	class:thread_insn_span	typeref:typename:thread_insn_span &
operator <	addrdec.cc	/^bool operator<(const addrdec_t &x, const addrdec_t &y) $/;"	f	typeref:typename:bool
operator =	stat-tool.cc	/^thread_insn_span& thread_insn_span::operator=(const thread_insn_span& other)$/;"	f	class:thread_insn_span	typeref:typename:thread_insn_span &
operator =	stat-tool.h	/^   insn_warp_occ_logger& operator=(const insn_warp_occ_logger& p) {$/;"	f	class:insn_warp_occ_logger	typeref:typename:insn_warp_occ_logger &
operator ==	addrdec.cc	/^bool operator==(const addrdec_t &x, const addrdec_t &y) $/;"	f	typeref:typename:bool
opndcoll_rfu_t	shader.h	/^   opndcoll_rfu_t()$/;"	f	class:opndcoll_rfu_t
opndcoll_rfu_t	shader.h	/^class opndcoll_rfu_t { \/\/ operand collector based register file unit$/;"	c
order_by_priority	shader.cc	/^void scheduler_unit::order_by_priority( std::vector< T >& result_list,$/;"	f	class:scheduler_unit	typeref:typename:void
order_by_type	shader.cc	/^void scheduler_unit::order_by_type( std::vector< T >& result_list_memory,$/;"	f	class:scheduler_unit	typeref:typename:void
order_lrr	shader.cc	/^void scheduler_unit::order_lrr( std::vector< T >& result_list,$/;"	f	class:scheduler_unit	typeref:typename:void
order_warps	shader.cc	/^void gto_scheduler::order_warps()$/;"	f	class:gto_scheduler	typeref:typename:void
order_warps	shader.cc	/^void lrr_scheduler::order_warps()$/;"	f	class:lrr_scheduler	typeref:typename:void
order_warps	shader.cc	/^void mascar_scheduler::order_warps()$/;"	f	class:mascar_scheduler	typeref:typename:void
order_warps	shader.cc	/^void swl_scheduler::order_warps()$/;"	f	class:swl_scheduler	typeref:typename:void
order_warps	shader.cc	/^void two_level_active_scheduler::order_warps()$/;"	f	class:two_level_active_scheduler	typeref:typename:void
overal_ld_count	visualizer.cc	/^   int overal_ld_count;$/;"	m	class:my_time_vector	typeref:typename:int	file:
overal_ld_time_dist	visualizer.cc	/^   std::vector<double>  overal_ld_time_dist;$/;"	m	class:my_time_vector	typeref:typename:std::vector<double>	file:
overal_st_count	visualizer.cc	/^   int overal_st_count;$/;"	m	class:my_time_vector	typeref:typename:int	file:
overal_st_time_dist	visualizer.cc	/^   std::vector<double>  overal_st_time_dist;$/;"	m	class:my_time_vector	typeref:typename:std::vector<double>	file:
ownerWarpID	wrc.h	/^		unsigned ownerWarpID;$/;"	m	class:Wrc	typeref:typename:unsigned
owner_id	gpu-cache.h	/^      unsigned owner_id;$/;"	m	class:l1_cache	typeref:typename:unsigned
owner_warp	shader.h	/^    shd_warp_t* owner_warp; $/;"	m	class:scheduler_unit	typeref:typename:shd_warp_t *
partition_address	addrdec.cc	/^new_addr_type linear_to_raw_address_translation::partition_address( new_addr_type addr ) const $/;"	f	class:linear_to_raw_address_translation	typeref:typename:new_addr_type
partition_mf_allocator	l2cache.h	/^    partition_mf_allocator( const memory_config *config )$/;"	f	class:partition_mf_allocator
partition_mf_allocator	l2cache.h	/^class partition_mf_allocator : public mem_fetch_allocator {$/;"	c
pc	shader.h	/^   unsigned pc;$/;"	m	struct:insn_latency_info	typeref:typename:unsigned
peek	gpu-cache.h	/^        T &peek( unsigned index ) $/;"	f	class:tex_cache::fifo	typeref:typename:T &
peek	gpu-cache.h	/^        T &peek() const$/;"	f	class:tex_cache::fifo	typeref:typename:T &
peek	gpu-cache.h	/^        const T &peek( unsigned index ) const $/;"	f	class:tex_cache::fifo	typeref:typename:const T &
pendingWrites	scoreboard.cc	/^bool Scoreboard::pendingWrites(unsigned wid) const$/;"	f	class:Scoreboard	typeref:typename:bool
pending_hits	gpu-cache.h	/^    unsigned pending_hits;$/;"	m	struct:cache_sub_stats	typeref:typename:unsigned
pending_writes	dram.h	/^   unsigned int pending_writes;$/;"	m	class:dram_t	typeref:typename:unsigned int
perfect_memory_interface	shader.h	/^    perfect_memory_interface( shader_core_ctx *core, simt_core_cluster *cluster ) { m_core=core;/;"	f	class:perfect_memory_interface
perfect_memory_interface	shader.h	/^class perfect_memory_interface : public mem_fetch_interface {$/;"	c
pipe_widths	shader.h	/^    int pipe_widths[N_PIPELINE_STAGES];$/;"	m	struct:shader_core_config	typeref:typename:int[]
pipeline_stage_name_decode	shader.h	/^const char* const pipeline_stage_name_decode[] = {$/;"	v	typeref:typename:const char * const[]
pipeline_stage_name_t	shader.h	/^enum pipeline_stage_name_t {$/;"	g
pipeline_widths_string	shader.h	/^    char* pipeline_widths_string;$/;"	m	struct:shader_core_config	typeref:typename:char *
pipelined_simd_unit	shader.cc	/^pipelined_simd_unit::pipelined_simd_unit( register_set* result_port, const shader_core_config *c/;"	f	class:pipelined_simd_unit
pipelined_simd_unit	shader.h	/^class pipelined_simd_unit : public simd_function_unit {$/;"	c
pop	delayqueue.h	/^   T* pop() $/;"	f	class:fifo_pipeline	typeref:typename:T *
pop	gpu-cache.h	/^        T pop() $/;"	f	class:tex_cache::fifo	typeref:typename:T
pop	l2cache.cc	/^mem_fetch* memory_sub_partition::pop() $/;"	f	class:memory_sub_partition	typeref:typename:mem_fetch *
pop_stack	stack.cc	/^address_type pop_stack(Stack *S) {$/;"	f	typeref:typename:address_type
port_available_cycles	gpu-cache.h	/^    unsigned long long port_available_cycles; $/;"	m	struct:cache_sub_stats	typeref:typename:unsigned long long
port_vector_t	shader.h	/^   typedef std::vector<register_set*> port_vector_t;$/;"	t	class:opndcoll_rfu_t	typeref:typename:std::vector<register_set * >
position_of_mrq_chosen	mem_latency_stat.h	/^   unsigned int *position_of_mrq_chosen; \/\/position of mrq in m_queue chosen $/;"	m	class:memory_stats_t	typeref:typename:unsigned int *
pow2_histogram	histogram.cc	/^pow2_histogram::pow2_histogram (std::string name, int nbins, int* bins) $/;"	f	class:pow2_histogram
pow2_histogram	histogram.h	/^class pow2_histogram : public binned_histogram {$/;"	c
power_config	gpu-sim.h	/^	power_config()$/;"	f	struct:power_config
power_config	gpu-sim.h	/^struct power_config {$/;"	s
power_core_stat_t	power_stat.cc	/^power_core_stat_t::power_core_stat_t( const struct shader_core_config *shader_config, shader_cor/;"	f	class:power_core_stat_t
power_core_stat_t	power_stat.h	/^class power_core_stat_t : public shader_core_power_stats_pod {$/;"	c
power_mem_stat_t	power_stat.cc	/^power_mem_stat_t::power_mem_stat_t(const struct memory_config *mem_config, const struct shader_c/;"	f	class:power_mem_stat_t
power_mem_stat_t	power_stat.h	/^class power_mem_stat_t : public mem_power_stats_pod{$/;"	c
power_stat_t	power_stat.cc	/^power_stat_t::power_stat_t( const struct shader_core_config *shader_config,float * average_pipel/;"	f	class:power_stat_t
power_stat_t	power_stat.h	/^class power_stat_t {$/;"	c
powli	addrdec.cc	/^static long int powli( long int x, long int y ) \/\/ compute x to the y$/;"	f	typeref:typename:long int	file:
print	addrdec.cc	/^void addrdec_t::print( FILE *fp ) const$/;"	f	class:addrdec_t	typeref:typename:void
print	delayqueue.h	/^   void print() const$/;"	f	class:fifo_pipeline	typeref:typename:void
print	dram.cc	/^void dram_t::print( FILE* simFile) const$/;"	f	class:dram_t	typeref:typename:void
print	dram_sched.cc	/^void frfcfs_scheduler::print( FILE *fp )$/;"	f	class:frfcfs_scheduler	typeref:typename:void
print	gpu-cache.cc	/^void baseline_cache::print(FILE *fp, unsigned &accesses, unsigned &misses) const{$/;"	f	class:baseline_cache	typeref:typename:void
print	gpu-cache.cc	/^void tag_array::print( FILE *stream, unsigned &total_access, unsigned &total_misses ) const$/;"	f	class:tag_array	typeref:typename:void
print	gpu-cache.h	/^    void print( FILE *fp ) const$/;"	f	class:cache_config	typeref:typename:void
print	l2cache.cc	/^void memory_partition_unit::arbitration_metadata::print( FILE *fp ) const $/;"	f	class:memory_partition_unit::arbitration_metadata	typeref:typename:void
print	l2cache.cc	/^void memory_partition_unit::print( FILE *fp ) const$/;"	f	class:memory_partition_unit	typeref:typename:void
print	l2cache.cc	/^void memory_sub_partition::print( FILE *fp ) const$/;"	f	class:memory_sub_partition	typeref:typename:void
print	mem_fetch.cc	/^void mem_fetch::print( FILE *fp, bool print_inst ) const$/;"	f	class:mem_fetch	typeref:typename:void
print	power_stat.cc	/^void power_core_stat_t::print (FILE *fout)$/;"	f	class:power_core_stat_t	typeref:typename:void
print	power_stat.cc	/^void power_mem_stat_t::print (FILE *fout) const {$/;"	f	class:power_mem_stat_t	typeref:typename:void
print	power_stat.cc	/^void power_stat_t::print (FILE *fout) const$/;"	f	class:power_stat_t	typeref:typename:void
print	shader.cc	/^void ldst_unit::print(FILE *fout) const$/;"	f	class:ldst_unit	typeref:typename:void
print	shader.cc	/^void shader_core_stats::print( FILE* fout ) const$/;"	f	class:shader_core_stats	typeref:typename:void
print	shader.cc	/^void shd_warp_t::print( FILE *fout ) const$/;"	f	class:shd_warp_t	typeref:typename:void
print	shader.cc	/^void warp_inst_t::print( FILE *fout ) const$/;"	f	class:warp_inst_t	typeref:typename:void
print	shader.h	/^    virtual void print( FILE *fp ) const$/;"	f	class:simd_function_unit	typeref:typename:void
print	shader.h	/^    virtual void print(FILE *fp) const$/;"	f	class:pipelined_simd_unit	typeref:typename:void
print	stat-tool.cc	/^void linear_histogram_logger::print(FILE *fout) const$/;"	f	class:linear_histogram_logger	typeref:typename:void
print	stat-tool.h	/^   void print(FILE *fout) const $/;"	f	class:insn_warp_occ_logger	typeref:typename:void
print	stat-tool.h	/^   void print(FILE *fout) const {$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
print	traffic_breakdown.cc	/^void traffic_breakdown::print(FILE* fout)$/;"	f	class:traffic_breakdown	typeref:typename:void
printContents	scoreboard.cc	/^void Scoreboard::printContents() const$/;"	f	class:Scoreboard	typeref:typename:void
print_all_ld	visualizer.cc	/^   void print_all_ld(void) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
print_all_st	visualizer.cc	/^   void print_all_st(void) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
print_cache_stat	l2cache.cc	/^void memory_sub_partition::print_cache_stat(unsigned &accesses, unsigned &misses) const$/;"	f	class:memory_sub_partition	typeref:typename:void
print_cache_stats	shader.cc	/^void ldst_unit::print_cache_stats( FILE *fp, unsigned& dl1_accesses, unsigned& dl1_misses ) {$/;"	f	class:ldst_unit	typeref:typename:void
print_cache_stats	shader.cc	/^void shader_core_ctx::print_cache_stats( FILE *fp, unsigned& dl1_accesses, unsigned& dl1_misses /;"	f	class:shader_core_ctx	typeref:typename:void
print_cache_stats	shader.cc	/^void simt_core_cluster::print_cache_stats( FILE *fp, unsigned& dl1_accesses, unsigned& dl1_misse/;"	f	class:simt_core_cluster	typeref:typename:void
print_dist	visualizer.cc	/^   void print_dist(void) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
print_dram_stats	l2cache.cc	/^void gpgpu_sim::print_dram_stats(FILE *fout) const$/;"	f	class:gpgpu_sim	typeref:typename:void
print_histo	stat-tool.cc	/^void thread_CFlocality::print_histo(FILE *fout) const$/;"	f	class:thread_CFlocality	typeref:typename:void
print_histo	stat-tool.cc	/^void thread_insn_span::print_histo(FILE *fout) const$/;"	f	class:thread_insn_span	typeref:typename:void
print_ibuffer	shader.cc	/^void shd_warp_t::print_ibuffer( FILE *fout ) const$/;"	f	class:shd_warp_t	typeref:typename:void
print_not_completed	shader.cc	/^void simt_core_cluster::print_not_completed( FILE *fp ) const$/;"	f	class:simt_core_cluster	typeref:typename:void
print_port_stats	gpu-cache.cc	/^void cache_sub_stats::print_port_stats(FILE *fout, const char *cache_name) const$/;"	f	class:cache_sub_stats	typeref:typename:void
print_span	stat-tool.cc	/^void thread_CFlocality::print_span(FILE *fout) const$/;"	f	class:thread_CFlocality	typeref:typename:void
print_span	stat-tool.cc	/^void thread_insn_span::print_span(FILE *fout) const$/;"	f	class:thread_insn_span	typeref:typename:void
print_sparse_histo	stat-tool.cc	/^void thread_insn_span::print_sparse_histo(FILE *fout) const$/;"	f	class:thread_insn_span	typeref:typename:void
print_sparse_histo	stat-tool.cc	/^void thread_insn_span::print_sparse_histo(gzFile fout) const$/;"	f	class:thread_insn_span	typeref:typename:void
print_stage	shader.cc	/^void shader_core_ctx::print_stage(unsigned int stage, FILE *fout ) const$/;"	f	class:shader_core_ctx	typeref:typename:void
print_stat	dram.cc	/^void dram_t::print_stat( FILE* simFile ) $/;"	f	class:dram_t	typeref:typename:void
print_stat	l2cache.h	/^   void print_stat( FILE *fp ) { m_dram->print_stat(fp); }$/;"	f	class:memory_partition_unit	typeref:typename:void
print_stats	gpu-cache.cc	/^void cache_stats::print_stats(FILE *fout, const char *cache_name) const{$/;"	f	class:cache_stats	typeref:typename:void
print_stats	gpu-sim.cc	/^void gpgpu_sim::print_stats()$/;"	f	class:gpgpu_sim	typeref:typename:void
print_to_file	visualizer.cc	/^   void print_to_file(FILE *outfile) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
print_to_gzfile	visualizer.cc	/^   void print_to_gzfile(gzFile outfile) {$/;"	f	class:my_time_vector	typeref:typename:void	file:
print_visualizer	stat-tool.cc	/^void linear_histogram_logger::print_visualizer(FILE *fout)$/;"	f	class:linear_histogram_logger	typeref:typename:void
print_visualizer	stat-tool.cc	/^void linear_histogram_logger::print_visualizer(gzFile fout)$/;"	f	class:linear_histogram_logger	typeref:typename:void
print_visualizer	stat-tool.cc	/^void thread_CFlocality::print_visualizer(FILE *fout)  $/;"	f	class:thread_CFlocality	typeref:typename:void
print_visualizer	stat-tool.cc	/^void thread_CFlocality::print_visualizer(gzFile fout)$/;"	f	class:thread_CFlocality	typeref:typename:void
print_visualizer	stat-tool.h	/^   void print_visualizer(FILE *fout) const {$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
print_visualizer	stat-tool.h	/^   void print_visualizer(gzFile fout) const {$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
prio	dram.h	/^   unsigned int prio;$/;"	m	class:dram_t	typeref:typename:unsigned int
probe	gpu-cache.cc	/^bool mshr_table::probe( new_addr_type block_addr ) const{$/;"	f	class:mshr_table	typeref:typename:bool
probe	gpu-cache.cc	/^enum cache_request_status tag_array::probe( new_addr_type addr, unsigned &idx ) const {$/;"	f	class:tag_array	typeref:enum:cache_request_status
process_banks	shader.h	/^   void process_banks()$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
process_cache_access	shader.cc	/^ldst_unit::process_cache_access( cache_t* cache,$/;"	f	class:ldst_unit	typeref:typename:mem_stage_stall_type
process_memory_access_queue	shader.cc	/^mem_stage_stall_type ldst_unit::process_memory_access_queue( cache_t *cache, warp_inst_t &inst )$/;"	f	class:ldst_unit	typeref:typename:mem_stage_stall_type
process_tag_probe	gpu-cache.cc	/^data_cache::process_tag_probe( bool wr,$/;"	f	class:data_cache	typeref:enum:cache_request_status
push	delayqueue.h	/^   void push(T* data ) $/;"	f	class:fifo_pipeline	typeref:typename:void
push	dram.cc	/^void dram_t::push( class mem_fetch *data ) $/;"	f	class:dram_t	typeref:typename:void
push	gpu-cache.h	/^        unsigned push( const T &e ) $/;"	f	class:tex_cache::fifo	typeref:typename:unsigned
push	l2cache.cc	/^void memory_sub_partition::push( mem_fetch* req, unsigned long long cycle ) $/;"	f	class:memory_sub_partition	typeref:typename:void
push	l2cache.h	/^    virtual void push(mem_fetch *mf) $/;"	f	class:L2interface	typeref:typename:void
push	shader.h	/^    virtual void push(mem_fetch *mf) $/;"	f	class:shader_memory_interface	typeref:typename:void
push	shader.h	/^    virtual void push(mem_fetch *mf)$/;"	f	class:perfect_memory_interface	typeref:typename:void
push_response_fifo	shader.h	/^    void push_response_fifo(class mem_fetch *mf) {$/;"	f	class:simt_core_cluster	typeref:typename:void
push_stack	stack.cc	/^void push_stack(Stack *S, address_type val) {$/;"	f	typeref:typename:void
pwr_core_stat	power_stat.h	/^   power_core_stat_t * pwr_core_stat;$/;"	m	class:power_stat_t	typeref:typename:power_core_stat_t *
pwr_mem_stat	power_stat.h	/^   power_mem_stat_t * pwr_mem_stat;$/;"	m	class:power_stat_t	typeref:typename:power_mem_stat_t *
que_length	dram.cc	/^unsigned dram_t::que_length() const$/;"	f	class:dram_t	typeref:typename:unsigned
queue_limit	dram.cc	/^unsigned int dram_t::queue_limit() const $/;"	f	class:dram_t	typeref:typename:unsigned int
rd_hit_base	gpu-cache.cc	/^data_cache::rd_hit_base( new_addr_type addr,$/;"	f	class:data_cache	typeref:enum:cache_request_status
rd_miss_base	gpu-cache.cc	/^data_cache::rd_miss_base( new_addr_type addr,$/;"	f	class:data_cache	typeref:enum:cache_request_status
read_only_cache	gpu-cache.h	/^    read_only_cache( const char *name, cache_config &config, int core_id, int type_id, mem_fetch/;"	f	class:read_only_cache
read_only_cache	gpu-cache.h	/^class read_only_cache : public baseline_cache {$/;"	c
read_operands	shader.cc	/^void shader_core_ctx::read_operands()$/;"	f	class:shader_core_ctx	typeref:typename:void
ready	shader.cc	/^bool opndcoll_rfu_t::collector_unit_t::ready() const $/;"	f	class:opndcoll_rfu_t::collector_unit_t	typeref:typename:bool
ready_cycle	l2cache.h	/^    	unsigned long long ready_cycle;$/;"	m	struct:memory_sub_partition::rop_delay_t	typeref:typename:unsigned long long
ready_cycle	l2cache.h	/^      unsigned long long ready_cycle;$/;"	m	struct:memory_partition_unit::dram_delay_t	typeref:typename:unsigned long long
record_traffic	traffic_breakdown.cc	/^void traffic_breakdown::record_traffic(class mem_fetch * mf, unsigned int size) $/;"	f	class:traffic_breakdown	typeref:typename:void
reg_options	gpu-sim.cc	/^void gpgpu_sim_config::reg_options(option_parser_t opp)$/;"	f	class:gpgpu_sim_config	typeref:typename:void
reg_options	gpu-sim.cc	/^void memory_config::reg_options(class OptionParser * opp)$/;"	f	class:memory_config	typeref:typename:void
reg_options	gpu-sim.cc	/^void power_config::reg_options(class OptionParser * opp)$/;"	f	class:power_config	typeref:typename:void
reg_options	gpu-sim.cc	/^void shader_core_config::reg_options(class OptionParser * opp)$/;"	f	class:shader_core_config	typeref:typename:void
reg_table	scoreboard.h	/^    std::vector< std::set<unsigned> > reg_table;$/;"	m	class:Scoreboard	typeref:typename:std::vector<std::set<unsigned>>
register_bank	shader.cc	/^int register_bank(int regnum, int wid, unsigned num_banks, unsigned bank_warp_shift)$/;"	f	typeref:typename:int
register_cta_thread_exit	shader.cc	/^void shader_core_ctx::register_cta_thread_exit( unsigned cta_num )$/;"	f	class:shader_core_ctx	typeref:typename:void
reinit	shader.cc	/^void shader_core_ctx::reinit(unsigned start_thread, unsigned end_thread, bool reset_not_complete/;"	f	class:shader_core_ctx	typeref:typename:void
reinit	shader.cc	/^void simt_core_cluster::reinit()$/;"	f	class:simt_core_cluster	typeref:typename:void
reinit_clock_domains	gpu-sim.cc	/^void gpgpu_sim::reinit_clock_domains(void)$/;"	f	class:gpgpu_sim	typeref:typename:void
releaseRegister	scoreboard.cc	/^void Scoreboard::releaseRegister(unsigned wid, unsigned regnum) $/;"	f	class:Scoreboard	typeref:typename:void
releaseRegisters	scoreboard.cc	/^void Scoreboard::releaseRegisters(const class warp_inst_t *inst) $/;"	f	class:Scoreboard	typeref:typename:void
remove_snap_shot_trigger	stat-tool.cc	/^void remove_snap_shot_trigger (snap_shot_trigger* ss_trigger)$/;"	f	typeref:typename:void
remove_spill_log	stat-tool.cc	/^void remove_spill_log (spill_log_interface* spill_log)$/;"	f	typeref:typename:void
replacement_policy_t	gpu-cache.h	/^enum replacement_policy_t {$/;"	g
replenish_port_bandwidth	gpu-cache.cc	/^void baseline_cache::bandwidth_management::replenish_port_bandwidth()$/;"	f	class:baseline_cache::bandwidth_management	typeref:typename:void
req	l2cache.h	/^    	class mem_fetch* req;$/;"	m	struct:memory_sub_partition::rop_delay_t	typeref:class:mem_fetch *
req	l2cache.h	/^      class mem_fetch* req;$/;"	m	struct:memory_partition_unit::dram_delay_t	typeref:class:mem_fetch *
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_constant_c_accesses
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_inst_c_accesses
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_l1d_read_accesses
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_l1d_write_accesses
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_l2_read_accesses
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_l2_write_accesses
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {HIT, MISS, HIT_RESERVED};$/;"	g	function:power_stat_t::get_texture_c_accesses
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_constant_c_misses
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_inst_c_misses
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_l1d_read_misses
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_l1d_write_misses
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_l2_read_misses
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_l2_write_misses
request_status	power_stat.h	/^        enum cache_request_status request_status[] = {MISS};$/;"	g	function:power_stat_t::get_texture_c_misses
res_fails	gpu-cache.h	/^    unsigned res_fails;$/;"	m	struct:cache_sub_stats	typeref:typename:unsigned
reserveRegister	scoreboard.cc	/^void Scoreboard::reserveRegister(unsigned wid, unsigned regnum) $/;"	f	class:Scoreboard	typeref:typename:void
reserveRegisters	scoreboard.cc	/^void Scoreboard::reserveRegisters(const class warp_inst_t* inst) $/;"	f	class:Scoreboard	typeref:typename:void
reset	shader.h	/^      void reset() { m_allocation = NO_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t	typeref:typename:void
reset	shader.h	/^      void reset() { m_valid = false; }$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:void
reset	shader.h	/^    void reset()$/;"	f	class:shd_warp_t	typeref:typename:void
reset	stat-tool.cc	/^void thread_insn_span::reset(unsigned long long  cycle) $/;"	f	class:thread_insn_span	typeref:typename:void
reset	stat-tool.h	/^   void reset(unsigned long long  cycle) {$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
reset_alloction	shader.h	/^      void reset_alloction()$/;"	f	class:opndcoll_rfu_t::arbiter_t	typeref:typename:void
reset_bins	histogram.cc	/^void binned_histogram::reset_bins () {$/;"	f	class:binned_histogram	typeref:typename:void
reset_stack	stack.cc	/^void reset_stack(Stack *S) {$/;"	f	typeref:typename:void
response_buffer_full	shader.cc	/^bool ldst_unit::response_buffer_full() const$/;"	f	class:ldst_unit	typeref:typename:bool
response_queue_full	shader.h	/^    bool response_queue_full() {$/;"	f	class:simt_core_cluster	typeref:typename:bool
restore_info_of_last_inst_at_barrier	shader.h	/^    const warp_inst_t * restore_info_of_last_inst_at_barrier(){ return m_inst_at_barrier;}$/;"	f	class:shd_warp_t	typeref:typename:const warp_inst_t *
retIssuedWarp	wrc.cc	/^unsigned Wrc::retIssuedWarp(){$/;"	f	class:Wrc	typeref:typename:unsigned
retOwnerWarp	gpu-cache.h	/^	bool retOwnerWarp(){$/;"	f	class:l1_cache	typeref:typename:bool
retOwnerWarp	shader.h	/^	 unsigned retOwnerWarp(){$/;"	f	class:shader_core_ctx	typeref:typename:unsigned
retSatFlag	gpu-cache.h	/^  	bool retSatFlag(){$/;"	f	class:l1_cache	typeref:typename:bool
retSatFlag	gpu-cache.h	/^    bool retSatFlag(){ return mem_sat_flag; }$/;"	f	class:read_only_cache	typeref:typename:bool
retSatFlag	shader.h	/^     bool retSatFlag(){$/;"	f	class:ldst_unit	typeref:typename:bool
retSatFlag	wrc.cc	/^bool Wrc::retSatFlag(){$/;"	f	class:Wrc	typeref:typename:bool
retWarpID	wrc.cc	/^unsigned Wrc::retWarpID(){$/;"	f	class:Wrc	typeref:typename:unsigned
return_credit	l2cache.cc	/^void memory_partition_unit::arbitration_metadata::return_credit(int inner_sub_partition_id) $/;"	f	class:memory_partition_unit::arbitration_metadata	typeref:typename:void
return_queue_pop	dram.cc	/^class mem_fetch* dram_t::return_queue_pop() $/;"	c	class:dram_t	file:
return_queue_top	dram.cc	/^class mem_fetch* dram_t::return_queue_top() $/;"	f	class:dram_t	typeref:class:dram_t::return_queue_pop class mem_fetch *
returnq	dram.h	/^   fifo_pipeline<mem_fetch> *returnq;$/;"	m	class:dram_t	typeref:typename:fifo_pipeline<mem_fetch> *
returnq_full	dram.cc	/^bool dram_t::returnq_full() const$/;"	f	class:dram_t	typeref:typename:bool
rob_entry	gpu-cache.h	/^        rob_entry( unsigned i, mem_fetch *mf, new_addr_type a ) $/;"	f	struct:tex_cache::rob_entry
rob_entry	gpu-cache.h	/^        rob_entry() { m_ready = false; m_time=0; m_request=NULL;}$/;"	f	struct:tex_cache::rob_entry
rob_entry	gpu-cache.h	/^    struct rob_entry {$/;"	s	class:tex_cache
rop_delay_t	l2cache.h	/^   struct rop_delay_t$/;"	s	class:memory_sub_partition
rop_latency	gpu-sim.h	/^   unsigned rop_latency;$/;"	m	struct:memory_config	typeref:typename:unsigned
row	addrdec.h	/^   unsigned row;$/;"	m	struct:addrdec_t	typeref:typename:unsigned
row	dram.h	/^   unsigned int row;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
row_access	mem_latency_stat.h	/^   unsigned int **row_access; \/\/row_access[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
row_service_timestamp	dram_sched.h	/^   unsigned *row_service_timestamp; \/\/tracks when scheduler began servicing current row$/;"	m	class:frfcfs_scheduler	typeref:typename:unsigned *
run_test	addrdec.h	/^   bool run_test; $/;"	m	class:linear_to_raw_address_translation	typeref:typename:bool
rw	dram.h	/^   unsigned char rw;    \/\/is the bank reading or writing?$/;"	m	struct:bank_t	typeref:typename:unsigned char
rw	dram.h	/^   unsigned char rw;    \/\/is the request a read or a write?$/;"	m	class:dram_req_t	typeref:typename:unsigned char
rw	dram.h	/^   unsigned char rw; \/\/was last request a read or write? (important for RTW, WTR)$/;"	m	class:dram_t	typeref:typename:unsigned char
rwq	dram.h	/^   fifo_pipeline<dram_req_t> *rwq;$/;"	m	class:dram_t	typeref:typename:fifo_pipeline<dram_req_t> *
s_CTA_count_logger	stat-tool.cc	/^static linear_histogram_logger *s_CTA_count_logger = NULL;$/;"	v	typeref:typename:linear_histogram_logger *	file:
s_cache_access_logger	stat-tool.cc	/^static std::vector<linear_histogram_logger> s_cache_access_logger;$/;"	v	typeref:typename:std::vector<linear_histogram_logger>	file:
s_cache_access_logger_n_types	stat-tool.cc	/^static int s_cache_access_logger_n_types = 0;$/;"	v	typeref:typename:int	file:
s_ids	stat-tool.cc	/^int insn_warp_occ_logger::s_ids = 0;$/;"	m	class:insn_warp_occ_logger	typeref:typename:int
s_ids	stat-tool.cc	/^int linear_histogram_logger::s_ids = 0;$/;"	m	class:linear_histogram_logger	typeref:typename:int
s_ids	stat-tool.h	/^   static int s_ids;$/;"	m	class:insn_warp_occ_logger	typeref:typename:int
s_ids	stat-tool.h	/^   static int s_ids;$/;"	m	class:linear_histogram_logger	typeref:typename:int
s_mem_acc_logger	stat-tool.cc	/^static std::vector<linear_histogram_logger> s_mem_acc_logger;$/;"	v	typeref:typename:std::vector<linear_histogram_logger>	file:
s_mem_acc_logger_n_bank	stat-tool.cc	/^static int s_mem_acc_logger_n_bank = 0;$/;"	v	typeref:typename:int	file:
s_mem_acc_logger_n_dram	stat-tool.cc	/^static int s_mem_acc_logger_n_dram = 0;$/;"	v	typeref:typename:int	file:
s_mem_lat_logger	stat-tool.cc	/^static std::vector<linear_histogram_logger> s_mem_lat_logger;$/;"	v	typeref:typename:std::vector<linear_histogram_logger>	file:
s_mem_lat_logger_nbins	stat-tool.cc	/^static int s_mem_lat_logger_nbins = 48;     \/\/ up to 2^24 = 16M$/;"	v	typeref:typename:int	file:
s_mem_lat_logger_used	stat-tool.cc	/^static bool s_mem_lat_logger_used = false;$/;"	v	typeref:typename:bool	file:
s_warp_occ_logger	stat-tool.cc	/^static std::vector<linear_histogram_logger> s_warp_occ_logger;$/;"	v	typeref:typename:std::vector<linear_histogram_logger>	file:
sample_cache_port_utility	gpu-cache.cc	/^void cache_stats::sample_cache_port_utility(bool data_port_busy, bool fill_port_busy) $/;"	f	class:cache_stats	typeref:typename:void
save_stats	power_stat.cc	/^void power_core_stat_t::save_stats(){$/;"	f	class:power_core_stat_t	typeref:typename:void
save_stats	power_stat.cc	/^void power_mem_stat_t::save_stats(){$/;"	f	class:power_mem_stat_t	typeref:typename:void
save_stats	power_stat.h	/^   void save_stats(){$/;"	f	class:power_stat_t	typeref:typename:void
schedule	dram_sched.cc	/^dram_req_t *frfcfs_scheduler::schedule( unsigned bank, unsigned curr_row )$/;"	f	class:frfcfs_scheduler	typeref:typename:dram_req_t *
scheduler_fifo	dram.cc	/^void dram_t::scheduler_fifo()$/;"	f	class:dram_t	typeref:typename:void
scheduler_frfcfs	dram_sched.cc	/^void dram_t::scheduler_frfcfs()$/;"	f	class:dram_t	typeref:typename:void
scheduler_prioritization_type	shader.h	/^enum scheduler_prioritization_type$/;"	g
scheduler_type	gpu-sim.h	/^   enum dram_ctrl_t scheduler_type;$/;"	m	struct:memory_config	typeref:enum:dram_ctrl_t
scheduler_unit	shader.h	/^	scheduler_unit(shader_core_stats* stats, shader_core_ctx* shader, $/;"	f	class:scheduler_unit
scheduler_unit	shader.h	/^    scheduler_unit(shader_core_stats* stats, shader_core_ctx* shader, $/;"	f	class:scheduler_unit
scheduler_unit	shader.h	/^class scheduler_unit { \/\/this can be copied freely, so can be used in std containers.$/;"	c
schedulers	shader.h	/^    std::vector<scheduler_unit*>  schedulers;$/;"	m	class:shader_core_ctx	typeref:typename:std::vector<scheduler_unit * >
select_kernel	gpu-sim.cc	/^kernel_info_t *gpgpu_sim::select_kernel()$/;"	f	class:gpgpu_sim	typeref:typename:kernel_info_t *
select_stats_status	gpu-cache.cc	/^enum cache_request_status cache_stats::select_stats_status(enum cache_request_status probe, enum/;"	f	class:cache_stats	typeref:enum:cache_request_status
send_read_request	gpu-cache.cc	/^void baseline_cache::send_read_request(new_addr_type addr, new_addr_type block_addr, unsigned ca/;"	f	class:baseline_cache	typeref:typename:void
send_write_request	gpu-cache.cc	/^void data_cache::send_write_request(mem_fetch *mf, cache_event request, unsigned time, std::list/;"	f	class:data_cache	typeref:typename:void
setIssuedWarp	wrc.cc	/^void Wrc::setIssuedWarp(unsigned warp){$/;"	f	class:Wrc	typeref:typename:void
setMemoryBit	warp_status.cc	/^	void WST::setMemoryBit (bool bitValue, unsigned warpId) {$/;"	f	class:WST	typeref:typename:void
setOwnerWarp	gpu-cache.h	/^	void setOwnerWarp(unsigned warp_id){$/;"	f	class:l1_cache	typeref:typename:void
setSatFlag	shader.h	/^     void setSatFlag(bool memFlag){$/;"	f	class:ldst_unit	typeref:typename:void
setSatFlag	wrc.cc	/^void Wrc::setSatFlag(bool satFlag){$/;"	f	class:Wrc	typeref:typename:void
setStallBit	warp_status.cc	/^	void WST::setStallBit (bool stallBit, unsigned warpId) {$/;"	f	class:WST	typeref:typename:void
setWarpID	wrc.cc	/^void Wrc::setWarpID(unsigned ID){$/;"	f	class:Wrc	typeref:typename:void
set_addr	mem_fetch.h	/^   void set_addr(new_addr_type addr) { m_access.set_addr(addr); }$/;"	f	class:mem_fetch	typeref:typename:void
set_cache_config	gpu-sim.cc	/^void gpgpu_sim::set_cache_config(std::string kernel_name)$/;"	f	class:gpgpu_sim	typeref:typename:void
set_cache_config	gpu-sim.cc	/^void gpgpu_sim::set_cache_config(std::string kernel_name,  FuncCache cacheConfig )$/;"	f	class:gpgpu_sim	typeref:typename:void
set_completed	shader.h	/^    void set_completed( unsigned lane ) $/;"	f	class:shd_warp_t	typeref:typename:void
set_cycle	stat-tool.h	/^   void set_cycle(unsigned long long  cycle) { m_cycle = cycle; }$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
set_data_size	mem_fetch.h	/^   void     set_data_size( unsigned size ) { m_data_size=size; }$/;"	f	class:mem_fetch	typeref:typename:void
set_done	l2cache.cc	/^void memory_partition_unit::set_done( mem_fetch *mf )$/;"	f	class:memory_partition_unit	typeref:typename:void
set_done	l2cache.cc	/^void memory_sub_partition::set_done( mem_fetch *mf )$/;"	f	class:memory_sub_partition	typeref:typename:void
set_done_exit	shader.h	/^    void set_done_exit() { m_done_exit=true; }$/;"	f	class:shd_warp_t	typeref:typename:void
set_dram_power_stats	dram.cc	/^void dram_t::set_dram_power_stats(	unsigned &cmd,$/;"	f	class:dram_t	typeref:typename:void
set_dram_power_stats	l2cache.cc	/^void memory_partition_unit::set_dram_power_stats(unsigned &n_cmd,$/;"	f	class:memory_partition_unit	typeref:typename:void
set_icnt_receive_time	mem_fetch.h	/^   void set_icnt_receive_time( unsigned t ) { m_icnt_receive_time=t; }$/;"	f	class:mem_fetch	typeref:typename:void
set_id	stat-tool.h	/^   void set_id(int id) { m_id = id; }$/;"	f	class:insn_warp_occ_logger	typeref:typename:void
set_id	stat-tool.h	/^   void set_id(int id) { m_id = id; }$/;"	f	class:linear_histogram_logger	typeref:typename:void
set_imiss_pending	shader.h	/^    void set_imiss_pending() { m_imiss_pending=true; }$/;"	f	class:shd_warp_t	typeref:typename:void
set_index	gpu-cache.cc	/^unsigned l1d_cache_config::set_index(new_addr_type addr) const{$/;"	f	class:l1d_cache_config	typeref:typename:unsigned
set_index	gpu-cache.cc	/^unsigned l2_cache_config::set_index(new_addr_type addr) const{$/;"	f	class:l2_cache_config	typeref:typename:unsigned
set_index	gpu-cache.h	/^    virtual unsigned set_index( new_addr_type addr ) const$/;"	f	class:cache_config	typeref:typename:unsigned
set_index_function	gpu-cache.h	/^enum set_index_function{$/;"	g
set_kernel	shader.h	/^    void set_kernel( kernel_info_t *k ) $/;"	f	class:shader_core_ctx	typeref:typename:void
set_kernel_done	gpu-sim.cc	/^void gpgpu_sim::set_kernel_done( kernel_info_t *kernel ) $/;"	f	class:gpgpu_sim	typeref:typename:void
set_last_fetch	shader.h	/^    void set_last_fetch( unsigned long long sim_cycle ) { m_last_fetch=sim_cycle; }$/;"	f	class:shd_warp_t	typeref:typename:void
set_max_cta	shader.cc	/^void shader_core_ctx::set_max_cta( const kernel_info_t &kernel ) $/;"	f	class:shader_core_ctx	typeref:typename:void
set_membar	shader.h	/^    void set_membar() { m_membar=true; }$/;"	f	class:shd_warp_t	typeref:typename:void
set_min_length	delayqueue.h	/^   void set_min_length(unsigned int new_min_len) $/;"	f	class:fifo_pipeline	typeref:typename:void
set_next_pc	shader.h	/^    void set_next_pc( address_type pc ) { m_next_pc = pc; }$/;"	f	class:shd_warp_t	typeref:typename:void
set_prop	gpu-sim.cc	/^void gpgpu_sim::set_prop( cudaDeviceProp *prop )$/;"	f	class:gpgpu_sim	typeref:typename:void
set_reply	mem_fetch.h	/^   void set_reply() $/;"	f	class:mem_fetch	typeref:typename:void
set_return_timestamp	mem_fetch.h	/^   void set_return_timestamp( unsigned t ) { m_timestamp2=t; }$/;"	f	class:mem_fetch	typeref:typename:void
set_span	stat-tool.cc	/^void thread_insn_span::set_span( address_type pc ) $/;"	f	class:thread_insn_span	typeref:typename:void
set_spill_interval	stat-tool.cc	/^void set_spill_interval (unsigned long long  interval)$/;"	f	typeref:typename:void
set_status	mem_fetch.cc	/^void mem_fetch::set_status( enum mem_fetch_status status, unsigned long long cycle ) $/;"	f	class:mem_fetch	typeref:typename:void
sfu	shader.cc	/^sfu:: sfu(  register_set* result_port, const shader_core_config *config,shader_core_ctx *core  )$/;"	f	class:sfu
sfu	shader.h	/^class sfu : public pipelined_simd_unit$/;"	c
shader_CTA_count_create	stat-tool.cc	/^void shader_CTA_count_create( int n_shaders, unsigned long long  logging_interval)$/;"	f	typeref:typename:void
shader_CTA_count_log	stat-tool.cc	/^void shader_CTA_count_log( int shader_id, int nCTAadded )$/;"	f	typeref:typename:void
shader_CTA_count_print	stat-tool.cc	/^void shader_CTA_count_print( FILE *fout )$/;"	f	typeref:typename:void
shader_CTA_count_unlog	stat-tool.cc	/^void shader_CTA_count_unlog( int shader_id, int nCTAdone )$/;"	f	typeref:typename:void
shader_CTA_count_visualizer_gzprint	stat-tool.cc	/^void shader_CTA_count_visualizer_gzprint( gzFile fout )$/;"	f	typeref:typename:void
shader_CTA_count_visualizer_print	stat-tool.cc	/^void shader_CTA_count_visualizer_print( FILE *fout )$/;"	f	typeref:typename:void
shader_cache_access_create	stat-tool.cc	/^void shader_cache_access_create( int n_loggers, int n_types, unsigned long long  logging_interva/;"	f	typeref:typename:void
shader_cache_access_log	stat-tool.cc	/^void shader_cache_access_log( int logger_id, int type, int miss)$/;"	f	typeref:typename:void
shader_cache_access_print	stat-tool.cc	/^void shader_cache_access_print( FILE *fout )$/;"	f	typeref:typename:void
shader_cache_access_unlog	stat-tool.cc	/^void shader_cache_access_unlog( int logger_id, int type, int miss)$/;"	f	typeref:typename:void
shader_clock	gpu-sim.cc	/^int gpgpu_sim::shader_clock() const$/;"	f	class:gpgpu_sim	typeref:typename:int
shader_core	shader.h	/^   shader_core_ctx *shader_core() { return m_shader; }$/;"	f	class:opndcoll_rfu_t	typeref:typename:shader_core_ctx *
shader_core_config	shader.h	/^    shader_core_config(){$/;"	f	struct:shader_core_config
shader_core_config	shader.h	/^struct shader_core_config : public core_config$/;"	s
shader_core_ctx	shader.cc	/^shader_core_ctx::shader_core_ctx( class gpgpu_sim *gpu, $/;"	f	class:shader_core_ctx
shader_core_ctx	shader.h	/^class shader_core_ctx : public core_t {$/;"	c
shader_core_mem_fetch_allocator	shader.h	/^    shader_core_mem_fetch_allocator( unsigned core_id, unsigned cluster_id, const memory_config /;"	f	class:shader_core_mem_fetch_allocator
shader_core_mem_fetch_allocator	shader.h	/^class shader_core_mem_fetch_allocator : public mem_fetch_allocator {$/;"	c
shader_core_power_stats_pod	power_stat.h	/^struct shader_core_power_stats_pod {$/;"	s
shader_core_stats	shader.h	/^    shader_core_stats( const shader_core_config *config )$/;"	f	class:shader_core_stats
shader_core_stats	shader.h	/^class shader_core_stats : public shader_core_stats_pod {$/;"	c
shader_core_stats_pod	shader.h	/^struct shader_core_stats_pod {$/;"	s
shader_core_stats_pod_start	shader.h	/^	void* shader_core_stats_pod_start[0]; \/\/ DO NOT MOVE FROM THE TOP - spaceless pointer to the /;"	m	struct:shader_core_stats_pod	typeref:typename:void * [0]
shader_cycle_distro	shader.h	/^    unsigned *shader_cycle_distro;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned *
shader_cycles	shader.h	/^	unsigned long long *shader_cycles;$/;"	m	struct:shader_core_stats_pod	typeref:typename:unsigned long long *
shader_mem_acc_create	stat-tool.cc	/^void shader_mem_acc_create( int n_loggers, int n_dram, int n_bank, unsigned long long  logging_i/;"	f	typeref:typename:void
shader_mem_acc_log	stat-tool.cc	/^void shader_mem_acc_log( int logger_id, int dram_id, int bank, char rw)$/;"	f	typeref:typename:void
shader_mem_acc_print	stat-tool.cc	/^void shader_mem_acc_print( FILE *fout )$/;"	f	typeref:typename:void
shader_mem_acc_snapshot	stat-tool.cc	/^void shader_mem_acc_snapshot( int logger_id, unsigned long long  current_cycle)$/;"	f	typeref:typename:void
shader_mem_lat_create	stat-tool.cc	/^void shader_mem_lat_create( int n_loggers, unsigned long long  logging_interval)$/;"	f	typeref:typename:void
shader_mem_lat_log	stat-tool.cc	/^void shader_mem_lat_log( int logger_id, int latency)$/;"	f	typeref:typename:void
shader_mem_lat_print	stat-tool.cc	/^void shader_mem_lat_print( FILE *fout )$/;"	f	typeref:typename:void
shader_mem_lat_snapshot	stat-tool.cc	/^void shader_mem_lat_snapshot( int logger_id, unsigned long long  current_cycle)$/;"	f	typeref:typename:void
shader_memory_interface	shader.h	/^    shader_memory_interface( shader_core_ctx *core, simt_core_cluster *cluster ) { m_core=core; /;"	f	class:shader_memory_interface
shader_memory_interface	shader.h	/^class shader_memory_interface : public mem_fetch_interface {$/;"	c
shader_print_cache_stats	shader.cc	/^void gpgpu_sim::shader_print_cache_stats( FILE *fout ) const{$/;"	f	class:gpgpu_sim	typeref:typename:void
shader_print_l1_miss_stat	shader.cc	/^void gpgpu_sim::shader_print_l1_miss_stat( FILE *fout ) const$/;"	f	class:gpgpu_sim	typeref:typename:void
shader_print_runtime_stat	shader.cc	/^void gpgpu_sim::shader_print_runtime_stat( FILE *fout ) $/;"	f	class:gpgpu_sim	typeref:typename:void
shader_print_scheduler_stat	shader.cc	/^void gpgpu_sim::shader_print_scheduler_stat( FILE* fout, bool print_dynamic_info ) const$/;"	f	class:gpgpu_sim	typeref:typename:void
shader_warp_occ_create	stat-tool.cc	/^void shader_warp_occ_create( int n_loggers, int simd_width, unsigned long long  logging_interval/;"	f	typeref:typename:void
shader_warp_occ_log	stat-tool.cc	/^void shader_warp_occ_log( int logger_id, int warp_occ)$/;"	f	typeref:typename:void
shader_warp_occ_print	stat-tool.cc	/^void shader_warp_occ_print( FILE *fout )$/;"	f	typeref:typename:void
shader_warp_occ_snapshot	stat-tool.cc	/^void shader_warp_occ_snapshot( int logger_id, unsigned long long  current_cycle)$/;"	f	typeref:typename:void
shared_cycle	shader.cc	/^bool ldst_unit::shared_cycle( warp_inst_t &inst, mem_stage_stall_type &rc_fail, mem_stage_access/;"	f	class:ldst_unit	typeref:typename:bool
shared_mem_size	gpu-sim.cc	/^int gpgpu_sim::shared_mem_size() const$/;"	f	class:gpgpu_sim	typeref:typename:int
shd_warp_t	shader.h	/^    shd_warp_t( class shader_core_ctx *shader, unsigned warp_size) $/;"	f	class:shd_warp_t
shd_warp_t	shader.h	/^class shd_warp_t {$/;"	c
shmem_read_access	power_stat.h	/^    unsigned *shmem_read_access[NUM_STAT_IDX];   \/\/ Shared memory access$/;"	m	struct:mem_power_stats_pod	typeref:typename:unsigned * []
sid_to_cid	shader.h	/^    unsigned sid_to_cid( unsigned sid )     const { return sid % n_simt_cores_per_cluster; }$/;"	f	struct:shader_core_config	typeref:typename:unsigned
sid_to_cluster	shader.h	/^    unsigned sid_to_cluster( unsigned sid ) const { return sid \/ n_simt_cores_per_cluster; }$/;"	f	struct:shader_core_config	typeref:typename:unsigned
simd_function_unit	shader.cc	/^simd_function_unit::simd_function_unit( const shader_core_config *config )$/;"	f	class:simd_function_unit
simd_function_unit	shader.h	/^class simd_function_unit {$/;"	c
simd_model	gpu-sim.cc	/^enum divergence_support_t gpgpu_sim::simd_model() const$/;"	f	class:gpgpu_sim	typeref:enum:divergence_support_t
simt_core_cluster	shader.cc	/^simt_core_cluster::simt_core_cluster( class gpgpu_sim *gpu, $/;"	f	class:simt_core_cluster
simt_core_cluster	shader.h	/^class simt_core_cluster {$/;"	c
simt_core_sim_order	shader.h	/^    int simt_core_sim_order; $/;"	m	struct:shader_core_config	typeref:typename:int
size	gpu-cache.h	/^        unsigned size() const { return m_num;}$/;"	f	class:tex_cache::fifo	typeref:typename:unsigned
size	gpu-cache.h	/^    unsigned size() const { return m_config.get_num_lines();}$/;"	f	class:tag_array	typeref:typename:unsigned
size	mem_fetch.h	/^   unsigned size() const { return m_data_size+m_ctrl_size; }$/;"	f	class:mem_fetch	typeref:typename:unsigned
size_stack	stack.cc	/^int size_stack(Stack *S) {$/;"	f	typeref:typename:int
sm_next_mf_request_uid	mem_fetch.cc	/^unsigned mem_fetch::sm_next_mf_request_uid=1;$/;"	m	class:mem_fetch	typeref:typename:unsigned
sm_next_mf_request_uid	mem_fetch.h	/^   static unsigned sm_next_mf_request_uid;$/;"	m	class:mem_fetch	typeref:typename:unsigned
snap_shot	stat-tool.cc	/^void linear_histogram_logger::snap_shot(unsigned long long  current_cycle) {$/;"	f	class:linear_histogram_logger	typeref:typename:void
snap_shot	stat-tool.cc	/^void thread_CFlocality::snap_shot(unsigned long long  current_cycle) $/;"	f	class:thread_CFlocality	typeref:typename:void
snap_shot_trigger	stat-tool.h	/^   snap_shot_trigger(unsigned long long  interval) : m_snap_shot_interval(interval) {}$/;"	f	class:snap_shot_trigger
snap_shot_trigger	stat-tool.h	/^class snap_shot_trigger {$/;"	c
sort_warps_by_oldest_dynamic_id	shader.cc	/^bool scheduler_unit::sort_warps_by_oldest_dynamic_id(shd_warp_t* lhs, shd_warp_t* rhs)$/;"	f	class:scheduler_unit	typeref:typename:bool
sp_unit	shader.cc	/^sp_unit::sp_unit( register_set* result_port, const shader_core_config *config,shader_core_ctx *c/;"	f	class:sp_unit
sp_unit	shader.h	/^class sp_unit : public pipelined_simd_unit$/;"	c
span_count_map	stat-tool.h	/^   typedef tr1_hash_map<address_type, int> span_count_map;$/;"	t	class:thread_insn_span	typeref:typename:tr1_hash_map<address_type,int>
spill	stat-tool.cc	/^void linear_histogram_logger::spill(FILE *fout, bool final) $/;"	f	class:linear_histogram_logger	typeref:typename:void
spill	stat-tool.cc	/^void thread_CFlocality::spill(FILE *fout, bool final) $/;"	f	class:thread_CFlocality	typeref:typename:void
spill_interval	stat-tool.cc	/^static unsigned long long  spill_interval = 0;$/;"	v	typeref:typename:unsigned long long	file:
spill_log_interface	stat-tool.h	/^   spill_log_interface() {}$/;"	f	class:spill_log_interface
spill_log_interface	stat-tool.h	/^class spill_log_interface {$/;"	c
spill_log_to_file	stat-tool.cc	/^void spill_log_to_file (FILE *fout, int final, unsigned long long  current_cycle)$/;"	f	typeref:typename:void
st_time_dist	visualizer.cc	/^   std::vector<double>  st_time_dist;$/;"	m	class:my_time_vector	typeref:typename:std::vector<double>	file:
st_time_map	visualizer.cc	/^   std::map< unsigned int, std::vector<long int> > st_time_map;$/;"	m	class:my_time_vector	typeref:typename:std::map<unsigned int,std::vector<long int>>	file:
st_vector_size	visualizer.cc	/^   unsigned st_vector_size;$/;"	m	class:my_time_vector	typeref:typename:unsigned	file:
stallBit	warp_status.h	/^			unsigned char memBit:1,stallBit:1;$/;"	m	struct:WST::table_entry::__anon2e250678010a::__anon2e2506780208	typeref:typename:unsigned char:1
stallable	shader.h	/^    virtual bool stallable() const { return false; }$/;"	f	class:pipelined_simd_unit	typeref:typename:bool
stallable	shader.h	/^    virtual bool stallable() const { return true; }$/;"	f	class:ldst_unit	typeref:typename:bool
stat_idx	power_stat.h	/^}stat_idx;$/;"	t	typeref:enum:_stat_idx
state	dram.h	/^   unsigned char state; \/\/is the bank active or idle?$/;"	m	struct:bank_t	typeref:typename:unsigned char
statusTable	warp_status.h	/^	std::vector<table_entry> statusTable;	$/;"	m	class:WST	typeref:typename:std::vector<table_entry>
step	shader.h	/^   void step()$/;"	f	class:opndcoll_rfu_t	typeref:typename:void
store_ack	shader.cc	/^void shader_core_ctx::store_ack( class mem_fetch *mf )$/;"	f	class:shader_core_ctx	typeref:typename:void
store_info_of_last_inst_at_barrier	shader.h	/^    void store_info_of_last_inst_at_barrier(const warp_inst_t *pI){ m_inst_at_barrier = pI;}$/;"	f	class:shd_warp_t	typeref:typename:void
stores_done	shader.h	/^    bool stores_done() const { return m_stores_outstanding == 0; }$/;"	f	class:shd_warp_t	typeref:typename:bool
sub_partition	addrdec.h	/^   unsigned sub_partition; $/;"	m	struct:addrdec_t	typeref:typename:unsigned
sub_partition_id_mask	addrdec.h	/^   new_addr_type sub_partition_id_mask; $/;"	m	class:linear_to_raw_address_translation	typeref:typename:new_addr_type
subsample	stat-tool.h	/^   void subsample(int pos) {$/;"	f	class:linear_histogram_snapshot	typeref:typename:void
sweep_test	addrdec.cc	/^void linear_to_raw_address_translation::sweep_test() const$/;"	f	class:linear_to_raw_address_translation	typeref:typename:void
swl_scheduler	shader.cc	/^swl_scheduler::swl_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:swl_scheduler
swl_scheduler	shader.h	/^class swl_scheduler : public scheduler_unit {$/;"	c
tCCD	gpu-sim.h	/^   unsigned tCCD;   \/\/column to column delay$/;"	m	struct:memory_config	typeref:typename:unsigned
tCCDL	gpu-sim.h	/^   unsigned tCCDL;  \/\/column to column delay when bank groups are enabled$/;"	m	struct:memory_config	typeref:typename:unsigned
tCDLR	gpu-sim.h	/^   unsigned tCDLR;  \/\/Last data-in to Read command (switching from write to read)$/;"	m	struct:memory_config	typeref:typename:unsigned
tRAS	gpu-sim.h	/^   unsigned tRAS;   \/\/time needed to activate row$/;"	m	struct:memory_config	typeref:typename:unsigned
tRC	gpu-sim.h	/^   unsigned tRC;    \/\/row cycle time ie. precharge current, then activate different row$/;"	m	struct:memory_config	typeref:typename:unsigned
tRCD	gpu-sim.h	/^   unsigned tRCD;   \/\/row to column delay - time required to activate a row before a read$/;"	m	struct:memory_config	typeref:typename:unsigned
tRCDWR	gpu-sim.h	/^   unsigned tRCDWR; \/\/row to column delay for a write command$/;"	m	struct:memory_config	typeref:typename:unsigned
tRP	gpu-sim.h	/^   unsigned tRP;    \/\/row precharge ie. deactivate row$/;"	m	struct:memory_config	typeref:typename:unsigned
tRRD	gpu-sim.h	/^   unsigned tRRD;   \/\/minimal time required between activation of rows in different banks$/;"	m	struct:memory_config	typeref:typename:unsigned
tRTPL	gpu-sim.h	/^   unsigned tRTPL;  \/\/read to precharge delay when bank groups are enabled for GDDR5 this is i/;"	m	struct:memory_config	typeref:typename:unsigned
tRTW	gpu-sim.h	/^   unsigned tRTW;   \/\/time to switch from read to write$/;"	m	struct:memory_config	typeref:typename:unsigned
tWR	gpu-sim.h	/^   unsigned tWR;    \/\/Last data-in to Row precharge $/;"	m	struct:memory_config	typeref:typename:unsigned
tWTP	gpu-sim.h	/^   unsigned tWTP;   \/\/time to switch from write to precharge in the same bank$/;"	m	struct:memory_config	typeref:typename:unsigned
tWTR	gpu-sim.h	/^   unsigned tWTR;   \/\/time to switch from write to read $/;"	m	struct:memory_config	typeref:typename:unsigned
table	gpu-cache.h	/^    typedef tr1_hash_map<new_addr_type,mshr_entry> table;$/;"	t	class:mshr_table	typeref:typename:tr1_hash_map<new_addr_type,mshr_entry>
table_entry	warp_status.h	/^		table_entry(){$/;"	f	struct:WST::table_entry
table_entry	warp_status.h	/^	struct table_entry{$/;"	s	class:WST
tag	gpu-cache.h	/^    new_addr_type tag( new_addr_type addr ) const$/;"	f	class:cache_config	typeref:typename:new_addr_type
tag_array	gpu-cache.cc	/^tag_array::tag_array( cache_config &config,$/;"	f	class:tag_array
tag_array	gpu-cache.h	/^class tag_array {$/;"	c
test_res_bus	shader.cc	/^int shader_core_ctx::test_res_bus(int latency){$/;"	f	class:shader_core_ctx	typeref:typename:int
tex_cache	gpu-cache.h	/^    tex_cache( const char *name, cache_config &config, int core_id, int type_id, mem_fetch_inter/;"	f	class:tex_cache
tex_cache	gpu-cache.h	/^class tex_cache : public cache_t {$/;"	c
texture_cycle	shader.cc	/^bool ldst_unit::texture_cycle( warp_inst_t &inst, mem_stage_stall_type &rc_fail, mem_stage_acces/;"	f	class:ldst_unit	typeref:typename:bool
thread_CFlocality	stat-tool.cc	/^thread_CFlocality::thread_CFlocality(std::string name, $/;"	f	class:thread_CFlocality
thread_CFlocality	stat-tool.h	/^class thread_CFlocality : public snap_shot_trigger, public spill_log_interface {$/;"	c
thread_CFlogger	stat-tool.cc	/^static thread_CFlocality** thread_CFlogger = NULL;$/;"	v	typeref:typename:thread_CFlocality **	file:
thread_ctx_t	shader.h	/^class thread_ctx_t {$/;"	c
thread_insn_span	stat-tool.cc	/^thread_insn_span::thread_insn_span(const thread_insn_span& other)$/;"	f	class:thread_insn_span
thread_insn_span	stat-tool.cc	/^thread_insn_span::thread_insn_span(unsigned long long  cycle)$/;"	f	class:thread_insn_span
thread_insn_span	stat-tool.h	/^class thread_insn_span {$/;"	c
threads_per_core	gpu-sim.cc	/^unsigned gpgpu_sim::threads_per_core() const $/;"	f	class:gpgpu_sim	typeref:typename:unsigned
time_vector_create	visualizer.cc	/^void time_vector_create(int size) {$/;"	f	typeref:typename:void
time_vector_print	visualizer.cc	/^void time_vector_print(void) {$/;"	f	typeref:typename:void
time_vector_print_interval2gzfile	visualizer.cc	/^void time_vector_print_interval2gzfile(gzFile outfile) {$/;"	f	typeref:typename:void
time_vector_update	visualizer.cc	/^void time_vector_update(unsigned int uid,int slot ,long int cycle,int type) {$/;"	f	typeref:typename:void
timestamp	dram.h	/^   unsigned int timestamp;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
tlb_request_status	stats.h	/^enum tlb_request_status {$/;"	g
top	delayqueue.h	/^   T* top() const$/;"	f	class:fifo_pipeline	typeref:typename:T *
top	l2cache.cc	/^mem_fetch* memory_sub_partition::top() $/;"	f	class:memory_sub_partition	typeref:typename:mem_fetch *
top	stack.h	/^   int top;$/;"	m	struct:__anonadd2b0f10108	typeref:typename:int
top_stack	stack.cc	/^address_type top_stack(Stack *S) {$/;"	f	typeref:typename:address_type
total_n_access	mem_latency_stat.h	/^   unsigned total_n_access;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
total_n_reads	mem_latency_stat.h	/^   unsigned total_n_reads;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
total_n_writes	mem_latency_stat.h	/^   unsigned total_n_writes;$/;"	m	class:memory_stats_t	typeref:typename:unsigned
totalbankaccesses	mem_latency_stat.h	/^   unsigned int **totalbankaccesses; \/\/bankaccesses[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
totalbankreads	mem_latency_stat.h	/^   unsigned int **totalbankreads; \/\/bankreads[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
totalbankwrites	mem_latency_stat.h	/^   unsigned int **totalbankwrites; \/\/bankwrites[dram chip id][bank id]$/;"	m	class:memory_stats_t	typeref:typename:unsigned int **
traffic_breakdown	traffic_breakdown.h	/^   traffic_breakdown(const std::string &network_name) $/;"	f	class:traffic_breakdown
traffic_breakdown	traffic_breakdown.h	/^class traffic_breakdown$/;"	c
traffic_class_t	traffic_breakdown.h	/^   typedef std::map < mf_packet_size, unsigned int > traffic_class_t; $/;"	t	class:traffic_breakdown	typeref:typename:std::map<mf_packet_size,unsigned int>
traffic_stat_t	traffic_breakdown.h	/^   typedef std::map < mf_packet_type, traffic_class_t > traffic_stat_t; $/;"	t	class:traffic_breakdown	typeref:typename:std::map<mf_packet_type,traffic_class_t>
translate_local_memaddr	shader.cc	/^unsigned shader_core_ctx::translate_local_memaddr( address_type localaddr, unsigned tid, unsigne/;"	f	class:shader_core_ctx	typeref:typename:unsigned
try_snap_shot	stat-tool.cc	/^void try_snap_shot (unsigned long long  current_cycle)$/;"	f	typeref:typename:void
try_snap_shot	stat-tool.h	/^   void try_snap_shot(unsigned long long  current_cycle) {$/;"	f	class:snap_shot_trigger	typeref:typename:void
two_level_active_scheduler	shader.h	/^	two_level_active_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:two_level_active_scheduler
two_level_active_scheduler	shader.h	/^class two_level_active_scheduler : public scheduler_unit {$/;"	c
txbytes	dram.h	/^   unsigned int txbytes;$/;"	m	class:dram_req_t	typeref:typename:unsigned int
uint_vector_t	shader.h	/^   typedef std::vector<unsigned int> uint_vector_t;$/;"	t	class:opndcoll_rfu_t	typeref:typename:std::vector<unsigned int>
unlog	stat-tool.h	/^   void unlog(int pos) { m_curr_lin_hist.subsample(pos); }$/;"	f	class:linear_histogram_logger	typeref:typename:void
updateBits	shader.cc	/^void scheduler_unit::updateBits( std::vector< T > compute_list, std::vector< T > memory_list )$/;"	f	class:scheduler_unit	typeref:typename:void
update_cache_parameters	gpu-cache.cc	/^void tag_array::update_cache_parameters(cache_config &config)$/;"	f	class:tag_array	typeref:typename:void
update_cache_parameters	gpu-cache.h	/^	void update_cache_parameters(cache_config &config)$/;"	f	class:baseline_cache	typeref:typename:void
update_ld	visualizer.cc	/^   void update_ld(unsigned int uid,unsigned int slot, long int time) { $/;"	f	class:my_time_vector	typeref:typename:void	file:
update_st	visualizer.cc	/^   void update_st(unsigned int uid,unsigned int slot, long int time) { $/;"	f	class:my_time_vector	typeref:typename:void	file:
update_stats	gpu-sim.cc	/^void gpgpu_sim::update_stats() {$/;"	f	class:gpgpu_sim	typeref:typename:void
update_thread_pc	stat-tool.cc	/^void thread_CFlocality::update_thread_pc( int thread_id, address_type pc ) $/;"	f	class:thread_CFlocality	typeref:typename:void
use_data_port	gpu-cache.cc	/^void baseline_cache::bandwidth_management::use_data_port(mem_fetch *mf, enum cache_request_statu/;"	f	class:baseline_cache::bandwidth_management	typeref:typename:void
use_fill_port	gpu-cache.cc	/^void baseline_cache::bandwidth_management::use_fill_port(mem_fetch *mf)$/;"	f	class:baseline_cache::bandwidth_management	typeref:typename:void
v	stack.h	/^   address_type *v;$/;"	m	struct:__anonadd2b0f10108	typeref:typename:address_type *
valid	shader.h	/^      bool valid() const { return m_valid; }$/;"	f	class:opndcoll_rfu_t::op_t	typeref:typename:bool
visualize	dram.cc	/^void dram_t::visualize() const$/;"	f	class:dram_t	typeref:typename:void
visualize	l2cache.h	/^   void visualize() const { m_dram->visualize(); }$/;"	f	class:memory_partition_unit	typeref:typename:void
visualizer_print	dram.cc	/^void dram_t::visualizer_print( gzFile visualizer_file )$/;"	f	class:dram_t	typeref:typename:void
visualizer_print	l2cache.cc	/^void memory_partition_unit::visualizer_print( gzFile visualizer_file ) const $/;"	f	class:memory_partition_unit	typeref:typename:void
visualizer_print	l2cache.cc	/^void memory_stats_t::visualizer_print( gzFile visualizer_file )$/;"	f	class:memory_stats_t	typeref:typename:void
visualizer_print	l2cache.cc	/^void memory_sub_partition::visualizer_print( gzFile visualizer_file )$/;"	f	class:memory_sub_partition	typeref:typename:void
visualizer_print	power_stat.cc	/^void power_core_stat_t::visualizer_print( gzFile visualizer_file )$/;"	f	class:power_core_stat_t	typeref:typename:void
visualizer_print	power_stat.cc	/^void power_mem_stat_t::visualizer_print( gzFile power_visualizer_file ){$/;"	f	class:power_mem_stat_t	typeref:typename:void
visualizer_print	power_stat.cc	/^void power_stat_t::visualizer_print( gzFile visualizer_file )$/;"	f	class:power_stat_t	typeref:typename:void
visualizer_print	shader.cc	/^void shader_core_stats::visualizer_print( gzFile visualizer_file )$/;"	f	class:shader_core_stats	typeref:typename:void
visualizer_printstat	visualizer.cc	/^void gpgpu_sim::visualizer_printstat()$/;"	f	class:gpgpu_sim	typeref:typename:void
waiting	shader.cc	/^bool shd_warp_t::waiting() $/;"	f	class:shd_warp_t	typeref:typename:bool
waiting_for_fill	gpu-cache.cc	/^bool baseline_cache::waiting_for_fill( mem_fetch *mf ){$/;"	f	class:baseline_cache	typeref:typename:bool
warp	shader.cc	/^shd_warp_t& scheduler_unit::warp(int i){$/;"	f	class:scheduler_unit	typeref:typename:shd_warp_t &
warp_exit	shader.cc	/^void barrier_set_t::warp_exit( unsigned warp_id )$/;"	f	class:barrier_set_t	typeref:typename:void
warp_exit	shader.cc	/^void shader_core_ctx::warp_exit( unsigned warp_id )$/;"	f	class:shader_core_ctx	typeref:typename:void
warp_inst_complete	shader.cc	/^void shader_core_ctx::warp_inst_complete(const warp_inst_t &inst)$/;"	f	class:shader_core_ctx	typeref:typename:void
warp_reaches_barrier	shader.cc	/^void barrier_set_t::warp_reaches_barrier(unsigned cta_id,unsigned warp_id,warp_inst_t* inst)$/;"	f	class:barrier_set_t	typeref:typename:void
warp_set_t	shader.h	/^typedef std::bitset<WARP_PER_CTA_MAX> warp_set_t;$/;"	t	typeref:typename:std::bitset<WARP_PER_CTA_MAX>
warp_waiting_at_barrier	shader.cc	/^bool barrier_set_t::warp_waiting_at_barrier( unsigned warp_id ) const$/;"	f	class:barrier_set_t	typeref:typename:bool
warp_waiting_at_barrier	shader.cc	/^bool shader_core_ctx::warp_waiting_at_barrier( unsigned warp_id ) const$/;"	f	class:shader_core_ctx	typeref:typename:bool
warp_waiting_at_mem_barrier	shader.cc	/^bool shader_core_ctx::warp_waiting_at_mem_barrier( unsigned warp_id ) $/;"	f	class:shader_core_ctx	typeref:typename:bool
was_read_sent	gpu-cache.cc	/^bool was_read_sent( const std::list<cache_event> &events )$/;"	f	typeref:typename:bool
was_write_sent	gpu-cache.cc	/^bool was_write_sent( const std::list<cache_event> &events )$/;"	f	typeref:typename:bool
was_writeback_sent	gpu-cache.cc	/^bool was_writeback_sent( const std::list<cache_event> &events )$/;"	f	typeref:typename:bool
wb_addr	l2cache.h	/^   unsigned long long int wb_addr;$/;"	m	class:memory_sub_partition	typeref:typename:unsigned long long int
wid_from_hw_tid	shader.h	/^inline unsigned wid_from_hw_tid(unsigned tid, unsigned warp_size){return tid\/warp_size;};$/;"	f	typeref:typename:unsigned
windowed_miss_rate	gpu-cache.cc	/^float tag_array::windowed_miss_rate( ) const$/;"	f	class:tag_array	typeref:typename:float
wr_hit_global_we_local_wb	gpu-cache.cc	/^enum cache_request_status data_cache::wr_hit_global_we_local_wb(new_addr_type addr, unsigned cac/;"	f	class:data_cache	typeref:enum:cache_request_status
wr_hit_wb	gpu-cache.cc	/^cache_request_status data_cache::wr_hit_wb(new_addr_type addr, unsigned cache_index, mem_fetch */;"	f	class:data_cache	typeref:typename:cache_request_status
wr_hit_we	gpu-cache.cc	/^cache_request_status data_cache::wr_hit_we(new_addr_type addr, unsigned cache_index, mem_fetch */;"	f	class:data_cache	typeref:typename:cache_request_status
wr_hit_wt	gpu-cache.cc	/^cache_request_status data_cache::wr_hit_wt(new_addr_type addr, unsigned cache_index, mem_fetch */;"	f	class:data_cache	typeref:typename:cache_request_status
wr_miss_no_wa	gpu-cache.cc	/^data_cache::wr_miss_no_wa( new_addr_type addr,$/;"	f	class:data_cache	typeref:enum:cache_request_status
wr_miss_wa	gpu-cache.cc	/^data_cache::wr_miss_wa( new_addr_type addr,$/;"	f	class:data_cache	typeref:enum:cache_request_status
write_allocate_policy_t	gpu-cache.h	/^enum write_allocate_policy_t {$/;"	g
write_policy_t	gpu-cache.h	/^enum write_policy_t {$/;"	g
writeback	shader.cc	/^bool opndcoll_rfu_t::writeback( const warp_inst_t &inst )$/;"	f	class:opndcoll_rfu_t	typeref:typename:bool
writeback	shader.cc	/^void ldst_unit::writeback()$/;"	f	class:ldst_unit	typeref:typename:void
writeback	shader.cc	/^void shader_core_ctx::writeback()$/;"	f	class:shader_core_ctx	typeref:typename:void
wrp_size	gpu-sim.cc	/^int gpgpu_sim::wrp_size() const$/;"	f	class:gpgpu_sim	typeref:typename:int
wst_begin	warp_status.h	/^    	iterator wst_begin() { return statusTable.begin();}$/;"	f	class:WST	typeref:typename:iterator
wst_end	warp_status.h	/^    	iterator wst_end() { return statusTable.end();}$/;"	f	class:WST	typeref:typename:iterator
~L2interface	l2cache.h	/^    virtual ~L2interface() {}$/;"	f	class:L2interface
~baseline_cache	gpu-cache.h	/^    virtual ~baseline_cache()$/;"	f	class:baseline_cache
~binned_histogram	histogram.cc	/^binned_histogram::~binned_histogram () {$/;"	f	class:binned_histogram
~cache_t	gpu-cache.h	/^    virtual ~cache_t() {}$/;"	f	class:cache_t
~data_cache	gpu-cache.h	/^    virtual ~data_cache() {}$/;"	f	class:data_cache
~fifo_pipeline	delayqueue.h	/^   ~fifo_pipeline() $/;"	f	class:fifo_pipeline
~gto_scheduler	shader.h	/^	virtual ~gto_scheduler () {}$/;"	f	class:gto_scheduler
~insn_warp_occ_logger	stat-tool.h	/^   ~insn_warp_occ_logger() {}$/;"	f	class:insn_warp_occ_logger
~l1_cache	gpu-cache.h	/^    virtual ~l1_cache(){}$/;"	f	class:l1_cache
~l2_cache	gpu-cache.h	/^    virtual ~l2_cache() {}$/;"	f	class:l2_cache
~linear_histogram	histogram.h	/^   ~linear_histogram() {}$/;"	f	class:linear_histogram
~linear_histogram_logger	stat-tool.cc	/^linear_histogram_logger::~linear_histogram_logger() $/;"	f	class:linear_histogram_logger
~linear_histogram_snapshot	stat-tool.h	/^   ~linear_histogram_snapshot() { }$/;"	f	class:linear_histogram_snapshot
~lrr_scheduler	shader.h	/^	virtual ~lrr_scheduler () {}$/;"	f	class:lrr_scheduler
~mascar_scheduler	shader.h	/^	virtual ~mascar_scheduler () {}$/;"	f	class:mascar_scheduler
~mem_fetch	mem_fetch.cc	/^mem_fetch::~mem_fetch()$/;"	f	class:mem_fetch
~memory_partition_unit	l2cache.cc	/^memory_partition_unit::~memory_partition_unit() $/;"	f	class:memory_partition_unit
~memory_sub_partition	l2cache.cc	/^memory_sub_partition::~memory_sub_partition()$/;"	f	class:memory_sub_partition
~pow2_histogram	histogram.h	/^   ~pow2_histogram() {}$/;"	f	class:pow2_histogram
~read_only_cache	gpu-cache.h	/^    virtual ~read_only_cache(){}$/;"	f	class:read_only_cache
~scheduler_unit	shader.h	/^    virtual ~scheduler_unit(){}$/;"	f	class:scheduler_unit
~shader_core_stats	shader.h	/^    ~shader_core_stats()$/;"	f	class:shader_core_stats
~simd_function_unit	shader.h	/^    ~simd_function_unit() { delete m_dispatch_reg; }$/;"	f	class:simd_function_unit
~snap_shot_trigger	stat-tool.h	/^   virtual ~snap_shot_trigger() {}$/;"	f	class:snap_shot_trigger
~spill_log_interface	stat-tool.h	/^   virtual ~spill_log_interface() {}$/;"	f	class:spill_log_interface
~swl_scheduler	shader.h	/^	virtual ~swl_scheduler () {}$/;"	f	class:swl_scheduler
~tag_array	gpu-cache.cc	/^tag_array::~tag_array() $/;"	f	class:tag_array
~thread_CFlocality	stat-tool.cc	/^thread_CFlocality::~thread_CFlocality() $/;"	f	class:thread_CFlocality
~thread_insn_span	stat-tool.cc	/^thread_insn_span::~thread_insn_span() { }$/;"	f	class:thread_insn_span
~two_level_active_scheduler	shader.h	/^	virtual ~two_level_active_scheduler () {}$/;"	f	class:two_level_active_scheduler
